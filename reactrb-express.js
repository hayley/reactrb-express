(function(undefined) {
  if (typeof(this.Opal) !== 'undefined') {
    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');
    return this.Opal;
  }

  var nil;

  // The actual class for BasicObject
  var BasicObject;

  // The actual Object class.
  // The leading underscore is to avoid confusion with window.Object()
  var _Object;

  // The actual Module class
  var Module;

  // The actual Class class
  var Class;

  // Constructor for instances of BasicObject
  function BasicObject_alloc(){}

  // Constructor for instances of Object
  function Object_alloc(){}

  // Constructor for instances of Class
  function Class_alloc(){}

  // Constructor for instances of Module
  function Module_alloc(){}

  // Constructor for instances of NilClass (nil)
  function NilClass_alloc(){}

  // The Opal object that is exposed globally
  var Opal = this.Opal = {};

  // All bridged classes - keep track to donate methods from Object
  var bridges = {};

  // TopScope is used for inheriting constants from the top scope
  var TopScope = function(){};

  // Opal just acts as the top scope
  TopScope.prototype = Opal;

  // To inherit scopes
  Opal.constructor = TopScope;

  // List top scope constants
  Opal.constants = [];

  // This is a useful reference to global object inside ruby files
  Opal.global = this;

  // Minify common function calls
  var $hasOwn = Opal.hasOwnProperty;
  var $slice  = Opal.slice = Array.prototype.slice;

  // Nil object id is always 4
  var nil_id = 4;

  // Generates even sequential numbers greater than 4
  // (nil_id) to serve as unique ids for ruby objects
  var unique_id = nil_id;

  // Return next unique id
  Opal.uid = function() {
    unique_id += 2;
    return unique_id;
  };

  // Table holds all class variables
  Opal.cvars = {};

  // Globals table
  Opal.gvars = {};

  // Exit function, this should be replaced by platform specific implementation
  // (See nodejs and phantom for examples)
  Opal.exit = function(status) { if (Opal.gvars.DEBUG) console.log('Exited with status '+status); };

  // keeps track of exceptions for $!
  Opal.exceptions = [];

  // Get a constant on the given scope. Every class and module in Opal has a
  // scope used to store, and inherit, constants. For example, the top level
  // `Object` in ruby has a scope accessible as `Opal.Object.$$scope`.
  //
  // To get the `Array` class using this scope, you could use:
  //
  //     Opal.Object.$$scope.get("Array")
  //
  // If a constant with the given name cannot be found, then a dispatch to the
  // class/module's `#const_method` is called, which by default will raise an
  // error.
  //
  // @param [String] name the name of the constant to lookup
  // @return [RubyObject]
  //
  Opal.get = function(name) {
    var constant = this[name];

    if (constant == null) {
      return this.base.$const_get(name);
    }

    return constant;
  };

  // Create a new constants scope for the given class with the given
  // base. Constants are looked up through their parents, so the base
  // scope will be the outer scope of the new klass.
  //
  // @param base_scope [$$scope] the scope in which the new scope should be created
  // @param klass      [Class]
  // @param id         [String, null] the name of the newly created scope
  //
  Opal.create_scope = function(base_scope, klass, id) {
    var const_alloc = function() {};
    var const_scope = const_alloc.prototype = new base_scope.constructor();

    klass.$$scope       = const_scope;
    klass.$$base_module = base_scope.base;

    const_scope.base        = klass;
    const_scope.constructor = const_alloc;
    const_scope.constants   = [];

    if (id) {
      Opal.cdecl(base_scope, id, klass);
      const_alloc.displayName = id+"_scope_alloc";
    }
  }

  // A `class Foo; end` expression in ruby is compiled to call this runtime
  // method which either returns an existing class of the given name, or creates
  // a new class in the given `base` scope.
  //
  // If a constant with the given name exists, then we check to make sure that
  // it is a class and also that the superclasses match. If either of these
  // fail, then we raise a `TypeError`. Note, superklass may be null if one was
  // not specified in the ruby code.
  //
  // We pass a constructor to this method of the form `function ClassName() {}`
  // simply so that classes show up with nicely formatted names inside debuggers
  // in the web browser (or node/sprockets).
  //
  // The `base` is the current `self` value where the class is being created
  // from. We use this to get the scope for where the class should be created.
  // If `base` is an object (not a class/module), we simple get its class and
  // use that as the base instead.
  //
  // @param base        [Object] where the class is being created
  // @param superklass  [Class,null] superclass of the new class (may be null)
  // @param id          [String] the name of the class to be created
  // @param constructor [Function] function to use as constructor
  //
  // @return new [Class]  or existing ruby class
  //
  Opal.klass = function(base, superklass, id, constructor) {
    var klass, bridged, alloc;

    // If base is an object, use its class
    if (!base.$$is_class && !base.$$is_module) {
      base = base.$$class;
    }

    // If the superclass is a function then we're bridging a native JS class
    if (typeof(superklass) === 'function') {
      bridged = superklass;
      superklass = _Object;
    }

    // Try to find the class in the current scope
    klass = base.$$scope[id];

    // If the class exists in the scope, then we must use that
    if (klass && klass.$$orig_scope === base.$$scope) {
      // Make sure the existing constant is a class, or raise error
      if (!klass.$$is_class) {
        throw Opal.TypeError.$new(id + " is not a class");
      }

      // Make sure existing class has same superclass
      if (superklass && klass.$$super !== superklass) {
        throw Opal.TypeError.$new("superclass mismatch for class " + id);
      }

      return klass;
    }

    // Class doesnt exist, create a new one with given superclass...

    // Not specifying a superclass means we can assume it to be Object
    if (superklass == null) {
      superklass = _Object;
    }

    // If bridged the JS class will also be the alloc function
    alloc = bridged || boot_class_alloc(id, constructor, superklass);

    // Create the class object (instance of Class)
    klass = boot_class_object(id, superklass, alloc);

    // Name the class
    klass.$$name = id;
    klass.displayName = id;

    // Mark the object as a class
    klass.$$is_class = true;

    // Every class gets its own constant scope, inherited from current scope
    Opal.create_scope(base.$$scope, klass, id);

    // Name new class directly onto current scope (Opal.Foo.Baz = klass)
    base[id] = base.$$scope[id] = klass;

    if (bridged) {
      Opal.bridge(klass, alloc);
    }
    else {
      // Copy all parent constants to child, unless parent is Object
      if (superklass !== _Object && superklass !== BasicObject) {
        donate_constants(superklass, klass);
      }

      // Call .inherited() hook with new class on the superclass
      if (superklass.$inherited) {
        superklass.$inherited(klass);
      }
    }

    return klass;
  };

  // Create generic class with given superclass.
  Opal.boot_class = function(superklass, constructor) {
    var alloc = boot_class_alloc(null, constructor, superklass)

    return boot_class_object(null, superklass, alloc);
  }

  // The class object itself (as in `Class.new`)
  //
  // @param superklass [(Opal) Class] Another class object (as in `Class.new`)
  // @param alloc      [constructor]  The constructor that holds the prototype
  //                                  that will be used for instances of the
  //                                  newly constructed class.
  function boot_class_object(id, superklass, alloc) {
    // Grab the superclass prototype and use it to build an intermediary object
    // in the prototype chain.
    function Superclass_alloc_proxy() {};
    Superclass_alloc_proxy.prototype = superklass.constructor.prototype;
    function SingletonClass_alloc() {}
    SingletonClass_alloc.prototype = new Superclass_alloc_proxy();

    if (id) {
      SingletonClass_alloc.displayName = "SingletonClass_alloc("+id+")";
    }

    // The built class is the only instance of its singleton_class
    var klass = new SingletonClass_alloc();

    setup_module_or_class_object(klass, SingletonClass_alloc, superklass, alloc.prototype);

    // @property $$alloc This is the constructor of instances of the current
    //                   class. Its prototype will be used for method lookup
    klass.$$alloc = alloc;

    // @property $$proto.$$class Make available to instances a reference to the
    //                           class they belong to.
    klass.$$proto.$$class = klass;

    return klass;
  }

  // Adds common/required properties to a module or class object
  // (as in `Module.new` / `Class.new`)
  //
  // @param module      The module or class that needs to be prepared
  //
  // @param constructor The constructor of the module or class itself,
  //                    usually it's already assigned by using `new`. Some
  //                    ipothesis on why it's needed can be found below.
  //
  // @param superklass  The superclass of the class/module object, for modules
  //                    is `Module` (of `Module` in JS context)
  //
  // @param prototype   The prototype on which the class/module methods will
  //                    be stored.
  //
  function setup_module_or_class_object(module, constructor, superklass, prototype) {
    // @property $$id Each class is assigned a unique `id` that helps
    //                comparation and implementation of `#object_id`
    module.$$id = Opal.uid();

    // @property $$proto This is the prototype on which methods will be defined
    module.$$proto = prototype;

    // @property constructor keeps a ref to the constructor, but apparently the
    //                       constructor is already set on:
    //
    //                          `var module = new constructor` is called.
    //
    //                       Maybe there are some browsers not abiding (IE6?)
    module.constructor = constructor;

    if (superklass === Module) {
      // @property $$is_module Clearly mark this as a module
      module.$$is_module = true;
      module.$$class     = Module;
    }
    else {
      // @property $$is_class Clearly mark this as a class
      module.$$is_class = true;
      module.$$class    = Class;
    }

    // @property $$super the superclass, doesn't get changed by module inclusions
    module.$$super = superklass;

    // @property $$parent direct parent class or module
    //                    starts with the superclass, after module inclusion is
    //                    the last included module
    module.$$parent = superklass;

    // @property $$inc included modules
    module.$$inc = [];
  }

  // Define new module (or return existing module). The given `base` is basically
  // the current `self` value the `module` statement was defined in. If this is
  // a ruby module or class, then it is used, otherwise if the base is a ruby
  // object then that objects real ruby class is used (e.g. if the base is the
  // main object, then the top level `Object` class is used as the base).
  //
  // If a module of the given name is already defined in the base, then that
  // instance is just returned.
  //
  // If there is a class of the given name in the base, then an error is
  // generated instead (cannot have a class and module of same name in same base).
  //
  // Otherwise, a new module is created in the base with the given name, and that
  // new instance is returned back (to be referenced at runtime).
  //
  // @param  base [Module, Class] class or module this definition is inside
  // @param  id [String] the name of the new (or existing) module
  // @return [Module]
  //
  Opal.module = function(base, id) {
    var module;

    if (!base.$$is_class && !base.$$is_module) {
      base = base.$$class;
    }

    if ($hasOwn.call(base.$$scope, id)) {
      module = base.$$scope[id];

      if (!module.$$is_module && module !== _Object) {
        throw Opal.TypeError.$new(id + " is not a module");
      }
    }
    else {
      module = boot_module_object();

      // name module using base (e.g. Foo or Foo::Baz)
      module.$$name = id;

      // mark the object as a module
      module.$$is_module = true;

      // initialize dependency tracking
      module.$$dep = [];

      Opal.create_scope(base.$$scope, module, id);

      // Name new module directly onto current scope (Opal.Foo.Baz = module)
      base[id] = base.$$scope[id] = module;
    }

    return module;
  };

  // Internal function to create a new module instance. This simply sets up
  // the prototype hierarchy and method tables.
  //
  function boot_module_object() {
    var mtor = function() {};
    mtor.prototype = Module_alloc.prototype;

    function module_constructor() {}
    module_constructor.prototype = new mtor();

    var module = new module_constructor();
    var module_prototype = {};

    setup_module_or_class_object(module, module_constructor, Module, module_prototype);

    return module;
  }

  // Make `boot_module_object` available to the JS-API
  Opal.boot_module_object = boot_module_object;

  // Return the singleton class for the passed object.
  //
  // If the given object alredy has a singleton class, then it will be stored on
  // the object as the `$$meta` property. If this exists, then it is simply
  // returned back.
  //
  // Otherwise, a new singleton object for the class or object is created, set on
  // the object at `$$meta` for future use, and then returned.
  //
  // @param [RubyObject] object the ruby object
  // @return [RubyClass] the singleton class for object
  //
  Opal.get_singleton_class = function(object) {
    if (object.$$meta) {
      return object.$$meta;
    }

    if (object.$$is_class || object.$$is_module) {
      return build_class_singleton_class(object);
    }

    return build_object_singleton_class(object);
  };

  // Build the singleton class for an existing class.
  //
  // NOTE: Actually in MRI a class' singleton class inherits from its
  // superclass' singleton class which in turn inherits from Class.
  //
  // @param [RubyClass] klass
  // @return [RubyClass]
  //
  function build_class_singleton_class(klass) {
    var meta = new Opal.Class.$$alloc();

    meta.$$class = Opal.Class;
    meta.$$proto = klass.constructor.prototype;

    meta.$$is_singleton = true;
    meta.$$singleton_of = klass;
    meta.$$inc          = [];
    meta.$$scope        = klass.$$scope;

    return klass.$$meta = meta;
  }

  // Build the singleton class for a Ruby (non class) Object.
  //
  // @param [RubyObject] object
  // @return [RubyClass]
  //
  function build_object_singleton_class(object) {
    var orig_class = object.$$class,
        class_id   = "#<Class:#<" + orig_class.$$name + ":" + orig_class.$$id + ">>";

    var Singleton = function() {};
    var meta = Opal.boot_class(orig_class, Singleton);
    meta.$$name   = class_id;

    meta.$$proto  = object;
    meta.$$class  = orig_class.$$class;
    meta.$$scope  = orig_class.$$scope;
    meta.$$parent = orig_class;
    meta.$$is_singleton = true;
    meta.$$singleton_of = object;

    return object.$$meta = meta;
  }

  // Bridges a single method.
  function bridge_method(target, from, name, body) {
    var ancestors, i, ancestor, length;

    ancestors = target.$$bridge.$ancestors();

    // order important here, we have to check for method presence in
    // ancestors from the bridged class to the last ancestor
    for (i = 0, length = ancestors.length; i < length; i++) {
      ancestor = ancestors[i];

      if ($hasOwn.call(ancestor.$$proto, name) &&
          ancestor.$$proto[name] &&
          !ancestor.$$proto[name].$$donated &&
          !ancestor.$$proto[name].$$stub &&
          ancestor !== from) {
        break;
      }

      if (ancestor === from) {
        target.prototype[name] = body
        break;
      }
    }

  }

  // Bridges from *donator* to a *target*.
  function _bridge(target, donator) {
    var id, methods, method, i, bridged;

    if (typeof(target) === "function") {
      id      = donator.$__id__();
      methods = donator.$instance_methods();

      for (i = methods.length - 1; i >= 0; i--) {
        method = '$' + methods[i];

        bridge_method(target, donator, method, donator.$$proto[method]);
      }

      if (!bridges[id]) {
        bridges[id] = [];
      }

      bridges[id].push(target);
    }
    else {
      bridged = bridges[target.$__id__()];

      if (bridged) {
        for (i = bridged.length - 1; i >= 0; i--) {
          _bridge(bridged[i], donator);
        }

        bridges[donator.$__id__()] = bridged.slice();
      }
    }
  }

  // The actual inclusion of a module into a class.
  //
  // ## Class `$$parent` and `iclass`
  //
  // To handle `super` calls, every class has a `$$parent`. This parent is
  // used to resolve the next class for a super call. A normal class would
  // have this point to its superclass. However, if a class includes a module
  // then this would need to take into account the module. The module would
  // also have to then point its `$$parent` to the actual superclass. We
  // cannot modify modules like this, because it might be included in more
  // then one class. To fix this, we actually insert an `iclass` as the class'
  // `$$parent` which can then point to the superclass. The `iclass` acts as
  // a proxy to the actual module, so the `super` chain can then search it for
  // the required method.
  //
  // @param [RubyModule] module the module to include
  // @param [RubyClass] klass the target class to include module into
  // @return [null]
  //
  Opal.append_features = function(module, klass) {
    var iclass, donator, prototype, methods, id, i;

    // check if this module is already included in the class
    for (i = klass.$$inc.length - 1; i >= 0; i--) {
      if (klass.$$inc[i] === module) {
        return;
      }
    }

    klass.$$inc.push(module);
    module.$$dep.push(klass);
    _bridge(klass, module);

    // iclass
    iclass = {
      $$name:   module.$$name,
      $$proto:  module.$$proto,
      $$parent: klass.$$parent,
      $$module: module,
      $$iclass: true
    };

    klass.$$parent = iclass;

    donator   = module.$$proto;
    prototype = klass.$$proto;
    methods   = module.$instance_methods();

    for (i = methods.length - 1; i >= 0; i--) {
      id = '$' + methods[i];

      // if the target class already has a method of the same name defined
      // and that method was NOT donated, then it must be a method defined
      // by the class so we do not want to override it
      if ( prototype.hasOwnProperty(id) &&
          !prototype[id].$$donated &&
          !prototype[id].$$stub) {
        continue;
      }

      prototype[id] = donator[id];
      prototype[id].$$donated = module;
    }

    donate_constants(module, klass);
  };

  // Boot a base class (makes instances).
  function boot_class_alloc(id, constructor, superklass) {
    if (superklass) {
      var alloc_proxy = function() {};
      alloc_proxy.prototype  = superklass.$$proto || superklass.prototype;
      constructor.prototype = new alloc_proxy();
    }

    if (id) {
      constructor.displayName = id+'_alloc';
    }

    constructor.prototype.constructor = constructor;

    return constructor;
  }

  // Builds the class object for core classes:
  // - make the class object have a singleton class
  // - make the singleton class inherit from its parent singleton class
  //
  // @param id         [String]      the name of the class
  // @param alloc      [Function]    the constructor for the core class instances
  // @param superclass [Class alloc] the constructor of the superclass
  //
  function boot_core_class_object(id, alloc, superclass) {
    var superclass_constructor = function() {};
        superclass_constructor.prototype = superclass.prototype;

    var singleton_class = function() {};
        singleton_class.prototype = new superclass_constructor();

    singleton_class.displayName = "#<Class:"+id+">";

    // the singleton_class acts as the class object constructor
    var klass = new singleton_class();

    setup_module_or_class_object(klass, singleton_class, superclass, alloc.prototype);

    klass.$$alloc     = alloc;
    klass.$$name      = id;
    klass.displayName = id;

    // Give all instances a ref to their class
    alloc.prototype.$$class = klass;

    Opal[id] = klass;
    Opal.constants.push(id);

    return klass;
  }

  // For performance, some core Ruby classes are toll-free bridged to their
  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).
  //
  // This method is used to setup a native constructor (e.g. Array), to have
  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is
  // created using the native constructor so that its prototype is set as the
  // target for th new class. Note: all bridged classes are set to inherit
  // from Object.
  //
  // Example:
  //
  //    Opal.bridge(self, Function);
  //
  // @param [Class] klass the Ruby class to bridge
  // @param [Function] constructor native JavaScript constructor to use
  // @return [Class] returns the passed Ruby class
  //
  Opal.bridge = function(klass, constructor) {
    if (constructor.$$bridge) {
      throw Opal.ArgumentError.$new("already bridged");
    }

    Opal.stub_subscribers.push(constructor.prototype);

    constructor.prototype.$$class = klass;
    constructor.$$bridge          = klass;

    var ancestors = klass.$ancestors();

    // order important here, we have to bridge from the last ancestor to the
    // bridged class
    for (var i = ancestors.length - 1; i >= 0; i--) {
      _bridge(constructor, ancestors[i]);
    }

    for (var name in BasicObject_alloc.prototype) {
      var method = BasicObject_alloc.prototype[method];

      if (method && method.$$stub && !(name in constructor.prototype)) {
        constructor.prototype[name] = method;
      }
    }

    return klass;
  }


  // Constant assignment, see also `Opal.cdecl`
  //
  // @param base_module [Module, Class] the constant namespace
  // @param name        [String] the name of the constant
  // @param value       [Object] the value of the constant
  //
  // @example Assigning a namespaced constant
  //   self::FOO = 'bar'
  //
  // @example Assigning with Module#const_set
  //   Foo.const_set :BAR, 123
  //
  Opal.casgn = function(base_module, name, value) {
    function update(klass, name) {
      klass.$$name = name;

      for (name in klass.$$scope) {
        var value = klass.$$scope[name];

        if (value.$$name === nil && (value.$$is_class || value.$$is_module)) {
          update(value, name)
        }
      }
    }

    var scope = base_module.$$scope;

    if (value.$$is_class || value.$$is_module) {
      // Only checking _Object prevents setting a const on an anonymous class
      // that has a superclass that's not Object
      if (value.$$is_class || value.$$base_module === _Object) {
        value.$$base_module = base_module;
      }

      if (value.$$name === nil && value.$$base_module.$$name !== nil) {
        update(value, name);
      }
    }

    scope.constants.push(name);
    return scope[name] = value;
  };

  // constant decl
  Opal.cdecl = function(base_scope, name, value) {
    if ((value.$$is_class || value.$$is_module) && value.$$orig_scope == null) {
      value.$$name = name;
      value.$$orig_scope = base_scope;
      base_scope.constructor[name] = value;
    }

    base_scope.constants.push(name);
    return base_scope[name] = value;
  };

  // When a source module is included into the target module, we must also copy
  // its constants to the target.
  //
  function donate_constants(source_mod, target_mod) {
    var source_constants = source_mod.$$scope.constants,
        target_scope     = target_mod.$$scope,
        target_constants = target_scope.constants;

    for (var i = 0, length = source_constants.length; i < length; i++) {
      target_constants.push(source_constants[i]);
      target_scope[source_constants[i]] = source_mod.$$scope[source_constants[i]];
    }
  };

  // Donate methods for a module.
  function donate(module, jsid) {
    var included_in = module.$$dep,
        body = module.$$proto[jsid],
        i, length, includee, dest, current,
        klass_includees, j, jj, current_owner_index, module_index;

    if (!included_in) {
      return;
    }

    for (i = 0, length = included_in.length; i < length; i++) {
      includee = included_in[i];
      dest = includee.$$proto;
      current = dest[jsid];

      if (dest.hasOwnProperty(jsid) && !current.$$donated && !current.$$stub) {
        // target class has already defined the same method name - do nothing
      }
      else if (dest.hasOwnProperty(jsid) && !current.$$stub) {
        // target class includes another module that has defined this method
        klass_includees = includee.$$inc;

        for (j = 0, jj = klass_includees.length; j < jj; j++) {
          if (klass_includees[j] === current.$$donated) {
            current_owner_index = j;
          }
          if (klass_includees[j] === module) {
            module_index = j;
          }
        }

        // only redefine method on class if the module was included AFTER
        // the module which defined the current method body. Also make sure
        // a module can overwrite a method it defined before
        if (current_owner_index <= module_index) {
          dest[jsid] = body;
          dest[jsid].$$donated = module;
        }
      }
      else {
        // neither a class, or module included by class, has defined method
        dest[jsid] = body;
        dest[jsid].$$donated = module;
      }

      if (includee.$$dep) {
        donate(includee, jsid);
      }
    }
  };

  // Methods stubs are used to facilitate method_missing in opal. A stub is a
  // placeholder function which just calls `method_missing` on the receiver.
  // If no method with the given name is actually defined on an object, then it
  // is obvious to say that the stub will be called instead, and then in turn
  // method_missing will be called.
  //
  // When a file in ruby gets compiled to javascript, it includes a call to
  // this function which adds stubs for every method name in the compiled file.
  // It should then be safe to assume that method_missing will work for any
  // method call detected.
  //
  // Method stubs are added to the BasicObject prototype, which every other
  // ruby object inherits, so all objects should handle method missing. A stub
  // is only added if the given property name (method name) is not already
  // defined.
  //
  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will
  // have this prefix as well (to make this method more performant).
  //
  //    Opal.add_stubs(["$foo", "$bar", "$baz="]);
  //
  // All stub functions will have a private `$$stub` property set to true so
  // that other internal methods can detect if a method is just a stub or not.
  // `Kernel#respond_to?` uses this property to detect a methods presence.
  //
  // @param [Array] stubs an array of method stubs to add
  //
  Opal.add_stubs = function(stubs) {
    var subscriber, subscribers = Opal.stub_subscribers,
        i, ilength = stubs.length,
        j, jlength = subscribers.length,
        method_name, stub;

    for (i = 0; i < ilength; i++) {
      method_name = stubs[i];
      stub = stub_for(method_name);

      for (j = 0; j < jlength; j++) {
        subscriber = subscribers[j];

        if (!(method_name in subscriber)) {
          subscriber[method_name] = stub;
        }
      }
    }
  };

  // Keep a list of prototypes that want method_missing stubs to be added.
  //
  // @default [Prototype List] BasicObject_alloc.prototype
  //
  Opal.stub_subscribers = [BasicObject_alloc.prototype];

  // Add a method_missing stub function to the given prototype for the
  // given name.
  //
  // @param [Prototype] prototype the target prototype
  // @param [String] stub stub name to add (e.g. "$foo")
  //
  Opal.add_stub_for = function(prototype, stub) {
    var method_missing_stub = stub_for(stub);
    prototype[stub] = method_missing_stub;
  }

  // Generate the method_missing stub for a given method name.
  //
  // @param [String] method_name The js-name of the method to stub (e.g. "$foo")
  //
  function stub_for(method_name) {
    function method_missing_stub() {
      // Copy any given block onto the method_missing dispatcher
      this.$method_missing.$$p = method_missing_stub.$$p;

      // Set block property to null ready for the next call (stop false-positives)
      method_missing_stub.$$p = null;

      // call method missing with correct args (remove '$' prefix on method name)
      return this.$method_missing.apply(this, [method_name.slice(1)].concat($slice.call(arguments)));
    }

    method_missing_stub.$$stub = true;

    return method_missing_stub;
  }

  // Arity count error dispatcher
  Opal.ac = function(actual, expected, object, meth) {
    var inspect = '';
    if (object.$$is_class || object.$$is_module) {
      inspect += object.$$name + '.';
    }
    else {
      inspect += object.$$class.$$name + '#';
    }
    inspect += meth;

    throw Opal.ArgumentError.$new('[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')');
  };

  // The Array of ancestors for a given module/class
  Opal.ancestors = function(module_or_class) {
    var parent = module_or_class,
        result = [];

    while (parent) {
      result.push(parent);
      for (var i=0; i < parent.$$inc.length; i++) {
        result = result.concat(Opal.ancestors(parent.$$inc[i]));
      }

      parent = parent.$$is_class ? parent.$$super : null;
    }

    return result;
  }

  // Super dispatcher
  Opal.find_super_dispatcher = function(obj, jsid, current_func, iter, defs) {
    var dispatcher;

    if (defs) {
      if (obj.$$is_class || obj.$$is_module) {
        dispatcher = defs.$$super;
      }
      else {
        dispatcher = obj.$$class.$$proto;
      }
    }
    else {
      if (obj.$$is_class || obj.$$is_module) {
        dispatcher = obj.$$super;
      }
      else {
        dispatcher = find_obj_super_dispatcher(obj, jsid, current_func);
      }
    }

    dispatcher = dispatcher['$' + jsid];
    dispatcher.$$p = iter;

    return dispatcher;
  };

  // Iter dispatcher for super in a block
  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, iter, defs) {
    if (current_func.$$def) {
      return Opal.find_super_dispatcher(obj, current_func.$$jsid, current_func, iter, defs);
    }
    else {
      return Opal.find_super_dispatcher(obj, jsid, current_func, iter, defs);
    }
  };

  function find_obj_super_dispatcher(obj, jsid, current_func) {
    var klass = obj.$$meta || obj.$$class;
    jsid = '$' + jsid;

    while (klass) {
      if (klass.$$proto[jsid] === current_func) {
        // ok
        break;
      }

      klass = klass.$$parent;
    }

    // if we arent in a class, we couldnt find current?
    if (!klass) {
      throw new Error("could not find current class for super()");
    }

    klass = klass.$$parent;

    // else, let's find the next one
    while (klass) {
      var working = klass.$$proto[jsid];

      if (working && working !== current_func) {
        // ok
        break;
      }

      klass = klass.$$parent;
    }

    return klass.$$proto;
  };

  // Used to return as an expression. Sometimes, we can't simply return from
  // a javascript function as if we were a method, as the return is used as
  // an expression, or even inside a block which must "return" to the outer
  // method. This helper simply throws an error which is then caught by the
  // method. This approach is expensive, so it is only used when absolutely
  // needed.
  //
  Opal.ret = function(val) {
    Opal.returner.$v = val;
    throw Opal.returner;
  };

  // handles yield calls for 1 yielded arg
  Opal.yield1 = function(block, arg) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && arg.$$is_array) {
      return block.apply(null, arg);
    }
    else {
      return block(arg);
    }
  };

  // handles yield for > 1 yielded arg
  Opal.yieldX = function(block, args) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && args.length === 1) {
      if (args[0].$$is_array) {
        return block.apply(null, args[0]);
      }
    }

    if (!args.$$is_array) {
      args = $slice.call(args);
    }

    return block.apply(null, args);
  };

  // Finds the corresponding exception match in candidates.  Each candidate can
  // be a value, or an array of values.  Returns null if not found.
  Opal.rescue = function(exception, candidates) {
    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];

      if (candidate.$$is_array) {
        var result = Opal.rescue(exception, candidate);

        if (result) {
          return result;
        }
      }
      else if (candidate['$==='](exception)) {
        return candidate;
      }
    }

    return null;
  };

  Opal.is_a = function(object, klass) {
    if (object.$$meta === klass) {
      return true;
    }

    var search = object.$$class;

    while (search) {
      if (search === klass) {
        return true;
      }

      for (var i = 0, length = search.$$inc.length; i < length; i++) {
        if (search.$$inc[i] === klass) {
          return true;
        }
      }

      search = search.$$super;
    }

    return false;
  };

  // Helpers for implementing multiple assignment
  // Our code for extracting the values and assigning them only works if the
  // return value is a JS array
  // So if we get an Array subclass, extract the wrapped JS array from it

  Opal.to_ary = function(value) {
    // Used for: a, b = something (no splat)
    if (value.$$is_array) {
      return (value.constructor === Array) ? value : value.literal;
    }
    else if (value['$respond_to?']('to_ary', true)) {
      var ary = value.$to_ary();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return (ary.constructor === Array) ? ary : ary.literal;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_ary gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  Opal.to_a = function(value) {
    // Used for: a, b = *something (with splat)
    if (value.$$is_array) {
      // A splatted array must be copied
      return (value.constructor === Array) ? value.slice() : value.literal.slice();
    }
    else if (value['$respond_to?']('to_a', true)) {
      var ary = value.$to_a();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return (ary.constructor === Array) ? ary : ary.literal;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_a gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used to get a list of rest keyword arguments. Method takes the given
  // keyword args, i.e. the hash literal passed to the method containing all
  // keyword arguemnts passed to method, as well as the used args which are
  // the names of required and optional arguments defined. This method then
  // just returns all key/value pairs which have not been used, in a new
  // hash literal.
  //
  // @param given_args [Hash] all kwargs given to method
  // @param used_args [Object<String: true>] all keys used as named kwargs
  // @return [Hash]
  //
  Opal.kwrestargs = function(given_args, used_args) {
    var keys      = [],
        map       = {},
        key       = null,
        given_map = given_args.$$smap;

    for (key in given_map) {
      if (!used_args[key]) {
        keys.push(key);
        map[key] = given_map[key];
      }
    }

    return Opal.hash2(keys, map);
  };

  // Call a ruby method on a ruby object with some arguments:
  //
  //   var my_array = [1, 2, 3, 4]
  //   Opal.send(my_array, 'length')     # => 4
  //   Opal.send(my_array, 'reverse!')   # => [4, 3, 2, 1]
  //
  // A missing method will be forwarded to the object via
  // method_missing.
  //
  // The result of either call with be returned.
  //
  // @param [Object] recv the ruby object
  // @param [String] mid ruby method to call
  //
  Opal.send = function(recv, mid) {
    var args = $slice.call(arguments, 2),
        func = recv['$' + mid];

    if (func) {
      return func.apply(recv, args);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args));
  };

  Opal.block_send = function(recv, mid, block) {
    var args = $slice.call(arguments, 3),
        func = recv['$' + mid];

    if (func) {
      func.$$p = block;
      return func.apply(recv, args);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args));
  };

  // Used to define methods on an object. This is a helper method, used by the
  // compiled source to define methods on special case objects when the compiler
  // can not determine the destination object, or the object is a Module
  // instance. This can get called by `Module#define_method` as well.
  //
  // ## Modules
  //
  // Any method defined on a module will come through this runtime helper.
  // The method is added to the module body, and the owner of the method is
  // set to be the module itself. This is used later when choosing which
  // method should show on a class if more than 1 included modules define
  // the same method. Finally, if the module is in `module_function` mode,
  // then the method is also defined onto the module itself.
  //
  // ## Classes
  //
  // This helper will only be called for classes when a method is being
  // defined indirectly; either through `Module#define_method`, or by a
  // literal `def` method inside an `instance_eval` or `class_eval` body. In
  // either case, the method is simply added to the class' prototype. A special
  // exception exists for `BasicObject` and `Object`. These two classes are
  // special because they are used in toll-free bridged classes. In each of
  // these two cases, extra work is required to define the methods on toll-free
  // bridged class' prototypes as well.
  //
  // ## Objects
  //
  // If a simple ruby object is the object, then the method is simply just
  // defined on the object as a singleton method. This would be the case when
  // a method is defined inside an `instance_eval` block.
  //
  // @param [RubyObject or Class] obj the actual obj to define method for
  // @param [String] jsid the javascript friendly method name (e.g. '$foo')
  // @param [Function] body the literal javascript function used as method
  // @return [null]
  //
  Opal.defn = function(obj, jsid, body) {
    obj.$$proto[jsid] = body;

    if (obj.$$is_module) {
      donate(obj, jsid);

      if (obj.$$module_function) {
        Opal.defs(obj, jsid, body);
      }
    }

    if (obj.$__id__ && !obj.$__id__.$$stub) {
      var bridged = bridges[obj.$__id__()];

      if (bridged) {
        for (var i = bridged.length - 1; i >= 0; i--) {
          bridge_method(bridged[i], obj, jsid, body);
        }
      }
    }

    if (obj.$method_added && !obj.$method_added.$$stub) {
      obj.$method_added(jsid.substr(1));
    }

    var singleton_of = obj.$$singleton_of;
    if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {
      singleton_of.$singleton_method_added(jsid.substr(1));
    }

    return nil;
  };


  // Define a singleton method on the given object.
  Opal.defs = function(obj, jsid, body) {
    Opal.defn(Opal.get_singleton_class(obj), jsid, body)
  };

  Opal.def = function(obj, jsid, body) {
    // if instance_eval is invoked on a module/class, it sets inst_eval_mod
    if (!obj.$$eval && (obj.$$is_class || obj.$$is_module)) {
      Opal.defn(obj, jsid, body);
    }
    else {
      Opal.defs(obj, jsid, body);
    }
  };

  // Called from #remove_method.
  Opal.rdef = function(obj, jsid) {
    // TODO: remove from bridges as well

    if (!$hasOwn.call(obj.$$proto, jsid)) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    delete obj.$$proto[jsid];

    if (obj.$$is_singleton) {
      if (obj.$$proto.$singleton_method_removed && !obj.$$proto.$singleton_method_removed.$$stub) {
        obj.$$proto.$singleton_method_removed(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_removed && !obj.$method_removed.$$stub) {
        obj.$method_removed(jsid.substr(1));
      }
    }
  };

  // Called from #undef_method.
  Opal.udef = function(obj, jsid) {
    if (!obj.$$proto[jsid] || obj.$$proto[jsid].$$stub) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    Opal.add_stub_for(obj.$$proto, jsid);

    if (obj.$$is_singleton) {
      if (obj.$$proto.$singleton_method_undefined && !obj.$$proto.$singleton_method_undefined.$$stub) {
        obj.$$proto.$singleton_method_undefined(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {
        obj.$method_undefined(jsid.substr(1));
      }
    }
  };

  Opal.alias = function(obj, name, old) {
    var id     = '$' + name,
        old_id = '$' + old,
        body   = obj.$$proto['$' + old];

    // instance_eval is being run on a class/module, so that need to alias class methods
    if (obj.$$eval) {
      return Opal.alias(Opal.get_singleton_class(obj), name, old);
    }

    if (typeof(body) !== "function" || body.$$stub) {
      var ancestor = obj.$$super;

      while (typeof(body) !== "function" && ancestor) {
        body     = ancestor[old_id];
        ancestor = ancestor.$$super;
      }

      if (typeof(body) !== "function" || body.$$stub) {
        throw Opal.NameError.$new("undefined method `" + old + "' for class `" + obj.$name() + "'")
      }
    }

    Opal.defn(obj, id, body);

    return obj;
  };

  Opal.alias_native = function(obj, name, native_name) {
    var id   = '$' + name,
        body = obj.$$proto[native_name];

    if (typeof(body) !== "function" || body.$$stub) {
      throw Opal.NameError.$new("undefined native method `" + native_name + "' for class `" + obj.$name() + "'")
    }

    Opal.defn(obj, id, body);

    return obj;
  };

  Opal.hash_init = function(hash) {
    hash.$$map  = {};
    hash.$$smap = {};
    hash.$$keys = [];
  };

  Opal.hash_clone = function(from_hash, to_hash) {
    to_hash.none = from_hash.none;
    to_hash.proc = from_hash.proc;

    for (var i = 0, keys = from_hash.$$keys, length = keys.length, key, value; i < length; i++) {
      key = from_hash.$$keys[i];

      if (key.$$is_string) {
        value = from_hash.$$smap[key];
      } else {
        value = key.value;
        key = key.key;
      }

      Opal.hash_put(to_hash, key, value);
    }
  };

  Opal.hash_put = function(hash, key, value) {
    if (key.$$is_string) {
      if (!hash.$$smap.hasOwnProperty(key)) {
        hash.$$keys.push(key);
      }
      hash.$$smap[key] = value;
      return;
    }

    var key_hash = key.$hash(), bucket, last_bucket;

    if (!hash.$$map.hasOwnProperty(key_hash)) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      hash.$$map[key_hash] = bucket;
      return;
    }

    bucket = hash.$$map[key_hash];

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        last_bucket = undefined;
        bucket.value = value;
        break;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }

    if (last_bucket) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      last_bucket.next = bucket;
    }
  };

  Opal.hash_get = function(hash, key) {
    if (key.$$is_string) {
      if (hash.$$smap.hasOwnProperty(key)) {
        return hash.$$smap[key];
      }
      return;
    }

    var key_hash = key.$hash(), bucket;

    if (hash.$$map.hasOwnProperty(key_hash)) {
      bucket = hash.$$map[key_hash];

      while (bucket) {
        if (key === bucket.key || key['$eql?'](bucket.key)) {
          return bucket.value;
        }
        bucket = bucket.next;
      }
    }
  };

  Opal.hash_delete = function(hash, key) {
    var i, keys = hash.$$keys, length = keys.length, value;

    if (key.$$is_string) {
      if (!hash.$$smap.hasOwnProperty(key)) {
        return;
      }

      for (i = 0; i < length; i++) {
        if (keys[i] === key) {
          keys.splice(i, 1);
          break;
        }
      }

      value = hash.$$smap[key];
      delete hash.$$smap[key];
      return value;
    }

    var key_hash = key.$hash();

    if (!hash.$$map.hasOwnProperty(key_hash)) {
      return;
    }

    var bucket = hash.$$map[key_hash], last_bucket;

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        value = bucket.value;

        for (i = 0; i < length; i++) {
          if (keys[i] === bucket) {
            keys.splice(i, 1);
            break;
          }
        }

        if (last_bucket && bucket.next) {
          last_bucket.next = bucket.next;
        }
        else if (last_bucket) {
          delete last_bucket.next;
        }
        else if (bucket.next) {
          hash.$$map[key_hash] = bucket.next;
        }
        else {
          delete hash.$$map[key_hash];
        }

        return value;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }
  };

  Opal.hash_rehash = function(hash) {
    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {

      if (hash.$$keys[i].$$is_string) {
        continue;
      }

      key_hash = hash.$$keys[i].key.$hash();

      if (key_hash === hash.$$keys[i].key_hash) {
        continue;
      }

      bucket = hash.$$map[hash.$$keys[i].key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          if (last_bucket && bucket.next) {
            last_bucket.next = bucket.next;
          }
          else if (last_bucket) {
            delete last_bucket.next;
          }
          else if (bucket.next) {
            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;
          }
          else {
            delete hash.$$map[hash.$$keys[i].key_hash];
          }
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      hash.$$keys[i].key_hash = key_hash;

      if (!hash.$$map.hasOwnProperty(key_hash)) {
        hash.$$map[key_hash] = hash.$$keys[i];
        continue;
      }

      bucket = hash.$$map[key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          last_bucket = undefined;
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      if (last_bucket) {
        last_bucket.next = hash.$$keys[i];
      }
    }
  };

  Opal.hash = function() {
    var arguments_length = arguments.length, args, hash, i, length, key, value;

    if (arguments_length === 1 && arguments[0].$$is_hash) {
      return arguments[0];
    }

    hash = new Opal.Hash.$$alloc();
    Opal.hash_init(hash);

    if (arguments_length === 1 && arguments[0].$$is_array) {
      args = arguments[0];
      length = args.length;

      for (i = 0; i < length; i++) {
        if (args[i].length !== 2) {
          throw Opal.ArgumentError.$new("value not of length 2: " + args[i].$inspect());
        }

        key = args[i][0];
        value = args[i][1];

        Opal.hash_put(hash, key, value);
      }

      return hash;
    }

    if (arguments_length === 1) {
      args = arguments[0];
      for (key in args) {
        if (args.hasOwnProperty(key)) {
          value = args[key];

          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    }

    if (arguments_length % 2 !== 0) {
      throw Opal.ArgumentError.$new("odd number of arguments for Hash");
    }

    for (i = 0; i < arguments_length; i += 2) {
      key = arguments[i];
      value = arguments[i + 1];

      Opal.hash_put(hash, key, value);
    }

    return hash;
  };

  // hash2 is a faster creator for hashes that just use symbols and
  // strings as keys. The map and keys array can be constructed at
  // compile time, so they are just added here by the constructor
  // function
  //
  Opal.hash2 = function(keys, smap) {
    var hash = new Opal.Hash.$$alloc();

    hash.$$map  = {};
    hash.$$keys = keys;
    hash.$$smap = smap;

    return hash;
  };

  // Create a new range instance with first and last values, and whether the
  // range excludes the last value.
  //
  Opal.range = function(first, last, exc) {
    var range         = new Opal.Range.$$alloc();
        range.begin   = first;
        range.end     = last;
        range.exclude = exc;

    return range;
  };

  Opal.ivar = function(name) {
    if (
        // properties
        name === "constructor" ||
        name === "displayName" ||
        name === "__count__" ||
        name === "__noSuchMethod__" ||
        name === "__parent__" ||
        name === "__proto__" ||

        // methods
        name === "hasOwnProperty" ||
        name === "valueOf"
       )
    {
      return name + "$";
    }

    return name;
  };

  // Require system
  // --------------

  Opal.modules         = {};
  Opal.loaded_features = ['corelib/runtime'];
  Opal.current_dir     = '.'
  Opal.require_table   = {'corelib/runtime': true};

  function normalize(path) {
    var parts, part, new_parts = [], SEPARATOR = '/';

    if (Opal.current_dir !== '.') {
      path = Opal.current_dir.replace(/\/*$/, '/') + path;
    }

    path = path.replace(/\.(rb|opal|js)$/, '');
    parts = path.split(SEPARATOR);

    for (var i = 0, ii = parts.length; i < ii; i++) {
      part = parts[i];
      if (part === '') continue;
      (part === '..') ? new_parts.pop() : new_parts.push(part)
    }

    return new_parts.join(SEPARATOR);
  }

  Opal.loaded = function(paths) {
    var i, l, path;

    for (i = 0, l = paths.length; i < l; i++) {
      path = normalize(paths[i]);

      if (Opal.require_table[path]) {
        return;
      }

      Opal.loaded_features.push(path);
      Opal.require_table[path] = true;
    }
  }

  Opal.load = function(path) {
    path = normalize(path);

    Opal.loaded([path]);

    var module = Opal.modules[path];

    if (module) {
      module(Opal);
    }
    else {
      var severity = Opal.dynamic_require_severity || 'warning';
      var message  = 'cannot load such file -- ' + path;

      if (severity === "error") {
        Opal.LoadError ? Opal.LoadError.$new(message) : function(){throw message}();
      }
      else if (severity === "warning") {
        console.warn('WARNING: LoadError: ' + message);
      }
    }

    return true;
  }

  Opal.require = function(path) {
    path = normalize(path);

    if (Opal.require_table[path]) {
      return false;
    }

    return Opal.load(path);
  }

  // Initialization
  // --------------

  // Constructors for *instances* of core objects
  boot_class_alloc('BasicObject', BasicObject_alloc);
  boot_class_alloc('Object',      Object_alloc,       BasicObject_alloc);
  boot_class_alloc('Module',      Module_alloc,       Object_alloc);
  boot_class_alloc('Class',       Class_alloc,        Module_alloc);

  // Constructors for *classes* of core objects
  BasicObject = boot_core_class_object('BasicObject', BasicObject_alloc, Class_alloc);
  _Object     = boot_core_class_object('Object',      Object_alloc,      BasicObject.constructor);
  Module      = boot_core_class_object('Module',      Module_alloc,      _Object.constructor);
  Class       = boot_core_class_object('Class',       Class_alloc,       Module.constructor);

  // Fix booted classes to use their metaclass
  BasicObject.$$class = Class;
  _Object.$$class     = Class;
  Module.$$class      = Class;
  Class.$$class       = Class;

  // Fix superclasses of booted classes
  BasicObject.$$super = null;
  _Object.$$super     = BasicObject;
  Module.$$super      = _Object;
  Class.$$super       = Module;

  BasicObject.$$parent = null;
  _Object.$$parent     = BasicObject;
  Module.$$parent      = _Object;
  Class.$$parent       = Module;

  Opal.base                = _Object;
  BasicObject.$$scope      = _Object.$$scope = Opal;
  BasicObject.$$orig_scope = _Object.$$orig_scope = Opal;

  Module.$$scope      = _Object.$$scope;
  Module.$$orig_scope = _Object.$$orig_scope;
  Class.$$scope       = _Object.$$scope;
  Class.$$orig_scope  = _Object.$$orig_scope;

  _Object.$$proto.toString = function() {
    return this.$to_s();
  };

  _Object.$$proto.$require = Opal.require;

  Opal.top = new _Object.$$alloc();

  // Nil
  Opal.klass(_Object, _Object, 'NilClass', NilClass_alloc);
  nil = Opal.nil = new NilClass_alloc();
  nil.$$id = nil_id;
  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };

  Opal.breaker  = new Error('unexpected break');
  Opal.returner = new Error('unexpected return');

  TypeError.$$super = Error;
}).call(this);

if (typeof(global) !== 'undefined') {
  global.Opal = this.Opal;
  Opal.global = global;
}

if (typeof(window) !== 'undefined') {
  window.Opal = this.Opal;
  Opal.global = window;
}
Opal.loaded(["corelib/runtime"]);
/* Generated by Opal 0.9.4 */
Opal.modules["corelib/helpers"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new', '$class', '$===', '$respond_to?', '$raise', '$type_error', '$__send__', '$coerce_to', '$nil?', '$<=>', '$inspect', '$coerce_to!']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$bridge', function(klass, constructor) {
      var self = this;

      return Opal.bridge(klass, constructor);
    });

    Opal.defs(self, '$type_error', function(object, type, method, coerced) {
      var $a, $b, self = this;

      if (method == null) {
        method = nil
      }
      if (coerced == null) {
        coerced = nil
      }
      if ((($a = (($b = method !== false && method !== nil) ? coerced : method)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('TypeError').$new("can't convert " + (object.$class()) + " into " + (type) + " (" + (object.$class()) + "#" + (method) + " gives " + (coerced.$class()))
        } else {
        return $scope.get('TypeError').$new("no implicit conversion of " + (object.$class()) + " into " + (type))
      };
    });

    Opal.defs(self, '$coerce_to', function(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type))
      };
      return object.$__send__(method);
    });

    Opal.defs(self, '$coerce_to!', function(object, type, method) {
      var $a, self = this, coerced = nil;

      coerced = self.$coerce_to(object, type, method);
      if ((($a = type['$==='](coerced)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    });

    Opal.defs(self, '$coerce_to?', function(object, type, method) {
      var $a, self = this, coerced = nil;

      if ((($a = object['$respond_to?'](method)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      coerced = self.$coerce_to(object, type, method);
      if ((($a = coerced['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = type['$==='](coerced)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    });

    Opal.defs(self, '$try_convert', function(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return object.$__send__(method)
        } else {
        return nil
      };
    });

    Opal.defs(self, '$compare', function(a, b) {
      var $a, self = this, compare = nil;

      compare = a['$<=>'](b);
      if ((($a = compare === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (a.$class()) + " with " + (b.$class()) + " failed")};
      return compare;
    });

    Opal.defs(self, '$destructure', function(args) {
      var self = this;

      
      if (args.length == 1) {
        return args[0];
      }
      else if (args.$$is_array) {
        return args;
      }
      else {
        return $slice.call(args);
      }
    
    });

    Opal.defs(self, '$respond_to?', function(obj, method) {
      var self = this;

      
      if (obj == null || !obj.$$class) {
        return false;
      }
    
      return obj['$respond_to?'](method);
    });

    Opal.defs(self, '$inspect', function(obj) {
      var self = this;

      
      if (obj === undefined) {
        return "undefined";
      }
      else if (obj === null) {
        return "null";
      }
      else if (!obj.$$class) {
        return obj.toString();
      }
      else {
        return obj.$inspect();
      }
    
    });

    Opal.defs(self, '$instance_variable_name!', function(name) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = /^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError').$new("'" + (name) + "' is not allowed as an instance variable name", name))
      };
      return name;
    });
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/module"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$===', '$raise', '$equal?', '$<', '$>', '$nil?', '$attr_reader', '$attr_writer', '$coerce_to!', '$new', '$=~', '$inject', '$const_get', '$split', '$const_missing', '$to_str', '$to_proc', '$lambda', '$bind', '$call', '$class', '$append_features', '$included', '$name', '$to_s', '$__id__']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_5, TMP_6;

    Opal.defs(self, '$new', TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      
      var klass         = Opal.boot_module_object();
      klass.$$name      = nil;
      klass.$$class     = Opal.Module;
      klass.$$dep       = []
      klass.$$is_module = true;
      klass.$$proto     = {};

      // inherit scope from parent
      Opal.create_scope(Opal.Module.$$scope, klass);

      if (block !== nil) {
        var block_self = block.$$s;
        block.$$s = null;
        block.call(klass);
        block.$$s = block_self;
      }

      return klass;
    
    });

    Opal.defn(self, '$===', function(object) {
      var $a, self = this;

      if ((($a = object == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return Opal.is_a(object, self);
    });

    Opal.defn(self, '$<', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Module')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "compared with non class/module")
      };
      
      var working = self,
          ancestors,
          i, length;

      if (working === other) {
        return false;
      }

      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === other) {
          return true;
        }
      }

      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === self) {
          return false;
        }
      }

      return nil;
    
    });

    Opal.defn(self, '$<=', function(other) {
      var $a, self = this;

      return ((($a = self['$equal?'](other)) !== false && $a !== nil) ? $a : $rb_lt(self, other));
    });

    Opal.defn(self, '$>', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Module')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "compared with non class/module")
      };
      return $rb_lt(other, self);
    });

    Opal.defn(self, '$>=', function(other) {
      var $a, self = this;

      return ((($a = self['$equal?'](other)) !== false && $a !== nil) ? $a : $rb_gt(self, other));
    });

    Opal.defn(self, '$<=>', function(other) {
      var $a, self = this, lt = nil;

      
      if (self === other) {
        return 0;
      }
    
      if ((($a = $scope.get('Module')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      lt = $rb_lt(self, other);
      if ((($a = lt['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if (lt !== false && lt !== nil) {
        return -1
        } else {
        return 1
      };
    });

    Opal.defn(self, '$alias_method', function(newname, oldname) {
      var self = this;

      Opal.alias(self, newname, oldname);
      return self;
    });

    Opal.defn(self, '$alias_native', function(mid, jsid) {
      var self = this;

      if (jsid == null) {
        jsid = mid
      }
      Opal.alias_native(self, mid, jsid);
      return self;
    });

    Opal.defn(self, '$ancestors', function() {
      var self = this;

      return Opal.ancestors(self);
    });

    Opal.defn(self, '$append_features', function(klass) {
      var self = this;

      Opal.append_features(self, klass);
      return self;
    });

    Opal.defn(self, '$attr_accessor', function() {
      var $a, $b, self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var names = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        names[$splat_index] = arguments[$splat_index + 0];
      }
      ($a = self).$attr_reader.apply($a, Opal.to_a(names));
      return ($b = self).$attr_writer.apply($b, Opal.to_a(names));
    });

    Opal.alias(self, 'attr', 'attr_accessor');

    Opal.defn(self, '$attr_reader', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var names = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        names[$splat_index] = arguments[$splat_index + 0];
      }
      
      var proto = self.$$proto;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name,
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar) {
          return function() {
            if (this[ivar] == null) {
              return nil;
            }
            else {
              return this[ivar];
            }
          };
        })(ivar);

        // initialize the instance variable as nil
        proto[ivar] = nil;

        if (self.$$is_singleton) {
          proto.constructor.prototype[id] = body;
        }
        else {
          Opal.defn(self, id, body);
        }
      }
    
      return nil;
    });

    Opal.defn(self, '$attr_writer', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var names = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        names[$splat_index] = arguments[$splat_index + 0];
      }
      
      var proto = self.$$proto;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name + '=',
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar){
          return function(value) {
            return this[ivar] = value;
          }
        })(ivar);

        // initialize the instance variable as nil
        proto[ivar] = nil;

        if (self.$$is_singleton) {
          proto.constructor.prototype[id] = body;
        }
        else {
          Opal.defn(self, id, body);
        }
      }
    
      return nil;
    });

    Opal.defn(self, '$autoload', function(const$, path) {
      var self = this;

      
      var autoloaders;

      if (!(autoloaders = self.$$autoload)) {
        autoloaders = self.$$autoload = {};
      }

      autoloaders[const$] = path;
      return nil;
    ;
    });

    Opal.defn(self, '$class_variable_get', function(name) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = name.length < 3 || name.slice(0,2) !== '@@') !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError').$new("class vars should start with @@", name))};
      
      var value = Opal.cvars[name.slice(2)];
      (function() {if ((($a = value == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('NameError').$new("uninitialized class variable @@a in", name))
        } else {
        return nil
      }; return nil; })()
      return value;
    
    });

    Opal.defn(self, '$class_variable_set', function(name, value) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = name.length < 3 || name.slice(0,2) !== '@@') !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError'))};
      
      Opal.cvars[name.slice(2)] = value;
      return value;
    
    });

    Opal.defn(self, '$constants', function() {
      var self = this;

      return self.$$scope.constants.slice(0);
    });

    Opal.defn(self, '$const_defined?', function(name, inherit) {
      var $a, self = this;

      if (inherit == null) {
        inherit = true
      }
      if ((($a = name['$=~'](/^[A-Z]\w*$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError').$new("wrong constant name " + (name), name))
      };
      
      var scopes = [self.$$scope];

      if (inherit || self === Opal.Object) {
        var parent = self.$$super;

        while (parent !== Opal.BasicObject) {
          scopes.push(parent.$$scope);

          parent = parent.$$super;
        }
      }

      for (var i = 0, length = scopes.length; i < length; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return true;
        }
      }

      return false;
    
    });

    Opal.defn(self, '$const_get', function(name, inherit) {
      var $a, $b, TMP_2, self = this;

      if (inherit == null) {
        inherit = true
      }
      if ((($a = name.indexOf('::') != -1 && name != '::') !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = name.$split("::")).$inject, $a.$$p = (TMP_2 = function(o, c){var self = TMP_2.$$s || this;
if (o == null) o = nil;if (c == null) c = nil;
        return o.$const_get(c)}, TMP_2.$$s = self, TMP_2), $a).call($b, self)};
      if ((($a = /^[A-Z]\w*$/.test(name)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError').$new("wrong constant name " + (name), name))
      };
      
      var scopes = [self.$$scope];

      if (inherit || self == Opal.Object) {
        var parent = self.$$super;

        while (parent !== Opal.BasicObject) {
          scopes.push(parent.$$scope);

          parent = parent.$$super;
        }
      }

      for (var i = 0, length = scopes.length; i < length; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return scopes[i][name];
        }
      }

      return self.$const_missing(name);
    
    });

    Opal.defn(self, '$const_missing', function(name) {
      var self = this;

      
      if (self.$$autoload) {
        var file = self.$$autoload[name];

        if (file) {
          self.$require(file);

          return self.$const_get(name);
        }
      }
    
      return self.$raise($scope.get('NameError').$new("uninitialized constant " + (self) + "::" + (name), name));
    });

    Opal.defn(self, '$const_set', function(name, value) {
      var $a, self = this;

      if ((($a = name['$=~'](/^[A-Z]\w*$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError').$new("wrong constant name " + (name), name))
      };
      try {
      name = name.$to_str()
      } catch ($err) {if (true) {
        try {
          self.$raise($scope.get('TypeError'), "conversion with #to_str failed")
        } finally {
          Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
        }
        }else { throw $err; }
      };
      Opal.casgn(self, name, value);
      return value;
    });

    Opal.defn(self, '$define_method', TMP_3 = function(name, method) {
      var $a, $b, $c, TMP_4, self = this, $iter = TMP_3.$$p, block = $iter || nil, $case = nil;

      TMP_3.$$p = null;
      if ((($a = method === undefined && block === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "tried to create a Proc object without a block")};
      ((($a = block) !== false && $a !== nil) ? $a : block = (function() {$case = method;if ($scope.get('Proc')['$===']($case)) {return method}else if ($scope.get('Method')['$===']($case)) {return method.$to_proc().$$unbound;}else if ($scope.get('UnboundMethod')['$===']($case)) {return ($b = ($c = self).$lambda, $b.$$p = (TMP_4 = function(args){var self = TMP_4.$$s || this, $a, bound = nil;
args = $slice.call(arguments, 0);
      bound = method.$bind(self);
        return ($a = bound).$call.apply($a, Opal.to_a(args));}, TMP_4.$$s = self, TMP_4), $b).call($c)}else {return self.$raise($scope.get('TypeError'), "wrong argument type " + (block.$class()) + " (expected Proc/Method)")}})());
      
      var id = '$' + name;

      block.$$jsid = name;
      block.$$s    = null;
      block.$$def  = block;

      Opal.defn(self, id, block);

      return name;
    
    });

    Opal.defn(self, '$remove_method', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var names = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        names[$splat_index] = arguments[$splat_index + 0];
      }
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.rdef(self, "$" + names[i]);
      }
    
      return self;
    });

    Opal.defn(self, '$singleton_class?', function() {
      var self = this;

      return !!self.$$is_singleton;
    });

    Opal.defn(self, '$include', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var mods = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        mods[$splat_index] = arguments[$splat_index + 0];
      }
      
      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (mod === self) {
          continue;
        }

        if (!mod.$$is_module) {
          self.$raise($scope.get('TypeError'), "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(self);
        (mod).$included(self);
      }
    
      return self;
    });

    Opal.defn(self, '$include?', function(mod) {
      var self = this;

      
      for (var cls = self; cls; cls = cls.$$super) {
        for (var i = 0; i != cls.$$inc.length; i++) {
          var mod2 = cls.$$inc[i];
          if (mod === mod2) {
            return true;
          }
        }
      }
      return false;
    
    });

    Opal.defn(self, '$instance_method', function(name) {
      var self = this;

      
      var meth = self.$$proto['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (name) + "' for class `" + (self.$name()) + "'", name));
      }

      return $scope.get('UnboundMethod').$new(self, meth, name);
    
    });

    Opal.defn(self, '$instance_methods', function(include_super) {
      var self = this;

      if (include_super == null) {
        include_super = true
      }
      
      var methods = [],
          proto   = self.$$proto;

      for (var prop in proto) {
        if (prop.charAt(0) !== '$') {
          continue;
        }

        if (typeof(proto[prop]) !== "function") {
          continue;
        }

        if (proto[prop].$$stub) {
          continue;
        }

        if (!self.$$is_module) {
          if (self !== Opal.BasicObject && proto[prop] === Opal.BasicObject.$$proto[prop]) {
            continue;
          }

          if (!include_super && !proto.hasOwnProperty(prop)) {
            continue;
          }

          if (!include_super && proto[prop].$$donated) {
            continue;
          }
        }

        methods.push(prop.substr(1));
      }

      return methods;
    
    });

    Opal.defn(self, '$included', function(mod) {
      var self = this;

      return nil;
    });

    Opal.defn(self, '$extended', function(mod) {
      var self = this;

      return nil;
    });

    Opal.defn(self, '$method_added', function() {
      var self = this;

      return nil;
    });

    Opal.defn(self, '$method_removed', function() {
      var self = this;

      return nil;
    });

    Opal.defn(self, '$method_undefined', function() {
      var self = this;

      return nil;
    });

    Opal.defn(self, '$module_eval', TMP_5 = function() {
      var self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise($scope.get('ArgumentError'), "no block given")
      };
      
      var old = block.$$s,
          result;

      block.$$s = null;
      result = block.call(self);
      block.$$s = old;

      return result;
    
    });

    Opal.alias(self, 'class_eval', 'module_eval');

    Opal.defn(self, '$module_exec', TMP_6 = function() {
      var self = this, $iter = TMP_6.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_6.$$p = null;
      
      if (block === nil) {
        self.$raise($scope.get('LocalJumpError'), "no block given")
      }

      var block_self = block.$$s, result;

      block.$$s = null;
      result = block.apply(self, args);
      block.$$s = block_self;

      return result;
    ;
    });

    Opal.alias(self, 'class_exec', 'module_exec');

    Opal.defn(self, '$method_defined?', function(method) {
      var self = this;

      
      var body = self.$$proto['$' + method];
      return (!!body) && !body.$$stub;
    
    });

    Opal.defn(self, '$module_function', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var methods = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        methods[$splat_index] = arguments[$splat_index + 0];
      }
      
      if (methods.length === 0) {
        self.$$module_function = true;
      }
      else {
        for (var i = 0, length = methods.length; i < length; i++) {
          var meth = methods[i],
              id   = '$' + meth,
              func = self.$$proto[id];

          Opal.defs(self, id, func);
        }
      }

      return self;
    
    });

    Opal.defn(self, '$name', function() {
      var self = this;

      
      if (self.$$full_name) {
        return self.$$full_name;
      }

      var result = [], base = self;

      while (base) {
        if (base.$$name === nil) {
          return result.length === 0 ? nil : result.join('::');
        }

        result.unshift(base.$$name);

        base = base.$$base_module;

        if (base === Opal.Object) {
          break;
        }
      }

      if (result.length === 0) {
        return nil;
      }

      return self.$$full_name = result.join('::');
    
    });

    Opal.defn(self, '$remove_class_variable', function() {
      var self = this;

      return nil;
    });

    Opal.defn(self, '$remove_const', function(name) {
      var self = this;

      
      var old = self.$$scope[name];
      delete self.$$scope[name];
      return old;
    
    });

    Opal.defn(self, '$to_s', function() {
      var $a, self = this;

      return ((($a = Opal.Module.$name.call(self)) !== false && $a !== nil) ? $a : "#<" + (self.$$is_module ? 'Module' : 'Class') + ":0x" + (self.$__id__().$to_s(16)) + ">");
    });

    return (Opal.defn(self, '$undef_method', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var names = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        names[$splat_index] = arguments[$splat_index + 0];
      }
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.udef(self, "$" + names[i]);
      }
    
      return self;
    }), nil) && 'undef_method';
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/class"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$raise', '$allocate']);
  self.$require("corelib/module");
  return (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defs(self, '$new', TMP_1 = function(sup) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (sup == null) {
        sup = $scope.get('Object')
      }
      TMP_1.$$p = null;
      
      if (!sup.$$is_class) {
        self.$raise($scope.get('TypeError'), "superclass must be a Class");
      }

      function AnonClass(){};
      var klass        = Opal.boot_class(sup, AnonClass)
      klass.$$name     = nil;
      klass.$$parent   = sup;
      klass.$$is_class = true;

      // inherit scope from parent
      Opal.create_scope(sup.$$scope, klass);

      sup.$inherited(klass);

      if (block !== nil) {
        var block_self = block.$$s;
        block.$$s = null;
        block.call(klass);
        block.$$s = block_self;
      }

      return klass;
    ;
    });

    Opal.defn(self, '$allocate', function() {
      var self = this;

      
      var obj = new self.$$alloc();
      obj.$$id = Opal.uid();
      return obj;
    
    });

    Opal.defn(self, '$inherited', function(cls) {
      var self = this;

      return nil;
    });

    Opal.defn(self, '$new', TMP_2 = function() {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_2.$$p = null;
      
      var obj = self.$allocate();

      obj.$initialize.$$p = block;
      obj.$initialize.apply(obj, args);
      return obj;
    ;
    });

    return (Opal.defn(self, '$superclass', function() {
      var self = this;

      return self.$$super || nil;
    }), nil) && 'superclass';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/basic_object"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$!', '$nil?', '$cover?', '$size', '$raise', '$compile', '$lambda', '$>', '$new', '$inspect']);
  return (function($base, $super) {
    function $BasicObject(){};
    var self = $BasicObject = $klass($base, $super, 'BasicObject', $BasicObject);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5;

    Opal.defn(self, '$initialize', function() {
      var self = this;

      return nil;
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return self === other;
    });

    Opal.defn(self, '$eql?', function(other) {
      var self = this;

      return self['$=='](other);
    });

    Opal.alias(self, 'equal?', '==');

    Opal.defn(self, '$__id__', function() {
      var self = this;

      return self.$$id || (self.$$id = Opal.uid());
    });

    Opal.defn(self, '$__send__', TMP_1 = function(symbol) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      TMP_1.$$p = null;
      
      var func = self['$' + symbol]

      if (func) {
        if (block !== nil) {
          func.$$p = block;
        }

        return func.apply(self, args);
      }

      if (block !== nil) {
        self.$method_missing.$$p = block;
      }

      return self.$method_missing.apply(self, [symbol].concat(args));
    
    });

    Opal.defn(self, '$!', function() {
      var self = this;

      return false;
    });

    Opal.defn(self, '$!=', function(other) {
      var self = this;

      return (self['$=='](other))['$!']();
    });

    Opal.alias(self, 'equal?', '==');

    Opal.defn(self, '$instance_eval', TMP_2 = function() {
      var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil, string = nil, file = nil, _lineno = nil, compiled = nil, wrapper = nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_2.$$p = null;
      if ((($a = ($b = block['$nil?'](), $b !== false && $b !== nil ?!!Opal.compile : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ($range(1, 3, false))['$cover?'](args.$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $a = Opal.to_a(args), string = ($a[0] == null ? nil : $a[0]), file = ($a[1] == null ? nil : $a[1]), _lineno = ($a[2] == null ? nil : $a[2]), $a;
        compiled = $scope.get('Opal').$compile(string, $hash2(["file", "eval"], {"file": (((($a = file) !== false && $a !== nil) ? $a : "(eval)")), "eval": true}));
        wrapper = function() {return eval(compiled)};
        block = ($a = ($b = $scope.get('Kernel')).$lambda, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return wrapper.call(self);}, TMP_3.$$s = self, TMP_3), $a).call($b);
      } else if ((($a = $rb_gt(args.$size(), 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$size()) + " for 0)")};
      
      var old = block.$$s,
          result;

      block.$$s = null;

      // Need to pass $$eval so that method definitions know if this is
      // being done on a class/module. Cannot be compiler driven since
      // send(:instance_eval) needs to work.
      if (self.$$is_class || self.$$is_module) {
        self.$$eval = true;
        try {
          result = block.call(self, self);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.call(self, self);
      }

      block.$$s = old;

      return result;
    
    });

    Opal.defn(self, '$instance_exec', TMP_4 = function() {
      var self = this, $iter = TMP_4.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_4.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "no block given")
      };
      
      var block_self = block.$$s,
          result;

      block.$$s = null;

      if (self.$$is_class || self.$$is_module) {
        self.$$eval = true;
        try {
          result = block.apply(self, args);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.apply(self, args);
      }

      block.$$s = block_self;

      return result;
    
    });

    Opal.defn(self, '$singleton_method_added', function() {
      var self = this;

      return nil;
    });

    Opal.defn(self, '$singleton_method_removed', function() {
      var self = this;

      return nil;
    });

    Opal.defn(self, '$singleton_method_undefined', function() {
      var self = this;

      return nil;
    });

    return (Opal.defn(self, '$method_missing', TMP_5 = function(symbol) {
      var $a, self = this, $iter = TMP_5.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      TMP_5.$$p = null;
      return $scope.get('Kernel').$raise($scope.get('NoMethodError').$new((function() {if ((($a = self.$inspect && !self.$inspect.$$stub) !== nil && (!$a.$$is_boolean || $a == true))) {
        return "undefined method `" + (symbol) + "' for " + (self.$inspect()) + ":" + (self.$$class)
        } else {
        return "undefined method `" + (symbol) + "' for " + (self.$$class)
      }; return nil; })(), symbol));
    }), nil) && 'method_missing';
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/kernel"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$new', '$inspect', '$!', '$=~', '$==', '$object_id', '$class', '$coerce_to?', '$<<', '$allocate', '$copy_instance_variables', '$copy_singleton_methods', '$initialize_clone', '$initialize_copy', '$define_method', '$to_proc', '$singleton_class', '$initialize_dup', '$for', '$loop', '$pop', '$call', '$append_features', '$extended', '$length', '$respond_to?', '$[]', '$nil?', '$to_a', '$to_int', '$fetch', '$Integer', '$Float', '$to_ary', '$to_str', '$coerce_to', '$to_s', '$__id__', '$instance_variable_name!', '$coerce_to!', '$===', '$>', '$print', '$format', '$puts', '$each', '$<=', '$empty?', '$exception', '$kind_of?', '$respond_to_missing?', '$try_convert!', '$expand_path', '$join', '$start_with?', '$sym', '$arg', '$include']);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_7, TMP_8, TMP_10, TMP_11;

    Opal.defn(self, '$method_missing', TMP_1 = function(symbol) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      TMP_1.$$p = null;
      return self.$raise($scope.get('NoMethodError').$new("undefined method `" + (symbol) + "' for " + (self.$inspect()), symbol, args));
    });

    Opal.defn(self, '$=~', function(obj) {
      var self = this;

      return false;
    });

    Opal.defn(self, '$!~', function(obj) {
      var self = this;

      return (self['$=~'](obj))['$!']();
    });

    Opal.defn(self, '$===', function(other) {
      var $a, self = this;

      return ((($a = self.$object_id()['$=='](other.$object_id())) !== false && $a !== nil) ? $a : self['$=='](other));
    });

    Opal.defn(self, '$<=>', function(other) {
      var self = this;

      
      // set guard for infinite recursion
      self.$$comparable = true;

      var x = self['$=='](other);

      if (x && x !== nil) {
        return 0;
      }

      return nil;
    
    });

    Opal.defn(self, '$method', function(name) {
      var self = this;

      
      var meth = self['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (name) + "' for class `" + (self.$class()) + "'", name));
      }

      return $scope.get('Method').$new(self, meth, name);
    
    });

    Opal.defn(self, '$methods', function(all) {
      var self = this;

      if (all == null) {
        all = true
      }
      
      var methods = [];

      for (var key in self) {
        if (key[0] == "$" && typeof(self[key]) === "function") {
          if (all == false || all === nil) {
            if (!Opal.hasOwnProperty.call(self, key)) {
              continue;
            }
          }
          if (self[key].$$stub === undefined) {
            methods.push(key.substr(1));
          }
        }
      }

      return methods;
    
    });

    Opal.alias(self, 'public_methods', 'methods');

    Opal.defn(self, '$Array', function(object) {
      var self = this;

      
      var coerced;

      if (object === nil) {
        return [];
      }

      if (object.$$is_array) {
        return object;
      }

      coerced = $scope.get('Opal')['$coerce_to?'](object, $scope.get('Array'), "to_ary");
      if (coerced !== nil) { return coerced; }

      coerced = $scope.get('Opal')['$coerce_to?'](object, $scope.get('Array'), "to_a");
      if (coerced !== nil) { return coerced; }

      return [object];
    
    });

    Opal.defn(self, '$at_exit', TMP_2 = function() {
      var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      TMP_2.$$p = null;
      ((($a = $gvars.__at_exit__) !== false && $a !== nil) ? $a : $gvars.__at_exit__ = []);
      return $gvars.__at_exit__['$<<'](block);
    });

    Opal.defn(self, '$caller', function() {
      var self = this;

      return [];
    });

    Opal.defn(self, '$class', function() {
      var self = this;

      return self.$$class;
    });

    Opal.defn(self, '$copy_instance_variables', function(other) {
      var self = this;

      
      for (var name in other) {
        if (other.hasOwnProperty(name) && name.charAt(0) !== '$') {
          self[name] = other[name];
        }
      }
    
    });

    Opal.defn(self, '$copy_singleton_methods', function(other) {
      var self = this;

      
      var name;

      if (other.hasOwnProperty('$$meta')) {
        var other_singleton_class_proto = Opal.get_singleton_class(other).$$proto;
        var self_singleton_class_proto = Opal.get_singleton_class(self).$$proto;

        for (name in other_singleton_class_proto) {
          if (name.charAt(0) === '$' && other_singleton_class_proto.hasOwnProperty(name)) {
            self_singleton_class_proto[name] = other_singleton_class_proto[name];
          }
        }
      }

      for (name in other) {
        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    });

    Opal.defn(self, '$clone', function() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    });

    Opal.defn(self, '$initialize_clone', function(other) {
      var self = this;

      return self.$initialize_copy(other);
    });

    Opal.defn(self, '$define_singleton_method', TMP_3 = function(name, method) {
      var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

      TMP_3.$$p = null;
      return ($a = ($b = self.$singleton_class()).$define_method, $a.$$p = block.$to_proc(), $a).call($b, name, method);
    });

    Opal.defn(self, '$dup', function() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    });

    Opal.defn(self, '$initialize_dup', function(other) {
      var self = this;

      return self.$initialize_copy(other);
    });

    Opal.defn(self, '$enum_for', TMP_4 = function(method) {
      var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      if (method == null) {
        method = "each"
      }
      TMP_4.$$p = null;
      return ($a = ($b = $scope.get('Enumerator')).$for, $a.$$p = block.$to_proc(), $a).apply($b, [self, method].concat(Opal.to_a(args)));
    });

    Opal.alias(self, 'to_enum', 'enum_for');

    Opal.defn(self, '$equal?', function(other) {
      var self = this;

      return self === other;
    });

    Opal.defn(self, '$exit', function(status) {
      var $a, $b, TMP_5, self = this;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      if (status == null) {
        status = true
      }
      ((($a = $gvars.__at_exit__) !== false && $a !== nil) ? $a : $gvars.__at_exit__ = []);
      ($a = ($b = self).$loop, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, block = nil;
        if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      block = $gvars.__at_exit__.$pop();
        if (block !== false && block !== nil) {
          return block.$call()
          } else {
          return ($breaker.$v = nil, $breaker)
        };}, TMP_5.$$s = self, TMP_5), $a).call($b);
      if ((($a = status === true) !== nil && (!$a.$$is_boolean || $a == true))) {
        status = 0};
      Opal.exit(status);
      return nil;
    });

    Opal.defn(self, '$extend', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var mods = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        mods[$splat_index] = arguments[$splat_index + 0];
      }
      
      var singleton = self.$singleton_class();

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise($scope.get('TypeError'), "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(singleton);
        (mod).$extended(self);
      }
    ;
      return self;
    });

    Opal.defn(self, '$format', function(format_string) {
      var $a, $b, self = this, ary = nil, $splat_index = nil;
      if ($gvars.DEBUG == null) $gvars.DEBUG = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      if ((($a = (($b = args.$length()['$=='](1)) ? args['$[]'](0)['$respond_to?']("to_ary") : args.$length()['$=='](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
        ary = $scope.get('Opal')['$coerce_to?'](args['$[]'](0), $scope.get('Array'), "to_ary");
        if ((($a = ary['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          args = ary.$to_a()
        };};
      
      var result = '',
          //used for slicing:
          begin_slice = 0,
          end_slice,
          //used for iterating over the format string:
          i,
          len = format_string.length,
          //used for processing field values:
          arg,
          str,
          //used for processing %g and %G fields:
          exponent,
          //used for keeping track of width and precision:
          width,
          precision,
          //used for holding temporary values:
          tmp_num,
          //used for processing %{} and %<> fileds:
          hash_parameter_key,
          closing_brace_char,
          //used for processing %b, %B, %o, %x, and %X fields:
          base_number,
          base_prefix,
          base_neg_zero_regex,
          base_neg_zero_digit,
          //used for processing arguments:
          next_arg,
          seq_arg_num = 1,
          pos_arg_num = 0,
          //used for keeping track of flags:
          flags,
          FNONE  = 0,
          FSHARP = 1,
          FMINUS = 2,
          FPLUS  = 4,
          FZERO  = 8,
          FSPACE = 16,
          FWIDTH = 32,
          FPREC  = 64,
          FPREC0 = 128;

      function CHECK_FOR_FLAGS() {
        if (flags&FWIDTH) { self.$raise($scope.get('ArgumentError'), "flag after width") }
        if (flags&FPREC0) { self.$raise($scope.get('ArgumentError'), "flag after precision") }
      }

      function CHECK_FOR_WIDTH() {
        if (flags&FWIDTH) { self.$raise($scope.get('ArgumentError'), "width given twice") }
        if (flags&FPREC0) { self.$raise($scope.get('ArgumentError'), "width after precision") }
      }

      function GET_NTH_ARG(num) {
        if (num >= args.length) { self.$raise($scope.get('ArgumentError'), "too few arguments") }
        return args[num];
      }

      function GET_NEXT_ARG() {
        switch (pos_arg_num) {
        case -1: self.$raise($scope.get('ArgumentError'), "unnumbered(" + (seq_arg_num) + ") mixed with numbered")
        case -2: self.$raise($scope.get('ArgumentError'), "unnumbered(" + (seq_arg_num) + ") mixed with named")
        }
        pos_arg_num = seq_arg_num++;
        return GET_NTH_ARG(pos_arg_num - 1);
      }

      function GET_POS_ARG(num) {
        if (pos_arg_num > 0) {
          self.$raise($scope.get('ArgumentError'), "numbered(" + (num) + ") after unnumbered(" + (pos_arg_num) + ")")
        }
        if (pos_arg_num === -2) {
          self.$raise($scope.get('ArgumentError'), "numbered(" + (num) + ") after named")
        }
        if (num < 1) {
          self.$raise($scope.get('ArgumentError'), "invalid index - " + (num) + "$")
        }
        pos_arg_num = -1;
        return GET_NTH_ARG(num - 1);
      }

      function GET_ARG() {
        return (next_arg === undefined ? GET_NEXT_ARG() : next_arg);
      }

      function READ_NUM(label) {
        var num, str = '';
        for (;; i++) {
          if (i === len) {
            self.$raise($scope.get('ArgumentError'), "malformed format string - %*[0-9]")
          }
          if (format_string.charCodeAt(i) < 48 || format_string.charCodeAt(i) > 57) {
            i--;
            num = parseInt(str, 10) || 0;
            if (num > 2147483647) {
              self.$raise($scope.get('ArgumentError'), "" + (label) + " too big")
            }
            return num;
          }
          str += format_string.charAt(i);
        }
      }

      function READ_NUM_AFTER_ASTER(label) {
        var arg, num = READ_NUM(label);
        if (format_string.charAt(i + 1) === '$') {
          i++;
          arg = GET_POS_ARG(num);
        } else {
          arg = GET_NEXT_ARG();
        }
        return (arg).$to_int();
      }

      for (i = format_string.indexOf('%'); i !== -1; i = format_string.indexOf('%', i)) {
        str = undefined;

        flags = FNONE;
        width = -1;
        precision = -1;
        next_arg = undefined;

        end_slice = i;

        i++;

        switch (format_string.charAt(i)) {
        case '%':
          begin_slice = i;
        case '':
        case '\n':
        case '\0':
          i++;
          continue;
        }

        format_sequence: for (; i < len; i++) {
          switch (format_string.charAt(i)) {

          case ' ':
            CHECK_FOR_FLAGS();
            flags |= FSPACE;
            continue format_sequence;

          case '#':
            CHECK_FOR_FLAGS();
            flags |= FSHARP;
            continue format_sequence;

          case '+':
            CHECK_FOR_FLAGS();
            flags |= FPLUS;
            continue format_sequence;

          case '-':
            CHECK_FOR_FLAGS();
            flags |= FMINUS;
            continue format_sequence;

          case '0':
            CHECK_FOR_FLAGS();
            flags |= FZERO;
            continue format_sequence;

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            tmp_num = READ_NUM('width');
            if (format_string.charAt(i + 1) === '$') {
              if (i + 2 === len) {
                str = '%';
                i++;
                break format_sequence;
              }
              if (next_arg !== undefined) {
                self.$raise($scope.get('ArgumentError'), "value given twice - %" + (tmp_num) + "$")
              }
              next_arg = GET_POS_ARG(tmp_num);
              i++;
            } else {
              CHECK_FOR_WIDTH();
              flags |= FWIDTH;
              width = tmp_num;
            }
            continue format_sequence;

          case '<':
          case '\{':
            closing_brace_char = (format_string.charAt(i) === '<' ? '>' : '\}');
            hash_parameter_key = '';

            i++;

            for (;; i++) {
              if (i === len) {
                self.$raise($scope.get('ArgumentError'), "malformed name - unmatched parenthesis")
              }
              if (format_string.charAt(i) === closing_brace_char) {

                if (pos_arg_num > 0) {
                  self.$raise($scope.get('ArgumentError'), "named " + (hash_parameter_key) + " after unnumbered(" + (pos_arg_num) + ")")
                }
                if (pos_arg_num === -1) {
                  self.$raise($scope.get('ArgumentError'), "named " + (hash_parameter_key) + " after numbered")
                }
                pos_arg_num = -2;

                if (args[0] === undefined || !args[0].$$is_hash) {
                  self.$raise($scope.get('ArgumentError'), "one hash required")
                }

                next_arg = (args[0]).$fetch(hash_parameter_key);

                if (closing_brace_char === '>') {
                  continue format_sequence;
                } else {
                  str = next_arg.toString();
                  if (precision !== -1) { str = str.slice(0, precision); }
                  if (flags&FMINUS) {
                    while (str.length < width) { str = str + ' '; }
                  } else {
                    while (str.length < width) { str = ' ' + str; }
                  }
                  break format_sequence;
                }
              }
              hash_parameter_key += format_string.charAt(i);
            }

          case '*':
            i++;
            CHECK_FOR_WIDTH();
            flags |= FWIDTH;
            width = READ_NUM_AFTER_ASTER('width');
            if (width < 0) {
              flags |= FMINUS;
              width = -width;
            }
            continue format_sequence;

          case '.':
            if (flags&FPREC0) {
              self.$raise($scope.get('ArgumentError'), "precision given twice")
            }
            flags |= FPREC|FPREC0;
            precision = 0;
            i++;
            if (format_string.charAt(i) === '*') {
              i++;
              precision = READ_NUM_AFTER_ASTER('precision');
              if (precision < 0) {
                flags &= ~FPREC;
              }
              continue format_sequence;
            }
            precision = READ_NUM('precision');
            continue format_sequence;

          case 'd':
          case 'i':
          case 'u':
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              str = (-arg).toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            break format_sequence;

          case 'b':
          case 'B':
          case 'o':
          case 'x':
          case 'X':
            switch (format_string.charAt(i)) {
            case 'b':
            case 'B':
              base_number = 2;
              base_prefix = '0b';
              base_neg_zero_regex = /^1+/;
              base_neg_zero_digit = '1';
              break;
            case 'o':
              base_number = 8;
              base_prefix = '0';
              base_neg_zero_regex = /^3?7+/;
              base_neg_zero_digit = '7';
              break;
            case 'x':
            case 'X':
              base_number = 16;
              base_prefix = '0x';
              base_neg_zero_regex = /^f+/;
              base_neg_zero_digit = 'f';
              break;
            }
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString(base_number);
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0) - ((flags&FSHARP && arg !== 0) ? base_prefix.length : 0)) { str = '0' + str; }
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (flags&FPLUS || flags&FSPACE) {
                str = (-arg).toString(base_number);
                while (str.length < precision) { str = '0' + str; }
                if (flags&FMINUS) {
                  if (flags&FSHARP) { str = base_prefix + str; }
                  str = '-' + str;
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 1 - (flags&FSHARP ? 2 : 0)) { str = '0' + str; }
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                  } else {
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              } else {
                str = (arg >>> 0).toString(base_number).replace(base_neg_zero_regex, base_neg_zero_digit);
                while (str.length < precision - 2) { str = base_neg_zero_digit + str; }
                if (flags&FMINUS) {
                  str = '..' + str;
                  if (flags&FSHARP) { str = base_prefix + str; }
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 2 - (flags&FSHARP ? base_prefix.length : 0)) { str = base_neg_zero_digit + str; }
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                  } else {
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase()) {
              str = str.toUpperCase();
            }
            break format_sequence;

          case 'f':
          case 'e':
          case 'E':
          case 'g':
          case 'G':
            arg = self.$Float(GET_ARG());
            if (arg >= 0 || isNaN(arg)) {
              if (arg === Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = arg.toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = arg.toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = arg.toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = arg.toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== Infinity && !isNaN(arg)) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (arg === -Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = (-arg).toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = (-arg).toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = (-arg).toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = (-arg).toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== -Infinity) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase() && arg !== Infinity && arg !== -Infinity && !isNaN(arg)) {
              str = str.toUpperCase();
            }
            str = str.replace(/([eE][-+]?)([0-9])$/, '$10$2');
            break format_sequence;

          case 'a':
          case 'A':
            // Not implemented because there are no specs for this field type.
            self.$raise($scope.get('NotImplementedError'), "`A` and `a` format field types are not implemented in Opal yet")

          case 'c':
            arg = GET_ARG();
            if ((arg)['$respond_to?']("to_ary")) { arg = (arg).$to_ary()[0]; }
            if ((arg)['$respond_to?']("to_str")) {
              str = (arg).$to_str();
            } else {
              str = String.fromCharCode($scope.get('Opal').$coerce_to(arg, $scope.get('Integer'), "to_int"));
            }
            if (str.length !== 1) {
              self.$raise($scope.get('ArgumentError'), "%c requires a character")
            }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 'p':
            str = (GET_ARG()).$inspect();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 's':
            str = (GET_ARG()).$to_s();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          default:
            self.$raise($scope.get('ArgumentError'), "malformed format string - %" + (format_string.charAt(i)))
          }
        }

        if (str === undefined) {
          self.$raise($scope.get('ArgumentError'), "malformed format string - %")
        }

        result += format_string.slice(begin_slice, end_slice) + str;
        begin_slice = i + 1;
      }

      if ($gvars.DEBUG && pos_arg_num >= 0 && seq_arg_num < args.length) {
        self.$raise($scope.get('ArgumentError'), "too many arguments for format string")
      }

      return result + format_string.slice(begin_slice);
    ;
    });

    Opal.defn(self, '$hash', function() {
      var self = this;

      return self.$__id__();
    });

    Opal.defn(self, '$initialize_copy', function(other) {
      var self = this;

      return nil;
    });

    Opal.defn(self, '$inspect', function() {
      var self = this;

      return self.$to_s();
    });

    Opal.defn(self, '$instance_of?', function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($scope.get('TypeError'), "class or module required");
      }

      return self.$$class === klass;
    ;
    });

    Opal.defn(self, '$instance_variable_defined?', function(name) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      return Opal.hasOwnProperty.call(self, name.substr(1));
    });

    Opal.defn(self, '$instance_variable_get', function(name) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      
      var ivar = self[Opal.ivar(name.substr(1))];

      return ivar == null ? nil : ivar;
    
    });

    Opal.defn(self, '$instance_variable_set', function(name, value) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      return self[Opal.ivar(name.substr(1))] = value;
    });

    Opal.defn(self, '$remove_instance_variable', function(name) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      
      var key = Opal.ivar(name.substr(1)),
          val;
      if (self.hasOwnProperty(key)) {
        val = self[key];
        delete self[key];
        return val;
      }
    
      return self.$raise($scope.get('NameError'), "instance variable " + (name) + " not defined");
    });

    Opal.defn(self, '$instance_variables', function() {
      var self = this;

      
      var result = [], ivar;

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {
          if (name.substr(-1) === '$') {
            ivar = name.slice(0, name.length - 1);
          } else {
            ivar = name;
          }
          result.push('@' + ivar);
        }
      }

      return result;
    
    });

    Opal.defn(self, '$Integer', function(value, base) {
      var self = this;

      
      var i, str, base_digits;

      if (!value.$$is_string) {
        if (base !== undefined) {
          self.$raise($scope.get('ArgumentError'), "base specified for non string value")
        }
        if (value === nil) {
          self.$raise($scope.get('TypeError'), "can't convert nil into Integer")
        }
        if (value.$$is_number) {
          if (value === Infinity || value === -Infinity || isNaN(value)) {
            self.$raise($scope.get('FloatDomainError'), value)
          }
          return Math.floor(value);
        }
        if (value['$respond_to?']("to_int")) {
          i = value.$to_int();
          if (i !== nil) {
            return i;
          }
        }
        return $scope.get('Opal')['$coerce_to!'](value, $scope.get('Integer'), "to_i");
      }

      if (base === undefined) {
        base = 0;
      } else {
        base = $scope.get('Opal').$coerce_to(base, $scope.get('Integer'), "to_int");
        if (base === 1 || base < 0 || base > 36) {
          self.$raise($scope.get('ArgumentError'), "invalid radix " + (base))
        }
      }

      str = value.toLowerCase();

      str = str.replace(/(\d)_(?=\d)/g, '$1');

      str = str.replace(/^(\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {
        switch (flag) {
        case '0b':
          if (base === 0 || base === 2) {
            base = 2;
            return head;
          }
        case '0':
        case '0o':
          if (base === 0 || base === 8) {
            base = 8;
            return head;
          }
        case '0d':
          if (base === 0 || base === 10) {
            base = 10;
            return head;
          }
        case '0x':
          if (base === 0 || base === 16) {
            base = 16;
            return head;
          }
        }
        self.$raise($scope.get('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      });

      base = (base === 0 ? 10 : base);

      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));

      if (!(new RegExp('^\\s*[+-]?[' + base_digits + ']+\\s*$')).test(str)) {
        self.$raise($scope.get('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      }

      i = parseInt(str, base);

      if (isNaN(i)) {
        self.$raise($scope.get('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      }

      return i;
    ;
    });

    Opal.defn(self, '$Float', function(value) {
      var self = this;

      
      var str;

      if (value === nil) {
        self.$raise($scope.get('TypeError'), "can't convert nil into Float")
      }

      if (value.$$is_string) {
        str = value.toString();

        str = str.replace(/(\d)_(?=\d)/g, '$1');

        //Special case for hex strings only:
        if (/^\s*[-+]?0[xX][0-9a-fA-F]+\s*$/.test(str)) {
          return self.$Integer(str);
        }

        if (!/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/.test(str)) {
          self.$raise($scope.get('ArgumentError'), "invalid value for Float(): \"" + (value) + "\"")
        }

        return parseFloat(str);
      }

      return $scope.get('Opal')['$coerce_to!'](value, $scope.get('Float'), "to_f");
    
    });

    Opal.defn(self, '$Hash', function(arg) {
      var $a, $b, self = this;

      if ((($a = ((($b = arg['$nil?']()) !== false && $b !== nil) ? $b : arg['$==']([]))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return $hash2([], {})};
      if ((($a = $scope.get('Hash')['$==='](arg)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return arg};
      return $scope.get('Opal')['$coerce_to!'](arg, $scope.get('Hash'), "to_hash");
    });

    Opal.defn(self, '$is_a?', function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($scope.get('TypeError'), "class or module required");
      }

      return Opal.is_a(self, klass);
    ;
    });

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$lambda', TMP_6 = function() {
      var self = this, $iter = TMP_6.$$p, block = $iter || nil;

      TMP_6.$$p = null;
      block.$$is_lambda = true;
      return block;
    });

    Opal.defn(self, '$load', function(file) {
      var self = this;

      file = $scope.get('Opal')['$coerce_to!'](file, $scope.get('String'), "to_str");
      return Opal.load(file);
    });

    Opal.defn(self, '$loop', TMP_7 = function() {
      var self = this, $iter = TMP_7.$$p, block = $iter || nil;

      TMP_7.$$p = null;
      
      while (true) {
        if (block() === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    });

    Opal.defn(self, '$nil?', function() {
      var self = this;

      return false;
    });

    Opal.alias(self, 'object_id', '__id__');

    Opal.defn(self, '$printf', function() {
      var $a, self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      if ((($a = $rb_gt(args.$length(), 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$print(($a = self).$format.apply($a, Opal.to_a(args)))};
      return nil;
    });

    Opal.defn(self, '$proc', TMP_8 = function() {
      var self = this, $iter = TMP_8.$$p, block = $iter || nil;

      TMP_8.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise($scope.get('ArgumentError'), "tried to create Proc object without a block")
      };
      block.$$is_lambda = false;
      return block;
    });

    Opal.defn(self, '$puts', function() {
      var $a, self = this, $splat_index = nil;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var strs = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        strs[$splat_index] = arguments[$splat_index + 0];
      }
      return ($a = $gvars.stdout).$puts.apply($a, Opal.to_a(strs));
    });

    Opal.defn(self, '$p', function() {
      var $a, $b, TMP_9, self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      ($a = ($b = args).$each, $a.$$p = (TMP_9 = function(obj){var self = TMP_9.$$s || this;
        if ($gvars.stdout == null) $gvars.stdout = nil;
if (obj == null) obj = nil;
      return $gvars.stdout.$puts(obj.$inspect())}, TMP_9.$$s = self, TMP_9), $a).call($b);
      if ((($a = $rb_le(args.$length(), 1)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return args['$[]'](0)
        } else {
        return args
      };
    });

    Opal.defn(self, '$print', function() {
      var $a, self = this, $splat_index = nil;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var strs = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        strs[$splat_index] = arguments[$splat_index + 0];
      }
      return ($a = $gvars.stdout).$print.apply($a, Opal.to_a(strs));
    });

    Opal.defn(self, '$warn', function() {
      var $a, $b, self = this, $splat_index = nil;
      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var strs = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        strs[$splat_index] = arguments[$splat_index + 0];
      }
      if ((($a = ((($b = $gvars.VERBOSE['$nil?']()) !== false && $b !== nil) ? $b : strs['$empty?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return ($a = $gvars.stderr).$puts.apply($a, Opal.to_a(strs))
      };
    });

    Opal.defn(self, '$raise', function(exception, string, _backtrace) {
      var self = this;
      if ($gvars["!"] == null) $gvars["!"] = nil;

      if (string == null) {
        string = nil
      }
      if (_backtrace == null) {
        _backtrace = nil
      }
      
      if (exception == null && $gvars["!"] !== nil) {
        throw $gvars["!"];
      }
      if (exception == null) {
        exception = $scope.get('RuntimeError').$new();
      }
      else if (exception.$$is_string) {
        exception = $scope.get('RuntimeError').$new(exception);
      }
      // using respond_to? and not an undefined check to avoid method_missing matching as true
      else if (exception.$$is_class && exception['$respond_to?']("exception")) {
        exception = exception.$exception(string);
      }
      else if (exception['$kind_of?']($scope.get('Exception'))) {
        // exception is fine
      }
      else {
        exception = $scope.get('TypeError').$new("exception class/object expected");
      }

      if ($gvars["!"] !== nil) {
        Opal.exceptions.push($gvars["!"]);
      }

      $gvars["!"] = exception;

      throw exception;
    ;
    });

    Opal.alias(self, 'fail', 'raise');

    Opal.defn(self, '$rand', function(max) {
      var self = this;

      
      if (max === undefined) {
        return Math.random();
      }
      else if (max.$$is_range) {
        var min = max.begin, range = max.end - min;
        if(!max.exclude) range++;

        return self.$rand(range) + min;
      }
      else {
        return Math.floor(Math.random() *
          Math.abs($scope.get('Opal').$coerce_to(max, $scope.get('Integer'), "to_int")));
      }
    
    });

    Opal.defn(self, '$respond_to?', function(name, include_all) {
      var $a, self = this;

      if (include_all == null) {
        include_all = false
      }
      if ((($a = self['$respond_to_missing?'](name, include_all)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      
      var body = self['$' + name];

      if (typeof(body) === "function" && !body.$$stub) {
        return true;
      }
    
      return false;
    });

    Opal.defn(self, '$respond_to_missing?', function(method_name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false
      }
      return false;
    });

    Opal.defn(self, '$require', function(file) {
      var self = this;

      file = $scope.get('Opal')['$coerce_to!'](file, $scope.get('String'), "to_str");
      return Opal.require(file);
    });

    Opal.defn(self, '$require_relative', function(file) {
      var self = this;

      $scope.get('Opal')['$try_convert!'](file, $scope.get('String'), "to_str");
      file = $scope.get('File').$expand_path($scope.get('File').$join(Opal.current_file, "..", file));
      return Opal.require(file);
    });

    Opal.defn(self, '$require_tree', function(path) {
      var self = this;

      path = $scope.get('File').$expand_path(path);
      if (path['$=='](".")) {
        path = ""};
      
      for (var name in Opal.modules) {
        if ((name)['$start_with?'](path)) {
          Opal.require(name);
        }
      }
    ;
      return nil;
    });

    Opal.alias(self, 'send', '__send__');

    Opal.alias(self, 'public_send', '__send__');

    Opal.defn(self, '$singleton_class', function() {
      var self = this;

      return Opal.get_singleton_class(self);
    });

    Opal.defn(self, '$sleep', function(seconds) {
      var self = this;

      if (seconds == null) {
        seconds = nil
      }
      
      if (seconds === nil) {
        self.$raise($scope.get('TypeError'), "can't convert NilClass into time interval")
      }
      if (!seconds.$$is_number) {
        self.$raise($scope.get('TypeError'), "can't convert " + (seconds.$class()) + " into time interval")
      }
      if (seconds < 0) {
        self.$raise($scope.get('ArgumentError'), "time interval must be positive")
      }
      var t = new Date();
      while (new Date() - t <= seconds * 1000);
      return seconds;
    ;
    });

    Opal.alias(self, 'sprintf', 'format');

    Opal.alias(self, 'srand', 'rand');

    Opal.defn(self, '$String', function(str) {
      var $a, self = this;

      return ((($a = $scope.get('Opal')['$coerce_to?'](str, $scope.get('String'), "to_str")) !== false && $a !== nil) ? $a : $scope.get('Opal')['$coerce_to!'](str, $scope.get('String'), "to_s"));
    });

    Opal.defn(self, '$tap', TMP_10 = function() {
      var self = this, $iter = TMP_10.$$p, block = $iter || nil;

      TMP_10.$$p = null;
      if (Opal.yield1(block, self) === $breaker) return $breaker.$v;
      return self;
    });

    Opal.defn(self, '$to_proc', function() {
      var self = this;

      return self;
    });

    Opal.defn(self, '$to_s', function() {
      var self = this;

      return "#<" + (self.$class()) + ":0x" + (self.$__id__().$to_s(16)) + ">";
    });

    Opal.defn(self, '$catch', TMP_11 = function(sym) {
      var $a, self = this, $iter = TMP_11.$$p, $yield = $iter || nil, e = nil;

      TMP_11.$$p = null;
      try {
      return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a
      } catch ($err) {if (Opal.rescue($err, [$scope.get('UncaughtThrowError')])) {e = $err;
        try {
          if (e.$sym()['$=='](sym)) {
            return e.$arg()};
          return self.$raise();
        } finally {
          Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
        }
        }else { throw $err; }
      };
    });

    Opal.defn(self, '$throw', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      return self.$raise($scope.get('UncaughtThrowError').$new(args));
    });
  })($scope.base);
  return (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$include($scope.get('Kernel'))
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/error"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$new', '$clone', '$to_s', '$empty?', '$class', '$attr_reader', '$[]', '$>', '$length', '$inspect']);
  (function($base, $super) {
    function $Exception(){};
    var self = $Exception = $klass($base, $super, 'Exception', $Exception);

    var def = self.$$proto, $scope = self.$$scope;

    def.message = nil;
    Opal.defs(self, '$new', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      
      var message = (args.length > 0) ? args[0] : nil;
      var err = new self.$$alloc(message);

      if (Error.captureStackTrace) {
        Error.captureStackTrace(err);
      }

      err.name = self.$$name;
      err.$initialize.apply(err, args);
      return err;
    
    });

    Opal.defs(self, '$exception', function() {
      var $a, self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      return ($a = self).$new.apply($a, Opal.to_a(args));
    });

    Opal.defn(self, '$initialize', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      return self.message = (args.length > 0) ? args[0] : nil;
    });

    Opal.defn(self, '$backtrace', function() {
      var self = this;

      
      var backtrace = self.stack;

      if (typeof(backtrace) === 'string') {
        return backtrace.split("\n").slice(0, 15);
      }
      else if (backtrace) {
        return backtrace.slice(0, 15);
      }

      return [];
    
    });

    Opal.defn(self, '$exception', function(str) {
      var self = this;

      if (str == null) {
        str = nil
      }
      
      if (str === nil || self === str) {
        return self;
      }
      
      var cloned = self.$clone();
      cloned.message = str;
      return cloned;
    
    });

    Opal.defn(self, '$message', function() {
      var self = this;

      return self.$to_s();
    });

    Opal.defn(self, '$inspect', function() {
      var $a, self = this, as_str = nil;

      as_str = self.$to_s();
      if ((($a = as_str['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$class().$to_s()
        } else {
        return "#<" + (self.$class().$to_s()) + ": " + (self.$to_s()) + ">"
      };
    });

    return (Opal.defn(self, '$to_s', function() {
      var $a, $b, self = this;

      return ((($a = (($b = self.message, $b !== false && $b !== nil ?self.message.$to_s() : $b))) !== false && $a !== nil) ? $a : self.$class().$to_s());
    }), nil) && 'to_s';
  })($scope.base, Error);
  (function($base, $super) {
    function $ScriptError(){};
    var self = $ScriptError = $klass($base, $super, 'ScriptError', $ScriptError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $SyntaxError(){};
    var self = $SyntaxError = $klass($base, $super, 'SyntaxError', $SyntaxError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('ScriptError'));
  (function($base, $super) {
    function $LoadError(){};
    var self = $LoadError = $klass($base, $super, 'LoadError', $LoadError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('ScriptError'));
  (function($base, $super) {
    function $NotImplementedError(){};
    var self = $NotImplementedError = $klass($base, $super, 'NotImplementedError', $NotImplementedError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('ScriptError'));
  (function($base, $super) {
    function $SystemExit(){};
    var self = $SystemExit = $klass($base, $super, 'SystemExit', $SystemExit);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $NoMemoryError(){};
    var self = $NoMemoryError = $klass($base, $super, 'NoMemoryError', $NoMemoryError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $SignalException(){};
    var self = $SignalException = $klass($base, $super, 'SignalException', $SignalException);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $Interrupt(){};
    var self = $Interrupt = $klass($base, $super, 'Interrupt', $Interrupt);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $SecurityError(){};
    var self = $SecurityError = $klass($base, $super, 'SecurityError', $SecurityError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $StandardError(){};
    var self = $StandardError = $klass($base, $super, 'StandardError', $StandardError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $ZeroDivisionError(){};
    var self = $ZeroDivisionError = $klass($base, $super, 'ZeroDivisionError', $ZeroDivisionError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('NameError'));
  (function($base, $super) {
    function $RuntimeError(){};
    var self = $RuntimeError = $klass($base, $super, 'RuntimeError', $RuntimeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $LocalJumpError(){};
    var self = $LocalJumpError = $klass($base, $super, 'LocalJumpError', $LocalJumpError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $TypeError(){};
    var self = $TypeError = $klass($base, $super, 'TypeError', $TypeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $ArgumentError(){};
    var self = $ArgumentError = $klass($base, $super, 'ArgumentError', $ArgumentError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $IndexError(){};
    var self = $IndexError = $klass($base, $super, 'IndexError', $IndexError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $StopIteration(){};
    var self = $StopIteration = $klass($base, $super, 'StopIteration', $StopIteration);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('IndexError'));
  (function($base, $super) {
    function $KeyError(){};
    var self = $KeyError = $klass($base, $super, 'KeyError', $KeyError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('IndexError'));
  (function($base, $super) {
    function $RangeError(){};
    var self = $RangeError = $klass($base, $super, 'RangeError', $RangeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $FloatDomainError(){};
    var self = $FloatDomainError = $klass($base, $super, 'FloatDomainError', $FloatDomainError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('RangeError'));
  (function($base, $super) {
    function $IOError(){};
    var self = $IOError = $klass($base, $super, 'IOError', $IOError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $SystemCallError(){};
    var self = $SystemCallError = $klass($base, $super, 'SystemCallError', $SystemCallError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base) {
    var $Errno, self = $Errno = $module($base, 'Errno');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $EINVAL(){};
      var self = $EINVAL = $klass($base, $super, 'EINVAL', $EINVAL);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      return (Opal.defs(self, '$new', TMP_1 = function() {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        return Opal.find_super_dispatcher(self, 'new', TMP_1, null, $EINVAL).apply(self, ["Invalid argument"]);
      }), nil) && 'new'
    })($scope.base, $scope.get('SystemCallError'))
  })($scope.base);
  (function($base, $super) {
    function $UncaughtThrowError(){};
    var self = $UncaughtThrowError = $klass($base, $super, 'UncaughtThrowError', $UncaughtThrowError);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    def.sym = nil;
    self.$attr_reader("sym", "arg");

    return (Opal.defn(self, '$initialize', TMP_2 = function(args) {
      var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

      TMP_2.$$p = null;
      self.sym = args['$[]'](0);
      if ((($a = $rb_gt(args.$length(), 1)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.arg = args['$[]'](1)};
      return Opal.find_super_dispatcher(self, 'initialize', TMP_2, null).apply(self, ["uncaught throw " + (self.sym.$inspect())]);
    }), nil) && 'initialize';
  })($scope.base, $scope.get('ArgumentError'));
  (function($base, $super) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.$$proto, $scope = self.$$scope, TMP_3;

    self.$attr_reader("name");

    return (Opal.defn(self, '$initialize', TMP_3 = function(message, name) {
      var self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

      if (name == null) {
        name = nil
      }
      TMP_3.$$p = null;
      Opal.find_super_dispatcher(self, 'initialize', TMP_3, null).apply(self, [message]);
      return self.name = name;
    }), nil) && 'initialize';
  })($scope.base, null);
  return (function($base, $super) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.$$proto, $scope = self.$$scope, TMP_4;

    self.$attr_reader("args");

    return (Opal.defn(self, '$initialize', TMP_4 = function(message, name, args) {
      var self = this, $iter = TMP_4.$$p, $yield = $iter || nil;

      if (args == null) {
        args = []
      }
      TMP_4.$$p = null;
      Opal.find_super_dispatcher(self, 'initialize', TMP_4, null).apply(self, [message, name]);
      return self.args = args;
    }), nil) && 'initialize';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/constants"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.cdecl($scope, 'RUBY_PLATFORM', "opal");
  Opal.cdecl($scope, 'RUBY_ENGINE', "opal");
  Opal.cdecl($scope, 'RUBY_VERSION', "2.2.3");
  Opal.cdecl($scope, 'RUBY_ENGINE_VERSION', "0.9.4");
  Opal.cdecl($scope, 'RUBY_RELEASE_DATE', "2016-06-21");
  Opal.cdecl($scope, 'RUBY_PATCHLEVEL', 0);
  Opal.cdecl($scope, 'RUBY_REVISION', 0);
  Opal.cdecl($scope, 'RUBY_COPYRIGHT', "opal - Copyright (C) 2013-2015 Adam Beynon");
  return Opal.cdecl($scope, 'RUBY_DESCRIPTION', "opal " + ($scope.get('RUBY_ENGINE_VERSION')) + " (" + ($scope.get('RUBY_RELEASE_DATE')) + " revision " + ($scope.get('RUBY_REVISION')) + ")");
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/base"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("corelib/runtime");
  self.$require("corelib/helpers");
  self.$require("corelib/module");
  self.$require("corelib/class");
  self.$require("corelib/basic_object");
  self.$require("corelib/kernel");
  self.$require("corelib/error");
  return self.$require("corelib/constants");
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/nil"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$class', '$new', '$>', '$length', '$Rational']);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    def.$$meta = self;

    Opal.defn(self, '$!', function() {
      var self = this;

      return true;
    });

    Opal.defn(self, '$&', function(other) {
      var self = this;

      return false;
    });

    Opal.defn(self, '$|', function(other) {
      var self = this;

      return other !== false && other !== nil;
    });

    Opal.defn(self, '$^', function(other) {
      var self = this;

      return other !== false && other !== nil;
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return other === nil;
    });

    Opal.defn(self, '$dup', function() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't dup " + (self.$class()));
    });

    Opal.defn(self, '$clone', function() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't clone " + (self.$class()));
    });

    Opal.defn(self, '$inspect', function() {
      var self = this;

      return "nil";
    });

    Opal.defn(self, '$nil?', function() {
      var self = this;

      return true;
    });

    Opal.defn(self, '$singleton_class', function() {
      var self = this;

      return $scope.get('NilClass');
    });

    Opal.defn(self, '$to_a', function() {
      var self = this;

      return [];
    });

    Opal.defn(self, '$to_h', function() {
      var self = this;

      return Opal.hash();
    });

    Opal.defn(self, '$to_i', function() {
      var self = this;

      return 0;
    });

    Opal.alias(self, 'to_f', 'to_i');

    Opal.defn(self, '$to_s', function() {
      var self = this;

      return "";
    });

    Opal.defn(self, '$to_c', function() {
      var self = this;

      return $scope.get('Complex').$new(0, 0);
    });

    Opal.defn(self, '$rationalize', function() {
      var $a, self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      if ((($a = $rb_gt(args.$length(), 1)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'))};
      return self.$Rational(0, 1);
    });

    Opal.defn(self, '$to_r', function() {
      var self = this;

      return self.$Rational(0, 1);
    });

    return (Opal.defn(self, '$instance_variables', function() {
      var self = this;

      return [];
    }), nil) && 'instance_variables';
  })($scope.base, null);
  return Opal.cdecl($scope, 'NIL', nil);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/boolean"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$class']);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope;

    def.$$is_boolean = true;

    def.$$meta = self;

    Opal.defn(self, '$__id__', function() {
      var self = this;

      return self.valueOf() ? 2 : 0;
    });

    Opal.alias(self, 'object_id', '__id__');

    Opal.defn(self, '$!', function() {
      var self = this;

      return self != true;
    });

    Opal.defn(self, '$&', function(other) {
      var self = this;

      return (self == true) ? (other !== false && other !== nil) : false;
    });

    Opal.defn(self, '$|', function(other) {
      var self = this;

      return (self == true) ? true : (other !== false && other !== nil);
    });

    Opal.defn(self, '$^', function(other) {
      var self = this;

      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return (self == true) === other.valueOf();
    });

    Opal.alias(self, 'equal?', '==');

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$singleton_class', function() {
      var self = this;

      return $scope.get('Boolean');
    });

    Opal.defn(self, '$to_s', function() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    });

    Opal.defn(self, '$dup', function() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't dup " + (self.$class()));
    });

    return (Opal.defn(self, '$clone', function() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't clone " + (self.$class()));
    }), nil) && 'clone';
  })($scope.base, Boolean);
  Opal.cdecl($scope, 'TrueClass', $scope.get('Boolean'));
  Opal.cdecl($scope, 'FalseClass', $scope.get('Boolean'));
  Opal.cdecl($scope, 'TRUE', true);
  return Opal.cdecl($scope, 'FALSE', false);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/comparable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);
  return (function($base) {
    var $Comparable, self = $Comparable = $module($base, 'Comparable');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$normalize', function(what) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](what)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return what};
      if ((($a = $rb_gt(what, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return 1};
      if ((($a = $rb_lt(what, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return -1};
      return 0;
    });

    Opal.defn(self, '$==', function(other) {
      var $a, self = this, cmp = nil;

      try {
      if ((($a = self['$equal?'](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return true};
        
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    
        if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        return $scope.get('Comparable').$normalize(cmp) == 0;
      } catch ($err) {if (Opal.rescue($err, [$scope.get('StandardError')])) {
        try {
          return false
        } finally {
          Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
        }
        }else { throw $err; }
      };
    });

    Opal.defn(self, '$>', function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) > 0;
    });

    Opal.defn(self, '$>=', function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) >= 0;
    });

    Opal.defn(self, '$<', function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) < 0;
    });

    Opal.defn(self, '$<=', function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) <= 0;
    });

    Opal.defn(self, '$between?', function(min, max) {
      var self = this;

      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    });
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/regexp"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$nil?', '$[]', '$raise', '$escape', '$options', '$to_str', '$new', '$join', '$coerce_to!', '$!', '$match', '$coerce_to?', '$begin', '$coerce_to', '$call', '$=~', '$attr_reader', '$===', '$inspect', '$to_a']);
  (function($base, $super) {
    function $RegexpError(){};
    var self = $RegexpError = $klass($base, $super, 'RegexpError', $RegexpError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    Opal.cdecl($scope, 'IGNORECASE', 1);

    Opal.cdecl($scope, 'MULTILINE', 4);

    def.$$is_regexp = true;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1;

      Opal.defn(self, '$allocate', TMP_1 = function() {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil, allocated = nil, $zuper = nil, $zuper_index = nil;

        TMP_1.$$p = null;
        $zuper = [];
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        allocated = Opal.find_super_dispatcher(self, 'allocate', TMP_1, $iter).apply(self, $zuper);
        allocated.uninitialized = true;
        return allocated;
      });
      Opal.defn(self, '$escape', function(string) {
        var self = this;

        
        return string.replace(/([-[\]\/{}()*+?.^$\\| ])/g, '\\$1')
                     .replace(/[\n]/g, '\\n')
                     .replace(/[\r]/g, '\\r')
                     .replace(/[\f]/g, '\\f')
                     .replace(/[\t]/g, '\\t');
      
      });
      Opal.defn(self, '$last_match', function(n) {
        var $a, self = this;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        if (n == null) {
          n = nil
        }
        if ((($a = n['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $gvars["~"]
          } else {
          return $gvars["~"]['$[]'](n)
        };
      });
      Opal.alias(self, 'quote', 'escape');
      Opal.defn(self, '$union', function() {
        var self = this, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var parts = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          parts[$splat_index] = arguments[$splat_index + 0];
        }
        
        var is_first_part_array, quoted_validated, part, options, each_part_options;
        if (parts.length == 0) {
          return /(?!)/;
        }
        // cover the 2 arrays passed as arguments case
        is_first_part_array = parts[0].$$is_array;
        if (parts.length > 1 && is_first_part_array) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of Array into String")
        }        
        // deal with splat issues (related to https://github.com/opal/opal/issues/858)
        if (is_first_part_array) {
          parts = parts[0];
        }
        options = undefined;
        quoted_validated = [];
        for (var i=0; i < parts.length; i++) {
          part = parts[i];
          if (part.$$is_string) {
            quoted_validated.push(self.$escape(part));
          }
          else if (part.$$is_regexp) {
            each_part_options = (part).$options();
            if (options != undefined && options != each_part_options) {
              self.$raise($scope.get('TypeError'), "All expressions must use the same options")
            }
            options = each_part_options;
            quoted_validated.push('('+part.source+')');
          }
          else {
            quoted_validated.push(self.$escape((part).$to_str()));
          }
        }
      
        return self.$new((quoted_validated).$join("|"), options);
      });
      return (Opal.defn(self, '$new', function(regexp, options) {
        var self = this;

        
        if (regexp.$$is_regexp) {
          return new RegExp(regexp);
        }

        regexp = $scope.get('Opal')['$coerce_to!'](regexp, $scope.get('String'), "to_str");

        if (regexp.charAt(regexp.length - 1) === '\\') {
          self.$raise($scope.get('RegexpError'), "too short escape sequence: /" + (regexp) + "/")
        }

        if (options === undefined || options['$!']()) {
          return new RegExp(regexp);
        }

        if (options.$$is_number) {
          var temp = '';
          if ($scope.get('IGNORECASE') & options) { temp += 'i'; }
          if ($scope.get('MULTILINE')  & options) { temp += 'm'; }
          options = temp;
        }
        else {
          options = 'i';
        }

        return new RegExp(regexp, options);
      ;
      }), nil) && 'new';
    })(Opal.get_singleton_class(self));

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return other.constructor == RegExp && self.toString() === other.toString();
    });

    Opal.defn(self, '$===', function(string) {
      var self = this;

      return self.$match($scope.get('Opal')['$coerce_to?'](string, $scope.get('String'), "to_str")) !== nil;
    });

    Opal.defn(self, '$=~', function(string) {
      var $a, self = this;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      return ($a = self.$match(string), $a !== false && $a !== nil ?$gvars["~"].$begin(0) : $a);
    });

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$inspect', function() {
      var self = this;

      return self.toString();
    });

    Opal.defn(self, '$match', TMP_2 = function(string, pos) {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      TMP_2.$$p = null;
      
      if (self.uninitialized) {
        self.$raise($scope.get('TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        pos = 0;
      } else {
        pos = $scope.get('Opal').$coerce_to(pos, $scope.get('Integer'), "to_int");
      }

      if (string === nil) {
        return $gvars["~"] = nil;
      }

      string = $scope.get('Opal').$coerce_to(string, $scope.get('String'), "to_str");

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return $gvars["~"] = nil;
        }
      }

      var source = self.source;
      var flags = 'g';
      // m flag + a . in Ruby will match white space, but in JS, it only matches beginning/ending of lines, so we get the equivalent here
      if (self.multiline) {
        source = source.replace('.', "[\\s\\S]");
        flags += 'm';
      }

      // global RegExp maintains state, so not using self/this
      var md, re = new RegExp(source, flags + (self.ignoreCase ? 'i' : ''));

      while (true) {
        md = re.exec(string);
        if (md === null) {
          return $gvars["~"] = nil;
        }
        if (md.index >= pos) {
          $gvars["~"] = $scope.get('MatchData').$new(re, md)
          return block === nil ? $gvars["~"] : block.$call($gvars["~"]);
        }
        re.lastIndex = md.index + 1;
      }
    ;
    });

    Opal.defn(self, '$~', function() {
      var self = this;
      if ($gvars._ == null) $gvars._ = nil;

      return self['$=~']($gvars._);
    });

    Opal.defn(self, '$source', function() {
      var self = this;

      return self.source;
    });

    Opal.defn(self, '$options', function() {
      var self = this;

      
      if (self.uninitialized) {
        self.$raise($scope.get('TypeError'), "uninitialized Regexp")
      }
      var result = 0;
      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx
      if (self.multiline) {
        result |= $scope.get('MULTILINE');
      }
      if (self.ignoreCase) {
        result |= $scope.get('IGNORECASE');
      }
      return result;
    ;
    });

    Opal.defn(self, '$casefold?', function() {
      var self = this;

      return self.ignoreCase;
    });

    return Opal.alias(self, 'to_s', 'source');
  })($scope.base, RegExp);
  return (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope;

    def.matches = nil;
    self.$attr_reader("post_match", "pre_match", "regexp", "string");

    Opal.defn(self, '$initialize', function(regexp, match_groups) {
      var self = this;

      $gvars["~"] = self;
      self.regexp = regexp;
      self.begin = match_groups.index;
      self.string = match_groups.input;
      self.pre_match = match_groups.input.slice(0, match_groups.index);
      self.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);
      self.matches = [];
      
      for (var i = 0, length = match_groups.length; i < length; i++) {
        var group = match_groups[i];

        if (group == null) {
          self.matches.push(nil);
        }
        else {
          self.matches.push(group);
        }
      }
    
    });

    Opal.defn(self, '$[]', function() {
      var $a, self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      return ($a = self.matches)['$[]'].apply($a, Opal.to_a(args));
    });

    Opal.defn(self, '$offset', function(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($scope.get('ArgumentError'), "MatchData#offset only supports 0th element")
      }
      return [self.begin, self.begin + self.matches[n].length];
    ;
    });

    Opal.defn(self, '$==', function(other) {
      var $a, $b, $c, $d, self = this;

      if ((($a = $scope.get('MatchData')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = ($c = ($d = self.string == other.string, $d !== false && $d !== nil ?self.regexp.toString() == other.regexp.toString() : $d), $c !== false && $c !== nil ?self.pre_match == other.pre_match : $c), $b !== false && $b !== nil ?self.post_match == other.post_match : $b), $a !== false && $a !== nil ?self.begin == other.begin : $a);
    });

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$begin', function(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($scope.get('ArgumentError'), "MatchData#begin only supports 0th element")
      }
      return self.begin;
    ;
    });

    Opal.defn(self, '$end', function(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($scope.get('ArgumentError'), "MatchData#end only supports 0th element")
      }
      return self.begin + self.matches[n].length;
    ;
    });

    Opal.defn(self, '$captures', function() {
      var self = this;

      return self.matches.slice(1);
    });

    Opal.defn(self, '$inspect', function() {
      var self = this;

      
      var str = "#<MatchData " + (self.matches[0]).$inspect();

      for (var i = 1, length = self.matches.length; i < length; i++) {
        str += " " + i + ":" + (self.matches[i]).$inspect();
      }

      return str + ">";
    ;
    });

    Opal.defn(self, '$length', function() {
      var self = this;

      return self.matches.length;
    });

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$to_a', function() {
      var self = this;

      return self.matches;
    });

    Opal.defn(self, '$to_s', function() {
      var self = this;

      return self.matches[0];
    });

    return (Opal.defn(self, '$values_at', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      
      var i, a, index, values = [];

      for (i = 0; i < args.length; i++) {

        if (args[i].$$is_range) {
          a = (args[i]).$to_a();
          a.unshift(i, 1);
          Array.prototype.splice.apply(args, a);
        }

        index = $scope.get('Opal')['$coerce_to!'](args[i], $scope.get('Integer'), "to_int");

        if (index < 0) {
          index += self.matches.length;
          if (index < 0) {
            values.push(nil);
            continue;
          }
        }

        values.push(self.matches[index]);
      }

      return values;
    
    }), nil) && 'values_at';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/string"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$coerce_to', '$raise', '$===', '$format', '$to_s', '$respond_to?', '$to_str', '$<=>', '$==', '$=~', '$new', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$copy_singleton_methods', '$initialize_clone', '$initialize_dup', '$enum_for', '$size', '$chomp', '$[]', '$to_i', '$class', '$each_line', '$match', '$captures', '$proc', '$shift', '$__send__', '$succ', '$escape']);
  self.$require("corelib/comparable");
  self.$require("corelib/regexp");
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_11;

    def.length = nil;
    self.$include($scope.get('Comparable'));

    def.$$is_string = true;

    Opal.defn(self, '$__id__', function() {
      var self = this;

      return self.toString();
    });

    Opal.alias(self, 'object_id', '__id__');

    Opal.defs(self, '$try_convert', function(what) {
      var self = this;

      return $scope.get('Opal')['$coerce_to?'](what, $scope.get('String'), "to_str");
    });

    Opal.defs(self, '$new', function(str) {
      var self = this;

      if (str == null) {
        str = ""
      }
      str = $scope.get('Opal').$coerce_to(str, $scope.get('String'), "to_str");
      return new String(str);
    });

    Opal.defn(self, '$initialize', function(str) {
      var self = this;

      
      if (str === undefined) {
        return self;
      }
    
      return self.$raise($scope.get('NotImplementedError'), "Mutable strings are not supported in Opal.");
    });

    Opal.defn(self, '$%', function(data) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](data)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = self).$format.apply($a, [self].concat(Opal.to_a(data)))
        } else {
        return self.$format(self, data)
      };
    });

    Opal.defn(self, '$*', function(count) {
      var self = this;

      
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative argument")
      }

      if (count === 0) {
        return '';
      }

      var result = '',
          string = self.toString();

      // All credit for the bit-twiddling magic code below goes to Mozilla
      // polyfill implementation of String.prototype.repeat() posted here:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat

      if (string.length * count >= 1 << 28) {
        self.$raise($scope.get('RangeError'), "multiply count must not overflow maximum string size")
      }

      for (;;) {
        if ((count & 1) === 1) {
          result += string;
        }
        count >>>= 1;
        if (count === 0) {
          break;
        }
        string += string;
      }

      return result;
    ;
    });

    Opal.defn(self, '$+', function(other) {
      var self = this;

      other = $scope.get('Opal').$coerce_to(other, $scope.get('String'), "to_str");
      return self + other.$to_s();
    });

    Opal.defn(self, '$<=>', function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_str().$to_s();
        return self > other ? 1 : (self < other ? -1 : 0);
        } else {
        
        var cmp = other['$<=>'](self);

        if (cmp === nil) {
          return nil;
        }
        else {
          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);
        }
      ;
      };
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      
      if (other.$$is_string) {
        return self.toString() === other.toString();
      }
      if ($scope.get('Opal')['$respond_to?'](other, "to_str")) {
        return other['$=='](self);
      }
      return false;
    ;
    });

    Opal.alias(self, 'eql?', '==');

    Opal.alias(self, '===', '==');

    Opal.defn(self, '$=~', function(other) {
      var self = this;

      
      if (other.$$is_string) {
        self.$raise($scope.get('TypeError'), "type mismatch: String given");
      }

      return other['$=~'](self);
    ;
    });

    Opal.defn(self, '$[]', function(index, length) {
      var self = this;

      
      var size = self.length, exclude;

      if (index.$$is_range) {
        exclude = index.exclude;
        length  = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");
        index   = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int");

        if (Math.abs(index) > size) {
          return nil;
        }

        if (index < 0) {
          index += size;
        }

        if (length < 0) {
          length += size;
        }

        if (!exclude) {
          length += 1;
        }

        length = length - index;

        if (length < 0) {
          length = 0;
        }

        return self.substr(index, length);
      }


      if (index.$$is_string) {
        if (length != null) {
          self.$raise($scope.get('TypeError'))
        }
        return self.indexOf(index) !== -1 ? index : nil;
      }


      if (index.$$is_regexp) {
        var match = self.match(index);

        if (match === null) {
          $gvars["~"] = nil
          return nil;
        }

        $gvars["~"] = $scope.get('MatchData').$new(index, match)

        if (length == null) {
          return match[0];
        }

        length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

        if (length < 0 && -length < match.length) {
          return match[length += match.length];
        }

        if (length >= 0 && length < match.length) {
          return match[length];
        }

        return nil;
      }


      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += size;
      }

      if (length == null) {
        if (index >= size || index < 0) {
          return nil;
        }
        return self.substr(index, 1);
      }

      length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

      if (length < 0) {
        return nil;
      }

      if (index > size || index < 0) {
        return nil;
      }

      return self.substr(index, length);
    
    });

    Opal.alias(self, 'byteslice', '[]');

    Opal.defn(self, '$capitalize', function() {
      var self = this;

      return self.charAt(0).toUpperCase() + self.substr(1).toLowerCase();
    });

    Opal.defn(self, '$casecmp', function(other) {
      var self = this;

      other = $scope.get('Opal').$coerce_to(other, $scope.get('String'), "to_str").$to_s();
      
      var ascii_only = /^[\x00-\x7F]*$/;
      if (ascii_only.test(self) && ascii_only.test(other)) {
        self = self.toLowerCase();
        other = other.toLowerCase();
      }
    
      return self['$<=>'](other);
    });

    Opal.defn(self, '$center', function(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " "
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var ljustified = self.$ljust($rb_divide(($rb_plus(width, self.length)), 2).$ceil(), padstr),
          rjustified = self.$rjust($rb_divide(($rb_plus(width, self.length)), 2).$floor(), padstr);

      return rjustified + ljustified.slice(self.length);
    ;
    });

    Opal.defn(self, '$chars', TMP_1 = function() {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$each_char().$to_a()
      };
      return ($a = ($b = self).$each_char, $a.$$p = block.$to_proc(), $a).call($b);
    });

    Opal.defn(self, '$chomp', function(separator) {
      var $a, self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      if ((($a = separator === nil || self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self};
      separator = $scope.get('Opal')['$coerce_to!'](separator, $scope.get('String'), "to_str").$to_s();
      
      if (separator === "\n") {
        return self.replace(/\r?\n?$/, '');
      }
      else if (separator === "") {
        return self.replace(/(\r?\n)+$/, '');
      }
      else if (self.length > separator.length) {
        var tail = self.substr(self.length - separator.length, separator.length);

        if (tail === separator) {
          return self.substr(0, self.length - separator.length);
        }
      }
    
      return self;
    });

    Opal.defn(self, '$chop', function() {
      var self = this;

      
      var length = self.length;

      if (length <= 1) {
        return "";
      }

      if (self.charAt(length - 1) === "\n" && self.charAt(length - 2) === "\r") {
        return self.substr(0, length - 2);
      }
      else {
        return self.substr(0, length - 1);
      }
    
    });

    Opal.defn(self, '$chr', function() {
      var self = this;

      return self.charAt(0);
    });

    Opal.defn(self, '$clone', function() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    });

    Opal.defn(self, '$dup', function() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$initialize_dup(self);
      return copy;
    });

    Opal.defn(self, '$count', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var sets = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        sets[$splat_index] = arguments[$splat_index + 0];
      }
      
      if (sets.length === 0) {
        self.$raise($scope.get('ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return 0;
      }
      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;
    ;
    });

    Opal.defn(self, '$delete', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var sets = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        sets[$splat_index] = arguments[$splat_index + 0];
      }
      
      if (sets.length === 0) {
        self.$raise($scope.get('ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp(char_class, 'g'), '');
    ;
    });

    Opal.defn(self, '$downcase', function() {
      var self = this;

      return self.toLowerCase();
    });

    Opal.defn(self, '$each_char', TMP_2 = function() {
      var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return self.$size()}, TMP_3.$$s = self, TMP_3), $a).call($b, "each_char")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self.charAt(i));

        if (value === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    });

    Opal.defn(self, '$each_line', TMP_4 = function(separator) {
      var self = this, $iter = TMP_4.$$p, block = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      TMP_4.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_line", separator)
      };
      
      var value;

      if (separator === nil) {
        value = Opal.yield1(block, self);

        if (value === $breaker) {
          return value.$v;
        }
        else {
          return self;
        }
      }

      separator = $scope.get('Opal').$coerce_to(separator, $scope.get('String'), "to_str")

      var a, i, n, length, chomped, trailing, splitted;

      if (separator.length === 0) {
        for (a = self.split(/(\n{2,})/), i = 0, n = a.length; i < n; i += 2) {
          if (a[i] || a[i + 1]) {
            value = Opal.yield1(block, (a[i] || "") + (a[i + 1] || ""));

            if (value === $breaker) {
              return value.$v;
            }
          }
        }

        return self;
      }

      chomped  = self.$chomp(separator);
      trailing = self.length != chomped.length;
      splitted = chomped.split(separator);

      for (i = 0, length = splitted.length; i < length; i++) {
        if (i < length - 1 || trailing) {
          value = Opal.yield1(block, splitted[i] + separator);

          if (value === $breaker) {
            return value.$v;
          }
        }
        else {
          value = Opal.yield1(block, splitted[i]);

          if (value === $breaker) {
            return value.$v;
          }
        }
      }
    
      return self;
    });

    Opal.defn(self, '$empty?', function() {
      var self = this;

      return self.length === 0;
    });

    Opal.defn(self, '$end_with?', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var suffixes = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        suffixes[$splat_index] = arguments[$splat_index + 0];
      }
      
      for (var i = 0, length = suffixes.length; i < length; i++) {
        var suffix = $scope.get('Opal').$coerce_to(suffixes[i], $scope.get('String'), "to_str").$to_s();

        if (self.length >= suffix.length &&
            self.substr(self.length - suffix.length, suffix.length) == suffix) {
          return true;
        }
      }
    
      return false;
    });

    Opal.alias(self, 'eql?', '==');

    Opal.alias(self, 'equal?', '===');

    Opal.defn(self, '$gsub', TMP_5 = function(pattern, replacement) {
      var self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      
      if (replacement === undefined && block === nil) {
        return self.$enum_for("gsub", pattern);
      }

      var result = '', match_data = nil, index = 0, match, _replacement;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while (true) {
        match = pattern.exec(self);

        if (match === null) {
          $gvars["~"] = nil
          result += self.slice(index);
          break;
        }

        match_data = $scope.get('MatchData').$new(pattern, match);

        if (replacement === undefined) {
          _replacement = block(match[0]);
        }
        else if (replacement.$$is_hash) {
          _replacement = (replacement)['$[]'](match[0]).$to_s();
        }
        else {
          if (!replacement.$$is_string) {
            replacement = $scope.get('Opal').$coerce_to(replacement, $scope.get('String'), "to_str");
          }
          _replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');
        }

        if (pattern.lastIndex === match.index) {
          result += (_replacement + self.slice(index, match.index + 1))
          pattern.lastIndex += 1;
        }
        else {
          result += (self.slice(index, match.index) + _replacement)
        }
        index = pattern.lastIndex;
      }

      $gvars["~"] = match_data
      return result;
    ;
    });

    Opal.defn(self, '$hash', function() {
      var self = this;

      return self.toString();
    });

    Opal.defn(self, '$hex', function() {
      var self = this;

      return self.$to_i(16);
    });

    Opal.defn(self, '$include?', function(other) {
      var $a, self = this;

      
      if (other.$$is_string) {
        return self.indexOf(other) !== -1;
      }
    
      if ((($a = other['$respond_to?']("to_str")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "no implicit conversion of " + (other.$class()) + " into String")
      };
      return self.indexOf(other.$to_str()) !== -1;
    });

    Opal.defn(self, '$index', function(search, offset) {
      var self = this;

      
      var index,
          match,
          regex;

      if (offset === undefined) {
        offset = 0;
      } else {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        regex = new RegExp(search.source, 'gm' + (search.ignoreCase ? 'i' : ''));
        while (true) {
          match = regex.exec(self);
          if (match === null) {
            $gvars["~"] = nil;
            index = -1;
            break;
          }
          if (match.index >= offset) {
            $gvars["~"] = $scope.get('MatchData').$new(regex, match)
            index = match.index;
            break;
          }
          regex.lastIndex = match.index + 1;
        }
      } else {
        search = $scope.get('Opal').$coerce_to(search, $scope.get('String'), "to_str");
        if (search.length === 0 && offset > self.length) {
          index = -1;
        } else {
          index = self.indexOf(search, offset);
        }
      }

      return index === -1 ? nil : index;
    
    });

    Opal.defn(self, '$inspect', function() {
      var self = this;

      
      var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta = {
            '\u0007': '\\a',
            '\u001b': '\\e',
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '\v': '\\v',
            '"' : '\\"',
            '\\': '\\\\'
          },
          escaped = self.replace(escapable, function (chr) {
            return meta[chr] || '\\u' + ('0000' + chr.charCodeAt(0).toString(16).toUpperCase()).slice(-4);
          });
      return '"' + escaped.replace(/\#[\$\@\{]/g, '\\$&') + '"';
    
    });

    Opal.defn(self, '$intern', function() {
      var self = this;

      return self;
    });

    Opal.defn(self, '$lines', TMP_6 = function(separator) {
      var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      TMP_6.$$p = null;
      e = ($a = ($b = self).$each_line, $a.$$p = block.$to_proc(), $a).call($b, separator);
      if (block !== false && block !== nil) {
        return self
        } else {
        return e.$to_a()
      };
    });

    Opal.defn(self, '$length', function() {
      var self = this;

      return self.length;
    });

    Opal.defn(self, '$ljust', function(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " "
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var index  = -1,
          result = "";

      width -= self.length;

      while (++index < width) {
        result += padstr;
      }

      return self + result.slice(0, width);
    
    });

    Opal.defn(self, '$lstrip', function() {
      var self = this;

      return self.replace(/^\s*/, '');
    });

    Opal.defn(self, '$match', TMP_7 = function(pattern, pos) {
      var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

      TMP_7.$$p = null;
      if ((($a = ((($b = $scope.get('String')['$==='](pattern)) !== false && $b !== nil) ? $b : pattern['$respond_to?']("to_str"))) !== nil && (!$a.$$is_boolean || $a == true))) {
        pattern = $scope.get('Regexp').$new(pattern.$to_str())};
      if ((($a = $scope.get('Regexp')['$==='](pattern)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return ($a = ($b = pattern).$match, $a.$$p = block.$to_proc(), $a).call($b, self, pos);
    });

    Opal.defn(self, '$next', function() {
      var self = this;

      
      var i = self.length;
      if (i === 0) {
        return '';
      }
      var result = self;
      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);
      var carry = false;
      var code;
      while (i--) {
        code = self.charCodeAt(i);
        if ((code >= 48 && code <= 57) ||
          (code >= 65 && code <= 90) ||
          (code >= 97 && code <= 122)) {
          switch (code) {
          case 57:
            carry = true;
            code = 48;
            break;
          case 90:
            carry = true;
            code = 65;
            break;
          case 122:
            carry = true;
            code = 97;
            break;
          default:
            carry = false;
            code += 1;
          }
        } else {
          if (first_alphanum_char_index === -1) {
            if (code === 255) {
              carry = true;
              code = 0;
            } else {
              carry = false;
              code += 1;
            }
          } else {
            carry = true;
          }
        }
        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);
        if (carry && (i === 0 || i === first_alphanum_char_index)) {
          switch (code) {
          case 65:
            break;
          case 97:
            break;
          default:
            code += 1;
          }
          if (i === 0) {
            result = String.fromCharCode(code) + result;
          } else {
            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);
          }
          carry = false;
        }
        if (!carry) {
          break;
        }
      }
      return result;
    
    });

    Opal.defn(self, '$oct', function() {
      var self = this;

      
      var result,
          string = self,
          radix = 8;

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x') {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          radix = 2;
          break;
        case '0':
        case '0o':
          radix = 8;
          break;
        case '0d':
          radix = 10;
          break;
        case '0x':
          radix = 16;
          break;
        }
        return head + tail;
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    
    });

    Opal.defn(self, '$ord', function() {
      var self = this;

      return self.charCodeAt(0);
    });

    Opal.defn(self, '$partition', function(sep) {
      var self = this;

      
      var i, m;

      if (sep.$$is_regexp) {
        m = sep.exec(self);
        if (m === null) {
          i = -1;
        } else {
          $scope.get('MatchData').$new(sep, m);
          sep = m[0];
          i = m.index;
        }
      } else {
        sep = $scope.get('Opal').$coerce_to(sep, $scope.get('String'), "to_str");
        i = self.indexOf(sep);
      }

      if (i === -1) {
        return [self, '', ''];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    });

    Opal.defn(self, '$reverse', function() {
      var self = this;

      return self.split('').reverse().join('');
    });

    Opal.defn(self, '$rindex', function(search, offset) {
      var self = this;

      
      var i, m, r, _m;

      if (offset === undefined) {
        offset = self.length;
      } else {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        m = null;
        r = new RegExp(search.source, 'gm' + (search.ignoreCase ? 'i' : ''));
        while (true) {
          _m = r.exec(self);
          if (_m === null || _m.index > offset) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }
        if (m === null) {
          $gvars["~"] = nil
          i = -1;
        } else {
          $scope.get('MatchData').$new(r, m);
          i = m.index;
        }
      } else {
        search = $scope.get('Opal').$coerce_to(search, $scope.get('String'), "to_str");
        i = self.lastIndexOf(search, offset);
      }

      return i === -1 ? nil : i;
    
    });

    Opal.defn(self, '$rjust', function(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " "
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var chars     = Math.floor(width - self.length),
          patterns  = Math.floor(chars / padstr.length),
          result    = Array(patterns + 1).join(padstr),
          remaining = chars - result.length;

      return result + padstr.slice(0, remaining) + self;
    
    });

    Opal.defn(self, '$rpartition', function(sep) {
      var self = this;

      
      var i, m, r, _m;

      if (sep.$$is_regexp) {
        m = null;
        r = new RegExp(sep.source, 'gm' + (sep.ignoreCase ? 'i' : ''));

        while (true) {
          _m = r.exec(self);
          if (_m === null) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }

        if (m === null) {
          i = -1;
        } else {
          $scope.get('MatchData').$new(r, m);
          sep = m[0];
          i = m.index;
        }

      } else {
        sep = $scope.get('Opal').$coerce_to(sep, $scope.get('String'), "to_str");
        i = self.lastIndexOf(sep);
      }

      if (i === -1) {
        return ['', '', self];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    });

    Opal.defn(self, '$rstrip', function() {
      var self = this;

      return self.replace(/[\s\u0000]*$/, '');
    });

    Opal.defn(self, '$scan', TMP_8 = function(pattern) {
      var self = this, $iter = TMP_8.$$p, block = $iter || nil;

      TMP_8.$$p = null;
      
      var result = [],
          match_data = nil,
          match;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while ((match = pattern.exec(self)) != null) {
        match_data = $scope.get('MatchData').$new(pattern, match);
        if (block === nil) {
          match.length == 1 ? result.push(match[0]) : result.push((match_data).$captures());
        } else {
          match.length == 1 ? block(match[0]) : block.call(self, (match_data).$captures());
        }
        if (pattern.lastIndex === match.index) {
          pattern.lastIndex += 1;
        }
      }

      $gvars["~"] = match_data

      return (block !== nil ? self : result);
    
    });

    Opal.alias(self, 'size', 'length');

    Opal.alias(self, 'slice', '[]');

    Opal.defn(self, '$split', function(pattern, limit) {
      var $a, self = this;
      if ($gvars[";"] == null) $gvars[";"] = nil;

      
      if (self.length === 0) {
        return [];
      }

      if (limit === undefined) {
        limit = 0;
      } else {
        limit = $scope.get('Opal')['$coerce_to!'](limit, $scope.get('Integer'), "to_int");
        if (limit === 1) {
          return [self];
        }
      }

      if (pattern === undefined || pattern === nil) {
        pattern = ((($a = $gvars[";"]) !== false && $a !== nil) ? $a : " ");
      }

      var result = [],
          string = self.toString(),
          index = 0,
          match,
          i;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str").$to_s();
        if (pattern === ' ') {
          pattern = /\s+/gm;
          string = string.replace(/^\s+/, '');
        } else {
          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
        }
      }

      result = string.split(pattern);

      if (result.length === 1 && result[0] === string) {
        return result;
      }

      while ((i = result.indexOf(undefined)) !== -1) {
        result.splice(i, 1);
      }

      if (limit === 0) {
        while (result[result.length - 1] === '') {
          result.length -= 1;
        }
        return result;
      }

      match = pattern.exec(string);

      if (limit < 0) {
        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {
          for (i = 0; i < match.length; i++) {
            result.push('');
          }
        }
        return result;
      }

      if (match !== null && match[0] === '') {
        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));
        return result;
      }

      i = 0;
      while (match !== null) {
        i++;
        index = pattern.lastIndex;
        if (i + 1 === limit) {
          break;
        }
        match = pattern.exec(string);
      }

      result.splice(limit - 1, result.length - 1, string.slice(index));
      return result;
    
    });

    Opal.defn(self, '$squeeze', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var sets = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        sets[$splat_index] = arguments[$splat_index + 0];
      }
      
      if (sets.length === 0) {
        return self.replace(/(.)\1+/g, '$1');
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp('(' + char_class + ')\\1+', 'g'), '$1');
    
    });

    Opal.defn(self, '$start_with?', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var prefixes = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        prefixes[$splat_index] = arguments[$splat_index + 0];
      }
      
      for (var i = 0, length = prefixes.length; i < length; i++) {
        var prefix = $scope.get('Opal').$coerce_to(prefixes[i], $scope.get('String'), "to_str").$to_s();

        if (self.indexOf(prefix) === 0) {
          return true;
        }
      }

      return false;
    
    });

    Opal.defn(self, '$strip', function() {
      var self = this;

      return self.replace(/^\s*/, '').replace(/[\s\u0000]*$/, '');
    });

    Opal.defn(self, '$sub', TMP_9 = function(pattern, replacement) {
      var self = this, $iter = TMP_9.$$p, block = $iter || nil;

      TMP_9.$$p = null;
      
      if (!pattern.$$is_regexp) {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
      }

      var result = pattern.exec(self);

      if (result === null) {
        $gvars["~"] = nil
        return self.toString();
      }

      $scope.get('MatchData').$new(pattern, result)

      if (replacement === undefined) {
        if (block === nil) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (1 for 2)")
        }
        return self.slice(0, result.index) + block(result[0]) + self.slice(result.index + result[0].length);
      }

      if (replacement.$$is_hash) {
        return self.slice(0, result.index) + (replacement)['$[]'](result[0]).$to_s() + self.slice(result.index + result[0].length);
      }

      replacement = $scope.get('Opal').$coerce_to(replacement, $scope.get('String'), "to_str");

      replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
        if (slashes.length % 2 === 0) {
          return original;
        }
        switch (command) {
        case "+":
          for (var i = result.length - 1; i > 0; i--) {
            if (result[i] !== undefined) {
              return slashes.slice(1) + result[i];
            }
          }
          return '';
        case "&": return slashes.slice(1) + result[0];
        case "`": return slashes.slice(1) + self.slice(0, result.index);
        case "'": return slashes.slice(1) + self.slice(result.index + result[0].length);
        default:  return slashes.slice(1) + (result[command] || '');
        }
      }).replace(/\\\\/g, '\\');

      return self.slice(0, result.index) + replacement + self.slice(result.index + result[0].length);
    ;
    });

    Opal.alias(self, 'succ', 'next');

    Opal.defn(self, '$sum', function(n) {
      var self = this;

      if (n == null) {
        n = 16
      }
      
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");

      var result = 0,
          length = self.length,
          i = 0;

      for (; i < length; i++) {
        result += self.charCodeAt(i);
      }

      if (n <= 0) {
        return result;
      }

      return result & (Math.pow(2, n) - 1);
    ;
    });

    Opal.defn(self, '$swapcase', function() {
      var self = this;

      
      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {
        return $1 ? $0.toUpperCase() : $0.toLowerCase();
      });

      if (self.constructor === String) {
        return str;
      }

      return self.$class().$new(str);
    
    });

    Opal.defn(self, '$to_f', function() {
      var self = this;

      
      if (self.charAt(0) === '_') {
        return 0;
      }

      var result = parseFloat(self.replace(/_/g, ''));

      if (isNaN(result) || result == Infinity || result == -Infinity) {
        return 0;
      }
      else {
        return result;
      }
    
    });

    Opal.defn(self, '$to_i', function(base) {
      var self = this;

      if (base == null) {
        base = 10
      }
      
      var result,
          string = self.toLowerCase(),
          radix = $scope.get('Opal').$coerce_to(base, $scope.get('Integer'), "to_int");

      if (radix === 1 || radix < 0 || radix > 36) {
        self.$raise($scope.get('ArgumentError'), "invalid radix " + (radix))
      }

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          if (radix === 0 || radix === 2) {
            radix = 2;
            return head + tail;
          }
          break;
        case '0':
        case '0o':
          if (radix === 0 || radix === 8) {
            radix = 8;
            return head + tail;
          }
          break;
        case '0d':
          if (radix === 0 || radix === 10) {
            radix = 10;
            return head + tail;
          }
          break;
        case '0x':
          if (radix === 0 || radix === 16) {
            radix = 16;
            return head + tail;
          }
          break;
        }
        return original
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    ;
    });

    Opal.defn(self, '$to_proc', function() {
      var $a, $b, TMP_10, self = this, sym = nil;

      sym = self;
      return ($a = ($b = self).$proc, $a.$$p = (TMP_10 = function(args){var self = TMP_10.$$s || this, block, $a, $b, obj = nil;
args = $slice.call(arguments, 0);
        block = TMP_10.$$p || nil, TMP_10.$$p = null;
      if ((($a = args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "no receiver given")};
        obj = args.$shift();
        return ($a = ($b = obj).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [sym].concat(Opal.to_a(args)));}, TMP_10.$$s = self, TMP_10), $a).call($b);
    });

    Opal.defn(self, '$to_s', function() {
      var self = this;

      return self.toString();
    });

    Opal.alias(self, 'to_str', 'to_s');

    Opal.alias(self, 'to_sym', 'intern');

    Opal.defn(self, '$tr', function(from, to) {
      var self = this;

      from = $scope.get('Opal').$coerce_to(from, $scope.get('String'), "to_str").$to_s();
      to = $scope.get('Opal').$coerce_to(to, $scope.get('String'), "to_str").$to_s();
      
      if (from.length == 0 || from === to) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_from.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }

      var new_str = ''
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch];
        if (inverse) {
          new_str += (sub == null ? global_sub : ch);
        }
        else {
          new_str += (sub != null ? sub : ch);
        }
      }
      return new_str;
    
    });

    Opal.defn(self, '$tr_s', function(from, to) {
      var self = this;

      from = $scope.get('Opal').$coerce_to(from, $scope.get('String'), "to_str").$to_s();
      to = $scope.get('Opal').$coerce_to(to, $scope.get('String'), "to_str").$to_s();
      
      if (from.length == 0) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_from.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }
      var new_str = ''
      var last_substitute = null
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch]
        if (inverse) {
          if (sub == null) {
            if (last_substitute == null) {
              new_str += global_sub;
              last_substitute = true;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
        else {
          if (sub != null) {
            if (last_substitute == null || last_substitute !== sub) {
              new_str += sub;
              last_substitute = sub;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
      }
      return new_str;
    
    });

    Opal.defn(self, '$upcase', function() {
      var self = this;

      return self.toUpperCase();
    });

    Opal.defn(self, '$upto', TMP_11 = function(stop, excl) {
      var self = this, $iter = TMP_11.$$p, block = $iter || nil;

      if (excl == null) {
        excl = false
      }
      TMP_11.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("upto", stop, excl)
      };
      stop = $scope.get('Opal').$coerce_to(stop, $scope.get('String'), "to_str");
      
      var a, b, s = self.toString(), value;

      if (s.length === 1 && stop.length === 1) {

        a = s.charCodeAt(0);
        b = stop.charCodeAt(0);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          value = block(String.fromCharCode(a));
          if (value === $breaker) { return $breaker.$v; }

          a += 1;
        }

      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {

        a = parseInt(s, 10);
        b = parseInt(stop, 10);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          value = block(a.toString());
          if (value === $breaker) { return $breaker.$v; }

          a += 1;
        }

      } else {

        while (s.length <= stop.length && s <= stop) {
          if (excl && s === stop) {
            break;
          }

          value = block(s);
          if (value === $breaker) { return $breaker.$v; }

          s = (s).$succ();
        }

      }
      return self;
    
    });

    
    function char_class_from_char_sets(sets) {
      function explode_sequences_in_character_set(set) {
        var result = '',
            i, len = set.length,
            curr_char,
            skip_next_dash,
            char_code_from,
            char_code_upto,
            char_code;
        for (i = 0; i < len; i++) {
          curr_char = set.charAt(i);
          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {
            char_code_from = set.charCodeAt(i - 1);
            char_code_upto = set.charCodeAt(i + 1);
            if (char_code_from > char_code_upto) {
              self.$raise($scope.get('ArgumentError'), "invalid range \"" + (char_code_from) + "-" + (char_code_upto) + "\" in string transliteration")
            }
            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {
              result += String.fromCharCode(char_code);
            }
            skip_next_dash = true;
            i++;
          } else {
            skip_next_dash = (curr_char === '\\');
            result += curr_char;
          }
        }
        return result;
      }

      function intersection(setA, setB) {
        if (setA.length === 0) {
          return setB;
        }
        var result = '',
            i, len = setA.length,
            chr;
        for (i = 0; i < len; i++) {
          chr = setA.charAt(i);
          if (setB.indexOf(chr) !== -1) {
            result += chr;
          }
        }
        return result;
      }

      var i, len, set, neg, chr, tmp,
          pos_intersection = '',
          neg_intersection = '';

      for (i = 0, len = sets.length; i < len; i++) {
        set = $scope.get('Opal').$coerce_to(sets[i], $scope.get('String'), "to_str");
        neg = (set.charAt(0) === '^' && set.length > 1);
        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);
        if (neg) {
          neg_intersection = intersection(neg_intersection, set);
        } else {
          pos_intersection = intersection(pos_intersection, set);
        }
      }

      if (pos_intersection.length > 0 && neg_intersection.length > 0) {
        tmp = '';
        for (i = 0, len = pos_intersection.length; i < len; i++) {
          chr = pos_intersection.charAt(i);
          if (neg_intersection.indexOf(chr) === -1) {
            tmp += chr;
          }
        }
        pos_intersection = tmp;
        neg_intersection = '';
      }

      if (pos_intersection.length > 0) {
        return '[' + $scope.get('Regexp').$escape(pos_intersection) + ']';
      }

      if (neg_intersection.length > 0) {
        return '[^' + $scope.get('Regexp').$escape(neg_intersection) + ']';
      }

      return null;
    }
  
  })($scope.base, String);
  return Opal.cdecl($scope, 'Symbol', $scope.get('String'));
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/enumerable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$raise', '$new', '$yield', '$dup', '$enum_for', '$enumerator_size', '$flatten', '$map', '$==', '$destructure', '$respond_to?', '$coerce_to!', '$>', '$*', '$nil?', '$coerce_to', '$try_convert', '$<', '$+', '$-', '$ceil', '$/', '$size', '$===', '$<<', '$[]', '$[]=', '$inspect', '$__send__', '$compare', '$<=>', '$proc', '$call', '$to_a', '$lambda', '$sort!', '$map!', '$first', '$zip']);
  return (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_6, TMP_8, TMP_11, TMP_12, TMP_14, TMP_15, TMP_16, TMP_18, TMP_19, TMP_21, TMP_23, TMP_25, TMP_27, TMP_28, TMP_29, TMP_31, TMP_33, TMP_34, TMP_36, TMP_37, TMP_39, TMP_41, TMP_42, TMP_43, TMP_44, TMP_46, TMP_48, TMP_50, TMP_52, TMP_54, TMP_59, TMP_60;

    Opal.defn(self, '$all?', TMP_1 = function() {
      var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      
      var result = true;

      if (block !== nil) {
        self.$each.$$p = function() {
          var value = Opal.yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) === nil || ($a.$$is_boolean && $a == false))) {
            result = false;
            return $breaker;
          }
        };
      }
      else {
        self.$each.$$p = function(obj) {
          if (arguments.length == 1 && (($a = obj) === nil || ($a.$$is_boolean && $a == false))) {
            result = false;
            return $breaker;
          }
        };
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$any?', TMP_2 = function() {
      var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      
      var result = false;

      if (block !== nil) {
        self.$each.$$p = function() {
          var value = Opal.yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = true;
            return $breaker;
          }
        };
      }
      else {
        self.$each.$$p = function(obj) {
          if (arguments.length != 1 || (($a = obj) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = true;
            return $breaker;
          }
        }
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$chunk', TMP_3 = function(state) {
      var $a, $b, TMP_4, self = this, $iter = TMP_3.$$p, original_block = $iter || nil;

      TMP_3.$$p = null;
      if (original_block !== false && original_block !== nil) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "no block given")
      };
      return ($a = ($b = Opal.get('Enumerator')).$new, $a.$$p = (TMP_4 = function(yielder){var self = TMP_4.$$s || this, $a, $b, TMP_5;
if (yielder == null) yielder = nil;
      
        var block, previous = nil, accumulate = [];

        if (state == undefined || state === nil) {
          block = original_block;
        } else {
          block = ($a = ($b = $scope.get('Proc')).$new, $a.$$p = (TMP_5 = function(val){var self = TMP_5.$$s || this;
if (val == null) val = nil;
        return original_block.$yield(val, state.$dup())}, TMP_5.$$s = self, TMP_5), $a).call($b)
        }

        function releaseAccumulate() {
          if (accumulate.length > 0) {
            yielder.$yield(previous, accumulate)
          }
        }

        self.$each.$$p = function(value) {
          var key = Opal.yield1(block, value);

          if (key === $breaker) {
            return $breaker;
          }

          if (key === nil) {
            releaseAccumulate();
            accumulate = [];
            previous = nil;
          } else {
            if (previous === nil || previous === key) {
              accumulate.push(value);
            } else {
              releaseAccumulate();
              accumulate = [value];
            }

            previous = key;
          }
        }

        self.$each();

        releaseAccumulate();
      ;}, TMP_4.$$s = self, TMP_4), $a).call($b);
    });

    Opal.defn(self, '$collect', TMP_6 = function() {
      var $a, $b, TMP_7, self = this, $iter = TMP_6.$$p, block = $iter || nil;

      TMP_6.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

        return self.$enumerator_size()}, TMP_7.$$s = self, TMP_7), $a).call($b, "collect")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var value = Opal.yieldX(block, arguments);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        result.push(value);
      };

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$collect_concat', TMP_8 = function() {
      var $a, $b, TMP_9, $c, TMP_10, self = this, $iter = TMP_8.$$p, block = $iter || nil;

      TMP_8.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

        return self.$enumerator_size()}, TMP_9.$$s = self, TMP_9), $a).call($b, "collect_concat")
      };
      return ($a = ($c = self).$map, $a.$$p = (TMP_10 = function(item){var self = TMP_10.$$s || this, $a;
if (item == null) item = nil;
      return $a = Opal.yield1(block, item), $a === $breaker ? $a : $a}, TMP_10.$$s = self, TMP_10), $a).call($c).$flatten(1);
    });

    Opal.defn(self, '$count', TMP_11 = function(object) {
      var $a, self = this, $iter = TMP_11.$$p, block = $iter || nil;

      TMP_11.$$p = null;
      
      var result = 0;

      if (object != null) {
        block = function() {
          return $scope.get('Opal').$destructure(arguments)['$=='](object);
        };
      }
      else if (block === nil) {
        block = function() { return true; };
      }

      self.$each.$$p = function() {
        var value = Opal.yieldX(block, arguments);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
          result++;
        }
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$cycle', TMP_12 = function(n) {
      var $a, $b, TMP_13, self = this, $iter = TMP_12.$$p, block = $iter || nil;

      if (n == null) {
        n = nil
      }
      TMP_12.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $a;

        if (n['$=='](nil)) {
            if ((($a = self['$respond_to?']("size")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return (($scope.get('Float')).$$scope.get('INFINITY'))
              } else {
              return nil
            }
            } else {
            n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
            if ((($a = $rb_gt(n, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $rb_times(self.$enumerator_size(), n)
              } else {
              return 0
            };
          }}, TMP_13.$$s = self, TMP_13), $a).call($b, "cycle", n)
      };
      if ((($a = n['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
        if ((($a = n <= 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
      };
      
      var result,
          all = [], i, length, value;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        all.push(param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }

      if (all.length === 0) {
        return nil;
      }

      if (n === nil) {
        while (true) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }
        }
      }
      else {
        while (n > 1) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }

          n--;
        }
      }
    
    });

    Opal.defn(self, '$detect', TMP_14 = function(ifnone) {
      var $a, self = this, $iter = TMP_14.$$p, block = $iter || nil;

      TMP_14.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("detect", ifnone)
      };
      
      var result;

      self.$each.$$p = function() {
        var params = $scope.get('Opal').$destructure(arguments),
            value  = Opal.yield1(block, params);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
          result = params;
          return $breaker;
        }
      };

      self.$each();

      if (result === undefined && ifnone !== undefined) {
        if (typeof(ifnone) === 'function') {
          result = ifnone();
        }
        else {
          result = ifnone;
        }
      }

      return result === undefined ? nil : result;
    
    });

    Opal.defn(self, '$drop', function(number) {
      var $a, self = this;

      number = $scope.get('Opal').$coerce_to(number, $scope.get('Integer'), "to_int");
      if ((($a = number < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "attempt to drop negative size")};
      
      var result  = [],
          current = 0;

      self.$each.$$p = function() {
        if (number <= current) {
          result.push($scope.get('Opal').$destructure(arguments));
        }

        current++;
      };

      self.$each()

      return result;
    
    });

    Opal.defn(self, '$drop_while', TMP_15 = function() {
      var $a, self = this, $iter = TMP_15.$$p, block = $iter || nil;

      TMP_15.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("drop_while")
      };
      
      var result   = [],
          dropping = true;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        if (dropping) {
          var value = Opal.yield1(block, param);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) === nil || ($a.$$is_boolean && $a == false))) {
            dropping = false;
            result.push(param);
          }
        }
        else {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$each_cons', TMP_16 = function(n) {
      var $a, $b, TMP_17, self = this, $iter = TMP_16.$$p, block = $iter || nil;

      TMP_16.$$p = null;
      if ((($a = arguments.length != 1) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 1)")};
      n = $scope.get('Opal').$try_convert(n, $scope.get('Integer'), "to_int");
      if ((($a = n <= 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "invalid size")};
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this, $a, $b, enum_size = nil;

        enum_size = self.$enumerator_size();
          if ((($a = enum_size['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
          } else if ((($a = ((($b = enum_size['$=='](0)) !== false && $b !== nil) ? $b : $rb_lt(enum_size, n))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return 0
            } else {
            return $rb_plus($rb_minus(enum_size, n), 1)
          };}, TMP_17.$$s = self, TMP_17), $a).call($b, "each_cons", n)
      };
      
      var buffer = [], result = nil;

      self.$each.$$p = function() {
        var element = $scope.get('Opal').$destructure(arguments);
        buffer.push(element);
        if (buffer.length > n) {
          buffer.shift();
        }
        if (buffer.length == n) {
          var value = Opal.yield1(block, buffer.slice(0, n));

          if (value == $breaker) {
            result = $breaker.$v;
            return $breaker;
          }
        }
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$each_entry', TMP_18 = function() {
      var self = this, $iter = TMP_18.$$p, block = $iter || nil;

      TMP_18.$$p = null;
      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$each_slice', TMP_19 = function(n) {
      var $a, $b, TMP_20, self = this, $iter = TMP_19.$$p, block = $iter || nil;

      TMP_19.$$p = null;
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
      if ((($a = n <= 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "invalid slice size")};
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this, $a;

        if ((($a = self['$respond_to?']("size")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($rb_divide(self.$size(), n)).$ceil()
            } else {
            return nil
          }}, TMP_20.$$s = self, TMP_20), $a).call($b, "each_slice", n)
      };
      
      var result,
          slice = []

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        slice.push(param);

        if (slice.length === n) {
          if (Opal.yield1(block, slice) === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          slice = [];
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }

      // our "last" group, if smaller than n then won't have been yielded
      if (slice.length > 0) {
        if (Opal.yield1(block, slice) === $breaker) {
          return $breaker.$v;
        }
      }
    ;
      return nil;
    });

    Opal.defn(self, '$each_with_index', TMP_21 = function() {
      var $a, $b, TMP_22, self = this, $iter = TMP_21.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_21.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;

        return self.$enumerator_size()}, TMP_22.$$s = self, TMP_22), $a).apply($b, ["each_with_index"].concat(Opal.to_a(args)))
      };
      
      var result,
          index = 0;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = block(param, index);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        index++;
      };

      self.$each.apply(self, args);

      if (result !== undefined) {
        return result;
      }
    
      return self;
    });

    Opal.defn(self, '$each_with_object', TMP_23 = function(object) {
      var $a, $b, TMP_24, self = this, $iter = TMP_23.$$p, block = $iter || nil;

      TMP_23.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

        return self.$enumerator_size()}, TMP_24.$$s = self, TMP_24), $a).call($b, "each_with_object", object)
      };
      
      var result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = block(param, object);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return object;
    });

    Opal.defn(self, '$entries', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      
      var result = [];

      self.$each.$$p = function() {
        result.push($scope.get('Opal').$destructure(arguments));
      };

      self.$each.apply(self, args);

      return result;
    
    });

    Opal.alias(self, 'find', 'detect');

    Opal.defn(self, '$find_all', TMP_25 = function() {
      var $a, $b, TMP_26, self = this, $iter = TMP_25.$$p, block = $iter || nil;

      TMP_25.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this;

        return self.$enumerator_size()}, TMP_26.$$s = self, TMP_26), $a).call($b, "find_all")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$find_index', TMP_27 = function(object) {
      var $a, self = this, $iter = TMP_27.$$p, block = $iter || nil;

      TMP_27.$$p = null;
      if ((($a = object === undefined && block === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$enum_for("find_index")};
      
      var result = nil,
          index  = 0;

      if (object != null) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if ((param)['$=='](object)) {
            result = index;
            return $breaker;
          }

          index += 1;
        };
      }
      else if (block !== nil) {
        self.$each.$$p = function() {
          var value = Opal.yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = index;
            return $breaker;
          }

          index += 1;
        };
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$first', function(number) {
      var $a, self = this, result = nil;

      if ((($a = number === undefined) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = nil;
        
        self.$each.$$p = function() {
          result = $scope.get('Opal').$destructure(arguments);

          return $breaker;
        };

        self.$each();
      ;
        } else {
        result = [];
        number = $scope.get('Opal').$coerce_to(number, $scope.get('Integer'), "to_int");
        if ((($a = number < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "attempt to take negative size")};
        if ((($a = number == 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          return []};
        
        var current = 0;
        number = $scope.get('Opal').$coerce_to(number, $scope.get('Integer'), "to_int");

        self.$each.$$p = function() {
          result.push($scope.get('Opal').$destructure(arguments));

          if (number <= ++current) {
            return $breaker;
          }
        };

        self.$each();
      
      };
      return result;
    });

    Opal.alias(self, 'flat_map', 'collect_concat');

    Opal.defn(self, '$grep', TMP_28 = function(pattern) {
      var $a, self = this, $iter = TMP_28.$$p, block = $iter || nil;

      TMP_28.$$p = null;
      
      var result = [];

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            value = Opal.yield1(block, param);

            if (value === $breaker) {
              result = $breaker.$v;
              return $breaker;
            }

            result.push(value);
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            result.push(param);
          }
        };
      }

      self.$each();

      return result;
    ;
    });

    Opal.defn(self, '$group_by', TMP_29 = function() {
      var $a, $b, TMP_30, $c, $d, self = this, $iter = TMP_29.$$p, block = $iter || nil, hash = nil;

      TMP_29.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this;

        return self.$enumerator_size()}, TMP_30.$$s = self, TMP_30), $a).call($b, "group_by")
      };
      hash = $scope.get('Hash').$new();
      
      var result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        (($a = value, $c = hash, ((($d = $c['$[]']($a)) !== false && $d !== nil) ? $d : $c['$[]=']($a, []))))['$<<'](param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return hash;
    });

    Opal.defn(self, '$include?', function(obj) {
      var self = this;

      
      var result = false;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        if ((param)['$=='](obj)) {
          result = true;
          return $breaker;
        }
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$inject', TMP_31 = function(object, sym) {
      var self = this, $iter = TMP_31.$$p, block = $iter || nil;

      TMP_31.$$p = null;
      
      var result = object;

      if (block !== nil && sym === undefined) {
        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          value = Opal.yieldX(block, [result, value]);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          result = value;
        };
      }
      else {
        if (sym === undefined) {
          if (!$scope.get('Symbol')['$==='](object)) {
            self.$raise($scope.get('TypeError'), "" + (object.$inspect()) + " is not a Symbol");
          }

          sym    = object;
          result = undefined;
        }

        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          result = (result).$__send__(sym, value);
        };
      }

      self.$each();

      return result == undefined ? nil : result;
    ;
    });

    Opal.defn(self, '$lazy', function() {
      var $a, $b, TMP_32, self = this;

      return ($a = ($b = (($scope.get('Enumerator')).$$scope.get('Lazy'))).$new, $a.$$p = (TMP_32 = function(enum$, args){var self = TMP_32.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
      return ($a = enum$).$yield.apply($a, Opal.to_a(args))}, TMP_32.$$s = self, TMP_32), $a).call($b, self, self.$enumerator_size());
    });

    Opal.defn(self, '$enumerator_size', function() {
      var $a, self = this;

      if ((($a = self['$respond_to?']("size")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$size()
        } else {
        return nil
      };
    });

    Opal.alias(self, 'map', 'collect');

    Opal.defn(self, '$max', TMP_33 = function() {
      var self = this, $iter = TMP_33.$$p, block = $iter || nil;

      TMP_33.$$p = null;
      
      var result;

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if (value === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed");
          }

          if (value > 0) {
            result = param;
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ($scope.get('Opal').$compare(param, result) > 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    
    });

    Opal.defn(self, '$max_by', TMP_34 = function() {
      var $a, $b, TMP_35, self = this, $iter = TMP_34.$$p, block = $iter || nil;

      TMP_34.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this;

        return self.$enumerator_size()}, TMP_35.$$s = self, TMP_35), $a).call($b, "max_by")
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((value)['$<=>'](by) > 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    });

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$min', TMP_36 = function() {
      var self = this, $iter = TMP_36.$$p, block = $iter || nil;

      TMP_36.$$p = null;
      
      var result;

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if (value === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed");
          }

          if (value < 0) {
            result = param;
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ($scope.get('Opal').$compare(param, result) < 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    
    });

    Opal.defn(self, '$min_by', TMP_37 = function() {
      var $a, $b, TMP_38, self = this, $iter = TMP_37.$$p, block = $iter || nil;

      TMP_37.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_38 = function(){var self = TMP_38.$$s || this;

        return self.$enumerator_size()}, TMP_38.$$s = self, TMP_38), $a).call($b, "min_by")
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((value)['$<=>'](by) < 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    });

    Opal.defn(self, '$minmax', TMP_39 = function() {
      var $a, $b, $c, TMP_40, self = this, $iter = TMP_39.$$p, block = $iter || nil;

      TMP_39.$$p = null;
      ((($a = block) !== false && $a !== nil) ? $a : block = ($b = ($c = self).$proc, $b.$$p = (TMP_40 = function(a, b){var self = TMP_40.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return a['$<=>'](b)}, TMP_40.$$s = self, TMP_40), $b).call($c));
      
      var min = nil, max = nil, first_time = true;

      self.$each.$$p = function() {
        var element = $scope.get('Opal').$destructure(arguments);
        if (first_time) {
          min = max = element;
          first_time = false;
        } else {
          var min_cmp = block.$call(min, element);

          if (min_cmp === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed")
          } else if (min_cmp > 0) {
            min = element;
          }

          var max_cmp = block.$call(max, element);

          if (max_cmp === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed")
          } else if (max_cmp < 0) {
            max = element;
          }
        }
      }

      self.$each();

      return [min, max];
    
    });

    Opal.defn(self, '$minmax_by', TMP_41 = function() {
      var self = this, $iter = TMP_41.$$p, block = $iter || nil;

      TMP_41.$$p = null;
      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$none?', TMP_42 = function() {
      var $a, self = this, $iter = TMP_42.$$p, block = $iter || nil;

      TMP_42.$$p = null;
      
      var result = true;

      if (block !== nil) {
        self.$each.$$p = function() {
          var value = Opal.yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = false;
            return $breaker;
          }
        }
      }
      else {
        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = false;
            return $breaker;
          }
        };
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$one?', TMP_43 = function() {
      var $a, self = this, $iter = TMP_43.$$p, block = $iter || nil;

      TMP_43.$$p = null;
      
      var result = false;

      if (block !== nil) {
        self.$each.$$p = function() {
          var value = Opal.yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            if (result === true) {
              result = false;
              return $breaker;
            }

            result = true;
          }
        }
      }
      else {
        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            if (result === true) {
              result = false;
              return $breaker;
            }

            result = true;
          }
        }
      }

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$partition', TMP_44 = function() {
      var $a, $b, TMP_45, self = this, $iter = TMP_44.$$p, block = $iter || nil;

      TMP_44.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$enumerator_size()}, TMP_45.$$s = self, TMP_45), $a).call($b, "partition")
      };
      
      var truthy = [], falsy = [], result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
          truthy.push(param);
        }
        else {
          falsy.push(param);
        }
      };

      self.$each();

      return [truthy, falsy];
    
    });

    Opal.alias(self, 'reduce', 'inject');

    Opal.defn(self, '$reject', TMP_46 = function() {
      var $a, $b, TMP_47, self = this, $iter = TMP_46.$$p, block = $iter || nil;

      TMP_46.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_47 = function(){var self = TMP_47.$$s || this;

        return self.$enumerator_size()}, TMP_47.$$s = self, TMP_47), $a).call($b, "reject")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) === nil || ($a.$$is_boolean && $a == false))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    });

    Opal.defn(self, '$reverse_each', TMP_48 = function() {
      var $a, $b, TMP_49, self = this, $iter = TMP_48.$$p, block = $iter || nil;

      TMP_48.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_49 = function(){var self = TMP_49.$$s || this;

        return self.$enumerator_size()}, TMP_49.$$s = self, TMP_49), $a).call($b, "reverse_each")
      };
      
      var result = [];

      self.$each.$$p = function() {
        result.push(arguments);
      };

      self.$each();

      for (var i = result.length - 1; i >= 0; i--) {
        Opal.yieldX(block, result[i]);
      }

      return result;
    
    });

    Opal.alias(self, 'select', 'find_all');

    Opal.defn(self, '$slice_before', TMP_50 = function(pattern) {
      var $a, $b, TMP_51, self = this, $iter = TMP_50.$$p, block = $iter || nil;

      TMP_50.$$p = null;
      if ((($a = pattern === undefined && block === nil || arguments.length > 1) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 1)")};
      return ($a = ($b = $scope.get('Enumerator')).$new, $a.$$p = (TMP_51 = function(e){var self = TMP_51.$$s || this, $a;
if (e == null) e = nil;
      
        var slice = [];

        if (block !== nil) {
          if (pattern === undefined) {
            self.$each.$$p = function() {
              var param = $scope.get('Opal').$destructure(arguments),
                  value = Opal.yield1(block, param);

              if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
          else {
            self.$each.$$p = function() {
              var param = $scope.get('Opal').$destructure(arguments),
                  value = block(param, pattern.$dup());

              if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
        }
        else {
          self.$each.$$p = function() {
            var param = $scope.get('Opal').$destructure(arguments),
                value = pattern['$==='](param);

            if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true)) && slice.length > 0) {
              e['$<<'](slice);
              slice = [];
            }

            slice.push(param);
          };
        }

        self.$each();

        if (slice.length > 0) {
          e['$<<'](slice);
        }
      ;}, TMP_51.$$s = self, TMP_51), $a).call($b);
    });

    Opal.defn(self, '$sort', TMP_52 = function() {
      var $a, $b, TMP_53, self = this, $iter = TMP_52.$$p, block = $iter || nil, ary = nil;

      TMP_52.$$p = null;
      ary = self.$to_a();
      if ((block !== nil)) {
        } else {
        block = ($a = ($b = self).$lambda, $a.$$p = (TMP_53 = function(a, b){var self = TMP_53.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
        return a['$<=>'](b)}, TMP_53.$$s = self, TMP_53), $a).call($b)
      };
      return ary.sort(block);
    });

    Opal.defn(self, '$sort_by', TMP_54 = function() {
      var $a, $b, TMP_55, $c, TMP_56, $d, TMP_57, $e, TMP_58, self = this, $iter = TMP_54.$$p, block = $iter || nil, dup = nil;

      TMP_54.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_55 = function(){var self = TMP_55.$$s || this;

        return self.$enumerator_size()}, TMP_55.$$s = self, TMP_55), $a).call($b, "sort_by")
      };
      dup = ($a = ($c = self).$map, $a.$$p = (TMP_56 = function(){var self = TMP_56.$$s || this, arg = nil;

      arg = $scope.get('Opal').$destructure(arguments);
        return [block.$call(arg), arg];}, TMP_56.$$s = self, TMP_56), $a).call($c);
      ($a = ($d = dup)['$sort!'], $a.$$p = (TMP_57 = function(a, b){var self = TMP_57.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return (a[0])['$<=>'](b[0])}, TMP_57.$$s = self, TMP_57), $a).call($d);
      return ($a = ($e = dup)['$map!'], $a.$$p = (TMP_58 = function(i){var self = TMP_58.$$s || this;
if (i == null) i = nil;
      return i[1];}, TMP_58.$$s = self, TMP_58), $a).call($e);
    });

    Opal.defn(self, '$take', function(num) {
      var self = this;

      return self.$first(num);
    });

    Opal.defn(self, '$take_while', TMP_59 = function() {
      var $a, self = this, $iter = TMP_59.$$p, block = $iter || nil;

      TMP_59.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("take_while")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) === nil || ($a.$$is_boolean && $a == false))) {
          return $breaker;
        }

        result.push(param);
      };

      self.$each();

      return result;
    
    });

    Opal.alias(self, 'to_a', 'entries');

    Opal.defn(self, '$zip', TMP_60 = function() {
      var $a, self = this, $iter = TMP_60.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var others = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        others[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_60.$$p = null;
      return ($a = self.$to_a()).$zip.apply($a, Opal.to_a(others));
    });
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/enumerator"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$allocate', '$new', '$to_proc', '$coerce_to', '$nil?', '$empty?', '$+', '$class', '$__send__', '$===', '$call', '$enum_for', '$size', '$destructure', '$inspect', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$respond_to?', '$try_convert', '$<', '$for']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Enumerator(){};
    var self = $Enumerator = $klass($base, $super, 'Enumerator', $Enumerator);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    def.size = def.args = def.object = def.method = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_enumerator = true;

    Opal.defs(self, '$for', TMP_1 = function(object, method) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 2;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 2];
      }
      if (method == null) {
        method = "each"
      }
      TMP_1.$$p = null;
      
      var obj = self.$allocate();

      obj.object = object;
      obj.size   = block;
      obj.method = method;
      obj.args   = args;

      return obj;
    ;
    });

    Opal.defn(self, '$initialize', TMP_2 = function() {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      if (block !== false && block !== nil) {
        self.object = ($a = ($b = $scope.get('Generator')).$new, $a.$$p = block.$to_proc(), $a).call($b);
        self.method = "each";
        self.args = [];
        self.size = arguments[0] || nil;
        if ((($a = self.size) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.size = $scope.get('Opal').$coerce_to(self.size, $scope.get('Integer'), "to_int")
          } else {
          return nil
        };
        } else {
        self.object = arguments[0];
        self.method = arguments[1] || "each";
        self.args = $slice.call(arguments, 2);
        return self.size = nil;
      };
    });

    Opal.defn(self, '$each', TMP_3 = function() {
      var $a, $b, $c, self = this, $iter = TMP_3.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_3.$$p = null;
      if ((($a = ($b = block['$nil?'](), $b !== false && $b !== nil ?args['$empty?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self};
      args = $rb_plus(self.args, args);
      if ((($a = block['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = self.$class()).$new.apply($a, [self.object, self.method].concat(Opal.to_a(args)))};
      return ($b = ($c = self.object).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, [self.method].concat(Opal.to_a(args)));
    });

    Opal.defn(self, '$size', function() {
      var $a, self = this;

      if ((($a = $scope.get('Proc')['$==='](self.size)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = self.size).$call.apply($a, Opal.to_a(self.args))
        } else {
        return self.size
      };
    });

    Opal.defn(self, '$with_index', TMP_4 = function(offset) {
      var $a, $b, TMP_5, self = this, $iter = TMP_4.$$p, block = $iter || nil;

      if (offset == null) {
        offset = 0
      }
      TMP_4.$$p = null;
      if (offset !== false && offset !== nil) {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int")
        } else {
        offset = 0
      };
      if (block !== false && block !== nil) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

        return self.$size()}, TMP_5.$$s = self, TMP_5), $a).call($b, "with_index", offset)
      };
      
      var result, index = offset;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = block(param, index);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        index++;

        return value;
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }

      return self.object;
    
    });

    Opal.alias(self, 'with_object', 'each_with_object');

    Opal.defn(self, '$inspect', function() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class()) + ": " + (self.object.$inspect()) + ":" + (self.method);
      if ((($a = self.args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        result = $rb_plus(result, "(" + (self.args.$inspect()['$[]']($scope.get('Range').$new(1, -2))) + ")")
      };
      return $rb_plus(result, ">");
    });

    (function($base, $super) {
      function $Generator(){};
      var self = $Generator = $klass($base, $super, 'Generator', $Generator);

      var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7;

      def.block = nil;
      self.$include($scope.get('Enumerable'));

      Opal.defn(self, '$initialize', TMP_6 = function() {
        var self = this, $iter = TMP_6.$$p, block = $iter || nil;

        TMP_6.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('LocalJumpError'), "no block given")
        };
        return self.block = block;
      });

      return (Opal.defn(self, '$each', TMP_7 = function() {
        var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil, yielder = nil, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 0];
        }
        TMP_7.$$p = null;
        yielder = ($a = ($b = $scope.get('Yielder')).$new, $a.$$p = block.$to_proc(), $a).call($b);
        
        try {
          args.unshift(yielder);

          if (Opal.yieldX(self.block, args) === $breaker) {
            return $breaker.$v;
          }
        }
        catch (e) {
          if (e === $breaker) {
            return $breaker.$v;
          }
          else {
            throw e;
          }
        }
      ;
        return self;
      }), nil) && 'each';
    })($scope.base, null);

    (function($base, $super) {
      function $Yielder(){};
      var self = $Yielder = $klass($base, $super, 'Yielder', $Yielder);

      var def = self.$$proto, $scope = self.$$scope, TMP_8;

      def.block = nil;
      Opal.defn(self, '$initialize', TMP_8 = function() {
        var self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        return self.block = block;
      });

      Opal.defn(self, '$yield', function() {
        var self = this, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var values = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          values[$splat_index] = arguments[$splat_index + 0];
        }
        
        var value = Opal.yieldX(self.block, values);

        if (value === $breaker) {
          throw $breaker;
        }

        return value;
      ;
      });

      return (Opal.defn(self, '$<<', function() {
        var $a, self = this, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var values = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          values[$splat_index] = arguments[$splat_index + 0];
        }
        ($a = self).$yield.apply($a, Opal.to_a(values));
        return self;
      }), nil) && '<<';
    })($scope.base, null);

    return (function($base, $super) {
      function $Lazy(){};
      var self = $Lazy = $klass($base, $super, 'Lazy', $Lazy);

      var def = self.$$proto, $scope = self.$$scope, TMP_9, TMP_12, TMP_14, TMP_19, TMP_21, TMP_22, TMP_24, TMP_27, TMP_30;

      def.enumerator = nil;
      (function($base, $super) {
        function $StopLazyError(){};
        var self = $StopLazyError = $klass($base, $super, 'StopLazyError', $StopLazyError);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, $scope.get('Exception'));

      Opal.defn(self, '$initialize', TMP_9 = function(object, size) {
        var TMP_10, self = this, $iter = TMP_9.$$p, block = $iter || nil;

        if (size == null) {
          size = nil
        }
        TMP_9.$$p = null;
        if ((block !== nil)) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy new without a block")
        };
        self.enumerator = object;
        return Opal.find_super_dispatcher(self, 'initialize', TMP_9, (TMP_10 = function(yielder, each_args){var self = TMP_10.$$s || this, $a, $b, TMP_11;
if (yielder == null) yielder = nil;each_args = $slice.call(arguments, 1);
        try {
          return ($a = ($b = object).$each, $a.$$p = (TMP_11 = function(args){var self = TMP_11.$$s || this;
args = $slice.call(arguments, 0);
            
              args.unshift(yielder);

              if (Opal.yieldX(block, args) === $breaker) {
                return $breaker;
              }
            ;}, TMP_11.$$s = self, TMP_11), $a).apply($b, Opal.to_a(each_args))
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {
            try {
              return nil
            } finally {
              Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
            }
            }else { throw $err; }
          }}, TMP_10.$$s = self, TMP_10)).apply(self, [size]);
      });

      Opal.alias(self, 'force', 'to_a');

      Opal.defn(self, '$lazy', function() {
        var self = this;

        return self;
      });

      Opal.defn(self, '$collect', TMP_12 = function() {
        var $a, $b, TMP_13, self = this, $iter = TMP_12.$$p, block = $iter || nil;

        TMP_12.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy map without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_13 = function(enum$, args){var self = TMP_13.$$s || this;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = Opal.yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          enum$.$yield(value);
        }, TMP_13.$$s = self, TMP_13), $a).call($b, self, self.$enumerator_size());
      });

      Opal.defn(self, '$collect_concat', TMP_14 = function() {
        var $a, $b, TMP_15, self = this, $iter = TMP_14.$$p, block = $iter || nil;

        TMP_14.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy map without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_15 = function(enum$, args){var self = TMP_15.$$s || this, $a, $b, TMP_16, $c, TMP_17;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = Opal.yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((value)['$respond_to?']("force") && (value)['$respond_to?']("each")) {
            ($a = ($b = (value)).$each, $a.$$p = (TMP_16 = function(v){var self = TMP_16.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_16.$$s = self, TMP_16), $a).call($b)
          }
          else {
            var array = $scope.get('Opal').$try_convert(value, $scope.get('Array'), "to_ary");

            if (array === nil) {
              enum$.$yield(value);
            }
            else {
              ($a = ($c = (value)).$each, $a.$$p = (TMP_17 = function(v){var self = TMP_17.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_17.$$s = self, TMP_17), $a).call($c);
            }
          }
        ;}, TMP_15.$$s = self, TMP_15), $a).call($b, self, nil);
      });

      Opal.defn(self, '$drop', function(n) {
        var $a, $b, TMP_18, self = this, current_size = nil, set_size = nil, dropped = nil;

        n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
        if ((($a = $rb_lt(n, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "attempt to drop negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = $scope.get('Integer')['$==='](current_size)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_lt(n, current_size)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        dropped = 0;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_18 = function(enum$, args){var self = TMP_18.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        if ((($a = $rb_lt(dropped, n)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return dropped = $rb_plus(dropped, 1)
            } else {
            return ($a = enum$).$yield.apply($a, Opal.to_a(args))
          }}, TMP_18.$$s = self, TMP_18), $a).call($b, self, set_size);
      });

      Opal.defn(self, '$drop_while', TMP_19 = function() {
        var $a, $b, TMP_20, self = this, $iter = TMP_19.$$p, block = $iter || nil, succeeding = nil;

        TMP_19.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy drop_while without a block")
        };
        succeeding = true;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_20 = function(enum$, args){var self = TMP_20.$$s || this, $a, $b;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        if (succeeding !== false && succeeding !== nil) {
            
            var value = Opal.yieldX(block, args);

            if (value === $breaker) {
              return $breaker;
            }

            if ((($a = value) === nil || ($a.$$is_boolean && $a == false))) {
              succeeding = false;

              ($a = enum$).$yield.apply($a, Opal.to_a(args));
            }
          
            } else {
            return ($b = enum$).$yield.apply($b, Opal.to_a(args))
          }}, TMP_20.$$s = self, TMP_20), $a).call($b, self, nil);
      });

      Opal.defn(self, '$enum_for', TMP_21 = function(method) {
        var $a, $b, self = this, $iter = TMP_21.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        if (method == null) {
          method = "each"
        }
        TMP_21.$$p = null;
        return ($a = ($b = self.$class()).$for, $a.$$p = block.$to_proc(), $a).apply($b, [self, method].concat(Opal.to_a(args)));
      });

      Opal.defn(self, '$find_all', TMP_22 = function() {
        var $a, $b, TMP_23, self = this, $iter = TMP_22.$$p, block = $iter || nil;

        TMP_22.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy select without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_23 = function(enum$, args){var self = TMP_23.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = Opal.yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = enum$).$yield.apply($a, Opal.to_a(args));
          }
        ;}, TMP_23.$$s = self, TMP_23), $a).call($b, self, nil);
      });

      Opal.alias(self, 'flat_map', 'collect_concat');

      Opal.defn(self, '$grep', TMP_24 = function(pattern) {
        var $a, $b, TMP_25, $c, TMP_26, self = this, $iter = TMP_24.$$p, block = $iter || nil;

        TMP_24.$$p = null;
        if (block !== false && block !== nil) {
          return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_25 = function(enum$, args){var self = TMP_25.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
          
            var param = $scope.get('Opal').$destructure(args),
                value = pattern['$==='](param);

            if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
              value = Opal.yield1(block, param);

              if (value === $breaker) {
                return $breaker;
              }

              enum$.$yield(Opal.yield1(block, param));
            }
          ;}, TMP_25.$$s = self, TMP_25), $a).call($b, self, nil)
          } else {
          return ($a = ($c = $scope.get('Lazy')).$new, $a.$$p = (TMP_26 = function(enum$, args){var self = TMP_26.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
          
            var param = $scope.get('Opal').$destructure(args),
                value = pattern['$==='](param);

            if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
              enum$.$yield(param);
            }
          ;}, TMP_26.$$s = self, TMP_26), $a).call($c, self, nil)
        };
      });

      Opal.alias(self, 'map', 'collect');

      Opal.alias(self, 'select', 'find_all');

      Opal.defn(self, '$reject', TMP_27 = function() {
        var $a, $b, TMP_28, self = this, $iter = TMP_27.$$p, block = $iter || nil;

        TMP_27.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy reject without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_28 = function(enum$, args){var self = TMP_28.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = Opal.yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((($a = value) === nil || ($a.$$is_boolean && $a == false))) {
            ($a = enum$).$yield.apply($a, Opal.to_a(args));
          }
        ;}, TMP_28.$$s = self, TMP_28), $a).call($b, self, nil);
      });

      Opal.defn(self, '$take', function(n) {
        var $a, $b, TMP_29, self = this, current_size = nil, set_size = nil, taken = nil;

        n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
        if ((($a = $rb_lt(n, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "attempt to take negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = $scope.get('Integer')['$==='](current_size)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_lt(n, current_size)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        taken = 0;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_29 = function(enum$, args){var self = TMP_29.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        if ((($a = $rb_lt(taken, n)) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = enum$).$yield.apply($a, Opal.to_a(args));
            return taken = $rb_plus(taken, 1);
            } else {
            return self.$raise($scope.get('StopLazyError'))
          }}, TMP_29.$$s = self, TMP_29), $a).call($b, self, set_size);
      });

      Opal.defn(self, '$take_while', TMP_30 = function() {
        var $a, $b, TMP_31, self = this, $iter = TMP_30.$$p, block = $iter || nil;

        TMP_30.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy take_while without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_31 = function(enum$, args){var self = TMP_31.$$s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = Opal.yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = enum$).$yield.apply($a, Opal.to_a(args));
          }
          else {
            self.$raise($scope.get('StopLazyError'));
          }
        ;}, TMP_31.$$s = self, TMP_31), $a).call($b, self, nil);
      });

      Opal.alias(self, 'to_enum', 'enum_for');

      return (Opal.defn(self, '$inspect', function() {
        var self = this;

        return "#<" + (self.$class()) + ": " + (self.enumerator.$inspect()) + ">";
      }), nil) && 'inspect';
    })($scope.base, self);
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/numeric"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$instance_of?', '$class', '$Float', '$coerce', '$===', '$raise', '$__send__', '$equal?', '$coerce_to!', '$-@', '$**', '$-', '$*', '$div', '$<', '$ceil', '$to_f', '$denominator', '$to_r', '$==', '$floor', '$/', '$%', '$Complex', '$zero?', '$numerator', '$abs', '$arg', '$round', '$to_i', '$truncate', '$>']);
  self.$require("corelib/comparable");
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    self.$include($scope.get('Comparable'));

    Opal.defn(self, '$coerce', function(other) {
      var $a, self = this;

      if ((($a = other['$instance_of?'](self.$class())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return [other, self]};
      return [self.$Float(other), self.$Float(self)];
    });

    Opal.defn(self, '$__coerced__', function(method, other) {
      var $a, $b, self = this, a = nil, b = nil, $case = nil;

      try {
      $b = other.$coerce(self), $a = Opal.to_ary($b), a = ($a[0] == null ? nil : $a[0]), b = ($a[1] == null ? nil : $a[1]), $b
      } catch ($err) {if (true) {
        try {
          $case = method;if ("+"['$===']($case) || "-"['$===']($case) || "*"['$===']($case) || "/"['$===']($case) || "%"['$===']($case) || "&"['$===']($case) || "|"['$===']($case) || "^"['$===']($case) || "**"['$===']($case)) {self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerce into Numeric")}else if (">"['$===']($case) || ">="['$===']($case) || "<"['$===']($case) || "<="['$===']($case) || "<=>"['$===']($case)) {self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")}
        } finally {
          Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
        }
        }else { throw $err; }
      };
      return a.$__send__(method, b);
    });

    Opal.defn(self, '$<=>', function(other) {
      var $a, self = this;

      if ((($a = self['$equal?'](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return 0};
      return nil;
    });

    Opal.defn(self, '$[]', function(bit) {
      var self = this, min = nil, max = nil;

      bit = $scope.get('Opal')['$coerce_to!'](bit, $scope.get('Integer'), "to_int");
      min = ((2)['$**'](30))['$-@']();
      max = $rb_minus(((2)['$**'](30)), 1);
      return (bit < min || bit > max) ? 0 : (self >> bit) % 2;
    });

    Opal.defn(self, '$+@', function() {
      var self = this;

      return self;
    });

    Opal.defn(self, '$-@', function() {
      var self = this;

      return $rb_minus(0, self);
    });

    Opal.defn(self, '$%', function(other) {
      var self = this;

      return $rb_minus(self, $rb_times(other, self.$div(other)));
    });

    Opal.defn(self, '$abs', function() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return self['$-@']()
        } else {
        return self
      };
    });

    Opal.defn(self, '$abs2', function() {
      var self = this;

      return $rb_times(self, self);
    });

    Opal.defn(self, '$angle', function() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return (($scope.get('Math')).$$scope.get('PI'))
        } else {
        return 0
      };
    });

    Opal.alias(self, 'arg', 'angle');

    Opal.defn(self, '$ceil', function() {
      var self = this;

      return self.$to_f().$ceil();
    });

    Opal.defn(self, '$conj', function() {
      var self = this;

      return self;
    });

    Opal.alias(self, 'conjugate', 'conj');

    Opal.defn(self, '$denominator', function() {
      var self = this;

      return self.$to_r().$denominator();
    });

    Opal.defn(self, '$div', function(other) {
      var self = this;

      if (other['$=='](0)) {
        self.$raise($scope.get('ZeroDivisionError'), "divided by o")};
      return ($rb_divide(self, other)).$floor();
    });

    Opal.defn(self, '$divmod', function(other) {
      var self = this;

      return [self.$div(other), self['$%'](other)];
    });

    Opal.defn(self, '$fdiv', function(other) {
      var self = this;

      return $rb_divide(self.$to_f(), other);
    });

    Opal.defn(self, '$floor', function() {
      var self = this;

      return self.$to_f().$floor();
    });

    Opal.defn(self, '$i', function() {
      var self = this;

      return self.$Complex(0, self);
    });

    Opal.defn(self, '$imag', function() {
      var self = this;

      return 0;
    });

    Opal.alias(self, 'imaginary', 'imag');

    Opal.defn(self, '$integer?', function() {
      var self = this;

      return false;
    });

    Opal.alias(self, 'magnitude', 'abs');

    Opal.alias(self, 'modulo', '%');

    Opal.defn(self, '$nonzero?', function() {
      var $a, self = this;

      if ((($a = self['$zero?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self
      };
    });

    Opal.defn(self, '$numerator', function() {
      var self = this;

      return self.$to_r().$numerator();
    });

    Opal.alias(self, 'phase', 'arg');

    Opal.defn(self, '$polar', function() {
      var self = this;

      return [self.$abs(), self.$arg()];
    });

    Opal.defn(self, '$quo', function(other) {
      var self = this;

      return $rb_divide($scope.get('Opal')['$coerce_to!'](self, $scope.get('Rational'), "to_r"), other);
    });

    Opal.defn(self, '$real', function() {
      var self = this;

      return self;
    });

    Opal.defn(self, '$real?', function() {
      var self = this;

      return true;
    });

    Opal.defn(self, '$rect', function() {
      var self = this;

      return [self, 0];
    });

    Opal.alias(self, 'rectangular', 'rect');

    Opal.defn(self, '$round', function(digits) {
      var self = this;

      return self.$to_f().$round(digits);
    });

    Opal.defn(self, '$to_c', function() {
      var self = this;

      return self.$Complex(self, 0);
    });

    Opal.defn(self, '$to_int', function() {
      var self = this;

      return self.$to_i();
    });

    Opal.defn(self, '$truncate', function() {
      var self = this;

      return self.$to_f().$truncate();
    });

    Opal.defn(self, '$zero?', function() {
      var self = this;

      return self['$=='](0);
    });

    Opal.defn(self, '$positive?', function() {
      var self = this;

      return $rb_gt(self, 0);
    });

    Opal.defn(self, '$negative?', function() {
      var self = this;

      return $rb_lt(self, 0);
    });

    Opal.defn(self, '$dup', function() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't dup " + (self.$class()));
    });

    return (Opal.defn(self, '$clone', function() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't clone " + (self.$class()));
    }), nil) && 'clone';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/array"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$raise', '$===', '$to_a', '$respond_to?', '$to_ary', '$coerce_to', '$initialize', '$to_proc', '$coerce_to?', '$join', '$to_str', '$class', '$clone', '$hash', '$<=>', '$==', '$object_id', '$inspect', '$enum_for', '$coerce_to!', '$>', '$*', '$enumerator_size', '$empty?', '$copy_singleton_methods', '$initialize_clone', '$initialize_dup', '$replace', '$size', '$eql?', '$length', '$begin', '$end', '$exclude_end?', '$flatten', '$__id__', '$[]', '$to_s', '$new', '$!', '$delete_if', '$each', '$reverse', '$rotate', '$rand', '$at', '$keep_if', '$shuffle!', '$dup', '$<', '$sort', '$!=', '$times', '$[]=', '$<<', '$kind_of?', '$last', '$first', '$upto']);
  self.$require("corelib/enumerable");
  self.$require("corelib/numeric");
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_8, TMP_10, TMP_12, TMP_13, TMP_15, TMP_17, TMP_19, TMP_20, TMP_21, TMP_22, TMP_24, TMP_26, TMP_27, TMP_29, TMP_31, TMP_33, TMP_34, TMP_36, TMP_38, TMP_39, TMP_40, TMP_43, TMP_44, TMP_47;

    def.length = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_array = true;

    Opal.defs(self, '$[]', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var objects = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        objects[$splat_index] = arguments[$splat_index + 0];
      }
      return objects;
    });

    Opal.defn(self, '$initialize', TMP_1 = function(size, obj) {
      var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (size == null) {
        size = nil
      }
      if (obj == null) {
        obj = nil
      }
      TMP_1.$$p = null;
      if ((($a = arguments.length > 2) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..2)")};
      
      if (arguments.length === 0) {
        self.splice(0, self.length);
        return self;
      }
    
      if ((($a = arguments.length === 1) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $scope.get('Array')['$==='](size)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return size.$to_a()
        } else if ((($a = size['$respond_to?']("to_ary")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return size.$to_ary()}};
      size = $scope.get('Opal').$coerce_to(size, $scope.get('Integer'), "to_int");
      if ((($a = size < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      
      self.splice(0, self.length);
      var i, value;

      if (block === nil) {
        for (i = 0; i < size; i++) {
          self.push(obj);
        }
      }
      else {
        for (i = 0, value; i < size; i++) {
          value = block(i);

          if (value === $breaker) {
            return $breaker.$v;
          }

          self[i] = value;
        }
      }

      return self;
    
    });

    Opal.defs(self, '$new', TMP_2 = function() {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_2.$$p = null;
      return ($a = ($b = []).$initialize, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
    });

    Opal.defs(self, '$try_convert', function(obj) {
      var self = this;

      return $scope.get('Opal')['$coerce_to?'](obj, $scope.get('Array'), "to_ary");
    });

    Opal.defn(self, '$&', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_delete(hash, item) !== undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    });

    Opal.defn(self, '$|', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      var hash = $hash2([], {}), i, length, item;

      for (i = 0, length = self.length; i < length; i++) {
        Opal.hash_put(hash, self[i], true);
      }

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      return hash.$keys();
    ;
    });

    Opal.defn(self, '$*', function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$join(other.$to_str())};
      if ((($a = other['$respond_to?']("to_int")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "no implicit conversion of " + (other.$class()) + " into Integer")
      };
      other = $scope.get('Opal').$coerce_to(other, $scope.get('Integer'), "to_int");
      if ((($a = other < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative argument")};
      
      var result = [];

      for (var i = 0; i < other; i++) {
        result = result.concat(self);
      }

      return result;
    
    });

    Opal.defn(self, '$+', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      return self.concat(other);
    });

    Opal.defn(self, '$-', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      if ((($a = self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        return []};
      if ((($a = other.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$clone()};
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_get(hash, item) === undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    });

    Opal.defn(self, '$<<', function(object) {
      var self = this;

      self.push(object);
      return self;
    });

    Opal.defn(self, '$<=>', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
      } else if ((($a = other['$respond_to?']("to_ary")) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_ary().$to_a()
        } else {
        return nil
      };
      
      if (self.$hash() === other.$hash()) {
        return 0;
      }

      var count = Math.min(self.length, other.length);

      for (var i = 0; i < count; i++) {
        var tmp = (self[i])['$<=>'](other[i]);

        if (tmp !== 0) {
          return tmp;
        }
      }

      return (self.length)['$<=>'](other.length);
    ;
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      
      var recursed = {};

      function _eqeq(array, other) {
        var i, length, a, b;

        if (array === other)
          return true;

        if (!other.$$is_array) {
          if ($scope.get('Opal')['$respond_to?'](other, "to_ary")) {
            return (other)['$=='](array);
          } else {
            return false;
          }
        }

        if (array.constructor !== Array)
          array = array.literal;
        if (other.constructor !== Array)
          other = other.literal;

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    });

    Opal.defn(self, '$[]', function(index, length) {
      var self = this;

      
      var size = self.length,
          exclude, from, to;

      if (index.$$is_range) {
        exclude = index.exclude;
        from    = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int");
        to      = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            return nil;
          }
        }

        if (from > size) {
          return nil;
        }

        if (to < 0) {
          to += size;

          if (to < 0) {
            return [];
          }
        }

        if (!exclude) {
          to += 1;
        }

        return self.slice(from, to);
      }
      else {
        index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

        if (index < 0) {
          index += size;

          if (index < 0) {
            return nil;
          }
        }

        if (length === undefined) {
          if (index >= size || index < 0) {
            return nil;
          }

          return self[index];
        }
        else {
          length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

          if (length < 0 || index > size || index < 0) {
            return nil;
          }

          return self.slice(index, index + length);
        }
      }
    
    });

    Opal.defn(self, '$[]=', function(index, value, extra) {
      var $a, self = this, data = nil, length = nil;

      
      var i, size = self.length;
    
      if ((($a = $scope.get('Range')['$==='](index)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $scope.get('Array')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
          data = value.$to_a()
        } else if ((($a = value['$respond_to?']("to_ary")) !== nil && (!$a.$$is_boolean || $a == true))) {
          data = value.$to_ary().$to_a()
          } else {
          data = [value]
        };
        
        var exclude = index.exclude,
            from    = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int"),
            to      = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            self.$raise($scope.get('RangeError'), "" + (index.$inspect()) + " out of range");
          }
        }

        if (to < 0) {
          to += size;
        }

        if (!exclude) {
          to += 1;
        }

        if (from > size) {
          for (i = size; i < from; i++) {
            self[i] = nil;
          }
        }

        if (to < 0) {
          self.splice.apply(self, [from, 0].concat(data));
        }
        else {
          self.splice.apply(self, [from, to - from].concat(data));
        }

        return value;
      ;
        } else {
        if ((($a = extra === undefined) !== nil && (!$a.$$is_boolean || $a == true))) {
          length = 1
          } else {
          length = value;
          value = extra;
          if ((($a = $scope.get('Array')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
            data = value.$to_a()
          } else if ((($a = value['$respond_to?']("to_ary")) !== nil && (!$a.$$is_boolean || $a == true))) {
            data = value.$to_ary().$to_a()
            } else {
            data = [value]
          };
        };
        
        var old;

        index  = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
        length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

        if (index < 0) {
          old    = index;
          index += size;

          if (index < 0) {
            self.$raise($scope.get('IndexError'), "index " + (old) + " too small for array; minimum " + (-self.length));
          }
        }

        if (length < 0) {
          self.$raise($scope.get('IndexError'), "negative length (" + (length) + ")")
        }

        if (index > size) {
          for (i = size; i < index; i++) {
            self[i] = nil;
          }
        }

        if (extra === undefined) {
          self[index] = value;
        }
        else {
          self.splice.apply(self, [index, length].concat(data));
        }

        return value;
      
      };
    });

    Opal.defn(self, '$assoc', function(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        if (item = self[i], item.length && (item[0])['$=='](object)) {
          return item;
        }
      }

      return nil;
    
    });

    Opal.defn(self, '$at', function(index) {
      var self = this;

      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
      
      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self[index];
    
    });

    Opal.defn(self, '$bsearch', TMP_3 = function() {
      var self = this, $iter = TMP_3.$$p, block = $iter || nil;

      TMP_3.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("bsearch")
      };
      
      var min = 0,
          max = self.length,
          mid,
          val,
          ret,
          smaller = false,
          satisfied = nil;

      while (min < max) {
        mid = min + Math.floor((max - min) / 2);
        val = self[mid];
        ret = block(val);

        if (ret === $breaker) {
          return $breaker.$v;
        }
        else if (ret === true) {
          satisfied = val;
          smaller = true;
        }
        else if (ret === false || ret === nil) {
          smaller = false;
        }
        else if (ret.$$is_number) {
          if (ret === 0) { return val; }
          smaller = (ret < 0);
        }
        else {
          self.$raise($scope.get('TypeError'), "wrong argument type " + ((ret).$class()) + " (must be numeric, true, false or nil)")
        }

        if (smaller) { max = mid; } else { min = mid + 1; }
      }

      return satisfied;
    
    });

    Opal.defn(self, '$cycle', TMP_4 = function(n) {
      var $a, $b, TMP_5, $c, self = this, $iter = TMP_4.$$p, block = $iter || nil;

      if (n == null) {
        n = nil
      }
      TMP_4.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a;

        if (n['$=='](nil)) {
            return (($scope.get('Float')).$$scope.get('INFINITY'))
            } else {
            n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
            if ((($a = $rb_gt(n, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $rb_times(self.$enumerator_size(), n)
              } else {
              return 0
            };
          }}, TMP_5.$$s = self, TMP_5), $a).call($b, "cycle", n)
      };
      if ((($a = ((($c = self['$empty?']()) !== false && $c !== nil) ? $c : n['$=='](0))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      
      var i, length, value;

      if (n === nil) {
        while (true) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }
        }
      }
      else {
        n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
        if (n <= 0) {
          return self;
        }

        while (n > 0) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }

          n--;
        }
      }
    
      return self;
    });

    Opal.defn(self, '$clear', function() {
      var self = this;

      self.splice(0, self.length);
      return self;
    });

    Opal.defn(self, '$clone', function() {
      var self = this, copy = nil;

      copy = [];
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    });

    Opal.defn(self, '$dup', function() {
      var self = this, copy = nil;

      copy = [];
      copy.$initialize_dup(self);
      return copy;
    });

    Opal.defn(self, '$initialize_copy', function(other) {
      var self = this;

      return self.$replace(other);
    });

    Opal.defn(self, '$collect', TMP_6 = function() {
      var $a, $b, TMP_7, self = this, $iter = TMP_6.$$p, block = $iter || nil;

      TMP_6.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

        return self.$size()}, TMP_7.$$s = self, TMP_7), $a).call($b, "collect")
      };
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);

        if (value === $breaker) {
          return $breaker.$v;
        }

        result.push(value);
      }

      return result;
    
    });

    Opal.defn(self, '$collect!', TMP_8 = function() {
      var $a, $b, TMP_9, self = this, $iter = TMP_8.$$p, block = $iter || nil;

      TMP_8.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

        return self.$size()}, TMP_9.$$s = self, TMP_9), $a).call($b, "collect!")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);

        if (value === $breaker) {
          return $breaker.$v;
        }

        self[i] = value;
      }
    
      return self;
    });

    
    function binomial_coefficient(n, k) {
      if (n === k || k === 0) {
        return 1;
      }

      if (k > 0 && n > k) {
        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);
      }

      return 0;
    }
  

    Opal.defn(self, '$combination', TMP_10 = function(n) {
      var $a, $b, TMP_11, self = this, $iter = TMP_10.$$p, $yield = $iter || nil, num = nil;

      TMP_10.$$p = null;
      num = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

        return binomial_coefficient(self.length, num);}, TMP_11.$$s = self, TMP_11), $a).call($b, "combination", num)
      };
      
      var i, length, stack, chosen, lev, done, next;

      if (num === 0) {
        ((($a = Opal.yield1($yield, [])) === $breaker) ? $breaker.$v : $a)
      } else if (num === 1) {
        for (i = 0, length = self.length; i < length; i++) {
          ((($a = Opal.yield1($yield, [self[i]])) === $breaker) ? $breaker.$v : $a)
        }
      }
      else if (num === self.length) {
        ((($a = Opal.yield1($yield, self.slice())) === $breaker) ? $breaker.$v : $a)
      }
      else if (num >= 0 && num < self.length) {
        stack = [];
        for (i = 0; i <= num + 1; i++) {
          stack.push(0);
        }

        chosen = [];
        lev = 0;
        done = false;
        stack[0] = -1;

        while (!done) {
          chosen[lev] = self[stack[lev+1]];
          while (lev < num - 1) {
            lev++;
            next = stack[lev+1] = stack[lev] + 1;
            chosen[lev] = self[next];
          }
          ((($a = Opal.yield1($yield, chosen.slice())) === $breaker) ? $breaker.$v : $a)
          lev++;
          do {
            done = (lev === 0);
            stack[lev]++;
            lev--;
          } while ( stack[lev+1] + num === self.length + lev + 1 );
        }
      }
    ;
      return self;
    });

    Opal.defn(self, '$compact', function() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length, item; i < length; i++) {
        if ((item = self[i]) !== nil) {
          result.push(item);
        }
      }

      return result;
    
    });

    Opal.defn(self, '$compact!', function() {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = self.length; i < length; i++) {
        if (self[i] === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    });

    Opal.defn(self, '$concat', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      for (var i = 0, length = other.length; i < length; i++) {
        self.push(other[i]);
      }
    
      return self;
    });

    Opal.defn(self, '$delete', TMP_12 = function(object) {
      var $a, self = this, $iter = TMP_12.$$p, $yield = $iter || nil;

      TMP_12.$$p = null;
      
      var original = self.length;

      for (var i = 0, length = original; i < length; i++) {
        if ((self[i])['$=='](object)) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      if (self.length === original) {
        if (($yield !== nil)) {
          return ((($a = Opal.yieldX($yield, [])) === $breaker) ? $breaker.$v : $a);
        }
        return nil;
      }
      return object;
    ;
    });

    Opal.defn(self, '$delete_at', function(index) {
      var self = this;

      
      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      var result = self[index];

      self.splice(index, 1);

      return result;
    ;
    });

    Opal.defn(self, '$delete_if', TMP_13 = function() {
      var $a, $b, TMP_14, self = this, $iter = TMP_13.$$p, block = $iter || nil;

      TMP_13.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;

        return self.$size()}, TMP_14.$$s = self, TMP_14), $a).call($b, "delete_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        if ((value = block(self[i])) === $breaker) {
          return $breaker.$v;
        }

        if (value !== false && value !== nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    });

    Opal.defn(self, '$drop', function(number) {
      var self = this;

      
      if (number < 0) {
        self.$raise($scope.get('ArgumentError'))
      }

      return self.slice(number);
    ;
    });

    Opal.defn(self, '$each', TMP_15 = function() {
      var $a, $b, TMP_16, self = this, $iter = TMP_15.$$p, block = $iter || nil;

      TMP_15.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

        return self.$size()}, TMP_16.$$s = self, TMP_16), $a).call($b, "each")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);

        if (value == $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    });

    Opal.defn(self, '$each_index', TMP_17 = function() {
      var $a, $b, TMP_18, self = this, $iter = TMP_17.$$p, block = $iter || nil;

      TMP_17.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

        return self.$size()}, TMP_18.$$s = self, TMP_18), $a).call($b, "each_index")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, i);

        if (value === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    });

    Opal.defn(self, '$empty?', function() {
      var self = this;

      return self.length === 0;
    });

    Opal.defn(self, '$eql?', function(other) {
      var self = this;

      
      var recursed = {};

      function _eql(array, other) {
        var i, length, a, b;

        if (!other.$$is_array) {
          return false;
        }

        other = other.$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eql(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eql(self, other);
    
    });

    Opal.defn(self, '$fetch', TMP_19 = function(index, defaults) {
      var self = this, $iter = TMP_19.$$p, block = $iter || nil;

      TMP_19.$$p = null;
      
      var original = index;

      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index >= 0 && index < self.length) {
        return self[index];
      }

      if (block !== nil) {
        return block(original);
      }

      if (defaults != null) {
        return defaults;
      }

      if (self.length === 0) {
        self.$raise($scope.get('IndexError'), "index " + (original) + " outside of array bounds: 0...0")
      }
      else {
        self.$raise($scope.get('IndexError'), "index " + (original) + " outside of array bounds: -" + (self.length) + "..." + (self.length));
      }
    ;
    });

    Opal.defn(self, '$fill', TMP_20 = function() {
      var $a, $b, self = this, $iter = TMP_20.$$p, block = $iter || nil, one = nil, two = nil, obj = nil, left = nil, right = nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_20.$$p = null;
      
      var i, length, value;
    
      if (block !== false && block !== nil) {
        if ((($a = args.length > 2) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$length()) + " for 0..2)")};
        $b = args, $a = Opal.to_ary($b), one = ($a[0] == null ? nil : $a[0]), two = ($a[1] == null ? nil : $a[1]), $b;
        } else {
        if ((($a = args.length == 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        } else if ((($a = args.length > 3) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$length()) + " for 1..3)")};
        $b = args, $a = Opal.to_ary($b), obj = ($a[0] == null ? nil : $a[0]), one = ($a[1] == null ? nil : $a[1]), two = ($a[2] == null ? nil : $a[2]), $b;
      };
      if ((($a = $scope.get('Range')['$==='](one)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if (two !== false && two !== nil) {
          self.$raise($scope.get('TypeError'), "length invalid with range")};
        left = $scope.get('Opal').$coerce_to(one.$begin(), $scope.get('Integer'), "to_int");
        if ((($a = left < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          left += self.length;};
        if ((($a = left < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "" + (one.$inspect()) + " out of range")};
        right = $scope.get('Opal').$coerce_to(one.$end(), $scope.get('Integer'), "to_int");
        if ((($a = right < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          right += self.length;};
        if ((($a = one['$exclude_end?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          right += 1;
        };
        if ((($a = right <= left) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self};
      } else if (one !== false && one !== nil) {
        left = $scope.get('Opal').$coerce_to(one, $scope.get('Integer'), "to_int");
        if ((($a = left < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          left += self.length;};
        if ((($a = left < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          left = 0};
        if (two !== false && two !== nil) {
          right = $scope.get('Opal').$coerce_to(two, $scope.get('Integer'), "to_int");
          if ((($a = right == 0) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self};
          right += left;
          } else {
          right = self.length
        };
        } else {
        left = 0;
        right = self.length;
      };
      if ((($a = left > self.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        
        for (i = self.length; i < right; i++) {
          self[i] = nil;
        }
      ;};
      if ((($a = right > self.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.length = right};
      if (block !== false && block !== nil) {
        
        for (length = self.length; left < right; left++) {
          value = block(left);

          if (value === $breaker) {
            return $breaker.$v;
          }

          self[left] = value;
        }
      ;
        } else {
        
        for (length = self.length; left < right; left++) {
          self[left] = obj;
        }
      ;
      };
      return self;
    });

    Opal.defn(self, '$first', function(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[0];
      }

      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative array size");
      }

      return self.slice(0, count);
    
    });

    Opal.defn(self, '$flatten', function(level) {
      var self = this;

      
      function _flatten(array, level) {
        var result = [],
            i, length,
            item, ary;

        array = (array).$to_a();

        for (i = 0, length = array.length; i < length; i++) {
          item = array[i];

          if (!$scope.get('Opal')['$respond_to?'](item, "to_ary")) {
            result.push(item);
            continue;
          }

          ary = (item).$to_ary();

          if (ary === nil) {
            result.push(item);
            continue;
          }

          if (!ary.$$is_array) {
            self.$raise($scope.get('TypeError'));
          }

          if (ary === self) {
            self.$raise($scope.get('ArgumentError'));
          }

          switch (level) {
          case undefined:
            result.push.apply(result, _flatten(ary));
            break;
          case 0:
            result.push(ary);
            break;
          default:
            result.push.apply(result, _flatten(ary, level - 1));
          }
        }
        return result;
      }

      if (level !== undefined) {
        level = $scope.get('Opal').$coerce_to(level, $scope.get('Integer'), "to_int");
      }

      return _flatten(self, level);
    
    });

    Opal.defn(self, '$flatten!', function(level) {
      var self = this;

      
      var flattened = self.$flatten(level);

      if (self.length == flattened.length) {
        for (var i = 0, length = self.length; i < length; i++) {
          if (self[i] !== flattened[i]) {
            break;
          }
        }

        if (i == length) {
          return nil;
        }
      }

      self.$replace(flattened);
    ;
      return self;
    });

    Opal.defn(self, '$hash', function() {
      var self = this;

      
      var top = (Opal.hash_ids == undefined),
          result = ['A'],
          hash_id = self.$object_id(),
          item, i, key;

      try {
        if (top) {
          Opal.hash_ids = {};
        }

        if (Opal.hash_ids.hasOwnProperty(hash_id)) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          if (Opal.hash_ids.hasOwnProperty(key)) {
            item = Opal.hash_ids[key];
            if (self['$eql?'](item)) {
              return 'self';
            }
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (i = 0; i < self.length; i++) {
          item = self[i];
          result.push(item.$hash());
        }

        return result.join(',');
      } finally {
        if (top) {
          delete Opal.hash_ids;
        }
      }
    
    });

    Opal.defn(self, '$include?', function(member) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        if ((self[i])['$=='](member)) {
          return true;
        }
      }

      return false;
    
    });

    Opal.defn(self, '$index', TMP_21 = function(object) {
      var self = this, $iter = TMP_21.$$p, block = $iter || nil;

      TMP_21.$$p = null;
      
      var i, length, value;

      if (object != null) {
        for (i = 0, length = self.length; i < length; i++) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = 0, length = self.length; i < length; i++) {
          if ((value = block(self[i])) === $breaker) {
            return $breaker.$v;
          }

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else {
        return self.$enum_for("index");
      }

      return nil;
    
    });

    Opal.defn(self, '$insert', function(index) {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var objects = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        objects[$splat_index] = arguments[$splat_index + 1];
      }
      
      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (objects.length > 0) {
        if (index < 0) {
          index += self.length + 1;

          if (index < 0) {
            self.$raise($scope.get('IndexError'), "" + (index) + " is out of bounds");
          }
        }
        if (index > self.length) {
          for (var i = self.length; i < index; i++) {
            self.push(nil);
          }
        }

        self.splice.apply(self, [index, 0].concat(objects));
      }
    ;
      return self;
    });

    Opal.defn(self, '$inspect', function() {
      var self = this;

      
      var result = [],
          id     = self.$__id__();

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self['$[]'](i);

        if ((item).$__id__() === id) {
          result.push('[...]');
        }
        else {
          result.push((item).$inspect());
        }
      }

      return '[' + result.join(', ') + ']';
    ;
    });

    Opal.defn(self, '$join', function(sep) {
      var $a, self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      if (sep == null) {
        sep = nil
      }
      if ((($a = self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ""};
      if ((($a = sep === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        sep = $gvars[","]};
      
      var result = [];
      var i, length, item, tmp;

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];

        if ($scope.get('Opal')['$respond_to?'](item, "to_str")) {
          tmp = (item).$to_str();

          if (tmp !== nil) {
            result.push((tmp).$to_s());

            continue;
          }
        }

        if ($scope.get('Opal')['$respond_to?'](item, "to_ary")) {
          tmp = (item).$to_ary();

          if (tmp === self) {
            self.$raise($scope.get('ArgumentError'));
          }

          if (tmp !== nil) {
            result.push((tmp).$join(sep));

            continue;
          }
        }

        if ($scope.get('Opal')['$respond_to?'](item, "to_s")) {
          tmp = (item).$to_s();

          if (tmp !== nil) {
            result.push(tmp);

            continue;
          }
        }

        self.$raise($scope.get('NoMethodError').$new("" + ($scope.get('Opal').$inspect(item)) + " doesn't respond to #to_str, #to_ary or #to_s", "to_str"));
      }

      if (sep === nil) {
        return result.join('');
      }
      else {
        return result.join($scope.get('Opal')['$coerce_to!'](sep, $scope.get('String'), "to_str").$to_s());
      }
    ;
    });

    Opal.defn(self, '$keep_if', TMP_22 = function() {
      var $a, $b, TMP_23, self = this, $iter = TMP_22.$$p, block = $iter || nil;

      TMP_22.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

        return self.$size()}, TMP_23.$$s = self, TMP_23), $a).call($b, "keep_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        if ((value = block(self[i])) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    });

    Opal.defn(self, '$last', function(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[self.length - 1];
      }

      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative array size");
      }

      if (count > self.length) {
        count = self.length;
      }

      return self.slice(self.length - count, self.length);
    
    });

    Opal.defn(self, '$length', function() {
      var self = this;

      return self.length;
    });

    Opal.alias(self, 'map', 'collect');

    Opal.alias(self, 'map!', 'collect!');

    Opal.defn(self, '$permutation', TMP_24 = function(num) {
      var $a, $b, TMP_25, self = this, $iter = TMP_24.$$p, block = $iter || nil, perm = nil, used = nil;

      TMP_24.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

        return self.$size()}, TMP_25.$$s = self, TMP_25), $a).call($b, "permutation", num)
      };
      
      var permute, offensive, output;

      if (num === undefined) {
        num = self.length;
      }
      else {
        num = $scope.get('Opal').$coerce_to(num, $scope.get('Integer'), "to_int")
      }

      if (num < 0 || self.length < num) {
        // no permutations, yield nothing
      }
      else if (num === 0) {
        // exactly one permutation: the zero-length array
        ((($a = Opal.yield1(block, [])) === $breaker) ? $breaker.$v : $a)
      }
      else if (num === 1) {
        // this is a special, easy case
        for (var i = 0; i < self.length; i++) {
          ((($a = Opal.yield1(block, [self[i]])) === $breaker) ? $breaker.$v : $a)
        }
      }
      else {
        // this is the general case
        perm = $scope.get('Array').$new(num)
        used = $scope.get('Array').$new(self.length, false)

        permute = function(num, perm, index, used, blk) {
          self = this;
          for(var i = 0; i < self.length; i++){
            if(used['$[]'](i)['$!']()) {
              perm[index] = i;
              if(index < num - 1) {
                used[i] = true;
                permute.call(self, num, perm, index + 1, used, blk);
                used[i] = false;
              }
              else {
                output = [];
                for (var j = 0; j < perm.length; j++) {
                  output.push(self[perm[j]]);
                }
                Opal.yield1(blk, output);
              }
            }
          }
        }

        if ((block !== nil)) {
          // offensive (both definitions) copy.
          offensive = self.slice();
          permute.call(offensive, num, perm, 0, used, block);
        }
        else {
          permute.call(self, num, perm, 0, used, block);
        }
      }
    ;
      return self;
    });

    Opal.defn(self, '$pop', function(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.pop();};
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
      if ((($a = count < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      if ((($a = self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        return []};
      if ((($a = count > self.length) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.splice(0, self.length);
        } else {
        return self.splice(self.length - count, self.length);
      };
    });

    Opal.defn(self, '$product', TMP_26 = function() {
      var $a, self = this, $iter = TMP_26.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_26.$$p = null;
      
      var result = (block !== nil) ? null : [],
          n = args.length + 1,
          counters = new Array(n),
          lengths  = new Array(n),
          arrays   = new Array(n),
          i, m, subarray, len, resultlen = 1;

      arrays[0] = self;
      for (i = 1; i < n; i++) {
        arrays[i] = $scope.get('Opal').$coerce_to(args[i - 1], $scope.get('Array'), "to_ary");
      }

      for (i = 0; i < n; i++) {
        len = arrays[i].length;
        if (len === 0) {
          return result || self;
        }
        resultlen *= len;
        if (resultlen > 2147483647) {
          self.$raise($scope.get('RangeError'), "too big to product")
        }
        lengths[i] = len;
        counters[i] = 0;
      }

      outer_loop: for (;;) {
        subarray = [];
        for (i = 0; i < n; i++) {
          subarray.push(arrays[i][counters[i]]);
        }
        if (result) {
          result.push(subarray);
        } else {
          ((($a = Opal.yield1(block, subarray)) === $breaker) ? $breaker.$v : $a)
        }
        m = n - 1;
        counters[m]++;
        while (counters[m] === lengths[m]) {
          counters[m] = 0;
          if (--m < 0) break outer_loop;
          counters[m]++;
        }
      }

      return result || self;
    ;
    });

    Opal.defn(self, '$push', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var objects = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        objects[$splat_index] = arguments[$splat_index + 0];
      }
      
      for (var i = 0, length = objects.length; i < length; i++) {
        self.push(objects[i]);
      }
    
      return self;
    });

    Opal.defn(self, '$rassoc', function(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        item = self[i];

        if (item.length && item[1] !== undefined) {
          if ((item[1])['$=='](object)) {
            return item;
          }
        }
      }

      return nil;
    
    });

    Opal.defn(self, '$reject', TMP_27 = function() {
      var $a, $b, TMP_28, self = this, $iter = TMP_27.$$p, block = $iter || nil;

      TMP_27.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this;

        return self.$size()}, TMP_28.$$s = self, TMP_28), $a).call($b, "reject")
      };
      
      var result = [];

      for (var i = 0, length = self.length, value; i < length; i++) {
        if ((value = block(self[i])) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          result.push(self[i]);
        }
      }
      return result;
    
    });

    Opal.defn(self, '$reject!', TMP_29 = function() {
      var $a, $b, TMP_30, $c, self = this, $iter = TMP_29.$$p, block = $iter || nil, original = nil;

      TMP_29.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this;

        return self.$size()}, TMP_30.$$s = self, TMP_30), $a).call($b, "reject!")
      };
      original = self.$length();
      ($a = ($c = self).$delete_if, $a.$$p = block.$to_proc(), $a).call($c);
      if (self.$length()['$=='](original)) {
        return nil
        } else {
        return self
      };
    });

    Opal.defn(self, '$replace', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      self.splice(0, self.length);
      self.push.apply(self, other);
    
      return self;
    });

    Opal.defn(self, '$reverse', function() {
      var self = this;

      return self.slice(0).reverse();
    });

    Opal.defn(self, '$reverse!', function() {
      var self = this;

      return self.reverse();
    });

    Opal.defn(self, '$reverse_each', TMP_31 = function() {
      var $a, $b, TMP_32, $c, self = this, $iter = TMP_31.$$p, block = $iter || nil;

      TMP_31.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this;

        return self.$size()}, TMP_32.$$s = self, TMP_32), $a).call($b, "reverse_each")
      };
      ($a = ($c = self.$reverse()).$each, $a.$$p = block.$to_proc(), $a).call($c);
      return self;
    });

    Opal.defn(self, '$rindex', TMP_33 = function(object) {
      var self = this, $iter = TMP_33.$$p, block = $iter || nil;

      TMP_33.$$p = null;
      
      var i, value;

      if (object != null) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }
          if ((value = block(self[i])) === $breaker) {
            return $breaker.$v;
          }
          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else if (object == null) {
        return self.$enum_for("rindex");
      }

      return nil;
    
    });

    Opal.defn(self, '$rotate', function(n) {
      var self = this;

      if (n == null) {
        n = 1
      }
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
      
      var ary, idx, firstPart, lastPart;

      if (self.length === 1) {
        return self.slice();
      }
      if (self.length === 0) {
        return [];
      }

      ary = self.slice();
      idx = n % ary.length;

      firstPart = ary.slice(idx);
      lastPart = ary.slice(0, idx);
      return firstPart.concat(lastPart);
    
    });

    Opal.defn(self, '$rotate!', function(cnt) {
      var self = this, ary = nil;

      if (cnt == null) {
        cnt = 1
      }
      
      if (self.length === 0 || self.length === 1) {
        return self;
      }
    
      cnt = $scope.get('Opal').$coerce_to(cnt, $scope.get('Integer'), "to_int");
      ary = self.$rotate(cnt);
      return self.$replace(ary);
    });

    (function($base, $super) {
      function $SampleRandom(){};
      var self = $SampleRandom = $klass($base, $super, 'SampleRandom', $SampleRandom);

      var def = self.$$proto, $scope = self.$$scope;

      def.rng = nil;
      Opal.defn(self, '$initialize', function(rng) {
        var self = this;

        return self.rng = rng;
      });

      return (Opal.defn(self, '$rand', function(size) {
        var $a, self = this, random = nil;

        random = $scope.get('Opal').$coerce_to(self.rng.$rand(size), $scope.get('Integer'), "to_int");
        if ((($a = random < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "random value must be >= 0")};
        if ((($a = random < size) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('RangeError'), "random value must be less than Array size")
        };
        return random;
      }), nil) && 'rand';
    })($scope.base, null);

    Opal.defn(self, '$sample', function(count, options) {
      var $a, $b, self = this, o = nil, rng = nil;

      if ((($a = count === undefined) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$at($scope.get('Kernel').$rand(self.length))};
      if ((($a = options === undefined) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = (o = $scope.get('Opal')['$coerce_to?'](count, $scope.get('Hash'), "to_hash"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          options = o;
          count = nil;
          } else {
          options = nil;
          count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
        }
        } else {
        count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
        options = $scope.get('Opal').$coerce_to(options, $scope.get('Hash'), "to_hash");
      };
      if ((($a = (($b = count !== false && count !== nil) ? count < 0 : count)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "count must be greater than 0")};
      if (options !== false && options !== nil) {
        rng = options['$[]']("random")};
      if ((($a = (($b = rng !== false && rng !== nil) ? rng['$respond_to?']("rand") : rng)) !== nil && (!$a.$$is_boolean || $a == true))) {
        rng = $scope.get('SampleRandom').$new(rng)
        } else {
        rng = $scope.get('Kernel')
      };
      if (count !== false && count !== nil) {
        } else {
        return self[rng.$rand(self.length)]
      };
      

      var abandon, spin, result, i, j, k, targetIndex, oldValue;

      if (count > self.length) {
        count = self.length;
      }

      switch (count) {
        case 0:
          return [];
          break;
        case 1:
          return [self[rng.$rand(self.length)]];
          break;
        case 2:
          i = rng.$rand(self.length);
          j = rng.$rand(self.length);
          if (i === j) {
            j = i === 0 ? i + 1 : i - 1;
          }
          return [self[i], self[j]];
          break;
        default:
          if (self.length / count > 3) {
            abandon = false;
            spin = 0;

            result = $scope.get('Array').$new(count);
            i = 1;

            result[0] = rng.$rand(self.length);
            while (i < count) {
              k = rng.$rand(self.length);
              j = 0;

              while (j < i) {
                while (k === result[j]) {
                  spin++;
                  if (spin > 100) {
                    abandon = true;
                    break;
                  }
                  k = rng.$rand(self.length);
                }
                if (abandon) { break; }

                j++;
              }

              if (abandon) { break; }

              result[i] = k;

              i++;
            }

            if (!abandon) {
              i = 0;
              while (i < count) {
                result[i] = self[result[i]];
                i++;
              }

              return result;
            }
          }

          result = self.slice();

          for (var c = 0; c < count; c++) {
            targetIndex = rng.$rand(self.length);
            oldValue = result[c];
            result[c] = result[targetIndex];
            result[targetIndex] = oldValue;
          }

          return count === self.length ? result : (result)['$[]'](0, count);
      }
    
    });

    Opal.defn(self, '$select', TMP_34 = function() {
      var $a, $b, TMP_35, self = this, $iter = TMP_34.$$p, block = $iter || nil;

      TMP_34.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this;

        return self.$size()}, TMP_35.$$s = self, TMP_35), $a).call($b, "select")
      };
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        if ((value = Opal.yield1(block, item)) === $breaker) {
          return $breaker.$v;
        }

        if (value !== false && value !== nil) {
          result.push(item);
        }
      }

      return result;
    
    });

    Opal.defn(self, '$select!', TMP_36 = function() {
      var $a, $b, TMP_37, $c, self = this, $iter = TMP_36.$$p, block = $iter || nil;

      TMP_36.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this;

        return self.$size()}, TMP_37.$$s = self, TMP_37), $a).call($b, "select!")
      };
      
      var original = self.length;
      ($a = ($c = self).$keep_if, $a.$$p = block.$to_proc(), $a).call($c);
      return self.length === original ? nil : self;
    
    });

    Opal.defn(self, '$shift', function(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.shift();};
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
      if ((($a = count < 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      if ((($a = self.length === 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        return []};
      return self.splice(0, count);
    });

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$shuffle', function(rng) {
      var self = this;

      return self.$dup()['$shuffle!'](rng);
    });

    Opal.defn(self, '$shuffle!', function(rng) {
      var self = this;

      
      var randgen, i = self.length, j, tmp;

      if (rng !== undefined) {
        rng = $scope.get('Opal')['$coerce_to?'](rng, $scope.get('Hash'), "to_hash");

        if (rng !== nil) {
          rng = rng['$[]']("random");

          if (rng !== nil && rng['$respond_to?']("rand")) {
            randgen = rng;
          }
        }
      }

      while (i) {
        if (randgen) {
          j = randgen.$rand(i).$to_int();

          if (j < 0) {
            self.$raise($scope.get('RangeError'), "random number too small " + (j))
          }

          if (j >= i) {
            self.$raise($scope.get('RangeError'), "random number too big " + (j))
          }
        }
        else {
          j = Math.floor(Math.random() * i);
        }

        tmp = self[--i];
        self[i] = self[j];
        self[j] = tmp;
      }

      return self;
    ;
    });

    Opal.alias(self, 'slice', '[]');

    Opal.defn(self, '$slice!', function(index, length) {
      var self = this;

      
      if (index < 0) {
        index += self.length;
      }

      if (length != null) {
        return self.splice(index, length);
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self.splice(index, 1)[0];
    
    });

    Opal.defn(self, '$sort', TMP_38 = function() {
      var $a, self = this, $iter = TMP_38.$$p, block = $iter || nil;

      TMP_38.$$p = null;
      if ((($a = self.length > 1) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return self
      };
      
      if (block === nil) {
        block = function(a, b) {
          return (a)['$<=>'](b);
        };
      }

      try {
        return self.slice().sort(function(x, y) {
          var ret = block(x, y);

          if (ret === $breaker) {
            throw $breaker;
          }
          else if (ret === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison of " + ((x).$inspect()) + " with " + ((y).$inspect()) + " failed");
          }

          return $rb_gt(ret, 0) ? 1 : ($rb_lt(ret, 0) ? -1 : 0);
        });
      }
      catch (e) {
        if (e === $breaker) {
          return $breaker.$v;
        }
        else {
          throw e;
        }
      }
    ;
    });

    Opal.defn(self, '$sort!', TMP_39 = function() {
      var $a, $b, self = this, $iter = TMP_39.$$p, block = $iter || nil;

      TMP_39.$$p = null;
      
      var result;

      if ((block !== nil)) {
        result = ($a = ($b = (self.slice())).$sort, $a.$$p = block.$to_proc(), $a).call($b);
      }
      else {
        result = (self.slice()).$sort();
      }

      self.length = 0;
      for(var i = 0, length = result.length; i < length; i++) {
        self.push(result[i]);
      }

      return self;
    ;
    });

    Opal.defn(self, '$take', function(count) {
      var self = this;

      
      if (count < 0) {
        self.$raise($scope.get('ArgumentError'));
      }

      return self.slice(0, count);
    ;
    });

    Opal.defn(self, '$take_while', TMP_40 = function() {
      var self = this, $iter = TMP_40.$$p, block = $iter || nil;

      TMP_40.$$p = null;
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        if ((value = block(item)) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          return result;
        }

        result.push(item);
      }

      return result;
    
    });

    Opal.defn(self, '$to_a', function() {
      var self = this;

      return self;
    });

    Opal.alias(self, 'to_ary', 'to_a');

    Opal.defn(self, '$to_h', function() {
      var self = this;

      
      var i, len = self.length, ary, key, val, hash = $hash2([], {});

      for (i = 0; i < len; i++) {
        ary = $scope.get('Opal')['$coerce_to?'](self[i], $scope.get('Array'), "to_ary");
        if (!ary.$$is_array) {
          self.$raise($scope.get('TypeError'), "wrong element type " + ((ary).$class()) + " at " + (i) + " (expected array)")
        }
        if (ary.length !== 2) {
          self.$raise($scope.get('ArgumentError'), "wrong array length at " + (i) + " (expected 2, was " + ((ary).$length()) + ")")
        }
        key = ary[0];
        val = ary[1];
        Opal.hash_put(hash, key, val);
      }

      return hash;
    ;
    });

    Opal.alias(self, 'to_s', 'inspect');

    Opal.defn(self, '$transpose', function() {
      var $a, $b, TMP_41, self = this, result = nil, max = nil;

      if ((($a = self['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return []};
      result = [];
      max = nil;
      ($a = ($b = self).$each, $a.$$p = (TMP_41 = function(row){var self = TMP_41.$$s || this, $a, $b, TMP_42;
if (row == null) row = nil;
      if ((($a = $scope.get('Array')['$==='](row)) !== nil && (!$a.$$is_boolean || $a == true))) {
          row = row.$to_a()
          } else {
          row = $scope.get('Opal').$coerce_to(row, $scope.get('Array'), "to_ary").$to_a()
        };
        ((($a = max) !== false && $a !== nil) ? $a : max = row.length);
        if ((($a = (row.length)['$!='](max)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "element size differs (" + (row.length) + " should be " + (max))};
        return ($a = ($b = (row.length)).$times, $a.$$p = (TMP_42 = function(i){var self = TMP_42.$$s || this, $a, $b, $c, entry = nil;
if (i == null) i = nil;
        entry = (($a = i, $b = result, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, []))));
          return entry['$<<'](row.$at(i));}, TMP_42.$$s = self, TMP_42), $a).call($b);}, TMP_41.$$s = self, TMP_41), $a).call($b);
      return result;
    });

    Opal.defn(self, '$uniq', TMP_43 = function() {
      var self = this, $iter = TMP_43.$$p, block = $iter || nil;

      TMP_43.$$p = null;
      
      var hash = $hash2([], {}), i, length, item, key;

      if (block === nil) {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          if (Opal.hash_get(hash, item) === undefined) {
            Opal.hash_put(hash, item, item);
          }
        }
      }
      else {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          key = Opal.yield1(block, item);
          if (Opal.hash_get(hash, key) === undefined) {
            Opal.hash_put(hash, key, item);
          }
        }
      }

      return hash.$values();
    ;
    });

    Opal.defn(self, '$uniq!', TMP_44 = function() {
      var self = this, $iter = TMP_44.$$p, block = $iter || nil;

      TMP_44.$$p = null;
      
      var original_length = self.length, hash = $hash2([], {}), i, length, item, key;

      for (i = 0, length = original_length; i < length; i++) {
        item = self[i];
        key = (block === nil ? item : Opal.yield1(block, item));

        if (Opal.hash_get(hash, key) === undefined) {
          Opal.hash_put(hash, key, item);
          continue;
        }

        self.splice(i, 1);
        length--;
        i--;
      }

      return self.length === original_length ? nil : self;
    ;
    });

    Opal.defn(self, '$unshift', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var objects = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        objects[$splat_index] = arguments[$splat_index + 0];
      }
      
      for (var i = objects.length - 1; i >= 0; i--) {
        self.unshift(objects[i]);
      }
    
      return self;
    });

    Opal.defn(self, '$values_at', function() {
      var $a, $b, TMP_45, self = this, out = nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      out = [];
      ($a = ($b = args).$each, $a.$$p = (TMP_45 = function(elem){var self = TMP_45.$$s || this, $a, $b, TMP_46, finish = nil, start = nil, i = nil;
if (elem == null) elem = nil;
      if ((($a = elem['$kind_of?']($scope.get('Range'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          finish = $scope.get('Opal').$coerce_to(elem.$last(), $scope.get('Integer'), "to_int");
          start = $scope.get('Opal').$coerce_to(elem.$first(), $scope.get('Integer'), "to_int");
          
          if (start < 0) {
            start = start + self.length;
            return nil;;
          }
        
          
          if (finish < 0) {
            finish = finish + self.length;
          }
          if (elem['$exclude_end?']()) {
            finish--;
          }
          if (finish < start) {
            return nil;;
          }
        
          return ($a = ($b = start).$upto, $a.$$p = (TMP_46 = function(i){var self = TMP_46.$$s || this;
if (i == null) i = nil;
          return out['$<<'](self.$at(i))}, TMP_46.$$s = self, TMP_46), $a).call($b, finish);
          } else {
          i = $scope.get('Opal').$coerce_to(elem, $scope.get('Integer'), "to_int");
          return out['$<<'](self.$at(i));
        }}, TMP_45.$$s = self, TMP_45), $a).call($b);
      return out;
    });

    return (Opal.defn(self, '$zip', TMP_47 = function() {
      var $a, self = this, $iter = TMP_47.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var others = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        others[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_47.$$p = null;
      
      var result = [], size = self.length, part, o, i, j, jj;

      for (j = 0, jj = others.length; j < jj; j++) {
        o = others[j];
        if (o.$$is_array) {
          continue;
        }
        if (o.$$is_enumerator) {
          if (o.$size() === Infinity) {
            others[j] = o.$take(size);
          } else {
            others[j] = o.$to_a();
          }
          continue;
        }
        others[j] = (((($a = $scope.get('Opal')['$coerce_to?'](o, $scope.get('Array'), "to_ary")) !== false && $a !== nil) ? $a : $scope.get('Opal')['$coerce_to!'](o, $scope.get('Enumerator'), "each"))).$to_a();
      }

      for (i = 0; i < size; i++) {
        part = [self[i]];

        for (j = 0, jj = others.length; j < jj; j++) {
          o = others[j][i];

          if (o == null) {
            o = nil;
          }

          part[j + 1] = o;
        }

        result[i] = part;
      }

      if (block !== nil) {
        for (i = 0; i < size; i++) {
          block(result[i]);
        }

        return nil;
      }

      return result;
    
    }), nil) && 'zip';
  })($scope.base, Array);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/hash"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$[]', '$merge!', '$allocate', '$raise', '$==', '$coerce_to!', '$lambda?', '$abs', '$arity', '$call', '$enum_for', '$size', '$inspect', '$flatten', '$eql?', '$default', '$to_proc', '$dup', '$===', '$default_proc', '$default_proc=', '$default=', '$alias_method']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_5, TMP_7, TMP_9, TMP_11, TMP_12, TMP_14, TMP_15, TMP_16, TMP_18, TMP_20, TMP_22;

    def.proc = def.none = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_hash = true;

    Opal.defs(self, '$[]', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var argv = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        argv[$splat_index] = arguments[$splat_index + 0];
      }
      
      var hash, argc = argv.length, i;

      if (argc === 1) {
        hash = $scope.get('Opal')['$coerce_to?'](argv['$[]'](0), $scope.get('Hash'), "to_hash");
        if (hash !== nil) {
          return self.$allocate()['$merge!'](hash);
        }

        argv = $scope.get('Opal')['$coerce_to?'](argv['$[]'](0), $scope.get('Array'), "to_ary");
        if (argv === nil) {
          self.$raise($scope.get('ArgumentError'), "odd number of arguments for Hash")
        }

        argc = argv.length;
        hash = self.$allocate();

        for (i = 0; i < argc; i++) {
          if (!argv[i].$$is_array) continue;
          switch(argv[i].length) {
          case 1:
            hash.$store(argv[i][0], nil);
            break;
          case 2:
            hash.$store(argv[i][0], argv[i][1]);
            break;
          default:
            self.$raise($scope.get('ArgumentError'), "invalid number of elements (" + (argv[i].length) + " for 1..2)")
          }
        }

        return hash;
      }

      if (argc % 2 !== 0) {
        self.$raise($scope.get('ArgumentError'), "odd number of arguments for Hash")
      }

      hash = self.$allocate();

      for (i = 0; i < argc; i += 2) {
        hash.$store(argv[i], argv[i + 1]);
      }

      return hash;
    ;
    });

    Opal.defs(self, '$allocate', function() {
      var self = this;

      
      var hash = new self.$$alloc();

      Opal.hash_init(hash);

      hash.none = nil;
      hash.proc = nil;

      return hash;
    
    });

    Opal.defs(self, '$try_convert', function(obj) {
      var self = this;

      return $scope.get('Opal')['$coerce_to?'](obj, $scope.get('Hash'), "to_hash");
    });

    Opal.defn(self, '$initialize', TMP_1 = function(defaults) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      
      if (defaults !== undefined && block !== nil) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (1 for 0)")
      }
      self.none = (defaults === undefined ? nil : defaults);
      self.proc = block;
    ;
      return self;
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      
      if (self === other) {
        return true;
      }

      if (!other.$$is_hash) {
        return false;
      }

      if (self.$$keys.length !== other.$$keys.length) {
        return false;
      }

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
          other_value = other.$$smap[key];
        } else {
          value = key.value;
          other_value = Opal.hash_get(other, key.key);
        }

        if (other_value === undefined || !value['$eql?'](other_value)) {
          return false;
        }
      }

      return true;
    
    });

    Opal.defn(self, '$[]', function(key) {
      var self = this;

      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      return self.$default(key);
    
    });

    Opal.defn(self, '$[]=', function(key, value) {
      var self = this;

      
      Opal.hash_put(self, key, value);
      return value;
    
    });

    Opal.defn(self, '$assoc', function(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          if ((key)['$=='](object)) {
            return [key, self.$$smap[key]];
          }
        } else {
          if ((key.key)['$=='](object)) {
            return [key.key, key.value];
          }
        }
      }

      return nil;
    
    });

    Opal.defn(self, '$clear', function() {
      var self = this;

      
      Opal.hash_init(self);
      return self;
    
    });

    Opal.defn(self, '$clone', function() {
      var self = this;

      
      var hash = new self.$$class.$$alloc();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    });

    Opal.defn(self, '$default', function(key) {
      var self = this;

      
      if (key !== undefined && self.proc !== nil) {
        return self.proc.$call(self, key);
      }
      return self.none;
    ;
    });

    Opal.defn(self, '$default=', function(object) {
      var self = this;

      
      self.proc = nil;
      self.none = object;

      return object;
    
    });

    Opal.defn(self, '$default_proc', function() {
      var self = this;

      return self.proc;
    });

    Opal.defn(self, '$default_proc=', function(proc) {
      var self = this;

      
      if (proc !== nil) {
        proc = $scope.get('Opal')['$coerce_to!'](proc, $scope.get('Proc'), "to_proc");

        if (proc['$lambda?']() && proc.$arity().$abs() !== 2) {
          self.$raise($scope.get('TypeError'), "default_proc takes two arguments");
        }
      }

      self.none = nil;
      self.proc = proc;

      return proc;
    ;
    });

    Opal.defn(self, '$delete', TMP_2 = function(key) {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      
      var value = Opal.hash_delete(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block.$call(key);
      }

      return nil;
    
    });

    Opal.defn(self, '$delete_if', TMP_3 = function() {
      var $a, $b, TMP_4, self = this, $iter = TMP_3.$$p, block = $iter || nil;

      TMP_3.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return self.$size()}, TMP_4.$$s = self, TMP_4), $a).call($b, "delete_if")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === $breaker) {
          return $breaker.$v;
        }

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    
    });

    Opal.alias(self, 'dup', 'clone');

    Opal.defn(self, '$each', TMP_5 = function() {
      var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

        return self.$size()}, TMP_6.$$s = self, TMP_6), $a).call($b, "each")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = Opal.yield1(block, [key, value]);

        if (obj === $breaker) {
          return $breaker.$v;
        }
      }

      return self;
    
    });

    Opal.defn(self, '$each_key', TMP_7 = function() {
      var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, block = $iter || nil;

      TMP_7.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

        return self.$size()}, TMP_8.$$s = self, TMP_8), $a).call($b, "each_key")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (block(key.$$is_string ? key : key.key) === $breaker) {
          return $breaker.$v;
        }
      }

      return self;
    
    });

    Opal.alias(self, 'each_pair', 'each');

    Opal.defn(self, '$each_value', TMP_9 = function() {
      var $a, $b, TMP_10, self = this, $iter = TMP_9.$$p, block = $iter || nil;

      TMP_9.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

        return self.$size()}, TMP_10.$$s = self, TMP_10), $a).call($b, "each_value")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (block(key.$$is_string ? self.$$smap[key] : key.value) === $breaker) {
          return $breaker.$v;
        }
      }

      return self;
    
    });

    Opal.defn(self, '$empty?', function() {
      var self = this;

      return self.$$keys.length === 0;
    });

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$fetch', TMP_11 = function(key, defaults) {
      var self = this, $iter = TMP_11.$$p, block = $iter || nil;

      TMP_11.$$p = null;
      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        value = block(key);

        if (value === $breaker) {
          return $breaker.$v;
        }

        return value;
      }

      if (defaults !== undefined) {
        return defaults;
      }
    
      return self.$raise($scope.get('KeyError'), "key not found: " + (key.$inspect()));
    });

    Opal.defn(self, '$flatten', function(level) {
      var self = this;

      if (level == null) {
        level = 1
      }
      level = $scope.get('Opal')['$coerce_to!'](level, $scope.get('Integer'), "to_int");
      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push(key);

        if (value.$$is_array) {
          if (level === 1) {
            result.push(value);
            continue;
          }

          result = result.concat((value).$flatten(level - 2));
          continue;
        }

        result.push(value);
      }

      return result;
    
    });

    Opal.defn(self, '$has_key?', function(key) {
      var self = this;

      return Opal.hash_get(self, key) !== undefined;
    });

    Opal.defn(self, '$has_value?', function(value) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (((key.$$is_string ? self.$$smap[key] : key.value))['$=='](value)) {
          return true;
        }
      }

      return false;
    
    });

    Opal.defn(self, '$hash', function() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          hash_id = self.$object_id(),
          result = ['Hash'],
          key, item;

      try {
        if (top) {
          Opal.hash_ids = {};
        }

        if (Opal.hash_ids.hasOwnProperty(hash_id)) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          if (Opal.hash_ids.hasOwnProperty(key)) {
            item = Opal.hash_ids[key];
            if (self['$eql?'](item)) {
              return 'self';
            }
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            result.push([key, self.$$smap[key].$hash()]);
          } else {
            result.push([key.key_hash, key.value.$hash()]);
          }
        }

        return result.sort().join();

      } finally {
        if (top) {
          delete Opal.hash_ids;
        }
      }
    
    });

    Opal.alias(self, 'include?', 'has_key?');

    Opal.defn(self, '$index', function(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return key;
        }
      }

      return nil;
    
    });

    Opal.defn(self, '$indexes', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      
      var result = [];

      for (var i = 0, length = args.length, key, value; i < length; i++) {
        key = args[i];
        value = Opal.hash_get(self, key);

        if (value === undefined) {
          result.push(self.$default());
          continue;
        }

        result.push(value);
      }

      return result;
    
    });

    Opal.alias(self, 'indices', 'indexes');

    var inspect_ids;

    Opal.defn(self, '$inspect', function() {
      var self = this;

      
      var top = (inspect_ids === undefined),
          hash_id = self.$object_id(),
          result = [];

      try {
        if (top) {
          inspect_ids = {};
        }

        if (inspect_ids.hasOwnProperty(hash_id)) {
          return '{...}';
        }

        inspect_ids[hash_id] = true;

        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            value = self.$$smap[key];
          } else {
            value = key.value;
            key = key.key;
          }

          result.push(key.$inspect() + '=>' + value.$inspect());
        }

        return '{' + result.join(', ') + '}';

      } finally {
        if (top) {
          inspect_ids = undefined;
        }
      }
    
    });

    Opal.defn(self, '$invert', function() {
      var self = this;

      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.hash_put(hash, value, key);
      }

      return hash;
    
    });

    Opal.defn(self, '$keep_if', TMP_12 = function() {
      var $a, $b, TMP_13, self = this, $iter = TMP_12.$$p, block = $iter || nil;

      TMP_12.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

        return self.$size()}, TMP_13.$$s = self, TMP_13), $a).call($b, "keep_if")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === $breaker) {
          return $breaker.$v;
        }

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    
    });

    Opal.alias(self, 'key', 'index');

    Opal.alias(self, 'key?', 'has_key?');

    Opal.defn(self, '$keys', function() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(key);
        } else {
          result.push(key.key);
        }
      }

      return result;
    
    });

    Opal.defn(self, '$length', function() {
      var self = this;

      return self.$$keys.length;
    });

    Opal.alias(self, 'member?', 'has_key?');

    Opal.defn(self, '$merge', TMP_14 = function(other) {
      var $a, $b, self = this, $iter = TMP_14.$$p, block = $iter || nil;

      TMP_14.$$p = null;
      return ($a = ($b = self.$dup())['$merge!'], $a.$$p = block.$to_proc(), $a).call($b, other);
    });

    Opal.defn(self, '$merge!', TMP_15 = function(other) {
      var self = this, $iter = TMP_15.$$p, block = $iter || nil;

      TMP_15.$$p = null;
      
      if (!$scope.get('Hash')['$==='](other)) {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Hash'), "to_hash");
      }

      var i, other_keys = other.$$keys, length = other_keys.length, key, value, other_value;

      if (block === nil) {
        for (i = 0; i < length; i++) {
          key = other_keys[i];

          if (key.$$is_string) {
            other_value = other.$$smap[key];
          } else {
            other_value = key.value;
            key = key.key;
          }

          Opal.hash_put(self, key, other_value);
        }

        return self;
      }

      for (i = 0; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        value = Opal.hash_get(self, key);

        if (value === undefined) {
          Opal.hash_put(self, key, other_value);
          continue;
        }

        Opal.hash_put(self, key, block(key, value, other_value));
      }

      return self;
    ;
    });

    Opal.defn(self, '$rassoc', function(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return [key, value];
        }
      }

      return nil;
    
    });

    Opal.defn(self, '$rehash', function() {
      var self = this;

      
      Opal.hash_rehash(self);
      return self;
    
    });

    Opal.defn(self, '$reject', TMP_16 = function() {
      var $a, $b, TMP_17, self = this, $iter = TMP_16.$$p, block = $iter || nil;

      TMP_16.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

        return self.$size()}, TMP_17.$$s = self, TMP_17), $a).call($b, "reject")
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === $breaker) {
          return $breaker.$v;
        }

        if (obj === false || obj === nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    
    });

    Opal.defn(self, '$reject!', TMP_18 = function() {
      var $a, $b, TMP_19, self = this, $iter = TMP_18.$$p, block = $iter || nil;

      TMP_18.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

        return self.$size()}, TMP_19.$$s = self, TMP_19), $a).call($b, "reject!")
      };
      
      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === $breaker) {
          return $breaker.$v;
        }

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    
    });

    Opal.defn(self, '$replace', function(other) {
      var $a, $b, self = this;

      other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Hash'), "to_hash");
      
      Opal.hash_init(self);

      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        Opal.hash_put(self, key, other_value);
      }
    
      if ((($a = other.$default_proc()) !== nil && (!$a.$$is_boolean || $a == true))) {
        (($a = [other.$default_proc()]), $b = self, $b['$default_proc='].apply($b, $a), $a[$a.length-1])
        } else {
        (($a = [other.$default()]), $b = self, $b['$default='].apply($b, $a), $a[$a.length-1])
      };
      return self;
    });

    Opal.defn(self, '$select', TMP_20 = function() {
      var $a, $b, TMP_21, self = this, $iter = TMP_20.$$p, block = $iter || nil;

      TMP_20.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

        return self.$size()}, TMP_21.$$s = self, TMP_21), $a).call($b, "select")
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === $breaker) {
          return $breaker.$v;
        }

        if (obj !== false && obj !== nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    
    });

    Opal.defn(self, '$select!', TMP_22 = function() {
      var $a, $b, TMP_23, self = this, $iter = TMP_22.$$p, block = $iter || nil;

      TMP_22.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

        return self.$size()}, TMP_23.$$s = self, TMP_23), $a).call($b, "select!")
      };
      
      var result = nil;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === $breaker) {
          return $breaker.$v;
        }

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
          result = self;
        }
      }

      return result;
    
    });

    Opal.defn(self, '$shift', function() {
      var self = this;

      
      var keys = self.$$keys,
          key;

      if (keys.length > 0) {
        key = keys[0];

        key = key.$$is_string ? key : key.key;

        return [key, Opal.hash_delete(self, key)];
      }

      return self.$default(nil);
    
    });

    Opal.alias(self, 'size', 'length');

    self.$alias_method("store", "[]=");

    Opal.defn(self, '$to_a', function() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push([key, value]);
      }

      return result;
    
    });

    Opal.defn(self, '$to_h', function() {
      var self = this;

      
      if (self.$$class === Opal.Hash) {
        return self;
      }

      var hash = new Opal.Hash.$$alloc();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    });

    Opal.defn(self, '$to_hash', function() {
      var self = this;

      return self;
    });

    Opal.alias(self, 'to_s', 'inspect');

    Opal.alias(self, 'update', 'merge!');

    Opal.alias(self, 'value?', 'has_value?');

    Opal.alias(self, 'values_at', 'indexes');

    return (Opal.defn(self, '$values', function() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(self.$$smap[key]);
        } else {
          result.push(key.value);
        }
      }

      return result;
    
    }), nil) && 'values';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/number"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$bridge', '$raise', '$class', '$Float', '$respond_to?', '$coerce_to!', '$__coerced__', '$===', '$!', '$>', '$**', '$new', '$<', '$to_f', '$==', '$nan?', '$infinite?', '$enum_for', '$+', '$-', '$gcd', '$lcm', '$/', '$frexp', '$to_i', '$ldexp', '$rationalize', '$*', '$<<', '$to_r', '$-@', '$size', '$<=', '$>=']);
  self.$require("corelib/numeric");
  (function($base, $super) {
    function $Number(){};
    var self = $Number = $klass($base, $super, 'Number', $Number);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11;

    $scope.get('Opal').$bridge(self, Number);

    Number.prototype.$$is_number = true;

    Opal.defn(self, '$coerce', function(other) {
      var self = this;

      
      if (other === nil) {
        self.$raise($scope.get('TypeError'), "can't convert " + (other.$class()) + " into Float");
      }
      else if (other.$$is_string) {
        return [self.$Float(other), self];
      }
      else if (other['$respond_to?']("to_f")) {
        return [$scope.get('Opal')['$coerce_to!'](other, $scope.get('Float'), "to_f"), self];
      }
      else if (other.$$is_number) {
        return [other, self];
      }
      else {
        self.$raise($scope.get('TypeError'), "can't convert " + (other.$class()) + " into Float");
      }
    ;
    });

    Opal.defn(self, '$__id__', function() {
      var self = this;

      return (self * 2) + 1;
    });

    Opal.alias(self, 'object_id', '__id__');

    Opal.defn(self, '$+', function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self + other;
      }
      else {
        return self.$__coerced__("+", other);
      }
    
    });

    Opal.defn(self, '$-', function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self - other;
      }
      else {
        return self.$__coerced__("-", other);
      }
    
    });

    Opal.defn(self, '$*', function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self * other;
      }
      else {
        return self.$__coerced__("*", other);
      }
    
    });

    Opal.defn(self, '$/', function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self / other;
      }
      else {
        return self.$__coerced__("/", other);
      }
    
    });

    Opal.alias(self, 'fdiv', '/');

    Opal.defn(self, '$%', function(other) {
      var self = this;

      
      if (other.$$is_number) {
        if (other == -Infinity) {
          return other;
        }
        else if (other == 0) {
          self.$raise($scope.get('ZeroDivisionError'), "divided by 0");
        }
        else if (other < 0 || self < 0) {
          return (self % other + other) % other;
        }
        else {
          return self % other;
        }
      }
      else {
        return self.$__coerced__("%", other);
      }
    
    });

    Opal.defn(self, '$&', function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self & other;
      }
      else {
        return self.$__coerced__("&", other);
      }
    
    });

    Opal.defn(self, '$|', function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self | other;
      }
      else {
        return self.$__coerced__("|", other);
      }
    
    });

    Opal.defn(self, '$^', function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self ^ other;
      }
      else {
        return self.$__coerced__("^", other);
      }
    
    });

    Opal.defn(self, '$<', function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self < other;
      }
      else {
        return self.$__coerced__("<", other);
      }
    
    });

    Opal.defn(self, '$<=', function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self <= other;
      }
      else {
        return self.$__coerced__("<=", other);
      }
    
    });

    Opal.defn(self, '$>', function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self > other;
      }
      else {
        return self.$__coerced__(">", other);
      }
    
    });

    Opal.defn(self, '$>=', function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self >= other;
      }
      else {
        return self.$__coerced__(">=", other);
      }
    
    });

    Opal.defn(self, '$<=>', function(other) {
      var self = this;

      try {
      
      if (other.$$is_number) {
        if (isNaN(self) || isNaN(other)) {
          return nil;
        }

        return self > other ? 1 : (self < other ? -1 : 0);
      }
      else {
        return self.$__coerced__("<=>", other);
      }
    
      } catch ($err) {if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
        try {
          return nil
        } finally {
          Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
        }
        }else { throw $err; }
      };
    });

    Opal.defn(self, '$<<', function(count) {
      var self = this;

      count = $scope.get('Opal')['$coerce_to!'](count, $scope.get('Integer'), "to_int");
      return count > 0 ? self << count : self >> -count;
    });

    Opal.defn(self, '$>>', function(count) {
      var self = this;

      count = $scope.get('Opal')['$coerce_to!'](count, $scope.get('Integer'), "to_int");
      return count > 0 ? self >> count : self << -count;
    });

    Opal.defn(self, '$[]', function(bit) {
      var self = this;

      bit = $scope.get('Opal')['$coerce_to!'](bit, $scope.get('Integer'), "to_int");
      
      if (bit < (($scope.get('Integer')).$$scope.get('MIN')) || bit > (($scope.get('Integer')).$$scope.get('MAX'))) {
        return 0;
      }

      if (self < 0) {
        return (((~self) + 1) >> bit) % 2;
      }
      else {
        return (self >> bit) % 2;
      }
    ;
    });

    Opal.defn(self, '$+@', function() {
      var self = this;

      return +self;
    });

    Opal.defn(self, '$-@', function() {
      var self = this;

      return -self;
    });

    Opal.defn(self, '$~', function() {
      var self = this;

      return ~self;
    });

    Opal.defn(self, '$**', function(other) {
      var $a, $b, $c, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = ($scope.get('Integer')['$==='](self))['$!']()) !== false && $b !== nil) ? $b : $rb_gt(other, 0))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return Math.pow(self, other);
          } else {
          return $scope.get('Rational').$new(self, 1)['$**'](other)
        }
      } else if ((($a = (($b = $rb_lt(self, 0)) ? (((($c = $scope.get('Float')['$==='](other)) !== false && $c !== nil) ? $c : $scope.get('Rational')['$==='](other))) : $rb_lt(self, 0))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Complex').$new(self, 0)['$**'](other.$to_f())
      } else if ((($a = other.$$is_number != null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return Math.pow(self, other);
        } else {
        return self.$__coerced__("**", other)
      };
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self == Number(other);
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    ;
    });

    Opal.defn(self, '$abs', function() {
      var self = this;

      return Math.abs(self);
    });

    Opal.defn(self, '$abs2', function() {
      var self = this;

      return Math.abs(self * self);
    });

    Opal.defn(self, '$angle', function() {
      var $a, self = this;

      if ((($a = self['$nan?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      if (self == 0) {
        if (1 / self > 0) {
          return 0;
        }
        else {
          return Math.PI;
        }
      }
      else if (self < 0) {
        return Math.PI;
      }
      else {
        return 0;
      }
    
    });

    Opal.alias(self, 'arg', 'angle');

    Opal.alias(self, 'phase', 'angle');

    Opal.defn(self, '$bit_length', function() {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NoMethodError').$new("undefined method `bit_length` for " + (self) + ":Float", "bit_length"))
      };
      
      if (self === 0 || self === -1) {
        return 0;
      }

      var result = 0,
          value  = self < 0 ? ~self : self;

      while (value != 0) {
        result   += 1;
        value  >>>= 1;
      }

      return result;
    
    });

    Opal.defn(self, '$ceil', function() {
      var self = this;

      return Math.ceil(self);
    });

    Opal.defn(self, '$chr', function(encoding) {
      var self = this;

      return String.fromCharCode(self);
    });

    Opal.defn(self, '$denominator', TMP_1 = function() {
      var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

      TMP_1.$$p = null;
      $zuper = [];
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil) ? $b : self['$infinite?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return 1
        } else {
        return Opal.find_super_dispatcher(self, 'denominator', TMP_1, $iter).apply(self, $zuper)
      };
    });

    Opal.defn(self, '$downto', TMP_2 = function(stop) {
      var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a;

        if ((($a = $scope.get('Numeric')['$==='](stop)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ((($a = $rb_gt(stop, self)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return 0
            } else {
            return $rb_plus($rb_minus(self, stop), 1)
          };}, TMP_3.$$s = self, TMP_3), $a).call($b, "downto", stop)
      };
      
      if (!stop.$$is_number) {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i >= stop; i--) {
        if (block(i) === $breaker) {
          return $breaker.$v;
        }
      }
    ;
      return self;
    });

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$equal?', function(other) {
      var $a, self = this;

      return ((($a = self['$=='](other)) !== false && $a !== nil) ? $a : isNaN(self) && isNaN(other));
    });

    Opal.defn(self, '$even?', function() {
      var self = this;

      return self % 2 === 0;
    });

    Opal.defn(self, '$floor', function() {
      var self = this;

      return Math.floor(self);
    });

    Opal.defn(self, '$gcd', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an integer")
      };
      
      var min = Math.abs(self),
          max = Math.abs(other);

      while (min > 0) {
        var tmp = min;

        min = max % min;
        max = tmp;
      }

      return max;
    
    });

    Opal.defn(self, '$gcdlcm', function(other) {
      var self = this;

      return [self.$gcd(), self.$lcm()];
    });

    Opal.defn(self, '$integer?', function() {
      var self = this;

      return self % 1 === 0;
    });

    Opal.defn(self, '$is_a?', TMP_4 = function(klass) {
      var $a, $b, self = this, $iter = TMP_4.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

      TMP_4.$$p = null;
      $zuper = [];
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = (($b = klass['$==']($scope.get('Fixnum'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Fixnum')))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Integer'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Integer')))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Float'))) ? $scope.get('Float')['$==='](self) : klass['$==']($scope.get('Float')))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      return Opal.find_super_dispatcher(self, 'is_a?', TMP_4, $iter).apply(self, $zuper);
    });

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$instance_of?', TMP_5 = function(klass) {
      var $a, $b, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

      TMP_5.$$p = null;
      $zuper = [];
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = (($b = klass['$==']($scope.get('Fixnum'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Fixnum')))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Integer'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Integer')))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Float'))) ? $scope.get('Float')['$==='](self) : klass['$==']($scope.get('Float')))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true};
      return Opal.find_super_dispatcher(self, 'instance_of?', TMP_5, $iter).apply(self, $zuper);
    });

    Opal.defn(self, '$lcm', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an integer")
      };
      
      if (self == 0 || other == 0) {
        return 0;
      }
      else {
        return Math.abs(self * other / self.$gcd(other));
      }
    
    });

    Opal.alias(self, 'magnitude', 'abs');

    Opal.alias(self, 'modulo', '%');

    Opal.defn(self, '$next', function() {
      var self = this;

      return self + 1;
    });

    Opal.defn(self, '$nonzero?', function() {
      var self = this;

      return self == 0 ? nil : self;
    });

    Opal.defn(self, '$numerator', TMP_6 = function() {
      var $a, $b, self = this, $iter = TMP_6.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

      TMP_6.$$p = null;
      $zuper = [];
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil) ? $b : self['$infinite?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return Opal.find_super_dispatcher(self, 'numerator', TMP_6, $iter).apply(self, $zuper)
      };
    });

    Opal.defn(self, '$odd?', function() {
      var self = this;

      return self % 2 !== 0;
    });

    Opal.defn(self, '$ord', function() {
      var self = this;

      return self;
    });

    Opal.defn(self, '$pred', function() {
      var self = this;

      return self - 1;
    });

    Opal.defn(self, '$quo', TMP_7 = function(other) {
      var $a, self = this, $iter = TMP_7.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

      TMP_7.$$p = null;
      $zuper = [];
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return Opal.find_super_dispatcher(self, 'quo', TMP_7, $iter).apply(self, $zuper)
        } else {
        return $rb_divide(self, other)
      };
    });

    Opal.defn(self, '$rationalize', function(eps) {
      var $a, $b, self = this, f = nil, n = nil;

      
      if (arguments.length > 1) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Rational').$new(self, 1)
      } else if ((($a = self['$infinite?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "Infinity")
      } else if ((($a = self['$nan?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "NaN")
      } else if ((($a = eps == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        $b = $scope.get('Math').$frexp(self), $a = Opal.to_ary($b), f = ($a[0] == null ? nil : $a[0]), n = ($a[1] == null ? nil : $a[1]), $b;
        f = $scope.get('Math').$ldexp(f, (($scope.get('Float')).$$scope.get('MANT_DIG'))).$to_i();
        n = $rb_minus(n, (($scope.get('Float')).$$scope.get('MANT_DIG')));
        return $scope.get('Rational').$new($rb_times(2, f), (1)['$<<'](($rb_minus(1, n)))).$rationalize($scope.get('Rational').$new(1, (1)['$<<'](($rb_minus(1, n)))));
        } else {
        return self.$to_r().$rationalize(eps)
      };
    });

    Opal.defn(self, '$round', function(ndigits) {
      var $a, $b, self = this, _ = nil, exp = nil;

      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ndigits == null) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self};
        if ((($a = ($b = $scope.get('Float')['$==='](ndigits), $b !== false && $b !== nil ?ndigits['$infinite?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "Infinity")};
        ndigits = $scope.get('Opal')['$coerce_to!'](ndigits, $scope.get('Integer'), "to_int");
        if ((($a = $rb_lt(ndigits, (($scope.get('Integer')).$$scope.get('MIN')))) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "out of bounds")};
        if ((($a = ndigits >= 0) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self};
        ndigits = ndigits['$-@']();
        
        if (0.415241 * ndigits - 0.125 > self.$size()) {
          return 0;
        }

        var f = Math.pow(10, ndigits),
            x = Math.floor((Math.abs(x) + f / 2) / f) * f;

        return self < 0 ? -x : x;
      ;
        } else {
        if ((($a = ($b = self['$nan?'](), $b !== false && $b !== nil ?ndigits == null : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('FloatDomainError'), "NaN")};
        ndigits = $scope.get('Opal')['$coerce_to!'](ndigits || 0, $scope.get('Integer'), "to_int");
        if ((($a = $rb_le(ndigits, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self['$nan?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise($scope.get('RangeError'), "NaN")
          } else if ((($a = self['$infinite?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise($scope.get('FloatDomainError'), "Infinity")}
        } else if (ndigits['$=='](0)) {
          return Math.round(self)
        } else if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil) ? $b : self['$infinite?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self};
        $b = $scope.get('Math').$frexp(self), $a = Opal.to_ary($b), _ = ($a[0] == null ? nil : $a[0]), exp = ($a[1] == null ? nil : $a[1]), $b;
        if ((($a = $rb_ge(ndigits, $rb_minus(($rb_plus((($scope.get('Float')).$$scope.get('DIG')), 2)), ((function() {if ((($b = $rb_gt(exp, 0)) !== nil && (!$b.$$is_boolean || $b == true))) {
          return $rb_divide(exp, 4)
          } else {
          return $rb_minus($rb_divide(exp, 3), 1)
        }; return nil; })())))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self};
        if ((($a = $rb_lt(ndigits, ((function() {if ((($b = $rb_gt(exp, 0)) !== nil && (!$b.$$is_boolean || $b == true))) {
          return $rb_plus($rb_divide(exp, 3), 1)
          } else {
          return $rb_divide(exp, 4)
        }; return nil; })())['$-@']())) !== nil && (!$a.$$is_boolean || $a == true))) {
          return 0};
        return Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits);
      };
    });

    Opal.defn(self, '$step', TMP_8 = function(limit, step) {
      var $a, self = this, $iter = TMP_8.$$p, block = $iter || nil;

      if (step == null) {
        step = 1
      }
      TMP_8.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("step", limit, step)
      };
      if ((($a = step == 0) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "step cannot be 0")};
      
      var value = self;

      if (limit === Infinity || limit === -Infinity) {
        block(value);
        return self;
      }

      if (step > 0) {
        while (value <= limit) {
          block(value);
          value += step;
        }
      }
      else {
        while (value >= limit) {
          block(value);
          value += step;
        }
      }
    
      return self;
    });

    Opal.alias(self, 'succ', 'next');

    Opal.defn(self, '$times', TMP_9 = function() {
      var self = this, $iter = TMP_9.$$p, block = $iter || nil;

      TMP_9.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("times")
      };
      
      for (var i = 0; i < self; i++) {
        if (block(i) === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    });

    Opal.defn(self, '$to_f', function() {
      var self = this;

      return self;
    });

    Opal.defn(self, '$to_i', function() {
      var self = this;

      return parseInt(self, 10);
    });

    Opal.alias(self, 'to_int', 'to_i');

    Opal.defn(self, '$to_r', function() {
      var $a, $b, self = this, f = nil, e = nil;

      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Rational').$new(self, 1)
        } else {
        $b = $scope.get('Math').$frexp(self), $a = Opal.to_ary($b), f = ($a[0] == null ? nil : $a[0]), e = ($a[1] == null ? nil : $a[1]), $b;
        f = $scope.get('Math').$ldexp(f, (($scope.get('Float')).$$scope.get('MANT_DIG'))).$to_i();
        e = $rb_minus(e, (($scope.get('Float')).$$scope.get('MANT_DIG')));
        return ($rb_times(f, ((($scope.get('Float')).$$scope.get('RADIX'))['$**'](e)))).$to_r();
      };
    });

    Opal.defn(self, '$to_s', function(base) {
      var $a, $b, self = this;

      if (base == null) {
        base = 10
      }
      if ((($a = ((($b = $rb_lt(base, 2)) !== false && $b !== nil) ? $b : $rb_gt(base, 36))) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "base must be between 2 and 36")};
      return self.toString(base);
    });

    Opal.alias(self, 'truncate', 'to_i');

    Opal.alias(self, 'inspect', 'to_s');

    Opal.defn(self, '$divmod', TMP_10 = function(other) {
      var $a, $b, self = this, $iter = TMP_10.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

      TMP_10.$$p = null;
      $zuper = [];
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil) ? $b : other['$nan?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "NaN")
      } else if ((($a = self['$infinite?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "Infinity")
        } else {
        return Opal.find_super_dispatcher(self, 'divmod', TMP_10, $iter).apply(self, $zuper)
      };
    });

    Opal.defn(self, '$upto', TMP_11 = function(stop) {
      var $a, $b, TMP_12, self = this, $iter = TMP_11.$$p, block = $iter || nil;

      TMP_11.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $a;

        if ((($a = $scope.get('Numeric')['$==='](stop)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ((($a = $rb_lt(stop, self)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return 0
            } else {
            return $rb_plus($rb_minus(stop, self), 1)
          };}, TMP_12.$$s = self, TMP_12), $a).call($b, "upto", stop)
      };
      
      if (!stop.$$is_number) {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i <= stop; i++) {
        if (block(i) === $breaker) {
          return $breaker.$v;
        }
      }
    ;
      return self;
    });

    Opal.defn(self, '$zero?', function() {
      var self = this;

      return self == 0;
    });

    Opal.defn(self, '$size', function() {
      var self = this;

      return 4;
    });

    Opal.defn(self, '$nan?', function() {
      var self = this;

      return isNaN(self);
    });

    Opal.defn(self, '$finite?', function() {
      var self = this;

      return self != Infinity && self != -Infinity && !isNaN(self);
    });

    Opal.defn(self, '$infinite?', function() {
      var self = this;

      
      if (self == Infinity) {
        return +1;
      }
      else if (self == -Infinity) {
        return -1;
      }
      else {
        return nil;
      }
    
    });

    Opal.defn(self, '$positive?', function() {
      var self = this;

      return self == Infinity || 1 / self > 0;
    });

    return (Opal.defn(self, '$negative?', function() {
      var self = this;

      return self == -Infinity || 1 / self < 0;
    }), nil) && 'negative?';
  })($scope.base, $scope.get('Numeric'));
  Opal.cdecl($scope, 'Fixnum', $scope.get('Number'));
  (function($base, $super) {
    function $Integer(){};
    var self = $Integer = $klass($base, $super, 'Integer', $Integer);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$===', function(other) {
      var self = this;

      
      if (!other.$$is_number) {
        return false;
      }

      return (other % 1) === 0;
    
    });

    Opal.cdecl($scope, 'MAX', Math.pow(2, 30) - 1);

    return Opal.cdecl($scope, 'MIN', -Math.pow(2, 30));
  })($scope.base, $scope.get('Numeric'));
  return (function($base, $super) {
    function $Float(){};
    var self = $Float = $klass($base, $super, 'Float', $Float);

    var def = self.$$proto, $scope = self.$$scope, $a;

    Opal.defs(self, '$===', function(other) {
      var self = this;

      return !!other.$$is_number;
    });

    Opal.cdecl($scope, 'INFINITY', Infinity);

    Opal.cdecl($scope, 'MAX', Number.MAX_VALUE);

    Opal.cdecl($scope, 'MIN', Number.MIN_VALUE);

    Opal.cdecl($scope, 'NAN', NaN);

    Opal.cdecl($scope, 'DIG', 15);

    Opal.cdecl($scope, 'MANT_DIG', 53);

    Opal.cdecl($scope, 'RADIX', 2);

    if ((($a = (typeof(Number.EPSILON) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      return Opal.cdecl($scope, 'EPSILON', Number.EPSILON)
      } else {
      return Opal.cdecl($scope, 'EPSILON', 2.2204460492503130808472633361816E-16)
    };
  })($scope.base, $scope.get('Numeric'));
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/range"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$<=>', '$raise', '$include?', '$<=', '$<', '$enum_for', '$upto', '$to_proc', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$-', '$abs', '$to_i', '$inspect']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Range(){};
    var self = $Range = $klass($base, $super, 'Range', $Range);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    def.begin = def.exclude = def.end = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_range = true;

    self.$attr_reader("begin", "end");

    Opal.defn(self, '$initialize', function(first, last, exclude) {
      var $a, self = this;

      if (exclude == null) {
        exclude = false
      }
      if ((($a = first['$<=>'](last)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'))
      };
      self.begin = first;
      self.end = last;
      return self.exclude = exclude;
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      
      if (!other.$$is_range) {
        return false;
      }

      return self.exclude === other.exclude &&
             self.begin   ==  other.begin &&
             self.end     ==  other.end;
    
    });

    Opal.defn(self, '$===', function(value) {
      var self = this;

      return self['$include?'](value);
    });

    Opal.defn(self, '$cover?', function(value) {
      var $a, $b, self = this;

      return ($a = $rb_le(self.begin, value), $a !== false && $a !== nil ?((function() {if ((($b = self.exclude) !== nil && (!$b.$$is_boolean || $b == true))) {
        return $rb_lt(value, self.end)
        } else {
        return $rb_le(value, self.end)
      }; return nil; })()) : $a);
    });

    Opal.defn(self, '$each', TMP_1 = function() {
      var $a, $b, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil, current = nil, last = nil;

      TMP_1.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      
      var i, limit, value;

      if (self.begin.$$is_number && self.end.$$is_number) {
        if (self.begin % 1 !== 0 || self.end % 1 !== 0) {
          self.$raise($scope.get('TypeError'), "can't iterate from Float")
        }

        for (i = self.begin, limit = self.end + (function() {if ((($a = self.exclude) !== nil && (!$a.$$is_boolean || $a == true))) {
        return 0
        } else {
        return 1
      }; return nil; })(); i < limit; i++) {
          value = block(i);
          if (value === $breaker) { return $breaker.$v; }
        }

        return self;
      }

      if (self.begin.$$is_string && self.end.$$is_string) {
        value = ($a = ($b = self.begin).$upto, $a.$$p = block.$to_proc(), $a).call($b, self.end, self.exclude);

        // The following is a bit hackish: we know that
        // String#upto normally returns self, but may
        // return a different value if there's a `break`
        // statement in the supplied block. We need to
        // propagate this `break` value here, so we
        // test for equality with `@begin` string to
        // determine the return value:
        return value === self.begin ? self : value;
      }
    ;
      current = self.begin;
      last = self.end;
      while ((($c = $rb_lt(current, last)) !== nil && (!$c.$$is_boolean || $c == true))) {
      if (Opal.yield1(block, current) === $breaker) return $breaker.$v;
      current = current.$succ();};
      if ((($a = ($c = self.exclude['$!'](), $c !== false && $c !== nil ?current['$=='](last) : $c)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if (Opal.yield1(block, current) === $breaker) return $breaker.$v};
      return self;
    });

    Opal.defn(self, '$eql?', function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Range')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = self.exclude['$==='](other['$exclude_end?']()), $b !== false && $b !== nil ?self.begin['$eql?'](other.$begin()) : $b), $a !== false && $a !== nil ?self.end['$eql?'](other.$end()) : $a);
    });

    Opal.defn(self, '$exclude_end?', function() {
      var self = this;

      return self.exclude;
    });

    Opal.alias(self, 'first', 'begin');

    Opal.alias(self, 'include?', 'cover?');

    Opal.alias(self, 'last', 'end');

    Opal.defn(self, '$max', TMP_2 = function() {
      var self = this, $iter = TMP_2.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

      TMP_2.$$p = null;
      $zuper = [];
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if (($yield !== nil)) {
        return Opal.find_super_dispatcher(self, 'max', TMP_2, $iter).apply(self, $zuper)
        } else {
        return self.exclude ? self.end - 1 : self.end;
      };
    });

    Opal.alias(self, 'member?', 'cover?');

    Opal.defn(self, '$min', TMP_3 = function() {
      var self = this, $iter = TMP_3.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

      TMP_3.$$p = null;
      $zuper = [];
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if (($yield !== nil)) {
        return Opal.find_super_dispatcher(self, 'min', TMP_3, $iter).apply(self, $zuper)
        } else {
        return self.begin
      };
    });

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$size', function() {
      var $a, $b, self = this, _begin = nil, _end = nil, infinity = nil;

      _begin = self.begin;
      _end = self.end;
      if ((($a = self.exclude) !== nil && (!$a.$$is_boolean || $a == true))) {
        _end = $rb_minus(_end, 1)};
      if ((($a = ($b = $scope.get('Numeric')['$==='](_begin), $b !== false && $b !== nil ?$scope.get('Numeric')['$==='](_end) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      if ((($a = $rb_lt(_end, _begin)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return 0};
      infinity = (($scope.get('Float')).$$scope.get('INFINITY'));
      if ((($a = ((($b = infinity['$=='](_begin.$abs())) !== false && $b !== nil) ? $b : _end.$abs()['$=='](infinity))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return infinity};
      return ((Math.abs(_end - _begin) + 1)).$to_i();
    });

    Opal.defn(self, '$step', function(n) {
      var self = this;

      if (n == null) {
        n = 1
      }
      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$to_s', function() {
      var self = this;

      return self.begin.$inspect() + (self.exclude ? '...' : '..') + self.end.$inspect();
    });

    return Opal.alias(self, 'inspect', 'to_s');
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/proc"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$coerce_to!']);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    def.$$is_proc = true;

    def.$$is_lambda = false;

    Opal.defs(self, '$new', TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise($scope.get('ArgumentError'), "tried to create a Proc object without a block")
      };
      return block;
    });

    Opal.defn(self, '$call', TMP_2 = function() {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_2.$$p = null;
      
      if (block !== nil) {
        self.$$p = block;
      }

      var result;

      if (self.$$is_lambda) {
        result = self.apply(null, args);
      }
      else {
        result = Opal.yieldX(self, args);
      }

      if (result === $breaker) {
        return $breaker.$v;
      }

      return result;
    
    });

    Opal.alias(self, '[]', 'call');

    Opal.alias(self, '===', 'call');

    Opal.alias(self, 'yield', 'call');

    Opal.defn(self, '$to_proc', function() {
      var self = this;

      return self;
    });

    Opal.defn(self, '$lambda?', function() {
      var self = this;

      return !!self.$$is_lambda;
    });

    Opal.defn(self, '$arity', function() {
      var self = this;

      if (self.$$is_curried) { return -1; }
      if (self.$$arity) { return self.$$arity };
      return self.length;
    });

    Opal.defn(self, '$source_location', function() {
      var self = this;

      if (self.$$is_curried) { return nil; }
      return nil;
    });

    Opal.defn(self, '$binding', function() {
      var self = this;

      if (self.$$is_curried) { self.$raise($scope.get('ArgumentError'), "Can't create Binding") };
      return nil;
    });

    Opal.defn(self, '$parameters', function() {
      var self = this;

      if (self.$$is_curried) { return [["rest"]]; };
      return nil;
    });

    Opal.defn(self, '$curry', function(arity) {
      var self = this;

      
      if (arity === undefined) {
        arity = self.length;
      }
      else {
        arity = $scope.get('Opal')['$coerce_to!'](arity, $scope.get('Integer'), "to_int");
        if (self.$$is_lambda && arity !== self.length) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arity) + " for " + (self.length) + ")")
        }
      }

      function curried () {
        var args = $slice.call(arguments),
            length = args.length,
            result;

        if (length > arity && self.$$is_lambda && !self.$$is_curried) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (length) + " for " + (arity) + ")")
        }

        if (length >= arity) {
          return self.$call.apply(self, args);
        }

        result = function () {
          return curried.apply(null,
            args.concat($slice.call(arguments)));
        }
        result.$$is_lambda = self.$$is_lambda;
        result.$$is_curried = true;

        return result;
      };

      curried.$$is_lambda = self.$$is_lambda;
      curried.$$is_curried = true;
      return curried;
    
    });

    Opal.defn(self, '$dup', function() {
      var self = this;

      
      var original_proc = self.$$original_proc || self,
          proc = function () {
            return original_proc.apply(this, arguments);
          };

      for (var prop in self) {
        if (self.hasOwnProperty(prop)) {
          proc[prop] = self[prop];
        }
      }

      return proc;
    
    });

    return Opal.alias(self, 'clone', 'dup');
  })($scope.base, Function)
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/method"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$class', '$arity', '$new', '$name']);
  (function($base, $super) {
    function $Method(){};
    var self = $Method = $klass($base, $super, 'Method', $Method);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.method = def.receiver = def.owner = def.name = nil;
    self.$attr_reader("owner", "receiver", "name");

    Opal.defn(self, '$initialize', function(receiver, method, name) {
      var self = this;

      self.receiver = receiver;
      self.owner = receiver.$class();
      self.name = name;
      return self.method = method;
    });

    Opal.defn(self, '$arity', function() {
      var self = this;

      return self.method.$arity();
    });

    Opal.defn(self, '$call', TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_1.$$p = null;
      
      self.method.$$p = block;

      return self.method.apply(self.receiver, args);
    ;
    });

    Opal.alias(self, '[]', 'call');

    Opal.defn(self, '$unbind', function() {
      var self = this;

      return $scope.get('UnboundMethod').$new(self.owner, self.method, self.name);
    });

    Opal.defn(self, '$to_proc', function() {
      var self = this;

      
      var proc = function () { return self.$call.apply(self, $slice.call(arguments)); };
      proc.$$unbound = self.method;
      proc.$$is_lambda = true;
      return proc;
    
    });

    return (Opal.defn(self, '$inspect', function() {
      var self = this;

      return "#<Method: " + (self.receiver.$class()) + "#" + (self.name) + ">";
    }), nil) && 'inspect';
  })($scope.base, null);
  return (function($base, $super) {
    function $UnboundMethod(){};
    var self = $UnboundMethod = $klass($base, $super, 'UnboundMethod', $UnboundMethod);

    var def = self.$$proto, $scope = self.$$scope;

    def.method = def.name = def.owner = nil;
    self.$attr_reader("owner", "name");

    Opal.defn(self, '$initialize', function(owner, method, name) {
      var self = this;

      self.owner = owner;
      self.method = method;
      return self.name = name;
    });

    Opal.defn(self, '$arity', function() {
      var self = this;

      return self.method.$arity();
    });

    Opal.defn(self, '$bind', function(object) {
      var self = this;

      return $scope.get('Method').$new(object, self.method, self.name);
    });

    return (Opal.defn(self, '$inspect', function() {
      var self = this;

      return "#<UnboundMethod: " + (self.owner.$name()) + "#" + (self.name) + ">";
    }), nil) && 'inspect';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/variables"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new']);
  $gvars["&"] = $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
  $gvars.LOADED_FEATURES = $gvars["\""] = Opal.loaded_features;
  $gvars.LOAD_PATH = $gvars[":"] = [];
  $gvars["/"] = "\n";
  $gvars[","] = nil;
  Opal.cdecl($scope, 'ARGV', []);
  Opal.cdecl($scope, 'ARGF', $scope.get('Object').$new());
  Opal.cdecl($scope, 'ENV', $hash2([], {}));
  $gvars.VERBOSE = false;
  $gvars.DEBUG = false;
  return $gvars.SAFE = 0;
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/mini"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("opal/base");
  self.$require("corelib/nil");
  self.$require("corelib/boolean");
  self.$require("corelib/string");
  self.$require("corelib/comparable");
  self.$require("corelib/enumerable");
  self.$require("corelib/enumerator");
  self.$require("corelib/array");
  self.$require("corelib/hash");
  self.$require("corelib/number");
  self.$require("corelib/range");
  self.$require("corelib/proc");
  self.$require("corelib/method");
  self.$require("corelib/regexp");
  return self.$require("corelib/variables");
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/array/inheritance"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$allocate', '$initialize', '$to_proc', '$__send__', '$clone', '$respond_to?', '$==', '$eql?', '$inspect', '$hash', '$*', '$class', '$slice', '$uniq', '$flatten', '$-', '$+']);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defs(self, '$inherited', function(klass) {
      var self = this, replace = nil;

      replace = $scope.get('Class').$new((($scope.get('Array')).$$scope.get('Wrapper')));
      
      klass.$$proto         = replace.$$proto;
      klass.$$proto.$$class = klass;
      klass.$$alloc         = replace.$$alloc;
      klass.$$parent        = (($scope.get('Array')).$$scope.get('Wrapper'));

      klass.$allocate = replace.$allocate;
      klass.$new      = replace.$new;
      klass["$[]"]    = replace["$[]"];
    
    }), nil) && 'inherited'
  })($scope.base, null);
  return (function($base, $super) {
    function $Wrapper(){};
    var self = $Wrapper = $klass($base, $super, 'Wrapper', $Wrapper);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

    def.literal = nil;
    def.$$is_array = true;

    Opal.defs(self, '$allocate', TMP_1 = function(array) {
      var self = this, $iter = TMP_1.$$p, $yield = $iter || nil, obj = nil;

      if (array == null) {
        array = []
      }
      TMP_1.$$p = null;
      obj = Opal.find_super_dispatcher(self, 'allocate', TMP_1, null, $Wrapper).apply(self, []);
      obj.literal = array;
      return obj;
    });

    Opal.defs(self, '$new', TMP_2 = function() {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil, obj = nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_2.$$p = null;
      obj = self.$allocate();
      ($a = ($b = obj).$initialize, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
      return obj;
    });

    Opal.defs(self, '$[]', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var objects = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        objects[$splat_index] = arguments[$splat_index + 0];
      }
      return self.$allocate(objects);
    });

    Opal.defn(self, '$initialize', TMP_3 = function() {
      var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_3.$$p = null;
      return self.literal = ($a = ($b = $scope.get('Array')).$new, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
    });

    Opal.defn(self, '$method_missing', TMP_4 = function() {
      var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil, result = nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_4.$$p = null;
      result = ($a = ($b = self.literal).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
      if ((($a = result === self.literal) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return result
      };
    });

    Opal.defn(self, '$initialize_copy', function(other) {
      var self = this;

      return self.literal = (other.literal).$clone();
    });

    Opal.defn(self, '$respond_to?', TMP_5 = function(name) {
      var $a, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

      TMP_5.$$p = null;
      $zuper = [];
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return ((($a = Opal.find_super_dispatcher(self, 'respond_to?', TMP_5, $iter).apply(self, $zuper)) !== false && $a !== nil) ? $a : self.literal['$respond_to?'](name));
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return self.literal['$=='](other);
    });

    Opal.defn(self, '$eql?', function(other) {
      var self = this;

      return self.literal['$eql?'](other);
    });

    Opal.defn(self, '$to_a', function() {
      var self = this;

      return self.literal;
    });

    Opal.defn(self, '$to_ary', function() {
      var self = this;

      return self;
    });

    Opal.defn(self, '$inspect', function() {
      var self = this;

      return self.literal.$inspect();
    });

    Opal.defn(self, '$hash', function() {
      var self = this;

      return self.literal.$hash();
    });

    Opal.defn(self, '$*', function(other) {
      var self = this;

      
      var result = $rb_times(self.literal, other);

      if (result.$$is_array) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    ;
    });

    Opal.defn(self, '$[]', function(index, length) {
      var self = this;

      
      var result = self.literal.$slice(index, length);

      if (result.$$is_array && (index.$$is_range || length !== undefined)) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    ;
    });

    Opal.alias(self, 'slice', '[]');

    Opal.defn(self, '$uniq', function() {
      var self = this;

      return self.$class().$allocate(self.literal.$uniq());
    });

    Opal.defn(self, '$flatten', function(level) {
      var self = this;

      return self.$class().$allocate(self.literal.$flatten(level));
    });

    Opal.defn(self, '$-', function(other) {
      var self = this;

      return $rb_minus(self.literal, other);
    });

    return (Opal.defn(self, '$+', function(other) {
      var self = this;

      return $rb_plus(self.literal, other);
    }), nil) && '+';
  })($scope.get('Array'), null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/string/inheritance"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$new', '$allocate', '$initialize', '$to_proc', '$__send__', '$class', '$clone', '$respond_to?', '$==', '$inspect', '$+', '$*', '$map', '$split', '$enum_for', '$each_line', '$to_a', '$%']);
  self.$require("corelib/string");
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defs(self, '$inherited', function(klass) {
      var self = this, replace = nil;

      replace = $scope.get('Class').$new((($scope.get('String')).$$scope.get('Wrapper')));
      
      klass.$$proto         = replace.$$proto;
      klass.$$proto.$$class = klass;
      klass.$$alloc         = replace.$$alloc;
      klass.$$parent        = (($scope.get('String')).$$scope.get('Wrapper'));

      klass.$allocate = replace.$allocate;
      klass.$new      = replace.$new;
    
    }), nil) && 'inherited'
  })($scope.base, null);
  return (function($base, $super) {
    function $Wrapper(){};
    var self = $Wrapper = $klass($base, $super, 'Wrapper', $Wrapper);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_8;

    def.literal = nil;
    def.$$is_string = true;

    Opal.defs(self, '$allocate', TMP_1 = function(string) {
      var self = this, $iter = TMP_1.$$p, $yield = $iter || nil, obj = nil;

      if (string == null) {
        string = ""
      }
      TMP_1.$$p = null;
      obj = Opal.find_super_dispatcher(self, 'allocate', TMP_1, null, $Wrapper).apply(self, []);
      obj.literal = string;
      return obj;
    });

    Opal.defs(self, '$new', TMP_2 = function() {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil, obj = nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_2.$$p = null;
      obj = self.$allocate();
      ($a = ($b = obj).$initialize, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
      return obj;
    });

    Opal.defs(self, '$[]', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var objects = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        objects[$splat_index] = arguments[$splat_index + 0];
      }
      return self.$allocate(objects);
    });

    Opal.defn(self, '$initialize', function(string) {
      var self = this;

      if (string == null) {
        string = ""
      }
      return self.literal = string;
    });

    Opal.defn(self, '$method_missing', TMP_3 = function() {
      var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil, result = nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_3.$$p = null;
      result = ($a = ($b = self.literal).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
      if ((($a = result.$$is_string != null) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = result == self.literal) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self
          } else {
          return self.$class().$allocate(result)
        }
        } else {
        return result
      };
    });

    Opal.defn(self, '$initialize_copy', function(other) {
      var self = this;

      return self.literal = (other.literal).$clone();
    });

    Opal.defn(self, '$respond_to?', TMP_4 = function(name) {
      var $a, self = this, $iter = TMP_4.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

      TMP_4.$$p = null;
      $zuper = [];
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return ((($a = Opal.find_super_dispatcher(self, 'respond_to?', TMP_4, $iter).apply(self, $zuper)) !== false && $a !== nil) ? $a : self.literal['$respond_to?'](name));
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return self.literal['$=='](other);
    });

    Opal.alias(self, 'eql?', '==');

    Opal.alias(self, '===', '==');

    Opal.defn(self, '$to_s', function() {
      var self = this;

      return self.literal;
    });

    Opal.alias(self, 'to_str', 'to_s');

    Opal.defn(self, '$inspect', function() {
      var self = this;

      return self.literal.$inspect();
    });

    Opal.defn(self, '$+', function(other) {
      var self = this;

      return $rb_plus(self.literal, other);
    });

    Opal.defn(self, '$*', function(other) {
      var self = this;

      
      var result = $rb_times(self.literal, other);

      if (result.$$is_string) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    ;
    });

    Opal.defn(self, '$split', function(pattern, limit) {
      var $a, $b, TMP_5, self = this;

      return ($a = ($b = self.literal.$split(pattern, limit)).$map, $a.$$p = (TMP_5 = function(str){var self = TMP_5.$$s || this;
if (str == null) str = nil;
      return self.$class().$allocate(str)}, TMP_5.$$s = self, TMP_5), $a).call($b);
    });

    Opal.defn(self, '$replace', function(string) {
      var self = this;

      return self.literal = string;
    });

    Opal.defn(self, '$each_line', TMP_6 = function(separator) {
      var $a, $b, TMP_7, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      TMP_6.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_line", separator)
      };
      return ($a = ($b = self.literal).$each_line, $a.$$p = (TMP_7 = function(str){var self = TMP_7.$$s || this, $a;
if (str == null) str = nil;
      return $a = Opal.yield1($yield, self.$class().$allocate(str)), $a === $breaker ? $a : $a}, TMP_7.$$s = self, TMP_7), $a).call($b, separator);
    });

    Opal.defn(self, '$lines', TMP_8 = function(separator) {
      var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      TMP_8.$$p = null;
      e = ($a = ($b = self).$each_line, $a.$$p = block.$to_proc(), $a).call($b, separator);
      if (block !== false && block !== nil) {
        return self
        } else {
        return e.$to_a()
      };
    });

    return (Opal.defn(self, '$%', function(data) {
      var self = this;

      return self.literal['$%'](data);
    }), nil) && '%';
  })($scope.get('String'), null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/string/encoding"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $a, $b, TMP_4, $c, TMP_6, $d, TMP_8, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$+', '$[]', '$new', '$to_proc', '$each', '$const_set', '$sub', '$upcase', '$const_get', '$===', '$==', '$name', '$include?', '$names', '$constants', '$raise', '$attr_accessor', '$attr_reader', '$register', '$length', '$bytes', '$to_a', '$each_byte', '$bytesize', '$enum_for', '$force_encoding', '$dup', '$coerce_to!', '$find', '$nil?', '$getbyte']);
  self.$require("corelib/string");
  (function($base, $super) {
    function $Encoding(){};
    var self = $Encoding = $klass($base, $super, 'Encoding', $Encoding);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.ascii = def.dummy = def.name = nil;
    Opal.defs(self, '$register', TMP_1 = function(name, options) {
      var $a, $b, $c, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil, names = nil, encoding = nil;

      if (options == null) {
        options = $hash2([], {})
      }
      TMP_1.$$p = null;
      names = $rb_plus([name], (((($a = options['$[]']("aliases")) !== false && $a !== nil) ? $a : [])));
      encoding = ($a = ($b = $scope.get('Class')).$new, $a.$$p = block.$to_proc(), $a).call($b, self).$new(name, names, ((($a = options['$[]']("ascii")) !== false && $a !== nil) ? $a : false), ((($a = options['$[]']("dummy")) !== false && $a !== nil) ? $a : false));
      return ($a = ($c = names).$each, $a.$$p = (TMP_2 = function(name){var self = TMP_2.$$s || this;
if (name == null) name = nil;
      return self.$const_set(name.$sub("-", "_"), encoding)}, TMP_2.$$s = self, TMP_2), $a).call($c);
    });

    Opal.defs(self, '$find', function(name) {try {

      var $a, $b, TMP_3, self = this, upcase = nil;

      upcase = name.$upcase();
      ($a = ($b = self.$constants()).$each, $a.$$p = (TMP_3 = function(const$){var self = TMP_3.$$s || this, $a, $b, encoding = nil;
if (const$ == null) const$ = nil;
      encoding = self.$const_get(const$);
        if ((($a = $scope.get('Encoding')['$==='](encoding)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil;
        };
        if ((($a = ((($b = encoding.$name()['$=='](upcase)) !== false && $b !== nil) ? $b : encoding.$names()['$include?'](upcase))) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.ret(encoding)
          } else {
          return nil
        };}, TMP_3.$$s = self, TMP_3), $a).call($b);
      return self.$raise($scope.get('ArgumentError'), "unknown encoding name - " + (name));
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    });

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$attr_accessor("default_external")
    })(Opal.get_singleton_class(self));

    self.$attr_reader("name", "names");

    Opal.defn(self, '$initialize', function(name, names, ascii, dummy) {
      var self = this;

      self.name = name;
      self.names = names;
      self.ascii = ascii;
      return self.dummy = dummy;
    });

    Opal.defn(self, '$ascii_compatible?', function() {
      var self = this;

      return self.ascii;
    });

    Opal.defn(self, '$dummy?', function() {
      var self = this;

      return self.dummy;
    });

    Opal.defn(self, '$to_s', function() {
      var self = this;

      return self.name;
    });

    Opal.defn(self, '$inspect', function() {
      var $a, self = this;

      return "#<Encoding:" + (self.name) + ((function() {if ((($a = self.dummy) !== nil && (!$a.$$is_boolean || $a == true))) {
        return " (dummy)"
        } else {
        return nil
      }; return nil; })()) + ">";
    });

    Opal.defn(self, '$each_byte', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$getbyte', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    });

    Opal.defn(self, '$bytesize', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    });

    (function($base, $super) {
      function $EncodingError(){};
      var self = $EncodingError = $klass($base, $super, 'EncodingError', $EncodingError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('StandardError'));

    return (function($base, $super) {
      function $CompatibilityError(){};
      var self = $CompatibilityError = $klass($base, $super, 'CompatibilityError', $CompatibilityError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('EncodingError'));
  })($scope.base, null);
  ($a = ($b = $scope.get('Encoding')).$register, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, TMP_5;

  Opal.def(self, '$each_byte', TMP_5 = function(string) {
      var $a, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        if (code <= 0x7f) {
          ((($a = Opal.yield1(block, code)) === $breaker) ? $breaker.$v : $a);
        }
        else {
          var encoded = encodeURIComponent(string.charAt(i)).substr(1).split('%');

          for (var j = 0, encoded_length = encoded.length; j < encoded_length; j++) {
            ((($a = Opal.yield1(block, parseInt(encoded[j], 16))) === $breaker) ? $breaker.$v : $a);
          }
        }
      }
    
    });
    return (Opal.def(self, '$bytesize', function() {
      var self = this;

      return self.$bytes().$length();
    }), nil) && 'bytesize';}, TMP_4.$$s = self, TMP_4), $a).call($b, "UTF-8", $hash2(["aliases", "ascii"], {"aliases": ["CP65001"], "ascii": true}));
  ($a = ($c = $scope.get('Encoding')).$register, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, TMP_7;

  Opal.def(self, '$each_byte', TMP_7 = function(string) {
      var $a, self = this, $iter = TMP_7.$$p, block = $iter || nil;

      TMP_7.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        ((($a = Opal.yield1(block, code & 0xff)) === $breaker) ? $breaker.$v : $a);
        ((($a = Opal.yield1(block, code >> 8)) === $breaker) ? $breaker.$v : $a);
      }
    
    });
    return (Opal.def(self, '$bytesize', function() {
      var self = this;

      return self.$bytes().$length();
    }), nil) && 'bytesize';}, TMP_6.$$s = self, TMP_6), $a).call($c, "UTF-16LE");
  ($a = ($d = $scope.get('Encoding')).$register, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, TMP_9;

  Opal.def(self, '$each_byte', TMP_9 = function(string) {
      var $a, self = this, $iter = TMP_9.$$p, block = $iter || nil;

      TMP_9.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        ((($a = Opal.yield1(block, string.charCodeAt(i) & 0xff)) === $breaker) ? $breaker.$v : $a);
      }
    
    });
    return (Opal.def(self, '$bytesize', function() {
      var self = this;

      return self.$bytes().$length();
    }), nil) && 'bytesize';}, TMP_8.$$s = self, TMP_8), $a).call($d, "ASCII-8BIT", $hash2(["aliases", "ascii"], {"aliases": ["BINARY"], "ascii": true}));
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_10;

    def.encoding = nil;
    String.prototype.encoding = (($scope.get('Encoding')).$$scope.get('UTF_16LE'));

    Opal.defn(self, '$bytes', function() {
      var self = this;

      return self.$each_byte().$to_a();
    });

    Opal.defn(self, '$bytesize', function() {
      var self = this;

      return self.encoding.$bytesize(self);
    });

    Opal.defn(self, '$each_byte', TMP_10 = function() {
      var $a, $b, self = this, $iter = TMP_10.$$p, block = $iter || nil;

      TMP_10.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_byte")
      };
      ($a = ($b = self.encoding).$each_byte, $a.$$p = block.$to_proc(), $a).call($b, self);
      return self;
    });

    Opal.defn(self, '$encode', function(encoding) {
      var self = this;

      return self.$dup().$force_encoding(encoding);
    });

    Opal.defn(self, '$encoding', function() {
      var self = this;

      return self.encoding;
    });

    Opal.defn(self, '$force_encoding', function(encoding) {
      var $a, self = this;

      encoding = $scope.get('Opal')['$coerce_to!'](encoding, $scope.get('String'), "to_str");
      encoding = $scope.get('Encoding').$find(encoding);
      if (encoding['$=='](self.encoding)) {
        return self};
      if ((($a = encoding['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "unknown encoding name - " + (encoding))};
      
      var result = new String(self);
      result.encoding = encoding;

      return result;
    
    });

    return (Opal.defn(self, '$getbyte', function(idx) {
      var self = this;

      return self.encoding.$getbyte(self, idx);
    }), nil) && 'getbyte';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/math"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new', '$raise', '$Float', '$type_error', '$Integer', '$module_function', '$checked', '$float!', '$===', '$gamma', '$-', '$integer!', '$/', '$infinite?']);
  return (function($base) {
    var $Math, self = $Math = $module($base, 'Math');

    var def = self.$$proto, $scope = self.$$scope, $a;

    Opal.cdecl($scope, 'E', Math.E);

    Opal.cdecl($scope, 'PI', Math.PI);

    Opal.cdecl($scope, 'DomainError', $scope.get('Class').$new($scope.get('StandardError')));

    Opal.defs(self, '$checked', function(method) {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      
      if (isNaN(args[0]) || (args.length == 2 && isNaN(args[1]))) {
        return NaN;
      }

      var result = Math[method].apply(null, args);

      if (isNaN(result)) {
        self.$raise($scope.get('DomainError'), "Numerical argument is out of domain - \"" + (method) + "\"");
      }

      return result;
    
    });

    Opal.defs(self, '$float!', function(value) {
      var self = this;

      try {
      return self.$Float(value)
      } catch ($err) {if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
        try {
          return self.$raise($scope.get('Opal').$type_error(value, $scope.get('Float')))
        } finally {
          Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
        }
        }else { throw $err; }
      };
    });

    Opal.defs(self, '$integer!', function(value) {
      var self = this;

      try {
      return self.$Integer(value)
      } catch ($err) {if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
        try {
          return self.$raise($scope.get('Opal').$type_error(value, $scope.get('Integer')))
        } finally {
          Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
        }
        }else { throw $err; }
      };
    });

    self.$module_function();

    Opal.defn(self, '$acos', function(x) {
      var self = this;

      return $scope.get('Math').$checked("acos", $scope.get('Math')['$float!'](x));
    });

    if ((($a = (typeof(Math.acosh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.acosh = function(x) {
        return Math.log(x + Math.sqrt(x * x - 1));
      }
    
    };

    Opal.defn(self, '$acosh', function(x) {
      var self = this;

      return $scope.get('Math').$checked("acosh", $scope.get('Math')['$float!'](x));
    });

    Opal.defn(self, '$asin', function(x) {
      var self = this;

      return $scope.get('Math').$checked("asin", $scope.get('Math')['$float!'](x));
    });

    if ((($a = (typeof(Math.asinh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.asinh = function(x) {
        return Math.log(x + Math.sqrt(x * x + 1))
      }
    ;
    };

    Opal.defn(self, '$asinh', function(x) {
      var self = this;

      return $scope.get('Math').$checked("asinh", $scope.get('Math')['$float!'](x));
    });

    Opal.defn(self, '$atan', function(x) {
      var self = this;

      return $scope.get('Math').$checked("atan", $scope.get('Math')['$float!'](x));
    });

    Opal.defn(self, '$atan2', function(y, x) {
      var self = this;

      return $scope.get('Math').$checked("atan2", $scope.get('Math')['$float!'](y), $scope.get('Math')['$float!'](x));
    });

    if ((($a = (typeof(Math.atanh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.atanh = function(x) {
        return 0.5 * Math.log((1 + x) / (1 - x));
      }
    
    };

    Opal.defn(self, '$atanh', function(x) {
      var self = this;

      return $scope.get('Math').$checked("atanh", $scope.get('Math')['$float!'](x));
    });

    if ((($a = (typeof(Math.cbrt) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.cbrt = function(x) {
        if (x == 0) {
          return 0;
        }

        if (x < 0) {
          return -Math.cbrt(-x);
        }

        var r  = x,
            ex = 0;

        while (r < 0.125) {
          r *= 8;
          ex--;
        }

        while (r > 1.0) {
          r *= 0.125;
          ex++;
        }

        r = (-0.46946116 * r + 1.072302) * r + 0.3812513;

        while (ex < 0) {
          r *= 0.5;
          ex++;
        }

        while (ex > 0) {
          r *= 2;
          ex--;
        }

        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);

        return r;
      }
    
    };

    Opal.defn(self, '$cbrt', function(x) {
      var self = this;

      return $scope.get('Math').$checked("cbrt", $scope.get('Math')['$float!'](x));
    });

    Opal.defn(self, '$cos', function(x) {
      var self = this;

      return $scope.get('Math').$checked("cos", $scope.get('Math')['$float!'](x));
    });

    if ((($a = (typeof(Math.cosh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) / 2;
      }
    
    };

    Opal.defn(self, '$cosh', function(x) {
      var self = this;

      return $scope.get('Math').$checked("cosh", $scope.get('Math')['$float!'](x));
    });

    if ((($a = (typeof(Math.erf) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.erf = function(x) {
        var A1 =  0.254829592,
            A2 = -0.284496736,
            A3 =  1.421413741,
            A4 = -1.453152027,
            A5 =  1.061405429,
            P  =  0.3275911;

        var sign = 1;

        if (x < 0) {
            sign = -1;
        }

        x = Math.abs(x);

        var t = 1.0 / (1.0 + P * x);
        var y = 1.0 - (((((A5 * t + A4) * t) + A3) * t + A2) * t + A1) * t * Math.exp(-x * x);

        return sign * y;
      }
    
    };

    Opal.defn(self, '$erf', function(x) {
      var self = this;

      return $scope.get('Math').$checked("erf", $scope.get('Math')['$float!'](x));
    });

    if ((($a = (typeof(Math.erfc) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.erfc = function(x) {
        var z = Math.abs(x),
            t = 1.0 / (0.5 * z + 1.0);

        var A1 = t * 0.17087277 + -0.82215223,
            A2 = t * A1 + 1.48851587,
            A3 = t * A2 + -1.13520398,
            A4 = t * A3 + 0.27886807,
            A5 = t * A4 + -0.18628806,
            A6 = t * A5 + 0.09678418,
            A7 = t * A6 + 0.37409196,
            A8 = t * A7 + 1.00002368,
            A9 = t * A8,
            A10 = -z * z - 1.26551223 + A9;

        var a = t * Math.exp(A10);

        if (x < 0.0) {
          return 2.0 - a;
        }
        else {
          return a;
        }
      }
    
    };

    Opal.defn(self, '$erfc', function(x) {
      var self = this;

      return $scope.get('Math').$checked("erfc", $scope.get('Math')['$float!'](x));
    });

    Opal.defn(self, '$exp', function(x) {
      var self = this;

      return $scope.get('Math').$checked("exp", $scope.get('Math')['$float!'](x));
    });

    Opal.defn(self, '$frexp', function(x) {
      var self = this;

      x = $scope.get('Math')['$float!'](x);
      
      if (isNaN(x)) {
        return [NaN, 0];
      }

      var ex   = Math.floor(Math.log(Math.abs(x)) / Math.log(2)) + 1,
          frac = x / Math.pow(2, ex);

      return [frac, ex];
    
    });

    Opal.defn(self, '$gamma', function(n) {
      var self = this;

      n = $scope.get('Math')['$float!'](n);
      
      var i, t, x, value, result, twoN, threeN, fourN, fiveN;

      var G = 4.7421875;

      var P = [
         0.99999999999999709182,
         57.156235665862923517,
        -59.597960355475491248,
         14.136097974741747174,
        -0.49191381609762019978,
         0.33994649984811888699e-4,
         0.46523628927048575665e-4,
        -0.98374475304879564677e-4,
         0.15808870322491248884e-3,
        -0.21026444172410488319e-3,
         0.21743961811521264320e-3,
        -0.16431810653676389022e-3,
         0.84418223983852743293e-4,
        -0.26190838401581408670e-4,
         0.36899182659531622704e-5
      ];


      if (isNaN(n)) {
        return NaN;
      }

      if (n === 0 && 1 / n < 0) {
        return -Infinity;
      }

      if (n === -1 || n === -Infinity) {
        self.$raise($scope.get('DomainError'), "Numerical argument is out of domain - \"gamma\"");
      }

      if ($scope.get('Integer')['$==='](n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity;
        }

        value  = n - 2;
        result = n - 1;

        while (value > 1) {
          result *= value;
          value--;
        }

        if (result == 0) {
          result = 1;
        }

        return result;
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * $scope.get('Math').$gamma($rb_minus(1, n)));
      }

      if (n >= 171.35) {
        return Infinity;
      }

      if (n > 85.0) {
        twoN   = n * n;
        threeN = twoN * n;
        fourN  = threeN * n;
        fiveN  = fourN * n;

        return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *
          (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -
          571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +
          5246819 / (75246796800 * fiveN * n));
      }

      n -= 1;
      x  = P[0];

      for (i = 1; i < P.length; ++i) {
        x += P[i] / (n + i);
      }

      t = n + G + 0.5;

      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    
    });

    if ((($a = (typeof(Math.hypot) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.hypot = function(x, y) {
        return Math.sqrt(x * x + y * y)
      }
    ;
    };

    Opal.defn(self, '$hypot', function(x, y) {
      var self = this;

      return $scope.get('Math').$checked("hypot", $scope.get('Math')['$float!'](x), $scope.get('Math')['$float!'](y));
    });

    Opal.defn(self, '$ldexp', function(mantissa, exponent) {
      var self = this;

      mantissa = $scope.get('Math')['$float!'](mantissa);
      exponent = $scope.get('Math')['$integer!'](exponent);
      
      if (isNaN(exponent)) {
        self.$raise($scope.get('RangeError'), "float NaN out of range of integer");
      }

      return mantissa * Math.pow(2, exponent);
    ;
    });

    Opal.defn(self, '$lgamma', function(n) {
      var self = this;

      
      if (n == -1) {
        return [Infinity, 1];
      }
      else {
        return [Math.log(Math.abs($scope.get('Math').$gamma(n))), $scope.get('Math').$gamma(n) < 0 ? -1 : 1];
      }
    ;
    });

    Opal.defn(self, '$log', function(x, base) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](x)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')))};
      if ((($a = base == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Math').$checked("log", $scope.get('Math')['$float!'](x))
        } else {
        if ((($a = $scope.get('String')['$==='](base)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('Opal').$type_error(base, $scope.get('Float')))};
        return $rb_divide($scope.get('Math').$checked("log", $scope.get('Math')['$float!'](x)), $scope.get('Math').$checked("log", $scope.get('Math')['$float!'](base)));
      };
    });

    if ((($a = (typeof(Math.log10) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.log10 = function(x) {
        return Math.log(x) / Math.LN10;
      }
    
    };

    Opal.defn(self, '$log10', function(x) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](x)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')))};
      return $scope.get('Math').$checked("log10", $scope.get('Math')['$float!'](x));
    });

    if ((($a = (typeof(Math.log2) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.log2 = function(x) {
        return Math.log(x) / Math.LN2;
      }
    
    };

    Opal.defn(self, '$log2', function(x) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](x)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')))};
      return $scope.get('Math').$checked("log2", $scope.get('Math')['$float!'](x));
    });

    Opal.defn(self, '$sin', function(x) {
      var self = this;

      return $scope.get('Math').$checked("sin", $scope.get('Math')['$float!'](x));
    });

    if ((($a = (typeof(Math.sinh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / 2;
      }
    
    };

    Opal.defn(self, '$sinh', function(x) {
      var self = this;

      return $scope.get('Math').$checked("sinh", $scope.get('Math')['$float!'](x));
    });

    Opal.defn(self, '$sqrt', function(x) {
      var self = this;

      return $scope.get('Math').$checked("sqrt", $scope.get('Math')['$float!'](x));
    });

    Opal.defn(self, '$tan', function(x) {
      var $a, self = this;

      x = $scope.get('Math')['$float!'](x);
      if ((($a = x['$infinite?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Float')).$$scope.get('NAN'))};
      return $scope.get('Math').$checked("tan", $scope.get('Math')['$float!'](x));
    });

    if ((($a = (typeof(Math.tanh) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.tanh = function(x) {
        if (x == Infinity) {
          return 1;
        }
        else if (x == -Infinity) {
          return -1;
        }
        else {
          return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
        }
      }
    
    };

    Opal.defn(self, '$tanh', function(x) {
      var self = this;

      return $scope.get('Math').$checked("tanh", $scope.get('Math')['$float!'](x));
    });
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/complex"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$require', '$===', '$real?', '$raise', '$new', '$*', '$cos', '$sin', '$attr_reader', '$class', '$==', '$real', '$imag', '$Complex', '$-@', '$+', '$__coerced__', '$-', '$nan?', '$/', '$conj', '$abs2', '$quo', '$polar', '$exp', '$log', '$>', '$!=', '$divmod', '$**', '$hypot', '$atan2', '$lcm', '$denominator', '$to_s', '$numerator', '$abs', '$arg', '$rationalize', '$to_f', '$to_i', '$to_r', '$inspect', '$positive?', '$infinite?']);
  self.$require("corelib/numeric");
  (function($base, $super) {
    function $Complex(){};
    var self = $Complex = $klass($base, $super, 'Complex', $Complex);

    var def = self.$$proto, $scope = self.$$scope;

    def.real = def.imag = nil;
    Opal.defs(self, '$rect', function(real, imag) {
      var $a, $b, $c, $d, self = this;

      if (imag == null) {
        imag = 0
      }
      if ((($a = ($b = ($c = ($d = $scope.get('Numeric')['$==='](real), $d !== false && $d !== nil ?real['$real?']() : $d), $c !== false && $c !== nil ?$scope.get('Numeric')['$==='](imag) : $c), $b !== false && $b !== nil ?imag['$real?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not a real")
      };
      return self.$new(real, imag);
    });

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return Opal.alias(self, 'rectangular', 'rect')
    })(Opal.get_singleton_class(self));

    Opal.defs(self, '$polar', function(r, theta) {
      var $a, $b, $c, $d, self = this;

      if (theta == null) {
        theta = 0
      }
      if ((($a = ($b = ($c = ($d = $scope.get('Numeric')['$==='](r), $d !== false && $d !== nil ?r['$real?']() : $d), $c !== false && $c !== nil ?$scope.get('Numeric')['$==='](theta) : $c), $b !== false && $b !== nil ?theta['$real?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not a real")
      };
      return self.$new($rb_times(r, $scope.get('Math').$cos(theta)), $rb_times(r, $scope.get('Math').$sin(theta)));
    });

    self.$attr_reader("real", "imag");

    Opal.defn(self, '$initialize', function(real, imag) {
      var self = this;

      if (imag == null) {
        imag = 0
      }
      self.real = real;
      return self.imag = imag;
    });

    Opal.defn(self, '$coerce', function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return [other, self]
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil ?other['$real?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return [$scope.get('Complex').$new(other, 0), self]
        } else {
        return self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
    });

    Opal.defn(self, '$==', function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (($a = self.real['$=='](other.$real())) ? self.imag['$=='](other.$imag()) : self.real['$=='](other.$real()))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil ?other['$real?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (($a = self.real['$=='](other)) ? self.imag['$=='](0) : self.real['$=='](other))
        } else {
        return other['$=='](self)
      };
    });

    Opal.defn(self, '$-@', function() {
      var self = this;

      return self.$Complex(self.real['$-@'](), self.imag['$-@']());
    });

    Opal.defn(self, '$+', function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_plus(self.real, other.$real()), $rb_plus(self.imag, other.$imag()))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil ?other['$real?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_plus(self.real, other), self.imag)
        } else {
        return self.$__coerced__("+", other)
      };
    });

    Opal.defn(self, '$-', function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_minus(self.real, other.$real()), $rb_minus(self.imag, other.$imag()))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil ?other['$real?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_minus(self.real, other), self.imag)
        } else {
        return self.$__coerced__("-", other)
      };
    });

    Opal.defn(self, '$*', function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_minus($rb_times(self.real, other.$real()), $rb_times(self.imag, other.$imag())), $rb_plus($rb_times(self.real, other.$imag()), $rb_times(self.imag, other.$real())))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil ?other['$real?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_times(self.real, other), $rb_times(self.imag, other))
        } else {
        return self.$__coerced__("*", other)
      };
    });

    Opal.defn(self, '$/', function(other) {
      var $a, $b, $c, $d, $e, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = ((($c = ((($d = (($e = $scope.get('Number')['$==='](self.real), $e !== false && $e !== nil ?self.real['$nan?']() : $e))) !== false && $d !== nil) ? $d : (($e = $scope.get('Number')['$==='](self.imag), $e !== false && $e !== nil ?self.imag['$nan?']() : $e)))) !== false && $c !== nil) ? $c : (($d = $scope.get('Number')['$==='](other.$real()), $d !== false && $d !== nil ?other.$real()['$nan?']() : $d)))) !== false && $b !== nil) ? $b : (($c = $scope.get('Number')['$==='](other.$imag()), $c !== false && $c !== nil ?other.$imag()['$nan?']() : $c)))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('Complex').$new((($scope.get('Float')).$$scope.get('NAN')), (($scope.get('Float')).$$scope.get('NAN')))
          } else {
          return $rb_divide($rb_times(self, other.$conj()), other.$abs2())
        }
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil ?other['$real?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex(self.real.$quo(other), self.imag.$quo(other))
        } else {
        return self.$__coerced__("/", other)
      };
    });

    Opal.defn(self, '$**', function(other) {
      var $a, $b, $c, $d, $e, self = this, r = nil, theta = nil, ore = nil, oim = nil, nr = nil, ntheta = nil, x = nil, z = nil, n = nil, div = nil, mod = nil;

      if (other['$=='](0)) {
        return $scope.get('Complex').$new(1, 0)};
      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        $b = self.$polar(), $a = Opal.to_ary($b), r = ($a[0] == null ? nil : $a[0]), theta = ($a[1] == null ? nil : $a[1]), $b;
        ore = other.$real();
        oim = other.$imag();
        nr = $scope.get('Math').$exp($rb_minus($rb_times(ore, $scope.get('Math').$log(r)), $rb_times(oim, theta)));
        ntheta = $rb_plus($rb_times(theta, ore), $rb_times(oim, $scope.get('Math').$log(r)));
        return $scope.get('Complex').$polar(nr, ntheta);
      } else if ((($a = $scope.get('Integer')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $rb_gt(other, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
          x = self;
          z = x;
          n = $rb_minus(other, 1);
          while ((($b = n['$!='](0)) !== nil && (!$b.$$is_boolean || $b == true))) {
          while ((($c = ($e = n.$divmod(2), $d = Opal.to_ary($e), div = ($d[0] == null ? nil : $d[0]), mod = ($d[1] == null ? nil : $d[1]), $e, mod['$=='](0))) !== nil && (!$c.$$is_boolean || $c == true))) {
          x = self.$Complex($rb_minus($rb_times(x.$real(), x.$real()), $rb_times(x.$imag(), x.$imag())), $rb_times($rb_times(2, x.$real()), x.$imag()));
          n = div;};
          z = $rb_times(z, x);
          n = $rb_minus(n, 1);};
          return z;
          } else {
          return ($rb_divide($scope.get('Rational').$new(1, 1), self))['$**'](other['$-@']())
        }
      } else if ((($a = ((($b = $scope.get('Float')['$==='](other)) !== false && $b !== nil) ? $b : $scope.get('Rational')['$==='](other))) !== nil && (!$a.$$is_boolean || $a == true))) {
        $b = self.$polar(), $a = Opal.to_ary($b), r = ($a[0] == null ? nil : $a[0]), theta = ($a[1] == null ? nil : $a[1]), $b;
        return $scope.get('Complex').$polar(r['$**'](other), $rb_times(theta, other));
        } else {
        return self.$__coerced__("**", other)
      };
    });

    Opal.defn(self, '$abs', function() {
      var self = this;

      return $scope.get('Math').$hypot(self.real, self.imag);
    });

    Opal.defn(self, '$abs2', function() {
      var self = this;

      return $rb_plus($rb_times(self.real, self.real), $rb_times(self.imag, self.imag));
    });

    Opal.defn(self, '$angle', function() {
      var self = this;

      return $scope.get('Math').$atan2(self.imag, self.real);
    });

    Opal.alias(self, 'arg', 'angle');

    Opal.defn(self, '$conj', function() {
      var self = this;

      return self.$Complex(self.real, self.imag['$-@']());
    });

    Opal.alias(self, 'conjugate', 'conj');

    Opal.defn(self, '$denominator', function() {
      var self = this;

      return self.real.$denominator().$lcm(self.imag.$denominator());
    });

    Opal.alias(self, 'divide', '/');

    Opal.defn(self, '$eql?', function(other) {
      var $a, $b, self = this;

      return ($a = ($b = $scope.get('Complex')['$==='](other), $b !== false && $b !== nil ?self.real.$class()['$=='](self.imag.$class()) : $b), $a !== false && $a !== nil ?self['$=='](other) : $a);
    });

    Opal.defn(self, '$fdiv', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Numeric')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
      return $rb_divide(self, other);
    });

    Opal.defn(self, '$hash', function() {
      var self = this;

      return "Complex:" + (self.real) + ":" + (self.imag);
    });

    Opal.alias(self, 'imaginary', 'imag');

    Opal.defn(self, '$inspect', function() {
      var self = this;

      return "(" + (self.$to_s()) + ")";
    });

    Opal.alias(self, 'magnitude', 'abs');

    Opal.defn(self, '$numerator', function() {
      var self = this, d = nil;

      d = self.$denominator();
      return self.$Complex($rb_times(self.real.$numerator(), ($rb_divide(d, self.real.$denominator()))), $rb_times(self.imag.$numerator(), ($rb_divide(d, self.imag.$denominator()))));
    });

    Opal.alias(self, 'phase', 'arg');

    Opal.defn(self, '$polar', function() {
      var self = this;

      return [self.$abs(), self.$arg()];
    });

    Opal.alias(self, 'quo', '/');

    Opal.defn(self, '$rationalize', function(eps) {
      var $a, self = this;

      
      if (arguments.length > 1) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ((($a = self.imag['$!='](0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('RangeError'), "can't' convert " + (self) + " into Rational")};
      return self.$real().$rationalize(eps);
    });

    Opal.defn(self, '$real?', function() {
      var self = this;

      return false;
    });

    Opal.defn(self, '$rect', function() {
      var self = this;

      return [self.real, self.imag];
    });

    Opal.alias(self, 'rectangular', 'rect');

    Opal.defn(self, '$to_f', function() {
      var self = this;

      if (self.imag['$=='](0)) {
        } else {
        self.$raise($scope.get('RangeError'), "can't convert " + (self) + " into Float")
      };
      return self.real.$to_f();
    });

    Opal.defn(self, '$to_i', function() {
      var self = this;

      if (self.imag['$=='](0)) {
        } else {
        self.$raise($scope.get('RangeError'), "can't convert " + (self) + " into Integer")
      };
      return self.real.$to_i();
    });

    Opal.defn(self, '$to_r', function() {
      var self = this;

      if (self.imag['$=='](0)) {
        } else {
        self.$raise($scope.get('RangeError'), "can't convert " + (self) + " into Rational")
      };
      return self.real.$to_r();
    });

    Opal.defn(self, '$to_s', function() {
      var $a, $b, $c, self = this, result = nil;

      result = self.real.$inspect();
      if ((($a = ((($b = (($c = $scope.get('Number')['$==='](self.imag), $c !== false && $c !== nil ?self.imag['$nan?']() : $c))) !== false && $b !== nil) ? $b : self.imag['$positive?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "+")
        } else {
        result = $rb_plus(result, "-")
      };
      result = $rb_plus(result, self.imag.$abs().$inspect());
      if ((($a = ($b = $scope.get('Number')['$==='](self.imag), $b !== false && $b !== nil ?(((($c = self.imag['$nan?']()) !== false && $c !== nil) ? $c : self.imag['$infinite?']())) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "*")};
      return $rb_plus(result, "i");
    });

    return Opal.cdecl($scope, 'I', self.$new(0, 1));
  })($scope.base, $scope.get('Numeric'));
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$Complex', function(real, imag) {
      var self = this;

      if (imag == null) {
        imag = nil
      }
      if (imag !== false && imag !== nil) {
        return $scope.get('Complex').$new(real, imag)
        } else {
        return $scope.get('Complex').$new(real, 0)
      };
    })
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/rational"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$require', '$to_i', '$==', '$raise', '$<', '$-@', '$new', '$gcd', '$/', '$nil?', '$===', '$reduce', '$to_r', '$equal?', '$!', '$coerce_to!', '$attr_reader', '$to_f', '$numerator', '$denominator', '$<=>', '$-', '$*', '$__coerced__', '$+', '$Rational', '$>', '$**', '$abs', '$ceil', '$with_precision', '$floor', '$to_s', '$<=', '$truncate', '$send', '$convert']);
  self.$require("corelib/numeric");
  (function($base, $super) {
    function $Rational(){};
    var self = $Rational = $klass($base, $super, 'Rational', $Rational);

    var def = self.$$proto, $scope = self.$$scope;

    def.num = def.den = nil;
    Opal.defs(self, '$reduce', function(num, den) {
      var $a, self = this, gcd = nil;

      num = num.$to_i();
      den = den.$to_i();
      if (den['$=='](0)) {
        self.$raise($scope.get('ZeroDivisionError'), "divided by 0")
      } else if ((($a = $rb_lt(den, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        num = num['$-@']();
        den = den['$-@']();
      } else if (den['$=='](1)) {
        return self.$new(num, den)};
      gcd = num.$gcd(den);
      return self.$new($rb_divide(num, gcd), $rb_divide(den, gcd));
    });

    Opal.defs(self, '$convert', function(num, den) {
      var $a, $b, $c, self = this;

      if ((($a = ((($b = num['$nil?']()) !== false && $b !== nil) ? $b : den['$nil?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('TypeError'), "cannot convert nil into Rational")};
      if ((($a = ($b = $scope.get('Integer')['$==='](num), $b !== false && $b !== nil ?$scope.get('Integer')['$==='](den) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$reduce(num, den)};
      if ((($a = ((($b = ((($c = $scope.get('Float')['$==='](num)) !== false && $c !== nil) ? $c : $scope.get('String')['$==='](num))) !== false && $b !== nil) ? $b : $scope.get('Complex')['$==='](num))) !== nil && (!$a.$$is_boolean || $a == true))) {
        num = num.$to_r()};
      if ((($a = ((($b = ((($c = $scope.get('Float')['$==='](den)) !== false && $c !== nil) ? $c : $scope.get('String')['$==='](den))) !== false && $b !== nil) ? $b : $scope.get('Complex')['$==='](den))) !== nil && (!$a.$$is_boolean || $a == true))) {
        den = den.$to_r()};
      if ((($a = ($b = den['$equal?'](1), $b !== false && $b !== nil ?($scope.get('Integer')['$==='](num))['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Opal')['$coerce_to!'](num, $scope.get('Rational'), "to_r")
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](num), $b !== false && $b !== nil ?$scope.get('Numeric')['$==='](den) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return $rb_divide(num, den)
        } else {
        return self.$reduce(num, den)
      };
    });

    self.$attr_reader("numerator", "denominator");

    Opal.defn(self, '$initialize', function(num, den) {
      var self = this;

      self.num = num;
      return self.den = den;
    });

    Opal.defn(self, '$numerator', function() {
      var self = this;

      return self.num;
    });

    Opal.defn(self, '$denominator', function() {
      var self = this;

      return self.den;
    });

    Opal.defn(self, '$coerce', function(other) {
      var self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {return [other, self]}else if ($scope.get('Integer')['$===']($case)) {return [other.$to_r(), self]}else if ($scope.get('Float')['$===']($case)) {return [other, self.$to_f()]}else { return nil }})();
    });

    Opal.defn(self, '$==', function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {return (($a = self.num['$=='](other.$numerator())) ? self.den['$=='](other.$denominator()) : self.num['$=='](other.$numerator()))}else if ($scope.get('Integer')['$===']($case)) {return (($a = self.num['$=='](other)) ? self.den['$=='](1) : self.num['$=='](other))}else if ($scope.get('Float')['$===']($case)) {return self.$to_f()['$=='](other)}else {return other['$=='](self)}})();
    });

    Opal.defn(self, '$<=>', function(other) {
      var self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {return $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()))['$<=>'](0)}else if ($scope.get('Integer')['$===']($case)) {return $rb_minus(self.num, $rb_times(self.den, other))['$<=>'](0)}else if ($scope.get('Float')['$===']($case)) {return self.$to_f()['$<=>'](other)}else {return self.$__coerced__("<=>", other)}})();
    });

    Opal.defn(self, '$+', function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_plus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {return self.$Rational($rb_plus(self.num, $rb_times(other, self.den)), self.den)}else if ($scope.get('Float')['$===']($case)) {return $rb_plus(self.$to_f(), other)}else {return self.$__coerced__("+", other)}})();
    });

    Opal.defn(self, '$-', function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {return self.$Rational($rb_minus(self.num, $rb_times(other, self.den)), self.den)}else if ($scope.get('Float')['$===']($case)) {return $rb_minus(self.$to_f(), other)}else {return self.$__coerced__("-", other)}})();
    });

    Opal.defn(self, '$*', function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_times(self.num, other.$numerator());
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {return self.$Rational($rb_times(self.num, other), self.den)}else if ($scope.get('Float')['$===']($case)) {return $rb_times(self.$to_f(), other)}else {return self.$__coerced__("*", other)}})();
    });

    Opal.defn(self, '$/', function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_times(self.num, other.$denominator());
      den = $rb_times(self.den, other.$numerator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {if (other['$=='](0)) {
        return $rb_divide(self.$to_f(), 0.0)
        } else {
        return self.$Rational(self.num, $rb_times(self.den, other))
      }}else if ($scope.get('Float')['$===']($case)) {return $rb_divide(self.$to_f(), other)}else {return self.$__coerced__("/", other)}})();
    });

    Opal.defn(self, '$**', function(other) {
      var $a, $b, self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Integer')['$===']($case)) {if ((($a = (($b = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Float')).$$scope.get('INFINITY'))
      } else if ((($a = $rb_gt(other, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$Rational(self.num['$**'](other), self.den['$**'](other))
      } else if ((($a = $rb_lt(other, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$Rational(self.den['$**'](other['$-@']()), self.num['$**'](other['$-@']()))
        } else {
        return self.$Rational(1, 1)
      }}else if ($scope.get('Float')['$===']($case)) {return self.$to_f()['$**'](other)}else if ($scope.get('Rational')['$===']($case)) {if (other['$=='](0)) {
        return self.$Rational(1, 1)
      } else if (other.$denominator()['$=='](1)) {
        if ((($a = $rb_lt(other, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$Rational(self.den['$**'](other.$numerator().$abs()), self.num['$**'](other.$numerator().$abs()))
          } else {
          return self.$Rational(self.num['$**'](other.$numerator()), self.den['$**'](other.$numerator()))
        }
      } else if ((($a = (($b = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ZeroDivisionError'), "divided by 0")
        } else {
        return self.$to_f()['$**'](other)
      }}else {return self.$__coerced__("**", other)}})();
    });

    Opal.defn(self, '$abs', function() {
      var self = this;

      return self.$Rational(self.num.$abs(), self.den.$abs());
    });

    Opal.defn(self, '$ceil', function(precision) {
      var self = this;

      if (precision == null) {
        precision = 0
      }
      if (precision['$=='](0)) {
        return (($rb_divide(self.num['$-@'](), self.den))['$-@']()).$ceil()
        } else {
        return self.$with_precision("ceil", precision)
      };
    });

    Opal.alias(self, 'divide', '/');

    Opal.defn(self, '$floor', function(precision) {
      var self = this;

      if (precision == null) {
        precision = 0
      }
      if (precision['$=='](0)) {
        return (($rb_divide(self.num['$-@'](), self.den))['$-@']()).$floor()
        } else {
        return self.$with_precision("floor", precision)
      };
    });

    Opal.defn(self, '$hash', function() {
      var self = this;

      return "Rational:" + (self.num) + ":" + (self.den);
    });

    Opal.defn(self, '$inspect', function() {
      var self = this;

      return "(" + (self.$to_s()) + ")";
    });

    Opal.alias(self, 'quo', '/');

    Opal.defn(self, '$rationalize', function(eps) {
      var self = this;

      
      if (arguments.length > 1) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }

      if (eps == null) {
        return self;
      }

      var e = eps.$abs(),
          a = $rb_minus(self, e),
          b = $rb_plus(self, e);

      var p0 = 0,
          p1 = 1,
          q0 = 1,
          q1 = 0,
          p2, q2;

      var c, k, t;

      while (true) {
        c = (a).$ceil();

        if ($rb_le(c, b)) {
          break;
        }

        k  = c - 1;
        p2 = k * p1 + p0;
        q2 = k * q1 + q0;
        t  = $rb_divide(1, ($rb_minus(b, k)));
        b  = $rb_divide(1, ($rb_minus(a, k)));
        a  = t;

        p0 = p1;
        q0 = q1;
        p1 = p2;
        q1 = q2;
      }

      return self.$Rational(c * p1 + p0, c * q1 + q0);
    ;
    });

    Opal.defn(self, '$round', function(precision) {
      var $a, self = this, num = nil, den = nil, approx = nil;

      if (precision == null) {
        precision = 0
      }
      if (precision['$=='](0)) {
        } else {
        return self.$with_precision("round", precision)
      };
      if (self.num['$=='](0)) {
        return 0};
      if (self.den['$=='](1)) {
        return self.num};
      num = $rb_plus($rb_times(self.num.$abs(), 2), self.den);
      den = $rb_times(self.den, 2);
      approx = ($rb_divide(num, den)).$truncate();
      if ((($a = $rb_lt(self.num, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return approx['$-@']()
        } else {
        return approx
      };
    });

    Opal.defn(self, '$to_f', function() {
      var self = this;

      return $rb_divide(self.num, self.den);
    });

    Opal.defn(self, '$to_i', function() {
      var self = this;

      return self.$truncate();
    });

    Opal.defn(self, '$to_r', function() {
      var self = this;

      return self;
    });

    Opal.defn(self, '$to_s', function() {
      var self = this;

      return "" + (self.num) + "/" + (self.den);
    });

    Opal.defn(self, '$truncate', function(precision) {
      var $a, self = this;

      if (precision == null) {
        precision = 0
      }
      if (precision['$=='](0)) {
        if ((($a = $rb_lt(self.num, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$ceil()
          } else {
          return self.$floor()
        }
        } else {
        return self.$with_precision("truncate", precision)
      };
    });

    return (Opal.defn(self, '$with_precision', function(method, precision) {
      var $a, self = this, p = nil, s = nil;

      if ((($a = $scope.get('Integer')['$==='](precision)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an Integer")
      };
      p = (10)['$**'](precision);
      s = $rb_times(self, p);
      if ((($a = $rb_lt(precision, 1)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($rb_divide(s.$send(method), p)).$to_i()
        } else {
        return self.$Rational(s.$send(method), p)
      };
    }), nil) && 'with_precision';
  })($scope.base, $scope.get('Numeric'));
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$Rational', function(numerator, denominator) {
      var self = this;

      if (denominator == null) {
        denominator = 1
      }
      return $scope.get('Rational').$convert(numerator, denominator);
    })
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/time"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$===', '$raise', '$coerce_to!', '$respond_to?', '$to_str', '$to_i', '$new', '$<=>', '$to_f', '$nil?', '$>', '$<', '$strftime', '$year', '$month', '$day', '$+', '$round', '$/', '$-', '$copy_instance_variables', '$initialize_dup', '$is_a?', '$zero?', '$wday', '$utc?', '$mon', '$yday', '$hour', '$min', '$sec', '$rjust', '$ljust', '$zone', '$to_s', '$[]', '$cweek_cyear', '$isdst', '$<=', '$!=', '$==', '$ceil']);
  self.$require("corelib/comparable");
  return (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope;

    self.$include($scope.get('Comparable'));

    
    var days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        short_days   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        short_months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        long_months  = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  ;

    Opal.defs(self, '$at', function(seconds, frac) {
      var self = this;

      
      var result;

      if ($scope.get('Time')['$==='](seconds)) {
        if (frac !== undefined) {
          self.$raise($scope.get('TypeError'), "can't convert Time into an exact number")
        }
        result = new Date(seconds.getTime());
        result.is_utc = seconds.is_utc;
        return result;
      }

      if (!seconds.$$is_number) {
        seconds = $scope.get('Opal')['$coerce_to!'](seconds, $scope.get('Integer'), "to_int");
      }

      if (frac === undefined) {
        return new Date(seconds * 1000);
      }

      if (!frac.$$is_number) {
        frac = $scope.get('Opal')['$coerce_to!'](frac, $scope.get('Integer'), "to_int");
      }

      return new Date(seconds * 1000 + (frac / 1000));
    ;
    });

    
    function time_params(year, month, day, hour, min, sec) {
      if (year.$$is_string) {
        year = parseInt(year, 10);
      } else {
        year = $scope.get('Opal')['$coerce_to!'](year, $scope.get('Integer'), "to_int");
      }

      if (month === nil) {
        month = 1;
      } else if (!month.$$is_number) {
        if ((month)['$respond_to?']("to_str")) {
          month = (month).$to_str();
          switch (month.toLowerCase()) {
          case 'jan': month =  1; break;
          case 'feb': month =  2; break;
          case 'mar': month =  3; break;
          case 'apr': month =  4; break;
          case 'may': month =  5; break;
          case 'jun': month =  6; break;
          case 'jul': month =  7; break;
          case 'aug': month =  8; break;
          case 'sep': month =  9; break;
          case 'oct': month = 10; break;
          case 'nov': month = 11; break;
          case 'dec': month = 12; break;
          default: month = (month).$to_i();
          }
        } else {
          month = $scope.get('Opal')['$coerce_to!'](month, $scope.get('Integer'), "to_int");
        }
      }

      if (month < 1 || month > 12) {
        self.$raise($scope.get('ArgumentError'), "month out of range: " + (month))
      }
      month = month - 1;

      if (day === nil) {
        day = 1;
      } else if (day.$$is_string) {
        day = parseInt(day, 10);
      } else {
        day = $scope.get('Opal')['$coerce_to!'](day, $scope.get('Integer'), "to_int");
      }

      if (day < 1 || day > 31) {
        self.$raise($scope.get('ArgumentError'), "day out of range: " + (day))
      }

      if (hour === nil) {
        hour = 0;
      } else if (hour.$$is_string) {
        hour = parseInt(hour, 10);
      } else {
        hour = $scope.get('Opal')['$coerce_to!'](hour, $scope.get('Integer'), "to_int");
      }

      if (hour < 0 || hour > 24) {
        self.$raise($scope.get('ArgumentError'), "hour out of range: " + (hour))
      }

      if (min === nil) {
        min = 0;
      } else if (min.$$is_string) {
        min = parseInt(min, 10);
      } else {
        min = $scope.get('Opal')['$coerce_to!'](min, $scope.get('Integer'), "to_int");
      }

      if (min < 0 || min > 59) {
        self.$raise($scope.get('ArgumentError'), "min out of range: " + (min))
      }

      if (sec === nil) {
        sec = 0;
      } else if (!sec.$$is_number) {
        if (sec.$$is_string) {
          sec = parseInt(sec, 10);
        } else {
          sec = $scope.get('Opal')['$coerce_to!'](sec, $scope.get('Integer'), "to_int");
        }
      }

      if (sec < 0 || sec > 60) {
        self.$raise($scope.get('ArgumentError'), "sec out of range: " + (sec))
      }

      return [year, month, day, hour, min, sec];
    }
  ;

    Opal.defs(self, '$new', function(year, month, day, hour, min, sec, utc_offset) {
      var self = this;

      if (month == null) {
        month = nil
      }
      if (day == null) {
        day = nil
      }
      if (hour == null) {
        hour = nil
      }
      if (min == null) {
        min = nil
      }
      if (sec == null) {
        sec = nil
      }
      if (utc_offset == null) {
        utc_offset = nil
      }
      
      var args, result;

      if (year === undefined) {
        return new Date();
      }

      if (utc_offset !== nil) {
        self.$raise($scope.get('ArgumentError'), "Opal does not support explicitly specifying UTC offset for Time")
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    
    });

    Opal.defs(self, '$local', function(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      if (month == null) {
        month = nil
      }
      if (day == null) {
        day = nil
      }
      if (hour == null) {
        hour = nil
      }
      if (min == null) {
        min = nil
      }
      if (sec == null) {
        sec = nil
      }
      if (millisecond == null) {
        millisecond = nil
      }
      if (_dummy1 == null) {
        _dummy1 = nil
      }
      if (_dummy2 == null) {
        _dummy2 = nil
      }
      if (_dummy3 == null) {
        _dummy3 = nil
      }
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    
    });

    Opal.defs(self, '$gm', function(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      if (month == null) {
        month = nil
      }
      if (day == null) {
        day = nil
      }
      if (hour == null) {
        hour = nil
      }
      if (min == null) {
        min = nil
      }
      if (sec == null) {
        sec = nil
      }
      if (millisecond == null) {
        millisecond = nil
      }
      if (_dummy1 == null) {
        _dummy1 = nil
      }
      if (_dummy2 == null) {
        _dummy2 = nil
      }
      if (_dummy3 == null) {
        _dummy3 = nil
      }
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));
      if (year < 100) {
        result.setUTCFullYear(year);
      }
      result.is_utc = true;
      return result;
    
    });

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      Opal.alias(self, 'mktime', 'local');
      return Opal.alias(self, 'utc', 'gm');
    })(Opal.get_singleton_class(self));

    Opal.defs(self, '$now', function() {
      var self = this;

      return self.$new();
    });

    Opal.defn(self, '$+', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('TypeError'), "time + time?")};
      
      if (!other.$$is_number) {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Integer'), "to_int");
      }
      var result = new Date(self.getTime() + (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    });

    Opal.defn(self, '$-', function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (self.getTime() - other.getTime()) / 1000};
      
      if (!other.$$is_number) {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Integer'), "to_int");
      }
      var result = new Date(self.getTime() - (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    });

    Opal.defn(self, '$<=>', function(other) {
      var $a, self = this, r = nil;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$to_f()['$<=>'](other.$to_f())
        } else {
        r = other['$<=>'](self);
        if ((($a = r['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
        } else if ((($a = $rb_gt(r, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return -1
        } else if ((($a = $rb_lt(r, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return 1
          } else {
          return 0
        };
      };
    });

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return self.$to_f() === other.$to_f();
    });

    Opal.defn(self, '$asctime', function() {
      var self = this;

      return self.$strftime("%a %b %e %H:%M:%S %Y");
    });

    Opal.alias(self, 'ctime', 'asctime');

    Opal.defn(self, '$day', function() {
      var self = this;

      return self.is_utc ? self.getUTCDate() : self.getDate();
    });

    Opal.defn(self, '$yday', function() {
      var self = this, start_of_year = nil, start_of_day = nil, one_day = nil;

      start_of_year = $scope.get('Time').$new(self.$year()).$to_i();
      start_of_day = $scope.get('Time').$new(self.$year(), self.$month(), self.$day()).$to_i();
      one_day = 86400;
      return $rb_plus(($rb_divide(($rb_minus(start_of_day, start_of_year)), one_day)).$round(), 1);
    });

    Opal.defn(self, '$isdst', function() {
      var self = this;

      
      var jan = new Date(self.getFullYear(), 0, 1),
          jul = new Date(self.getFullYear(), 6, 1);
      return self.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    
    });

    Opal.alias(self, 'dst?', 'isdst');

    Opal.defn(self, '$dup', function() {
      var self = this, copy = nil;

      copy = new Date(self.getTime());
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    });

    Opal.defn(self, '$eql?', function(other) {
      var $a, self = this;

      return ($a = other['$is_a?']($scope.get('Time')), $a !== false && $a !== nil ?(self['$<=>'](other))['$zero?']() : $a);
    });

    Opal.defn(self, '$friday?', function() {
      var self = this;

      return self.$wday() == 5;
    });

    Opal.defn(self, '$hash', function() {
      var self = this;

      return 'Time:' + self.getTime();
    });

    Opal.defn(self, '$hour', function() {
      var self = this;

      return self.is_utc ? self.getUTCHours() : self.getHours();
    });

    Opal.defn(self, '$inspect', function() {
      var $a, self = this;

      if ((($a = self['$utc?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$strftime("%Y-%m-%d %H:%M:%S UTC")
        } else {
        return self.$strftime("%Y-%m-%d %H:%M:%S %z")
      };
    });

    Opal.alias(self, 'mday', 'day');

    Opal.defn(self, '$min', function() {
      var self = this;

      return self.is_utc ? self.getUTCMinutes() : self.getMinutes();
    });

    Opal.defn(self, '$mon', function() {
      var self = this;

      return (self.is_utc ? self.getUTCMonth() : self.getMonth()) + 1;
    });

    Opal.defn(self, '$monday?', function() {
      var self = this;

      return self.$wday() == 1;
    });

    Opal.alias(self, 'month', 'mon');

    Opal.defn(self, '$saturday?', function() {
      var self = this;

      return self.$wday() == 6;
    });

    Opal.defn(self, '$sec', function() {
      var self = this;

      return self.is_utc ? self.getUTCSeconds() : self.getSeconds();
    });

    Opal.defn(self, '$succ', function() {
      var self = this;

      
      var result = new Date(self.getTime() + 1000);
      result.is_utc = self.is_utc;
      return result;
    
    });

    Opal.defn(self, '$usec', function() {
      var self = this;

      return self.getMilliseconds() * 1000;
    });

    Opal.defn(self, '$zone', function() {
      var self = this;

      
      var string = self.toString(),
          result;

      if (string.indexOf('(') == -1) {
        result = string.match(/[A-Z]{3,4}/)[0];
      }
      else {
        result = string.match(/\([^)]+\)/)[0].match(/[A-Z]/g).join('');
      }

      if (result == "GMT" && /(GMT\W*\d{4})/.test(string)) {
        return RegExp.$1;
      }
      else {
        return result;
      }
    
    });

    Opal.defn(self, '$getgm', function() {
      var self = this;

      
      var result = new Date(self.getTime());
      result.is_utc = true;
      return result;
    
    });

    Opal.alias(self, 'getutc', 'getgm');

    Opal.defn(self, '$gmtime', function() {
      var self = this;

      
      self.is_utc = true;
      return self;
    
    });

    Opal.alias(self, 'utc', 'gmtime');

    Opal.defn(self, '$gmt?', function() {
      var self = this;

      return self.is_utc === true;
    });

    Opal.defn(self, '$gmt_offset', function() {
      var self = this;

      return -self.getTimezoneOffset() * 60;
    });

    Opal.defn(self, '$strftime', function(format) {
      var self = this;

      
      return format.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {
        var result = "",
            zero   = flags.indexOf('0') !== -1,
            pad    = flags.indexOf('-') === -1,
            blank  = flags.indexOf('_') !== -1,
            upcase = flags.indexOf('^') !== -1,
            invert = flags.indexOf('#') !== -1,
            colons = (flags.match(':') || []).length;

        width = parseInt(width, 10);

        if (zero && blank) {
          if (flags.indexOf('0') < flags.indexOf('_')) {
            zero = false;
          }
          else {
            blank = false;
          }
        }

        switch (conv) {
          case 'Y':
            result += self.$year();
            break;

          case 'C':
            zero    = !blank;
            result += Math.round(self.$year() / 100);
            break;

          case 'y':
            zero    = !blank;
            result += (self.$year() % 100);
            break;

          case 'm':
            zero    = !blank;
            result += self.$mon();
            break;

          case 'B':
            result += long_months[self.$mon() - 1];
            break;

          case 'b':
          case 'h':
            blank   = !zero;
            result += short_months[self.$mon() - 1];
            break;

          case 'd':
            zero    = !blank
            result += self.$day();
            break;

          case 'e':
            blank   = !zero
            result += self.$day();
            break;

          case 'j':
            result += self.$yday();
            break;

          case 'H':
            zero    = !blank;
            result += self.$hour();
            break;

          case 'k':
            blank   = !zero;
            result += self.$hour();
            break;

          case 'I':
            zero    = !blank;
            result += (self.$hour() % 12 || 12);
            break;

          case 'l':
            blank   = !zero;
            result += (self.$hour() % 12 || 12);
            break;

          case 'P':
            result += (self.$hour() >= 12 ? "pm" : "am");
            break;

          case 'p':
            result += (self.$hour() >= 12 ? "PM" : "AM");
            break;

          case 'M':
            zero    = !blank;
            result += self.$min();
            break;

          case 'S':
            zero    = !blank;
            result += self.$sec()
            break;

          case 'L':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.getMilliseconds();
            break;

          case 'N':
            width   = isNaN(width) ? 9 : width;
            result += (self.getMilliseconds().toString()).$rjust(3, "0");
            result  = (result).$ljust(width, "0");
            break;

          case 'z':
            var offset  = self.getTimezoneOffset(),
                hours   = Math.floor(Math.abs(offset) / 60),
                minutes = Math.abs(offset) % 60;

            result += offset < 0 ? "+" : "-";
            result += hours < 10 ? "0" : "";
            result += hours;

            if (colons > 0) {
              result += ":";
            }

            result += minutes < 10 ? "0" : "";
            result += minutes;

            if (colons > 1) {
              result += ":00";
            }

            break;

          case 'Z':
            result += self.$zone();
            break;

          case 'A':
            result += days_of_week[self.$wday()];
            break;

          case 'a':
            result += short_days[self.$wday()];
            break;

          case 'u':
            result += (self.$wday() + 1);
            break;

          case 'w':
            result += self.$wday();
            break;

          case 'V':
            result += self.$cweek_cyear()['$[]'](0).$to_s().$rjust(2, "0");
            break;

          case 'G':
            result += self.$cweek_cyear()['$[]'](1);
            break;

          case 'g':
            result += self.$cweek_cyear()['$[]'](1)['$[]']($range(-2, -1, false));
            break;

          case 's':
            result += self.$to_i();
            break;

          case 'n':
            result += "\n";
            break;

          case 't':
            result += "\t";
            break;

          case '%':
            result += "%";
            break;

          case 'c':
            result += self.$strftime("%a %b %e %T %Y");
            break;

          case 'D':
          case 'x':
            result += self.$strftime("%m/%d/%y");
            break;

          case 'F':
            result += self.$strftime("%Y-%m-%d");
            break;

          case 'v':
            result += self.$strftime("%e-%^b-%4Y");
            break;

          case 'r':
            result += self.$strftime("%I:%M:%S %p");
            break;

          case 'R':
            result += self.$strftime("%H:%M");
            break;

          case 'T':
          case 'X':
            result += self.$strftime("%H:%M:%S");
            break;

          default:
            return full;
        }

        if (upcase) {
          result = result.toUpperCase();
        }

        if (invert) {
          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).
                          replace(/[a-z]/, function(c) { c.toUpperCase() });
        }

        if (pad && (zero || blank)) {
          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? " " : "0");
        }

        return result;
      });
    
    });

    Opal.defn(self, '$sunday?', function() {
      var self = this;

      return self.$wday() == 0;
    });

    Opal.defn(self, '$thursday?', function() {
      var self = this;

      return self.$wday() == 4;
    });

    Opal.defn(self, '$to_a', function() {
      var self = this;

      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()];
    });

    Opal.defn(self, '$to_f', function() {
      var self = this;

      return self.getTime() / 1000;
    });

    Opal.defn(self, '$to_i', function() {
      var self = this;

      return parseInt(self.getTime() / 1000, 10);
    });

    Opal.alias(self, 'to_s', 'inspect');

    Opal.defn(self, '$tuesday?', function() {
      var self = this;

      return self.$wday() == 2;
    });

    Opal.alias(self, 'tv_sec', 'sec');

    Opal.alias(self, 'tv_usec', 'usec');

    Opal.alias(self, 'utc?', 'gmt?');

    Opal.alias(self, 'gmtoff', 'gmt_offset');

    Opal.alias(self, 'utc_offset', 'gmt_offset');

    Opal.defn(self, '$wday', function() {
      var self = this;

      return self.is_utc ? self.getUTCDay() : self.getDay();
    });

    Opal.defn(self, '$wednesday?', function() {
      var self = this;

      return self.$wday() == 3;
    });

    Opal.defn(self, '$year', function() {
      var self = this;

      return self.is_utc ? self.getUTCFullYear() : self.getFullYear();
    });

    return (Opal.defn(self, '$cweek_cyear', function() {
      var $a, $b, self = this, jan01 = nil, jan01_wday = nil, first_monday = nil, year = nil, offset = nil, week = nil, dec31 = nil, dec31_wday = nil;

      jan01 = $scope.get('Time').$new(self.$year(), 1, 1);
      jan01_wday = jan01.$wday();
      first_monday = 0;
      year = self.$year();
      if ((($a = ($b = $rb_le(jan01_wday, 4), $b !== false && $b !== nil ?jan01_wday['$!='](0) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        offset = $rb_minus(jan01_wday, 1)
        } else {
        offset = $rb_minus($rb_minus(jan01_wday, 7), 1);
        if (offset['$=='](-8)) {
          offset = -1};
      };
      week = ($rb_divide(($rb_plus(self.$yday(), offset)), 7.0)).$ceil();
      if ((($a = $rb_le(week, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Time').$new($rb_minus(self.$year(), 1), 12, 31).$cweek_cyear()
      } else if (week['$=='](53)) {
        dec31 = $scope.get('Time').$new(self.$year(), 12, 31);
        dec31_wday = dec31.$wday();
        if ((($a = ($b = $rb_le(dec31_wday, 3), $b !== false && $b !== nil ?dec31_wday['$!='](0) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          week = 1;
          year = $rb_plus(year, 1);};};
      return [week, year];
    }), nil) && 'cweek_cyear';
  })($scope.base, Date);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/struct"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$==', '$[]', '$upcase', '$const_set', '$new', '$unshift', '$each', '$define_struct_attribute', '$class_eval', '$to_proc', '$allocate', '$initialize', '$raise', '$<<', '$members', '$define_method', '$instance_eval', '$each_with_index', '$[]=', '$class', '$hash', '$===', '$<', '$-@', '$size', '$>=', '$coerce_to!', '$include?', '$to_sym', '$instance_of?', '$__id__', '$eql?', '$enum_for', '$length', '$map', '$+', '$join', '$inspect', '$each_pair', '$inject', '$flatten', '$to_a']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_8, TMP_11;

    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$new', TMP_1 = function(name) {
      var $a, $b, $c, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil, $zuper = nil, $zuper_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      TMP_1.$$p = null;
      $zuper = [];
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if (self['$==']($scope.get('Struct'))) {
        } else {
        return Opal.find_super_dispatcher(self, 'new', TMP_1, $iter, $Struct).apply(self, $zuper)
      };
      if (name['$[]'](0)['$=='](name['$[]'](0).$upcase())) {
        return $scope.get('Struct').$const_set(name, ($a = self).$new.apply($a, Opal.to_a(args)))
        } else {
        args.$unshift(name);
        return ($b = ($c = $scope.get('Class')).$new, $b.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b, TMP_3, $c;

        ($a = ($b = args).$each, $a.$$p = (TMP_3 = function(arg){var self = TMP_3.$$s || this;
if (arg == null) arg = nil;
          return self.$define_struct_attribute(arg)}, TMP_3.$$s = self, TMP_3), $a).call($b);
          if (block !== false && block !== nil) {
            ($a = ($c = self).$class_eval, $a.$$p = block.$to_proc(), $a).call($c)};
          return (function(self) {
            var $scope = self.$$scope, def = self.$$proto;

            Opal.defn(self, '$new', function() {
              var $a, self = this, instance = nil, $splat_index = nil;

              var array_size = arguments.length - 0;
              if(array_size < 0) array_size = 0;
              var args = new Array(array_size);
              for($splat_index = 0; $splat_index < array_size; $splat_index++) {
                args[$splat_index] = arguments[$splat_index + 0];
              }
              instance = self.$allocate();
              instance.$$data = {};;
              ($a = instance).$initialize.apply($a, Opal.to_a(args));
              return instance;
            });
            return Opal.alias(self, '[]', 'new');
          })(Opal.get_singleton_class(self));}, TMP_2.$$s = self, TMP_2), $b).call($c, self);
      };
    });

    Opal.defs(self, '$define_struct_attribute', function(name) {
      var $a, $b, TMP_4, $c, TMP_5, self = this;

      if (self['$==']($scope.get('Struct'))) {
        self.$raise($scope.get('ArgumentError'), "you cannot define attributes to the Struct class")};
      self.$members()['$<<'](name);
      ($a = ($b = self).$define_method, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

      return self.$$data[name];}, TMP_4.$$s = self, TMP_4), $a).call($b, name);
      return ($a = ($c = self).$define_method, $a.$$p = (TMP_5 = function(value){var self = TMP_5.$$s || this;
if (value == null) value = nil;
      return self.$$data[name] = value;}, TMP_5.$$s = self, TMP_5), $a).call($c, "" + (name) + "=");
    });

    Opal.defs(self, '$members', function() {
      var $a, self = this;
      if (self.members == null) self.members = nil;

      if (self['$==']($scope.get('Struct'))) {
        self.$raise($scope.get('ArgumentError'), "the Struct class has no members")};
      return ((($a = self.members) !== false && $a !== nil) ? $a : self.members = []);
    });

    Opal.defs(self, '$inherited', function(klass) {
      var $a, $b, TMP_6, self = this, members = nil;
      if (self.members == null) self.members = nil;

      members = self.members;
      return ($a = ($b = klass).$instance_eval, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

      return self.members = members}, TMP_6.$$s = self, TMP_6), $a).call($b);
    });

    Opal.defn(self, '$initialize', function() {
      var $a, $b, TMP_7, self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      return ($a = ($b = self.$members()).$each_with_index, $a.$$p = (TMP_7 = function(name, index){var self = TMP_7.$$s || this;
if (name == null) name = nil;if (index == null) index = nil;
      return self['$[]='](name, args['$[]'](index))}, TMP_7.$$s = self, TMP_7), $a).call($b);
    });

    Opal.defn(self, '$members', function() {
      var self = this;

      return self.$class().$members();
    });

    Opal.defn(self, '$hash', function() {
      var self = this;

      return $scope.get('Hash').$new(self.$$data).$hash();
    });

    Opal.defn(self, '$[]', function(name) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $rb_lt(name, self.$members().$size()['$-@']())) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too small for struct(size:" + (self.$members().$size()) + ")")};
        if ((($a = $rb_ge(name, self.$members().$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too large for struct(size:" + (self.$members().$size()) + ")")};
        name = self.$members()['$[]'](name);
      } else if ((($a = $scope.get('String')['$==='](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
        
        if(!self.$$data.hasOwnProperty(name)) {
          self.$raise($scope.get('NameError').$new("no member '" + (name) + "' in struct", name))
        }
      ;
        } else {
        self.$raise($scope.get('TypeError'), "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      return self.$$data[name];
    });

    Opal.defn(self, '$[]=', function(name, value) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $rb_lt(name, self.$members().$size()['$-@']())) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too small for struct(size:" + (self.$members().$size()) + ")")};
        if ((($a = $rb_ge(name, self.$members().$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too large for struct(size:" + (self.$members().$size()) + ")")};
        name = self.$members()['$[]'](name);
      } else if ((($a = $scope.get('String')['$==='](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.$members()['$include?'](name.$to_sym())) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('NameError').$new("no member '" + (name) + "' in struct", name))
        }
        } else {
        self.$raise($scope.get('TypeError'), "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      return self.$$data[name] = value;
    });

    Opal.defn(self, '$==', function(other) {
      var $a, self = this;

      if ((($a = other['$instance_of?'](self.$class())) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($scope.get('Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    });

    Opal.defn(self, '$eql?', function(other) {
      var $a, self = this;

      if ((($a = other['$instance_of?'](self.$class())) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($scope.get('Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    });

    Opal.defn(self, '$each', TMP_8 = function() {
      var $a, $b, TMP_9, $c, TMP_10, self = this, $iter = TMP_8.$$p, $yield = $iter || nil;

      TMP_8.$$p = null;
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

        return self.$size()}, TMP_9.$$s = self, TMP_9), $a).call($b, "each")
      };
      ($a = ($c = self.$members()).$each, $a.$$p = (TMP_10 = function(name){var self = TMP_10.$$s || this, $a;
if (name == null) name = nil;
      return $a = Opal.yield1($yield, self['$[]'](name)), $a === $breaker ? $a : $a}, TMP_10.$$s = self, TMP_10), $a).call($c);
      return self;
    });

    Opal.defn(self, '$each_pair', TMP_11 = function() {
      var $a, $b, TMP_12, $c, TMP_13, self = this, $iter = TMP_11.$$p, $yield = $iter || nil;

      TMP_11.$$p = null;
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;

        return self.$size()}, TMP_12.$$s = self, TMP_12), $a).call($b, "each_pair")
      };
      ($a = ($c = self.$members()).$each, $a.$$p = (TMP_13 = function(name){var self = TMP_13.$$s || this, $a;
if (name == null) name = nil;
      return $a = Opal.yield1($yield, [name, self['$[]'](name)]), $a === $breaker ? $a : $a}, TMP_13.$$s = self, TMP_13), $a).call($c);
      return self;
    });

    Opal.defn(self, '$length', function() {
      var self = this;

      return self.$members().$length();
    });

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$to_a', function() {
      var $a, $b, TMP_14, self = this;

      return ($a = ($b = self.$members()).$map, $a.$$p = (TMP_14 = function(name){var self = TMP_14.$$s || this;
if (name == null) name = nil;
      return self['$[]'](name)}, TMP_14.$$s = self, TMP_14), $a).call($b);
    });

    Opal.alias(self, 'values', 'to_a');

    Opal.defn(self, '$inspect', function() {
      var $a, $b, TMP_15, self = this, result = nil;

      result = "#<struct ";
      if (self.$class()['$==']($scope.get('Struct'))) {
        result = $rb_plus(result, "" + (self.$class()) + " ")};
      result = $rb_plus(result, ($a = ($b = self.$each_pair()).$map, $a.$$p = (TMP_15 = function(name, value){var self = TMP_15.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_15.$$s = self, TMP_15), $a).call($b).$join(", "));
      result = $rb_plus(result, ">");
      return result;
    });

    Opal.alias(self, 'to_s', 'inspect');

    Opal.defn(self, '$to_h', function() {
      var $a, $b, TMP_16, self = this;

      return ($a = ($b = self.$members()).$inject, $a.$$p = (TMP_16 = function(h, name){var self = TMP_16.$$s || this;
if (h == null) h = nil;if (name == null) name = nil;
      h['$[]='](name, self['$[]'](name));
        return h;}, TMP_16.$$s = self, TMP_16), $a).call($b, $hash2([], {}));
    });

    return (Opal.defn(self, '$values_at', function() {
      var $a, $b, TMP_17, self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      args = ($a = ($b = args).$map, $a.$$p = (TMP_17 = function(arg){var self = TMP_17.$$s || this;
if (arg == null) arg = nil;
      return arg.$$is_range ? arg.$to_a() : arg;}, TMP_17.$$s = self, TMP_17), $a).call($b).$flatten();
      
      var result = [];
      for (var i = 0, len = args.length; i < len; i++) {
        if (!args[i].$$is_number) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + ((args[i]).$class()) + " into Integer")
        }
        result.push(self['$[]'](args[i]));
      }
      return result;
    ;
    }), nil) && 'values_at';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/io"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var $a, $b, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_accessor', '$size', '$write', '$join', '$map', '$String', '$empty?', '$concat', '$chomp', '$getbyte', '$getc', '$raise', '$new', '$write_proc=', '$extend']);
  (function($base, $super) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.$$proto, $scope = self.$$scope;

    def.tty = def.closed = nil;
    Opal.cdecl($scope, 'SEEK_SET', 0);

    Opal.cdecl($scope, 'SEEK_CUR', 1);

    Opal.cdecl($scope, 'SEEK_END', 2);

    Opal.defn(self, '$tty?', function() {
      var self = this;

      return self.tty;
    });

    Opal.defn(self, '$closed?', function() {
      var self = this;

      return self.closed;
    });

    self.$attr_accessor("write_proc");

    Opal.defn(self, '$write', function(string) {
      var self = this;

      self.write_proc(string);
      return string.$size();
    });

    self.$attr_accessor("sync", "tty");

    Opal.defn(self, '$flush', function() {
      var self = this;

      return nil;
    });

    (function($base) {
      var $Writable, self = $Writable = $module($base, 'Writable');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$<<', function(string) {
        var self = this;

        self.$write(string);
        return self;
      });

      Opal.defn(self, '$print', function() {
        var $a, $b, TMP_1, self = this, $splat_index = nil;
        if ($gvars[","] == null) $gvars[","] = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 0];
        }
        self.$write(($a = ($b = args).$map, $a.$$p = (TMP_1 = function(arg){var self = TMP_1.$$s || this;
if (arg == null) arg = nil;
        return self.$String(arg)}, TMP_1.$$s = self, TMP_1), $a).call($b).$join($gvars[","]));
        return nil;
      });

      Opal.defn(self, '$puts', function() {
        var $a, $b, TMP_2, self = this, newline = nil, $splat_index = nil;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 0];
        }
        newline = $gvars["/"];
        if ((($a = args['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$write($gvars["/"])
          } else {
          self.$write(($a = ($b = args).$map, $a.$$p = (TMP_2 = function(arg){var self = TMP_2.$$s || this;
if (arg == null) arg = nil;
          return self.$String(arg).$chomp()}, TMP_2.$$s = self, TMP_2), $a).call($b).$concat([nil]).$join(newline))
        };
        return nil;
      });
    })($scope.base);

    return (function($base) {
      var $Readable, self = $Readable = $module($base, 'Readable');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$readbyte', function() {
        var self = this;

        return self.$getbyte();
      });

      Opal.defn(self, '$readchar', function() {
        var self = this;

        return self.$getc();
      });

      Opal.defn(self, '$readline', function(sep) {
        var self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        if (sep == null) {
          sep = $gvars["/"]
        }
        return self.$raise($scope.get('NotImplementedError'));
      });

      Opal.defn(self, '$readpartial', function(integer, outbuf) {
        var self = this;

        if (outbuf == null) {
          outbuf = nil
        }
        return self.$raise($scope.get('NotImplementedError'));
      });
    })($scope.base);
  })($scope.base, null);
  Opal.cdecl($scope, 'STDERR', $gvars.stderr = $scope.get('IO').$new());
  Opal.cdecl($scope, 'STDIN', $gvars.stdin = $scope.get('IO').$new());
  Opal.cdecl($scope, 'STDOUT', $gvars.stdout = $scope.get('IO').$new());
  (($a = [typeof(process) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)}]), $b = $scope.get('STDOUT'), $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
  (($a = [typeof(process) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)}]), $b = $scope.get('STDERR'), $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
  $scope.get('STDOUT').$extend((($scope.get('IO')).$$scope.get('Writable')));
  return $scope.get('STDERR').$extend((($scope.get('IO')).$$scope.get('Writable')));
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/main"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$include']);
  Opal.defs(self, '$to_s', function() {
    var self = this;

    return "main";
  });
  return (Opal.defs(self, '$include', function(mod) {
    var self = this;

    return $scope.get('Object').$include(mod);
  }), nil) && 'include';
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/dir"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$[]']);
  return (function($base, $super) {
    function $Dir(){};
    var self = $Dir = $klass($base, $super, 'Dir', $Dir);

    var def = self.$$proto, $scope = self.$$scope;

    return (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1;

      Opal.defn(self, '$chdir', TMP_1 = function(dir) {
        var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, prev_cwd = nil;

        TMP_1.$$p = null;
        try {
        prev_cwd = Opal.current_dir;
        Opal.current_dir = dir;
        return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a;
        } finally {
        Opal.current_dir = prev_cwd;
        };
      });
      Opal.defn(self, '$pwd', function() {
        var self = this;

        return Opal.current_dir || '.';
      });
      Opal.alias(self, 'getwd', 'pwd');
      return (Opal.defn(self, '$home', function() {
        var $a, self = this;

        return ((($a = $scope.get('ENV')['$[]']("HOME")) !== false && $a !== nil) ? $a : ".");
      }), nil) && 'home';
    })(Opal.get_singleton_class(self))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/file"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$join', '$compact', '$split', '$==', '$first', '$[]=', '$home', '$each', '$pop', '$<<', '$[]', '$gsub', '$find', '$=~']);
  return (function($base, $super) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'Separator', Opal.cdecl($scope, 'SEPARATOR', "/"));

    Opal.cdecl($scope, 'ALT_SEPARATOR', nil);

    Opal.cdecl($scope, 'PATH_SEPARATOR', ":");

    return (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      Opal.defn(self, '$expand_path', function(path, basedir) {
        var $a, $b, TMP_1, self = this, parts = nil, new_parts = nil;

        if (basedir == null) {
          basedir = nil
        }
        path = [basedir, path].$compact().$join($scope.get('SEPARATOR'));
        parts = path.$split($scope.get('SEPARATOR'));
        new_parts = [];
        if (parts.$first()['$==']("~")) {
          parts['$[]='](0, $scope.get('Dir').$home())};
        ($a = ($b = parts).$each, $a.$$p = (TMP_1 = function(part){var self = TMP_1.$$s || this;
if (part == null) part = nil;
        if (part['$==']("..")) {
            return new_parts.$pop()
            } else {
            return new_parts['$<<'](part)
          }}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return new_parts.$join($scope.get('SEPARATOR'));
      });
      Opal.alias(self, 'realpath', 'expand_path');
      Opal.defn(self, '$dirname', function(path) {
        var self = this;

        return self.$split(path)['$[]']($range(0, -2, false));
      });
      Opal.defn(self, '$basename', function(path) {
        var self = this;

        return self.$split(path)['$[]'](-1);
      });
      Opal.defn(self, '$exist?', function(path) {
        var self = this;

        return Opal.modules[path] != null;
      });
      Opal.alias(self, 'exists?', 'exist?');
      Opal.defn(self, '$directory?', function(path) {
        var $a, $b, TMP_2, self = this, files = nil, file = nil;

        files = [];
        
        for (var key in Opal.modules) {
          files.push(key)
        }
      ;
        path = path.$gsub((new RegExp("(^." + $scope.get('SEPARATOR') + "+|" + $scope.get('SEPARATOR') + "+$)")));
        file = ($a = ($b = files).$find, $a.$$p = (TMP_2 = function(file){var self = TMP_2.$$s || this;
if (file == null) file = nil;
        return file['$=~']((new RegExp("^" + path)))}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return file;
      });
      Opal.defn(self, '$join', function() {
        var self = this, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var paths = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          paths[$splat_index] = arguments[$splat_index + 0];
        }
        return paths.$join($scope.get('SEPARATOR')).$gsub((new RegExp("" + $scope.get('SEPARATOR') + "+")), $scope.get('SEPARATOR'));
      });
      return (Opal.defn(self, '$split', function(path) {
        var self = this;

        return path.$split($scope.get('SEPARATOR'));
      }), nil) && 'split';
    })(Opal.get_singleton_class(self));
  })($scope.base, $scope.get('IO'))
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/process"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$to_f', '$now', '$new']);
  (function($base, $super) {
    function $Process(){};
    var self = $Process = $klass($base, $super, 'Process', $Process);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'CLOCK_REALTIME', 0);

    Opal.cdecl($scope, 'CLOCK_MONOTONIC', 1);

    Opal.defs(self, '$pid', function() {
      var self = this;

      return 0;
    });

    Opal.defs(self, '$times', function() {
      var self = this, t = nil;

      t = $scope.get('Time').$now().$to_f();
      return (($scope.get('Benchmark')).$$scope.get('Tms')).$new(t, t, t, t, t);
    });

    return (Opal.defs(self, '$clock_gettime', function(clock_id, unit) {
      var self = this;

      if (unit == null) {
        unit = nil
      }
      return $scope.get('Time').$now().$to_f();
    }), nil) && 'clock_gettime';
  })($scope.base, null);
  (function($base, $super) {
    function $Signal(){};
    var self = $Signal = $klass($base, $super, 'Signal', $Signal);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defs(self, '$trap', function() {
      var self = this;

      return nil;
    }), nil) && 'trap'
  })($scope.base, null);
  return (function($base, $super) {
    function $GC(){};
    var self = $GC = $klass($base, $super, 'GC', $GC);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defs(self, '$start', function() {
      var self = this;

      return nil;
    }), nil) && 'start'
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["corelib/unsupported"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$warn', '$raise', '$%', '$module_function']);
  
  var warnings = {};

  function warn(string) {
    if (warnings[string]) {
      return;
    }

    warnings[string] = true;
    self.$warn(string);
  }

  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    var ERROR = "String#%s not supported. Mutable String methods are not supported in Opal.";

    Opal.defn(self, '$<<', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("<<"));
    });

    Opal.defn(self, '$capitalize!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("capitalize!"));
    });

    Opal.defn(self, '$chomp!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("chomp!"));
    });

    Opal.defn(self, '$chop!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("chop!"));
    });

    Opal.defn(self, '$downcase!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("downcase!"));
    });

    Opal.defn(self, '$gsub!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("gsub!"));
    });

    Opal.defn(self, '$lstrip!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("lstrip!"));
    });

    Opal.defn(self, '$next!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("next!"));
    });

    Opal.defn(self, '$reverse!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("reverse!"));
    });

    Opal.defn(self, '$slice!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("slice!"));
    });

    Opal.defn(self, '$squeeze!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("squeeze!"));
    });

    Opal.defn(self, '$strip!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("strip!"));
    });

    Opal.defn(self, '$sub!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("sub!"));
    });

    Opal.defn(self, '$succ!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("succ!"));
    });

    Opal.defn(self, '$swapcase!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("swapcase!"));
    });

    Opal.defn(self, '$tr!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("tr!"));
    });

    Opal.defn(self, '$tr_s!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("tr_s!"));
    });

    return (Opal.defn(self, '$upcase!', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("upcase!"));
    }), nil) && 'upcase!';
  })($scope.base, null);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope;

    var ERROR = "Object freezing is not supported by Opal";

    Opal.defn(self, '$freeze', function() {
      var $a, self = this;

      if ((($a = OPAL_CONFIG.freezing) !== nil && (!$a.$$is_boolean || $a == true))) {
        warn(ERROR);
        } else {
        self.$raise($scope.get('NotImplementedError'), ERROR)
      };
      return self;
    });

    Opal.defn(self, '$frozen?', function() {
      var $a, self = this;

      if ((($a = OPAL_CONFIG.freezing) !== nil && (!$a.$$is_boolean || $a == true))) {
        warn(ERROR);
        } else {
        self.$raise($scope.get('NotImplementedError'), ERROR)
      };
      return false;
    });
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope;

    var ERROR = "Object tainting is not supported by Opal";

    Opal.defn(self, '$taint', function() {
      var $a, self = this;

      if ((($a = OPAL_CONFIG.tainting) !== nil && (!$a.$$is_boolean || $a == true))) {
        warn(ERROR);
        } else {
        self.$raise($scope.get('NotImplementedError'), ERROR)
      };
      return self;
    });

    Opal.defn(self, '$untaint', function() {
      var $a, self = this;

      if ((($a = OPAL_CONFIG.tainting) !== nil && (!$a.$$is_boolean || $a == true))) {
        warn(ERROR);
        } else {
        self.$raise($scope.get('NotImplementedError'), ERROR)
      };
      return self;
    });

    Opal.defn(self, '$tainted?', function() {
      var $a, self = this;

      if ((($a = OPAL_CONFIG.tainting) !== nil && (!$a.$$is_boolean || $a == true))) {
        warn(ERROR);
        } else {
        self.$raise($scope.get('NotImplementedError'), ERROR)
      };
      return false;
    });
  })($scope.base);
  (function($base) {
    var $Marshal, self = $Marshal = $module($base, 'Marshal');

    var def = self.$$proto, $scope = self.$$scope;

    var ERROR = "Marshalling is not supported by Opal";

    self.$module_function();

    Opal.defn(self, '$dump', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), ERROR);
    });

    Opal.defn(self, '$load', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), ERROR);
    });

    Opal.defn(self, '$restore', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), ERROR);
    });
  })($scope.base);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$public', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var methods = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        methods[$splat_index] = arguments[$splat_index + 0];
      }
      
      if (methods.length === 0) {
        self.$$module_function = false;
      }

      return nil;
    
    });

    Opal.alias(self, 'private', 'public');

    Opal.alias(self, 'protected', 'public');

    Opal.alias(self, 'nesting', 'public');

    Opal.defn(self, '$private_class_method', function() {
      var self = this;

      return self;
    });

    Opal.alias(self, 'public_class_method', 'private_class_method');

    Opal.defn(self, '$private_method_defined?', function(obj) {
      var self = this;

      return false;
    });

    Opal.defn(self, '$private_constant', function() {
      var self = this;

      return nil;
    });

    Opal.alias(self, 'protected_method_defined?', 'private_method_defined?');

    Opal.alias(self, 'public_instance_methods', 'instance_methods');

    return Opal.alias(self, 'public_method_defined?', 'method_defined?');
  })($scope.base, null);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$private_methods', function() {
      var self = this;

      return [];
    });

    Opal.alias(self, 'private_instance_methods', 'private_methods');
  })($scope.base);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$eval', function() {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), "To use Kernel#eval, you must first require 'opal-parser'. " + ("See https://github.com/opal/opal/blob/" + ($scope.get('RUBY_ENGINE_VERSION')) + "/docs/opal_parser.md for details."));
    })
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("opal/base");
  self.$require("opal/mini");
  self.$require("corelib/array/inheritance");
  self.$require("corelib/string/inheritance");
  self.$require("corelib/string/encoding");
  self.$require("corelib/math");
  self.$require("corelib/complex");
  self.$require("corelib/rational");
  self.$require("corelib/time");
  self.$require("corelib/struct");
  self.$require("corelib/io");
  self.$require("corelib/main");
  self.$require("corelib/dir");
  self.$require("corelib/file");
  self.$require("corelib/process");
  return self.$require("corelib/unsupported");
};

/* Generated by Opal 0.9.4 */
Opal.modules["set"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$call', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);
  (function($base, $super) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_7, TMP_9, TMP_12;

    def.hash = nil;
    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$[]', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var ary = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        ary[$splat_index] = arguments[$splat_index + 0];
      }
      return self.$new(ary);
    });

    Opal.defn(self, '$initialize', TMP_1 = function(enum$) {
      var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil
      }
      TMP_1.$$p = null;
      self.hash = $scope.get('Hash').$new();
      if ((($a = enum$['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = $scope.get('Enumerable')['$==='](enum$)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      if (block !== false && block !== nil) {
        return ($a = ($b = enum$).$each, $a.$$p = (TMP_2 = function(item){var self = TMP_2.$$s || this;
if (item == null) item = nil;
        return self.$add(block.$call(item))}, TMP_2.$$s = self, TMP_2), $a).call($b)
        } else {
        return self.$merge(enum$)
      };
    });

    Opal.defn(self, '$dup', function() {
      var self = this, result = nil;

      result = self.$class().$new();
      return result.$merge(self);
    });

    Opal.defn(self, '$-', function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    });

    Opal.alias(self, 'difference', '-');

    Opal.defn(self, '$inspect', function() {
      var self = this;

      return "#<Set: {" + (self.$to_a().$join(",")) + "}>";
    });

    Opal.defn(self, '$==', function(other) {
      var $a, $b, TMP_3, self = this;

      if ((($a = self['$equal?'](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return true
      } else if ((($a = other['$instance_of?'](self.$class())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ((($a = ($b = other['$is_a?']($scope.get('Set')), $b !== false && $b !== nil ?self.$size()['$=='](other.$size()) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = other)['$all?'], $a.$$p = (TMP_3 = function(o){var self = TMP_3.$$s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_3.$$s = self, TMP_3), $a).call($b)
        } else {
        return false
      };
    });

    Opal.defn(self, '$add', function(o) {
      var self = this;

      self.hash['$[]='](o, true);
      return self;
    });

    Opal.alias(self, '<<', 'add');

    Opal.defn(self, '$classify', TMP_4 = function() {
      var $a, $b, TMP_5, $c, TMP_6, self = this, $iter = TMP_4.$$p, block = $iter || nil, result = nil;

      TMP_4.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("classify")
      };
      result = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_5 = function(h, k){var self = TMP_5.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
      return h['$[]='](k, self.$class().$new())}, TMP_5.$$s = self, TMP_5), $a).call($b);
      ($a = ($c = self).$each, $a.$$p = (TMP_6 = function(item){var self = TMP_6.$$s || this, $a;
if (item == null) item = nil;
      return result['$[]'](((($a = Opal.yield1(block, item)) === $breaker) ? $breaker.$v : $a)).$add(item)}, TMP_6.$$s = self, TMP_6), $a).call($c);
      return result;
    });

    Opal.defn(self, '$collect!', TMP_7 = function() {
      var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, block = $iter || nil, result = nil;

      TMP_7.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      ($a = ($b = self).$each, $a.$$p = (TMP_8 = function(item){var self = TMP_8.$$s || this, $a;
if (item == null) item = nil;
      return result['$<<'](((($a = Opal.yield1(block, item)) === $breaker) ? $breaker.$v : $a))}, TMP_8.$$s = self, TMP_8), $a).call($b);
      return self.$replace(result);
    });

    Opal.alias(self, 'map!', 'collect!');

    Opal.defn(self, '$delete', function(o) {
      var self = this;

      self.hash.$delete(o);
      return self;
    });

    Opal.defn(self, '$delete?', function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$delete(o);
        return self;
        } else {
        return nil
      };
    });

    Opal.defn(self, '$delete_if', TMP_9 = function() {try {

      var $a, $b, TMP_10, $c, $d, TMP_11, self = this, $iter = TMP_9.$$p, $yield = $iter || nil;

      TMP_9.$$p = null;
      ((($a = ($yield !== nil)) !== false && $a !== nil) ? $a : Opal.ret(self.$enum_for("delete_if")));
      ($a = ($b = ($c = ($d = self).$select, $c.$$p = (TMP_11 = function(o){var self = TMP_11.$$s || this, $a;
if (o == null) o = nil;
      return $a = Opal.yield1($yield, o), $a === $breaker ? $a : $a}, TMP_11.$$s = self, TMP_11), $c).call($d)).$each, $a.$$p = (TMP_10 = function(o){var self = TMP_10.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_10.$$s = self, TMP_10), $a).call($b);
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    });

    Opal.defn(self, '$add?', function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self.$add(o)
      };
    });

    Opal.defn(self, '$each', TMP_12 = function() {
      var $a, $b, self = this, $iter = TMP_12.$$p, block = $iter || nil;

      TMP_12.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      ($a = ($b = self.hash).$each_key, $a.$$p = block.$to_proc(), $a).call($b);
      return self;
    });

    Opal.defn(self, '$empty?', function() {
      var self = this;

      return self.hash['$empty?']();
    });

    Opal.defn(self, '$eql?', function(other) {
      var $a, $b, TMP_13, self = this;

      return self.hash['$eql?'](($a = ($b = other).$instance_eval, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_13.$$s = self, TMP_13), $a).call($b));
    });

    Opal.defn(self, '$clear', function() {
      var self = this;

      self.hash.$clear();
      return self;
    });

    Opal.defn(self, '$include?', function(o) {
      var self = this;

      return self.hash['$include?'](o);
    });

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$merge', function(enum$) {
      var $a, $b, TMP_14, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return self.$add(item)}, TMP_14.$$s = self, TMP_14), $a).call($b);
      return self;
    });

    Opal.defn(self, '$replace', function(enum$) {
      var self = this;

      self.$clear();
      self.$merge(enum$);
      return self;
    });

    Opal.defn(self, '$size', function() {
      var self = this;

      return self.hash.$size();
    });

    Opal.alias(self, 'length', 'size');

    Opal.defn(self, '$subtract', function(enum$) {
      var $a, $b, TMP_15, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_15 = function(item){var self = TMP_15.$$s || this;
if (item == null) item = nil;
      return self.$delete(item)}, TMP_15.$$s = self, TMP_15), $a).call($b);
      return self;
    });

    Opal.defn(self, '$|', function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    });

    Opal.defn(self, '$superset?', function(set) {
      var $a, $b, TMP_16, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(self.$size(), set.$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_16 = function(o){var self = TMP_16.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_16.$$s = self, TMP_16), $a).call($b);
    });

    Opal.alias(self, '>=', 'superset?');

    Opal.defn(self, '$proper_superset?', function(set) {
      var $a, $b, TMP_17, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(self.$size(), set.$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_17 = function(o){var self = TMP_17.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_17.$$s = self, TMP_17), $a).call($b);
    });

    Opal.alias(self, '>', 'proper_superset?');

    Opal.defn(self, '$subset?', function(set) {
      var $a, $b, TMP_18, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(set.$size(), self.$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_18 = function(o){var self = TMP_18.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_18.$$s = self, TMP_18), $a).call($b);
    });

    Opal.alias(self, '<=', 'subset?');

    Opal.defn(self, '$proper_subset?', function(set) {
      var $a, $b, TMP_19, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(set.$size(), self.$size())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_19 = function(o){var self = TMP_19.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_19.$$s = self, TMP_19), $a).call($b);
    });

    Opal.alias(self, '<', 'proper_subset?');

    Opal.alias(self, '+', '|');

    Opal.alias(self, 'union', '|');

    return (Opal.defn(self, '$to_a', function() {
      var self = this;

      return self.hash.$keys();
    }), nil) && 'to_a';
  })($scope.base, null);
  return (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_20;

    Opal.defn(self, '$to_set', TMP_20 = function(klass) {
      var $a, $b, self = this, $iter = TMP_20.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      if (klass == null) {
        klass = $scope.get('Set')
      }
      TMP_20.$$p = null;
      return ($a = ($b = klass).$new, $a.$$p = block.$to_proc(), $a).apply($b, [self].concat(Opal.to_a(args)));
    })
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/parser/sexp"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$[]', '$[]=', '$send', '$to_proc', '$<<', '$push', '$concat', '$new', '$dup', '$is_a?', '$==', '$array', '$join', '$map', '$inspect', '$line']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Sexp(){};
      var self = $Sexp = $klass($base, $super, 'Sexp', $Sexp);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def.array = def.source = nil;
      self.$attr_reader("array");

      self.$attr_accessor("source");

      Opal.defn(self, '$initialize', function(args) {
        var self = this;

        return self.array = args;
      });

      Opal.defn(self, '$type', function() {
        var self = this;

        return self.array['$[]'](0);
      });

      Opal.defn(self, '$type=', function(type) {
        var self = this;

        return self.array['$[]='](0, type);
      });

      Opal.defn(self, '$children', function() {
        var self = this;

        return self.array['$[]']($range(1, -1, false));
      });

      Opal.defn(self, '$method_missing', TMP_1 = function(sym) {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        TMP_1.$$p = null;
        return ($a = ($b = self.array).$send, $a.$$p = block.$to_proc(), $a).apply($b, [sym].concat(Opal.to_a(args)));
      });

      Opal.defn(self, '$<<', function(other) {
        var self = this;

        self.array['$<<'](other);
        return self;
      });

      Opal.defn(self, '$push', function() {
        var $a, self = this, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var parts = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          parts[$splat_index] = arguments[$splat_index + 0];
        }
        ($a = self.array).$push.apply($a, Opal.to_a(parts));
        return self;
      });

      Opal.defn(self, '$concat', function(children) {
        var self = this;

        self.array.$concat(children);
        return self;
      });

      Opal.defn(self, '$to_ary', function() {
        var self = this;

        return self.array;
      });

      Opal.defn(self, '$dup', function() {
        var self = this;

        return $scope.get('Sexp').$new(self.array.$dup());
      });

      Opal.defn(self, '$==', function(other) {
        var $a, self = this;

        if ((($a = other['$is_a?']($scope.get('Sexp'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.array['$=='](other.$array())
          } else {
          return self.array['$=='](other)
        };
      });

      Opal.alias(self, 'eql?', '==');

      Opal.defn(self, '$line', function() {
        var $a, self = this;

        return ($a = self.source, $a !== false && $a !== nil ?self.source['$[]'](0) : $a);
      });

      Opal.defn(self, '$column', function() {
        var $a, self = this;

        return ($a = self.source, $a !== false && $a !== nil ?self.source['$[]'](1) : $a);
      });

      Opal.defn(self, '$inspect', function() {
        var $a, $b, TMP_2, self = this;

        return "(" + (($a = ($b = self.array).$map, $a.$$p = (TMP_2 = function(e){var self = TMP_2.$$s || this;
if (e == null) e = nil;
        return e.$inspect()}, TMP_2.$$s = self, TMP_2), $a).call($b).$join(", ")) + ")";
      });

      Opal.defn(self, '$pretty_inspect', function() {
        var $a, $b, TMP_3, self = this;

        return "(" + ((function() {if ((($a = self.$line()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "" + (self.$line()) + " "
          } else {
          return ""
        }; return nil; })()) + (($a = ($b = self.array).$map, $a.$$p = (TMP_3 = function(e){var self = TMP_3.$$s || this;
if (e == null) e = nil;
        return e.$inspect()}, TMP_3.$$s = self, TMP_3), $a).call($b).$join(", ")) + ")";
      });

      return Opal.alias(self, 'to_s', 'inspect');
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/regexp_anchors"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'REGEXP_START', (function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      return "^"}; return nil; })());

    Opal.cdecl($scope, 'REGEXP_END', (function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      return "$"}; return nil; })());
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["strscan"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$anchor', '$scan_until', '$length', '$size', '$rest', '$pos=', '$private']);
  return (function($base, $super) {
    function $StringScanner(){};
    var self = $StringScanner = $klass($base, $super, 'StringScanner', $StringScanner);

    var def = self.$$proto, $scope = self.$$scope;

    def.pos = def.string = def.working = def.matched = def.prev_pos = def.match = nil;
    self.$attr_reader("pos");

    self.$attr_reader("matched");

    Opal.defn(self, '$initialize', function(string) {
      var self = this;

      self.string = string;
      self.pos = 0;
      self.matched = nil;
      self.working = string;
      return self.match = [];
    });

    self.$attr_reader("string");

    Opal.defn(self, '$beginning_of_line?', function() {
      var self = this;

      return self.pos === 0 || self.string.charAt(self.pos - 1) === "\n";
    });

    Opal.alias(self, 'bol?', 'beginning_of_line?');

    Opal.defn(self, '$scan', function(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else if (typeof(result) === 'object') {
        self.prev_pos = self.pos;
        self.pos     += result[0].length;
        self.working  = self.working.substring(result[0].length);
        self.matched  = result[0];
        self.match    = result;

        return result[0];
      }
      else if (typeof(result) === 'string') {
        self.pos     += result.length;
        self.working  = self.working.substring(result.length);

        return result;
      }
      else {
        return nil;
      }
    ;
    });

    Opal.defn(self, '$scan_until', function(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var pos     = self.pos,
          working = self.working,
          result;

      while (true) {
        result   = pattern.exec(working);
        pos     += 1;
        working  = working.substr(1);

        if (result == null) {
          if (working.length === 0) {
            return self.matched = nil;
          }

          continue;
        }

        self.matched  = self.string.substr(self.pos, pos - self.pos - 1 + result[0].length);
        self.prev_pos = pos - 1;
        self.pos      = pos;
        self.working  = working.substr(result[0].length);

        return self.matched;
      }
    ;
    });

    Opal.defn(self, '$[]', function(idx) {
      var self = this;

      
      var match = self.match;

      if (idx < 0) {
        idx += match.length;
      }

      if (idx < 0 || idx >= match.length) {
        return nil;
      }

      if (match[idx] == null) {
        return nil;
      }

      return match[idx];
    ;
    });

    Opal.defn(self, '$check', function(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }

      return self.matched = result[0];
    ;
    });

    Opal.defn(self, '$check_until', function(pattern) {
      var self = this;

      
      var prev_pos = self.prev_pos,
          pos      = self.pos;

      var result = self.$scan_until(pattern);

      if (result !== nil) {
        self.matched = result.substr(-1);
        self.working = self.string.substr(pos);
      }

      self.prev_pos = prev_pos;
      self.pos      = pos;

      return result;
    ;
    });

    Opal.defn(self, '$peek', function(length) {
      var self = this;

      return self.working.substring(0, length);
    });

    Opal.defn(self, '$eos?', function() {
      var self = this;

      return self.working.length === 0;
    });

    Opal.defn(self, '$exist?', function(pattern) {
      var self = this;

      
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      }
      else if (result.index == 0) {
        return 0;
      }
      else {
        return result.index + 1;
      }
    ;
    });

    Opal.defn(self, '$skip', function(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else {
        var match_str = result[0];
        var match_len = match_str.length;

        self.matched   = match_str;
        self.prev_pos  = self.pos;
        self.pos      += match_len;
        self.working   = self.working.substring(match_len);

        return match_len;
      }
    ;
    });

    Opal.defn(self, '$skip_until', function(pattern) {
      var self = this;

      
      var result = self.$scan_until(pattern);

      if (result === nil) {
        return nil;
      }
      else {
        self.matched = result.substr(-1);

        return result.length;
      }
    ;
    });

    Opal.defn(self, '$get_byte', function() {
      var self = this;

      
      var result = nil;

      if (self.pos < self.string.length) {
        self.prev_pos  = self.pos;
        self.pos      += 1;
        result      = self.matched = self.working.substring(0, 1);
        self.working   = self.working.substring(1);
      }
      else {
        self.matched = nil;
      }

      return result;
    ;
    });

    Opal.alias(self, 'getch', 'get_byte');

    Opal.defn(self, '$match?', function(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      }
      else {
        self.prev_pos = self.pos;

        return result[0].length;
      }
    ;
    });

    Opal.defn(self, '$pos=', function(pos) {
      var self = this;

      
      if (pos < 0) {
        pos += self.string.$length();
      }
    ;
      self.pos = pos;
      return self.working = self.string.slice(pos);
    });

    Opal.defn(self, '$post_match', function() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(self.pos);
    ;
    });

    Opal.defn(self, '$pre_match', function() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(0, self.prev_pos);
    ;
    });

    Opal.defn(self, '$reset', function() {
      var self = this;

      self.working = self.string;
      self.matched = nil;
      return self.pos = 0;
    });

    Opal.defn(self, '$rest', function() {
      var self = this;

      return self.working;
    });

    Opal.defn(self, '$rest?', function() {
      var self = this;

      return self.working.length !== 0;
    });

    Opal.defn(self, '$rest_size', function() {
      var self = this;

      return self.$rest().$size();
    });

    Opal.defn(self, '$terminate', function() {
      var $a, $b, self = this;

      self.match = nil;
      return (($a = [self.string.$length()]), $b = self, $b['$pos='].apply($b, $a), $a[$a.length-1]);
    });

    Opal.defn(self, '$unscan', function() {
      var self = this;

      self.pos = self.prev_pos;
      self.prev_pos = nil;
      self.match = nil;
      return self;
    });

    self.$private();

    return (Opal.defn(self, '$anchor', function(pattern) {
      var self = this;

      return new RegExp('^(?:' + pattern.toString().substr(1, pattern.toString().length - 2) + ')');
    }), nil) && 'anchor';
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/parser/keywords"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$map', '$new', '$each', '$[]=', '$name', '$[]']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Keywords, self = $Keywords = $module($base, 'Keywords');

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

      (function($base, $super) {
        function $KeywordTable(){};
        var self = $KeywordTable = $klass($base, $super, 'KeywordTable', $KeywordTable);

        var def = self.$$proto, $scope = self.$$scope;

        self.$attr_accessor("name", "id", "state");

        return (Opal.defn(self, '$initialize', function(name, id, state) {
          var self = this;

          self.name = name;
          self.id = id;
          return self.state = state;
        }), nil) && 'initialize';
      })($scope.base, null);

      Opal.cdecl($scope, 'KEYWORDS', ($a = ($b = [["__LINE__", ["k__LINE__", "k__LINE__"], "expr_end"], ["__FILE__", ["k__FILE__", "k__FILE__"], "expr_end"], ["alias", ["kALIAS", "kALIAS"], "expr_fname"], ["and", ["kAND", "kAND"], "expr_beg"], ["begin", ["kBEGIN", "kBEGIN"], "expr_beg"], ["break", ["kBREAK", "kBREAK"], "expr_mid"], ["case", ["kCASE", "kCASE"], "expr_beg"], ["class", ["kCLASS", "kCLASS"], "expr_class"], ["def", ["kDEF", "kDEF"], "expr_fname"], ["defined?", ["kDEFINED", "kDEFINED"], "expr_arg"], ["do", ["kDO", "kDO"], "expr_beg"], ["else", ["kELSE", "kELSE"], "expr_beg"], ["elsif", ["kELSIF", "kELSIF"], "expr_beg"], ["end", ["kEND", "kEND"], "expr_end"], ["ensure", ["kENSURE", "kENSURE"], "expr_beg"], ["false", ["kFALSE", "kFALSE"], "expr_end"], ["for", ["kFOR", "kFOR"], "expr_beg"], ["if", ["kIF", "kIF_MOD"], "expr_beg"], ["in", ["kIN", "kIN"], "expr_beg"], ["module", ["kMODULE", "kMODULE"], "expr_beg"], ["nil", ["kNIL", "kNIL"], "expr_end"], ["next", ["kNEXT", "kNEXT"], "expr_mid"], ["not", ["kNOT", "kNOT"], "expr_beg"], ["or", ["kOR", "kOR"], "expr_beg"], ["redo", ["kREDO", "kREDO"], "expr_end"], ["rescue", ["kRESCUE", "kRESCUE_MOD"], "expr_mid"], ["return", ["kRETURN", "kRETURN"], "expr_mid"], ["self", ["kSELF", "kSELF"], "expr_end"], ["super", ["kSUPER", "kSUPER"], "expr_arg"], ["then", ["kTHEN", "kTHEN"], "expr_beg"], ["true", ["kTRUE", "kTRUE"], "expr_end"], ["undef", ["kUNDEF", "kUNDEF"], "expr_fname"], ["unless", ["kUNLESS", "kUNLESS_MOD"], "expr_beg"], ["until", ["kUNTIL", "kUNTIL_MOD"], "expr_beg"], ["when", ["kWHEN", "kWHEN"], "expr_beg"], ["while", ["kWHILE", "kWHILE_MOD"], "expr_beg"], ["yield", ["kYIELD", "kYIELD"], "expr_arg"]]).$map, $a.$$p = (TMP_1 = function(decl){var self = TMP_1.$$s || this, $a;
if (decl == null) decl = nil;
      return ($a = $scope.get('KeywordTable')).$new.apply($a, Opal.to_a(decl))}, TMP_1.$$s = self, TMP_1), $a).call($b));

      Opal.defs(self, '$map', function() {
        var $a, $b, TMP_2, self = this;
        if (self.map == null) self.map = nil;

        if ((($a = self.map) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.map = $hash2([], {});
          ($a = ($b = $scope.get('KEYWORDS')).$each, $a.$$p = (TMP_2 = function(k){var self = TMP_2.$$s || this;
            if (self.map == null) self.map = nil;
if (k == null) k = nil;
          return self.map['$[]='](k.$name(), k)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        };
        return self.map;
      });

      Opal.defs(self, '$keyword', function(kw) {
        var self = this;

        return self.$map()['$[]'](kw);
      });
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/parser/lexer"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$|', '$attr_reader', '$attr_accessor', '$new', '$yylex', '$yylval', '$has_local?', '$scope', '$parser', '$to_sym', '$<<', '$&', '$>>', '$!=', '$include?', '$arg?', '$!', '$space?', '$check', '$after_operator?', '$scan', '$+', '$length', '$matched', '$pos=', '$-', '$pos', '$new_strterm', '$merge', '$yylval=', '$to_f', '$gsub', '$scanner', '$to_i', '$raise', '$peek', '$chr', '$%', '$[]', '$escape', '$peek_variable_name', '$bol?', '$eos?', '$read_escape', '$join', '$count', '$strterm', '$[]=', '$pushback', '$==', '$cond?', '$strterm=', '$add_string_content', '$line=', '$line', '$label_state?', '$end_with?', '$=~', '$keyword', '$state', '$name', '$id', '$cmdarg?', '$here_document', '$parse_string', '$skip', '$empty?', '$new_op_asgn', '$set_arg_state', '$spcarg?', '$beg?', '$===', '$new_strterm2', '$cond_push', '$cmdarg_push', '$cond_lexpop', '$cmdarg_lexpop', '$end?', '$heredoc_identifier', '$sub', '$inspect', '$process_numeric', '$process_identifier', '$size', '$pop', '$last']);
  self.$require("opal/regexp_anchors");
  self.$require("strscan");
  self.$require("opal/parser/keywords");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Lexer(){};
      var self = $Lexer = $klass($base, $super, 'Lexer', $Lexer);

      var def = self.$$proto, $scope = self.$$scope;

      def.scanner = def.tok_line = def.tok_column = def.column = def.line = def.cond = def.cmdarg = def.lex_state = def.space_seen = def.yylval = def.scanner_stack = def.start_of_lambda = def.file = nil;
      Opal.cdecl($scope, 'STR_FUNC_ESCAPE', 1);

      Opal.cdecl($scope, 'STR_FUNC_EXPAND', 2);

      Opal.cdecl($scope, 'STR_FUNC_REGEXP', 4);

      Opal.cdecl($scope, 'STR_FUNC_QWORDS', 8);

      Opal.cdecl($scope, 'STR_FUNC_SYMBOL', 16);

      Opal.cdecl($scope, 'STR_FUNC_INDENT', 32);

      Opal.cdecl($scope, 'STR_FUNC_XQUOTE', 64);

      Opal.cdecl($scope, 'STR_SQUOTE', 0);

      Opal.cdecl($scope, 'STR_DQUOTE', $scope.get('STR_FUNC_EXPAND'));

      Opal.cdecl($scope, 'STR_XQUOTE', $scope.get('STR_FUNC_EXPAND')['$|']($scope.get('STR_FUNC_XQUOTE')));

      Opal.cdecl($scope, 'STR_REGEXP', $scope.get('STR_FUNC_REGEXP')['$|']($scope.get('STR_FUNC_ESCAPE'))['$|']($scope.get('STR_FUNC_EXPAND')));

      Opal.cdecl($scope, 'STR_SWORD', $scope.get('STR_FUNC_QWORDS'));

      Opal.cdecl($scope, 'STR_DWORD', $scope.get('STR_FUNC_QWORDS')['$|']($scope.get('STR_FUNC_EXPAND')));

      Opal.cdecl($scope, 'STR_SSYM', $scope.get('STR_FUNC_SYMBOL'));

      Opal.cdecl($scope, 'STR_DSYM', $scope.get('STR_FUNC_SYMBOL')['$|']($scope.get('STR_FUNC_EXPAND')));

      self.$attr_reader("line", "column");

      self.$attr_reader("scope");

      self.$attr_reader("eof_content");

      self.$attr_accessor("lex_state");

      self.$attr_accessor("strterm");

      self.$attr_accessor("scanner");

      self.$attr_accessor("yylval");

      self.$attr_accessor("parser");

      Opal.defn(self, '$initialize', function(source, file) {
        var self = this;

        self.lex_state = "expr_beg";
        self.cond = 0;
        self.cmdarg = 0;
        self.line = 1;
        self.tok_line = 1;
        self.column = 0;
        self.tok_column = 0;
        self.file = file;
        self.scanner = $scope.get('StringScanner').$new(source);
        self.scanner_stack = [self.scanner];
        self.case_stmt = nil;
        return self.start_of_lambda = nil;
      });

      Opal.defn(self, '$next_token', function() {
        var self = this, token = nil, value = nil, location = nil;

        token = self.$yylex();
        value = self.$yylval();
        location = [self.tok_line, self.tok_column];
        self.tok_column = self.column;
        self.tok_line = self.line;
        return [token, [value, location]];
      });

      Opal.defn(self, '$has_local?', function(local) {
        var self = this;

        return self.$parser().$scope()['$has_local?'](local.$to_sym());
      });

      Opal.defn(self, '$cond_push', function(n) {
        var self = this;

        return self.cond = (self.cond['$<<'](1))['$|']((n['$&'](1)));
      });

      Opal.defn(self, '$cond_pop', function() {
        var self = this;

        return self.cond = self.cond['$>>'](1);
      });

      Opal.defn(self, '$cond_lexpop', function() {
        var self = this;

        return self.cond = (self.cond['$>>'](1))['$|']((self.cond['$&'](1)));
      });

      Opal.defn(self, '$cond?', function() {
        var self = this;

        return (self.cond['$&'](1))['$!='](0);
      });

      Opal.defn(self, '$cmdarg_push', function(n) {
        var self = this;

        return self.cmdarg = (self.cmdarg['$<<'](1))['$|']((n['$&'](1)));
      });

      Opal.defn(self, '$cmdarg_pop', function() {
        var self = this;

        return self.cmdarg = self.cmdarg['$>>'](1);
      });

      Opal.defn(self, '$cmdarg_lexpop', function() {
        var self = this;

        return self.cmdarg = (self.cmdarg['$>>'](1))['$|']((self.cmdarg['$&'](1)));
      });

      Opal.defn(self, '$cmdarg?', function() {
        var self = this;

        return (self.cmdarg['$&'](1))['$!='](0);
      });

      Opal.defn(self, '$arg?', function() {
        var self = this;

        return ["expr_arg", "expr_cmdarg"]['$include?'](self.lex_state);
      });

      Opal.defn(self, '$end?', function() {
        var self = this;

        return ["expr_end", "expr_endarg", "expr_endfn"]['$include?'](self.lex_state);
      });

      Opal.defn(self, '$beg?', function() {
        var self = this;

        return ["expr_beg", "expr_value", "expr_mid", "expr_class"]['$include?'](self.lex_state);
      });

      Opal.defn(self, '$after_operator?', function() {
        var self = this;

        return ["expr_fname", "expr_dot"]['$include?'](self.lex_state);
      });

      Opal.defn(self, '$label_state?', function() {
        var $a, self = this;

        return ((($a = ["expr_beg", "expr_endfn"]['$include?'](self.lex_state)) !== false && $a !== nil) ? $a : self['$arg?']());
      });

      Opal.defn(self, '$spcarg?', function() {
        var $a, $b, self = this;

        return ($a = ($b = self['$arg?'](), $b !== false && $b !== nil ?self.space_seen : $b), $a !== false && $a !== nil ?self['$space?']()['$!']() : $a);
      });

      Opal.defn(self, '$space?', function() {
        var self = this;

        return self.scanner.$check(/\s/);
      });

      Opal.defn(self, '$set_arg_state', function() {
        var $a, self = this;

        return self.lex_state = (function() {if ((($a = self['$after_operator?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "expr_arg"
          } else {
          return "expr_beg"
        }; return nil; })();
      });

      Opal.defn(self, '$scan', function(regexp) {
        var $a, self = this, result = nil;

        if ((($a = result = self.scanner.$scan(regexp)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.column = $rb_plus(self.column, result.$length());
          self.yylval = $rb_plus(self.yylval, self.scanner.$matched());};
        return result;
      });

      Opal.defn(self, '$skip', function(regexp) {
        var $a, self = this, result = nil;

        if ((($a = result = self.scanner.$scan(regexp)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.column = $rb_plus(self.column, result.$length());
          self.tok_column = self.column;};
        return result;
      });

      Opal.defn(self, '$check', function(regexp) {
        var self = this;

        return self.scanner.$check(regexp);
      });

      Opal.defn(self, '$pushback', function(n) {
        var $a, self = this;

        return ($a = self.scanner, $a['$pos=']($rb_minus($a.$pos(), n)));
      });

      Opal.defn(self, '$matched', function() {
        var self = this;

        return self.scanner.$matched();
      });

      Opal.defn(self, '$line=', function(line) {
        var self = this;

        self.column = self.tok_column = 0;
        return self.line = self.tok_line = line;
      });

      Opal.defn(self, '$new_strterm', function(func, term, paren) {
        var self = this;

        return $hash2(["type", "func", "term", "paren"], {"type": "string", "func": func, "term": term, "paren": paren});
      });

      Opal.defn(self, '$new_strterm2', function(func, term, paren) {
        var self = this;

        term = self.$new_strterm(func, term, paren);
        return term.$merge($hash2(["balance", "nesting"], {"balance": true, "nesting": 0}));
      });

      Opal.defn(self, '$new_op_asgn', function(value) {
        var $a, $b, self = this;

        (($a = [value]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
        self.lex_state = "expr_beg";
        return "tOP_ASGN";
      });

      Opal.defn(self, '$process_numeric', function() {
        var $a, $b, self = this;

        self.lex_state = "expr_end";
        if ((($a = self.$scan(/[\d_]+\.[\d_]+\b|[\d_]+(\.[\d_]+)?[eE][-+]?[\d_]+\b/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.$scanner().$matched().$gsub(/_/, "").$to_f()]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tFLOAT";
        } else if ((($a = self.$scan(/([^0][\d_]*|0)\b/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.$scanner().$matched().$gsub(/_/, "").$to_i()]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tINTEGER";
        } else if ((($a = self.$scan(/0[bB](0|1|_)+/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.$scanner().$matched().$to_i(2)]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tINTEGER";
        } else if ((($a = self.$scan(/0[xX](\d|[a-f]|[A-F]|_)+/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.$scanner().$matched().$to_i(16)]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tINTEGER";
        } else if ((($a = self.$scan(/0[oO]?([0-7]|_)+/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.$scanner().$matched().$to_i(8)]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tINTEGER";
        } else if ((($a = self.$scan(/0[dD]([0-9]|_)+/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [self.$scanner().$matched().$gsub(/_/, "").$to_i()]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tINTEGER";
          } else {
          return self.$raise("Lexing error on numeric type: `" + (self.$scanner().$peek(5)) + "`")
        };
      });

      Opal.defn(self, '$read_escape', function() {
        var $a, self = this;

        if ((($a = self.$scan(/\\/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\\"
        } else if ((($a = self.$scan(/n/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\n"
        } else if ((($a = self.$scan(/t/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\t"
        } else if ((($a = self.$scan(/r/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\r"
        } else if ((($a = self.$scan(/f/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\f"
        } else if ((($a = self.$scan(/v/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\v"
        } else if ((($a = self.$scan(/a/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\u0007"
        } else if ((($a = self.$scan(/b/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\b"
        } else if ((($a = self.$scan(/e/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "\u001b"
        } else if ((($a = self.$scan(/s/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return " "
        } else if ((($a = self.$scan(/[0-7]{1,3}/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (self.$matched().$to_i(8)['$%'](256)).$chr()
        } else if ((($a = self.$scan(/x([0-9a-fA-F]{1,2})/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$scanner()['$[]'](1).$to_i(16).$chr()
        } else if ((($a = self.$scan(/u([0-9a-zA-Z]{1,4})/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$scanner()['$[]'](1).$to_i(16).$chr((($scope.get('Encoding')).$$scope.get('UTF_8')))
          } else {
          return self.$scan(/./)
        };
      });

      Opal.defn(self, '$peek_variable_name', function() {
        var $a, self = this;

        if ((($a = self.$check(/[@$]/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "tSTRING_DVAR"
        } else if ((($a = self.$scan(/\{/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "tSTRING_DBEG"
          } else {
          return nil
        };
      });

      Opal.defn(self, '$here_document', function(str_parse) {
        var $a, $b, $c, self = this, eos_regx = nil, expand = nil, escape = nil, str_buffer = nil, tok = nil, reg = nil, complete_str = nil;

        eos_regx = (new RegExp("[ \\t]*" + $scope.get('Regexp').$escape(str_parse['$[]']("term")) + "(\\r*\\n|$)"));
        expand = true;
        escape = str_parse['$[]']("func")['$!=']($scope.get('STR_SQUOTE'));
        if ((($a = self.$check(eos_regx)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$scan((new RegExp("[ \\t]*" + $scope.get('Regexp').$escape(str_parse['$[]']("term")))));
          if ((($a = str_parse['$[]']("scanner")) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.scanner_stack['$<<'](str_parse['$[]']("scanner"));
            self.scanner = str_parse['$[]']("scanner");};
          return "tSTRING_END";};
        str_buffer = [];
        if ((($a = self.$scan(/#/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = tok = self.$peek_variable_name()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return tok};
          str_buffer['$<<']("#");};
        while (!((($b = ($c = self.$check(eos_regx), $c !== false && $c !== nil ?self.$scanner()['$bol?']() : $c)) !== nil && (!$b.$$is_boolean || $b == true)))) {
        if ((($b = self.$scanner()['$eos?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$raise("reached EOF while in heredoc")};
        if ((($b = self.$scan(/\n/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          str_buffer['$<<'](self.$scanner().$matched())
        } else if ((($b = (($c = expand !== false && expand !== nil) ? self.$check(/#(?=[\$\@\{])/) : expand)) !== nil && (!$b.$$is_boolean || $b == true))) {
          break;
        } else if ((($b = self.$scan(/\\/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          str_buffer['$<<'](((function() {if (escape !== false && escape !== nil) {
            return self.$read_escape()
            } else {
            return self.$scanner().$matched()
          }; return nil; })()))
          } else {
          reg = $scope.get('Regexp').$new("[^#\u0000\\\\\n]+|.");
          self.$scan(reg);
          str_buffer['$<<'](self.$scanner().$matched());
        };};
        complete_str = str_buffer.$join("");
        self.line = $rb_plus(self.line, complete_str.$count("\n"));
        (($a = [complete_str]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
        return "tSTRING_CONTENT";
      });

      Opal.defn(self, '$parse_string', function() {
        var $a, $b, self = this, str_parse = nil, func = nil, space = nil, qwords = nil, expand = nil, regexp = nil, str_buffer = nil, complete_str = nil;

        str_parse = self.$strterm();
        func = str_parse['$[]']("func");
        space = false;
        qwords = (func['$&']($scope.get('STR_FUNC_QWORDS')))['$!='](0);
        expand = (func['$&']($scope.get('STR_FUNC_EXPAND')))['$!='](0);
        regexp = (func['$&']($scope.get('STR_FUNC_REGEXP')))['$!='](0);
        if ((($a = (($b = qwords !== false && qwords !== nil) ? self.$scan(/\s+/) : qwords)) !== nil && (!$a.$$is_boolean || $a == true))) {
          space = true};
        str_buffer = [];
        if ((($a = self.$scan($scope.get('Regexp').$new($scope.get('Regexp').$escape(str_parse['$[]']("term"))))) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = (($b = qwords !== false && qwords !== nil) ? str_parse['$[]']("done_last_space")['$!']() : qwords)) !== nil && (!$a.$$is_boolean || $a == true))) {
            str_parse['$[]=']("done_last_space", true);
            self.$pushback(1);
            (($a = [" "]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
            return "tSPACE";};
          if ((($a = str_parse['$[]']("balance")) !== nil && (!$a.$$is_boolean || $a == true))) {
            if (str_parse['$[]']("nesting")['$=='](0)) {
              if (regexp !== false && regexp !== nil) {
                (($a = [self.$scan(/\w+/)]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
                return "tREGEXP_END";};
              return (function() {if ((($a = ($b = self['$cond?']()['$!'](), $b !== false && $b !== nil ?self.$scan(/:[^:]/) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return "tLABEL_END"
                } else {
                return "tSTRING_END"
              }; return nil; })();
              } else {
              str_buffer['$<<'](self.$scanner().$matched());
              ($a = "nesting", $b = str_parse, $b['$[]=']($a, $rb_minus($b['$[]']($a), 1)));
              (($a = [str_parse]), $b = self, $b['$strterm='].apply($b, $a), $a[$a.length-1]);
            }
          } else if (regexp !== false && regexp !== nil) {
            self.lex_state = "expr_end";
            (($a = [self.$scan(/\w+/)]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
            return "tREGEXP_END";
            } else {
            if ((($a = str_parse['$[]']("scanner")) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.scanner_stack['$<<'](str_parse['$[]']("scanner"));
              self.scanner = str_parse['$[]']("scanner");};
            return (function() {if ((($a = ($b = self['$cond?']()['$!'](), $b !== false && $b !== nil ?self.$scan(/:[^:]/) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "tLABEL_END"
              } else {
              return "tSTRING_END"
            }; return nil; })();
          };};
        if (space !== false && space !== nil) {
          (($a = [" "]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tSPACE";};
        if ((($a = ($b = str_parse['$[]']("balance"), $b !== false && $b !== nil ?self.$scan($scope.get('Regexp').$new($scope.get('Regexp').$escape(str_parse['$[]']("paren")))) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          str_buffer['$<<'](self.$scanner().$matched());
          ($a = "nesting", $b = str_parse, $b['$[]=']($a, $rb_plus($b['$[]']($a), 1)));
        } else if ((($a = self.$check(/#[@$]/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$scan(/#/);
          if (expand !== false && expand !== nil) {
            return "tSTRING_DVAR"
            } else {
            str_buffer['$<<'](self.$scanner().$matched())
          };
        } else if ((($a = self.$scan(/#\{/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if (expand !== false && expand !== nil) {
            return "tSTRING_DBEG"
            } else {
            str_buffer['$<<'](self.$scanner().$matched())
          }
        } else if ((($a = self.$scan(/\#/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          str_buffer['$<<']("#")};
        self.$add_string_content(str_buffer, str_parse);
        complete_str = str_buffer.$join("");
        self.line = $rb_plus(self.line, complete_str.$count("\n"));
        (($a = [complete_str]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
        return "tSTRING_CONTENT";
      });

      Opal.defn(self, '$add_string_content', function(str_buffer, str_parse) {
        var $a, $b, $c, self = this, func = nil, end_str_re = nil, qwords = nil, expand = nil, regexp = nil, escape = nil, xquote = nil, c = nil, handled = nil, reg = nil;

        func = str_parse['$[]']("func");
        end_str_re = $scope.get('Regexp').$new($scope.get('Regexp').$escape(str_parse['$[]']("term")));
        qwords = (func['$&']($scope.get('STR_FUNC_QWORDS')))['$!='](0);
        expand = (func['$&']($scope.get('STR_FUNC_EXPAND')))['$!='](0);
        regexp = (func['$&']($scope.get('STR_FUNC_REGEXP')))['$!='](0);
        escape = (func['$&']($scope.get('STR_FUNC_ESCAPE')))['$!='](0);
        xquote = (func['$==']($scope.get('STR_XQUOTE')));
        while (!((($b = self.$scanner()['$eos?']()) !== nil && (!$b.$$is_boolean || $b == true)))) {
        c = nil;
        handled = true;
        if ((($b = self.$check(end_str_re)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = ($c = str_parse['$[]']("balance"), $c !== false && $c !== nil ?(str_parse['$[]']("nesting")['$!='](0)) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$scan(end_str_re);
            c = self.$scanner().$matched();
            ($b = "nesting", $c = str_parse, $c['$[]=']($b, $rb_minus($c['$[]']($b), 1)));
            } else {
            break;
          }
        } else if ((($b = ($c = str_parse['$[]']("balance"), $c !== false && $c !== nil ?self.$scan($scope.get('Regexp').$new($scope.get('Regexp').$escape(str_parse['$[]']("paren")))) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
          ($b = "nesting", $c = str_parse, $c['$[]=']($b, $rb_plus($c['$[]']($b), 1)));
          c = self.$scanner().$matched();
        } else if ((($b = (($c = qwords !== false && qwords !== nil) ? self.$scan(/\s/) : qwords)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$pushback(1);
          break;;
        } else if ((($b = (($c = expand !== false && expand !== nil) ? self.$check(/#(?=[\$\@\{])/) : expand)) !== nil && (!$b.$$is_boolean || $b == true))) {
          break;
        } else if ((($b = (($c = qwords !== false && qwords !== nil) ? self.$scan(/\s/) : qwords)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$pushback(1);
          break;;
        } else if ((($b = self.$scan(/\\/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if (xquote !== false && xquote !== nil) {
            c = $rb_plus("\\", self.$scan(/./))
          } else if ((($b = (($c = qwords !== false && qwords !== nil) ? self.$scan(/\n/) : qwords)) !== nil && (!$b.$$is_boolean || $b == true))) {
            str_buffer['$<<']("\n");
            continue;;
          } else if ((($b = (($c = expand !== false && expand !== nil) ? self.$scan(/\n/) : expand)) !== nil && (!$b.$$is_boolean || $b == true))) {
            continue;
          } else if ((($b = (($c = qwords !== false && qwords !== nil) ? self.$scan(/\s/) : qwords)) !== nil && (!$b.$$is_boolean || $b == true))) {
            c = " "
          } else if (regexp !== false && regexp !== nil) {
            if ((($b = self.$scan(/(.)/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              c = $rb_plus("\\", self.$scanner().$matched())}
          } else if (expand !== false && expand !== nil) {
            c = self.$read_escape()
          } else if ((($b = self.$scan(/\n/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          } else if ((($b = self.$scan(/\\/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if (escape !== false && escape !== nil) {
              c = "\\\\"
              } else {
              c = self.$scanner().$matched()
            }
          } else if ((($b = self.$scan(end_str_re)) !== nil && (!$b.$$is_boolean || $b == true))) {
            } else {
            str_buffer['$<<']("\\")
          }
          } else {
          handled = false
        };
        if (handled !== false && handled !== nil) {
          } else {
          reg = (function() {if (qwords !== false && qwords !== nil) {
            return $scope.get('Regexp').$new("[^" + ($scope.get('Regexp').$escape(str_parse['$[]']("term"))) + "#\u0000\n \\\\]+|.")
          } else if ((($b = str_parse['$[]']("balance")) !== nil && (!$b.$$is_boolean || $b == true))) {
            return $scope.get('Regexp').$new("[^" + ($scope.get('Regexp').$escape(str_parse['$[]']("term"))) + ($scope.get('Regexp').$escape(str_parse['$[]']("paren"))) + "#\u0000\\\\]+|.")
            } else {
            return $scope.get('Regexp').$new("[^" + ($scope.get('Regexp').$escape(str_parse['$[]']("term"))) + "#\u0000\\\\]+|.")
          }; return nil; })();
          self.$scan(reg);
          c = self.$scanner().$matched();
        };
        ((($b = c) !== false && $b !== nil) ? $b : c = self.$scanner().$matched());
        str_buffer['$<<'](c);};
        if ((($a = self.$scanner()['$eos?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$raise("reached EOF while in string")
          } else {
          return nil
        };
      });

      Opal.defn(self, '$heredoc_identifier', function() {
        var $a, $b, self = this, escape_method = nil, heredoc = nil, end_of_line = nil;

        if ((($a = self.$scan(/(-?)(['"])?(\w+)\2?/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          escape_method = (function() {if ((($a = (self.scanner['$[]'](2)['$==']("'"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('STR_SQUOTE')
            } else {
            return $scope.get('STR_DQUOTE')
          }; return nil; })();
          heredoc = self.scanner['$[]'](3);
          (($a = [self.$new_strterm(escape_method, heredoc, heredoc)]), $b = self, $b['$strterm='].apply($b, $a), $a[$a.length-1]);
          self.$strterm()['$[]=']("type", "heredoc");
          end_of_line = self.$scan(/.*\n/);
          if ((($a = end_of_line['$!=']("\n")) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$strterm()['$[]=']("scanner", $scope.get('StringScanner').$new(end_of_line))};
          ($a = self, $a['$line=']($rb_plus($a.$line(), 1)));
          (($a = [heredoc]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tSTRING_BEG";
          } else {
          return nil
        };
      });

      Opal.defn(self, '$process_identifier', function(matched, cmd_start) {
        var $a, $b, $c, self = this, last_state = nil, result = nil, kw = nil, old_state = nil;

        last_state = self.lex_state;
        if ((($a = ($b = ($c = self['$label_state?'](), $c !== false && $c !== nil ?self.$check(/::/)['$!']() : $c), $b !== false && $b !== nil ?self.$scan(/:/) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.lex_state = "expr_beg";
          (($a = [matched]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
          return "tLABEL";};
        if (matched['$==']("defined?")) {
          if ((($a = self['$after_operator?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.lex_state = "expr_end";
            return "tIDENTIFIER";};
          self.lex_state = "expr_arg";
          return "kDEFINED";};
        if ((($a = matched['$end_with?']("?", "!")) !== nil && (!$a.$$is_boolean || $a == true))) {
          result = "tIDENTIFIER"
        } else if (self.lex_state['$==']("expr_fname")) {
          if ((($a = ($b = self.$check(/\=\>/)['$!'](), $b !== false && $b !== nil ?self.$scan(/\=/) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            result = "tIDENTIFIER";
            matched = $rb_plus(matched, self.$scanner().$matched());}
        } else if ((($a = matched['$=~']((new RegExp("" + $scope.get('REGEXP_START') + "[A-Z]")))) !== nil && (!$a.$$is_boolean || $a == true))) {
          result = "tCONSTANT"
          } else {
          result = "tIDENTIFIER"
        };
        if ((($a = ($b = self.lex_state['$!=']("expr_dot"), $b !== false && $b !== nil ?kw = $scope.get('Keywords').$keyword(matched) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          old_state = self.lex_state;
          self.lex_state = kw.$state();
          if (old_state['$==']("expr_fname")) {
            (($a = [kw.$name()]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
            return kw.$id()['$[]'](0);};
          if (self.lex_state['$==']("expr_beg")) {
            cmd_start = true};
          if (matched['$==']("do")) {
            if ((($a = self['$after_operator?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.lex_state = "expr_end";
              return "tIDENTIFIER";};
            if ((($a = self.start_of_lambda) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.start_of_lambda = false;
              self.lex_state = "expr_beg";
              return "kDO_LAMBDA";
            } else if ((($a = self['$cond?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.lex_state = "expr_beg";
              return "kDO_COND";
            } else if ((($a = ($b = self['$cmdarg?'](), $b !== false && $b !== nil ?self.lex_state['$!=']("expr_cmdarg") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.lex_state = "expr_beg";
              return "kDO_BLOCK";
            } else if (self.lex_state['$==']("expr_endarg")) {
              return "kDO_BLOCK"
              } else {
              self.lex_state = "expr_beg";
              return "kDO";
            };
          } else if ((($a = ((($b = old_state['$==']("expr_beg")) !== false && $b !== nil) ? $b : old_state['$==']("expr_value"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($a = [matched]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
            return kw.$id()['$[]'](0);
            } else {
            if ((($a = kw.$id()['$[]'](0)['$!='](kw.$id()['$[]'](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.lex_state = "expr_beg"};
            (($a = [matched]), $b = self, $b['$yylval='].apply($b, $a), $a[$a.length-1]);
            return kw.$id()['$[]'](1);
          };};
        if ((($a = ["expr_beg", "expr_dot", "expr_mid", "expr_arg", "expr_cmdarg"]['$include?'](self.lex_state)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.lex_state = (function() {if (cmd_start !== false && cmd_start !== nil) {
            return "expr_cmdarg"
            } else {
            return "expr_arg"
          }; return nil; })()
        } else if (self.lex_state['$==']("expr_fname")) {
          self.lex_state = "expr_endfn"
          } else {
          self.lex_state = "expr_end"
        };
        if ((($a = ($b = ["expr_dot", "expr_fname"]['$include?'](last_state)['$!'](), $b !== false && $b !== nil ?self['$has_local?'](matched) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.lex_state = "expr_end"};
        return (function() {if ((($a = matched['$=~']((new RegExp("" + $scope.get('REGEXP_START') + "[A-Z]")))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "tCONSTANT"
          } else {
          return "tIDENTIFIER"
        }; return nil; })();
      });

      return (Opal.defn(self, '$yylex', function() {try {

        var $a, $b, $c, $d, $e, self = this, cmd_start = nil, c = nil, token = nil, line_count = nil, result = nil, str_type = nil, paren = nil, term = nil, $case = nil, func = nil, start_word = nil, end_word = nil, matched = nil, sign = nil, utype = nil;

        self.yylval = "";
        self.space_seen = false;
        cmd_start = false;
        c = "";
        if ((($a = self.$strterm()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if (self.$strterm()['$[]']("type")['$==']("heredoc")) {
            token = self.$here_document(self.$strterm())
            } else {
            token = self.$parse_string()
          };
          if ((($a = ((($b = ((($c = token['$==']("tSTRING_END")) !== false && $c !== nil) ? $c : token['$==']("tREGEXP_END"))) !== false && $b !== nil) ? $b : token['$==']("tLABEL_END"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($a = [nil]), $b = self, $b['$strterm='].apply($b, $a), $a[$a.length-1]);
            self.lex_state = "expr_end";};
          return token;};
        while ((($b = true) !== nil && (!$b.$$is_boolean || $b == true))) {
        if ((($b = self.$skip(/\ |\t|\r/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.space_seen = true;
          continue;;
        } else if ((($b = self.$skip(/(\n|#)/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          c = self.$scanner().$matched();
          if (c['$==']("#")) {
            self.$skip(/(.*)/)
            } else {
            ($b = self, $b['$line=']($rb_plus($b.$line(), 1)))
          };
          self.$skip(/(\n+)/);
          if ((($b = self.$scanner().$matched()) !== nil && (!$b.$$is_boolean || $b == true))) {
            ($b = self, $b['$line=']($rb_plus($b.$line(), self.$scanner().$matched().$length())))};
          if ((($b = ["expr_beg", "expr_dot"]['$include?'](self.lex_state)) !== nil && (!$b.$$is_boolean || $b == true))) {
            continue;};
          if ((($b = self.$skip(/([\ \t\r\f\v]*)\./)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = self.$scanner()['$[]'](1)['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
              } else {
              self.space_seen = true
            };
            self.$pushback(1);
            if ((($b = self.$check(/\.\./)) !== nil && (!$b.$$is_boolean || $b == true))) {
              } else {
              continue;
            };};
          cmd_start = true;
          self.lex_state = "expr_beg";
          (($b = ["\\n"]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
          return "tNL";
        } else if ((($b = self.$scan(/\;/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_beg";
          return "tSEMI";
        } else if ((($b = self.$check(/\*/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/\*\*\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn("**")
          } else if ((($b = self.$scan(/\*\*/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$set_arg_state();
            return "tPOW";
          } else if ((($b = self.$scan(/\*\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn("*")
            } else {
            self.$scan(/\*/);
            if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.lex_state = "expr_arg";
              return "tSTAR2";
            } else if ((($b = ($c = self.space_seen, $c !== false && $c !== nil ?self.$check(/\S/) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.lex_state = "expr_beg";
              return "tSTAR";
            } else if ((($b = ["expr_beg", "expr_mid"]['$include?'](self.lex_state)) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.lex_state = "expr_beg";
              return "tSTAR";
              } else {
              self.lex_state = "expr_beg";
              return "tSTAR2";
            };
          }
        } else if ((($b = self.$scan(/\!/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_arg";
            if ((($b = self.$scan(/@/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return ["tBANG", "!"]};
            } else {
            self.lex_state = "expr_beg"
          };
          if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return "tNEQ"
          } else if ((($b = self.$scan(/\~/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return "tNMATCH"};
          return "tBANG";
        } else if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = (($c = self.lex_state['$==']("expr_beg")) ? self.space_seen['$!']() : self.lex_state['$==']("expr_beg"))) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = ($c = self.$scan(/begin/), $c !== false && $c !== nil ?self['$space?']() : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.$scan(/(.*)/);
              line_count = 0;
              while ((($c = true) !== nil && (!$c.$$is_boolean || $c == true))) {
              if ((($c = self.$scanner()['$eos?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
                self.$raise("embedded document meets end of file")};
              if ((($c = ($d = self.$scan(/\=end/), $d !== false && $d !== nil ?self['$space?']() : $d)) !== nil && (!$c.$$is_boolean || $c == true))) {
                self.line = $rb_plus(self.line, line_count);
                return self.$yylex();};
              if ((($c = self.$scan(/\n/)) !== nil && (!$c.$$is_boolean || $c == true))) {
                line_count = $rb_plus(line_count, 1);
                continue;;};
              self.$scan(/(.*)/);};}};
          self.$set_arg_state();
          if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return "tEQQ"};
            return "tEQ";};
          if ((($b = self.$scan(/\~/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return "tMATCH"
          } else if ((($b = self.$scan(/\>/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return "tASSOC"};
          return "tEQL";
        } else if ((($b = self.$scan(/\"/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          (($b = [self.$new_strterm($scope.get('STR_DQUOTE'), "\"", "\x00")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
          return "tSTRING_BEG";
        } else if ((($b = self.$scan(/\'/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          (($b = [self.$new_strterm($scope.get('STR_SQUOTE'), "'", "\x00")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
          return "tSTRING_BEG";
        } else if ((($b = self.$scan(/\`/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          (($b = [self.$new_strterm($scope.get('STR_XQUOTE'), "`", "\x00")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
          return "tXSTRING_BEG";
        } else if ((($b = self.$scan(/\&/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/\&/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_beg";
            if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return self.$new_op_asgn("&&")};
            return "tANDOP";
          } else if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn("&")};
          if ((($b = self['$spcarg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            result = "tAMPER"
          } else if ((($b = self['$beg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            result = "tAMPER"
            } else {
            result = "tAMPER2"
          };
          self.$set_arg_state();
          return result;
        } else if ((($b = self.$scan(/\|/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/\|/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_beg";
            if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return self.$new_op_asgn("||")};
            return "tOROP";
          } else if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn("|")};
          self.$set_arg_state();
          return "tPIPE";
        } else if ((($b = self.$scan(/\%[QqWwixrs]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          str_type = self.$scanner().$matched()['$[]'](1, 1);
          paren = term = self.$scan(/./);
          $case = term;if ("("['$===']($case)) {term = ")"}else if ("["['$===']($case)) {term = "]"}else if ("{"['$===']($case)) {term = "}"}else if ("<"['$===']($case)) {term = ">"}else {paren = "\x00"};
          $c = (function() {$case = str_type;if ("Q"['$===']($case)) {return ["tSTRING_BEG", $scope.get('STR_DQUOTE')]}else if ("q"['$===']($case)) {return ["tSTRING_BEG", $scope.get('STR_SQUOTE')]}else if ("W"['$===']($case)) {self.$skip(/\s*/);
          return ["tWORDS_BEG", $scope.get('STR_DWORD')];}else if ("w"['$===']($case) || "i"['$===']($case)) {self.$skip(/\s*/);
          return ["tAWORDS_BEG", $scope.get('STR_SWORD')];}else if ("x"['$===']($case)) {return ["tXSTRING_BEG", $scope.get('STR_XQUOTE')]}else if ("r"['$===']($case)) {return ["tREGEXP_BEG", $scope.get('STR_REGEXP')]}else if ("s"['$===']($case)) {return ["tSTRING_BEG", $scope.get('STR_SQUOTE')]}else { return nil }})(), $b = Opal.to_ary($c), token = ($b[0] == null ? nil : $b[0]), func = ($b[1] == null ? nil : $b[1]), $c;
          (($b = [self.$new_strterm2(func, term, paren)]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
          return token;
        } else if ((($b = self.$scan(/\//)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self['$beg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            (($b = [self.$new_strterm($scope.get('STR_REGEXP'), "/", "/")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
            return "tREGEXP_BEG";
          } else if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn("/")};
          if ((($b = self['$arg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = ($c = self.$check(/\s/)['$!'](), $c !== false && $c !== nil ?self.space_seen : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              (($b = [self.$new_strterm($scope.get('STR_REGEXP'), "/", "/")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
              return "tREGEXP_BEG";}};
          if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_arg"
            } else {
            self.lex_state = "expr_beg"
          };
          return "tDIVIDE";
        } else if ((($b = self.$scan(/\%/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn("%")
          } else if ((($b = self.$check(/[^\s]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = ((($c = ((($d = self.lex_state['$==']("expr_beg")) !== false && $d !== nil) ? $d : ((($e = self.lex_state['$==']("expr_arg")) ? self.space_seen : self.lex_state['$==']("expr_arg"))))) !== false && $c !== nil) ? $c : self.lex_state['$==']("expr_mid"))) !== nil && (!$b.$$is_boolean || $b == true))) {
              start_word = self.$scan(/./);
              end_word = ((($b = $hash2(["(", "[", "{", "<"], {"(": ")", "[": "]", "{": "}", "<": ">"})['$[]'](start_word)) !== false && $b !== nil) ? $b : start_word);
              (($b = [self.$new_strterm2($scope.get('STR_DQUOTE'), end_word, start_word)]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1]);
              return "tSTRING_BEG";}};
          self.$set_arg_state();
          return "tPERCENT";
        } else if ((($b = self.$scan(/\\/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/\r?\n/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.space_seen = true;
            continue;;};
          self.$raise($scope.get('SyntaxError'), "backslash must appear before newline :" + (self.file) + ":" + (self.line));
        } else if ((($b = self.$scan(/\(/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          result = self.$scanner().$matched();
          if ((($b = self['$beg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            result = "tLPAREN"
          } else if ((($b = ($c = self.space_seen, $c !== false && $c !== nil ?self['$arg?']() : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
            result = "tLPAREN_ARG"
            } else {
            result = "tLPAREN2"
          };
          self.lex_state = "expr_beg";
          self.$cond_push(0);
          self.$cmdarg_push(0);
          return result;
        } else if ((($b = self.$scan(/\)/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$cond_lexpop();
          self.$cmdarg_lexpop();
          self.lex_state = "expr_end";
          return "tRPAREN";
        } else if ((($b = self.$scan(/\[/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          result = self.$scanner().$matched();
          if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_arg";
            if ((($b = self.$scan(/\]=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return "tASET"
            } else if ((($b = self.$scan(/\]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return "tAREF"
              } else {
              self.$raise("Unexpected '[' token")
            };
          } else if ((($b = self['$beg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            result = "tLBRACK"
          } else if ((($b = ($c = self['$arg?'](), $c !== false && $c !== nil ?self.space_seen : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
            result = "tLBRACK"
            } else {
            result = "tLBRACK2"
          };
          self.lex_state = "expr_beg";
          self.$cond_push(0);
          self.$cmdarg_push(0);
          return result;
        } else if ((($b = self.$scan(/\]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$cond_lexpop();
          self.$cmdarg_lexpop();
          self.lex_state = "expr_end";
          return "tRBRACK";
        } else if ((($b = self.$scan(/\}/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$cond_lexpop();
          self.$cmdarg_lexpop();
          self.lex_state = "expr_end";
          return "tRCURLY";
        } else if ((($b = self.$scan(/\.\.\./)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_beg";
          return "tDOT3";
        } else if ((($b = self.$scan(/\.\./)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_beg";
          return "tDOT2";
        } else if ((($b = ($c = self.lex_state['$!=']("expr_fname"), $c !== false && $c !== nil ?self.$scan(/\.JS\[/) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_beg";
          self.$cond_push(0);
          self.$cmdarg_push(0);
          return "tJSLBRACK";
        } else if ((($b = ($c = self.lex_state['$!=']("expr_fname"), $c !== false && $c !== nil ?self.$scan(/\.JS\./) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_dot";
          return "tJSDOT";
        } else if ((($b = self.$scan(/\./)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if (self.lex_state['$==']("expr_fname")) {
            } else {
            self.lex_state = "expr_dot"
          };
          return "tDOT";
        } else if ((($b = self.$scan(/\:\:/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self['$beg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_beg";
            return "tCOLON3";
          } else if ((($b = self['$spcarg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_beg";
            return "tCOLON3";};
          self.lex_state = "expr_dot";
          return "tCOLON2";
        } else if ((($b = self.$scan(/\:/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = ((($c = self['$end?']()) !== false && $c !== nil) ? $c : self.$check(/\s/))) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = self.$check(/\w/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              } else {
              self.lex_state = "expr_beg";
              return "tCOLON";
            };
            self.lex_state = "expr_fname";
            return "tSYMBEG";};
          if ((($b = self.$scan(/\'/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            (($b = [self.$new_strterm($scope.get('STR_SSYM'), "'", "\x00")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1])
          } else if ((($b = self.$scan(/\"/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            (($b = [self.$new_strterm($scope.get('STR_DSYM'), "\"", "\x00")]), $c = self, $c['$strterm='].apply($c, $b), $b[$b.length-1])};
          self.lex_state = "expr_fname";
          return "tSYMBEG";
        } else if ((($b = self.$scan(/\^\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          return self.$new_op_asgn("^")
        } else if ((($b = self.$scan(/\^/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$set_arg_state();
          return "tCARET";
        } else if ((($b = self.$check(/</)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/<<\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn("<<")
          } else if ((($b = self.$scan(/<</)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.lex_state = "expr_arg";
              return "tLSHFT";
            } else if ((($b = ($c = ($d = ($e = self['$after_operator?']()['$!'](), $e !== false && $e !== nil ?self['$end?']()['$!']() : $e), $d !== false && $d !== nil ?(((($e = self['$arg?']()['$!']()) !== false && $e !== nil) ? $e : self.space_seen)) : $d), $c !== false && $c !== nil ?self.lex_state['$!=']("expr_class") : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              if ((($b = token = self.$heredoc_identifier()) !== nil && (!$b.$$is_boolean || $b == true))) {
                return token};
              self.lex_state = "expr_beg";
              return "tLSHFT";};
            self.lex_state = "expr_beg";
            return "tLSHFT";
          } else if ((($b = self.$scan(/<\=\>/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
              self.lex_state = "expr_arg"
              } else {
              if (self.lex_state['$==']("expr_class")) {
                cmd_start = true};
              self.lex_state = "expr_beg";
            };
            return "tCMP";
          } else if ((($b = self.$scan(/<\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$set_arg_state();
            return "tLEQ";
          } else if ((($b = self.$scan(/</)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$set_arg_state();
            return "tLT";}
        } else if ((($b = self.$check(/\>/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/\>\>\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn(">>")
          } else if ((($b = self.$scan(/\>\>/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$set_arg_state();
            return "tRSHFT";
          } else if ((($b = self.$scan(/\>\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$set_arg_state();
            return "tGEQ";
          } else if ((($b = self.$scan(/\>/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$set_arg_state();
            return "tGT";}
        } else if ((($b = self.$scan(/->/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_end";
          self.start_of_lambda = true;
          return "tLAMBDA";
        } else if ((($b = self.$scan(/[+-]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          matched = self.$scanner().$matched();
          $c = (function() {if (matched['$==']("+")) {
            return ["tPLUS", "tUPLUS"]
            } else {
            return ["tMINUS", "tUMINUS"]
          }; return nil; })(), $b = Opal.to_ary($c), sign = ($b[0] == null ? nil : $b[0]), utype = ($b[1] == null ? nil : $b[1]), $c;
          if ((($b = self['$beg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_mid";
            (($b = [matched]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
            if ((($b = ($c = self.$scanner().$peek(1)['$=~'](/\d/), $c !== false && $c !== nil ?Opal.ret((function() {if (utype['$==']("tUMINUS")) {
              return "-@NUM"
              } else {
              return "+@NUM"
            }; return nil; })()) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              } else {
              return utype
            };
          } else if ((($b = self['$after_operator?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_arg";
            if ((($b = self.$scan(/@/)) !== nil && (!$b.$$is_boolean || $b == true))) {
              (($b = [$rb_plus(matched, "@")]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
              return "tIDENTIFIER";};
            (($b = [matched]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
            return sign;};
          if ((($b = self.$scan(/\=/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            return self.$new_op_asgn(matched)};
          if ((($b = self['$spcarg?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_mid";
            (($b = [matched]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
            if ((($b = ($c = self.$scanner().$peek(1)['$=~'](/\d/), $c !== false && $c !== nil ?Opal.ret((function() {if (utype['$==']("tUMINUS")) {
              return "-@NUM"
              } else {
              return "+@NUM"
            }; return nil; })()) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              } else {
              return utype
            };};
          self.lex_state = "expr_beg";
          (($b = [matched]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
          return sign;
        } else if ((($b = self.$scan(/\?/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self['$end?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_beg";
            return "tEH";};
          if ((($b = self.$check(/\ |\t|\r|\s/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_beg";
            return "tEH";
          } else if ((($b = self.$scan(/\\/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_end";
            (($b = [self.$read_escape()]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
            return "tSTRING";};
          self.lex_state = "expr_end";
          (($b = [self.$scan(/./)]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
          return "tSTRING";
        } else if ((($b = self.$scan(/\~/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$set_arg_state();
          return "tTILDE";
        } else if ((($b = self.$check(/\$/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.$scan(/\$([1-9]\d*)/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_end";
            (($b = [self.$scanner().$matched().$sub("$", "")]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
            return "tNTH_REF";
          } else if ((($b = self.$scan(/(\$_)(\w+)/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_end";
            return "tGVAR";
          } else if ((($b = self.$scan(/\$[\+\'\`\&!@\"~*$?\/\\:;=.,<>_]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_end";
            return "tGVAR";
          } else if ((($b = self.$scan(/\$\w+/)) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.lex_state = "expr_end";
            return "tGVAR";
            } else {
            self.$raise("Bad gvar name: " + (self.$scanner().$peek(5).$inspect()))
          }
        } else if ((($b = self.$scan(/\$\w+/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_end";
          return "tGVAR";
        } else if ((($b = self.$scan(/\@\@\w*/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_end";
          return "tCVAR";
        } else if ((($b = self.$scan(/\@\w*/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_end";
          return "tIVAR";
        } else if ((($b = self.$scan(/\,/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.lex_state = "expr_beg";
          return "tCOMMA";
        } else if ((($b = self.$scan(/\{/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = self.start_of_lambda) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.start_of_lambda = false;
            self.lex_state = "expr_beg";
            self.$cond_push(0);
            self.$cmdarg_push(0);
            return "tLAMBEG";
          } else if ((($b = ((($c = self['$arg?']()) !== false && $c !== nil) ? $c : self.lex_state['$==']("expr_end"))) !== nil && (!$b.$$is_boolean || $b == true))) {
            result = "tLCURLY"
          } else if (self.lex_state['$==']("expr_endarg")) {
            result = "LBRACE_ARG"
            } else {
            result = "tLBRACE"
          };
          self.lex_state = "expr_beg";
          self.$cond_push(0);
          self.$cmdarg_push(0);
          return result;
        } else if ((($b = ($c = self.$scanner()['$bol?'](), $c !== false && $c !== nil ?self.$skip(/\__END__(\n|$)/) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
          while ((($c = true) !== nil && (!$c.$$is_boolean || $c == true))) {
          if ((($c = self.$scanner()['$eos?']()) !== nil && (!$c.$$is_boolean || $c == true))) {
            self.eof_content = self.$yylval();
            return false;};
          self.$scan(/(.*)/);
          self.$scan(/\n/);}
        } else if ((($b = self.$check(/[0-9]/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          return self.$process_numeric()
        } else if ((($b = self.$scan(/(\w)+(\?|(\!(?!=)))?/)) !== nil && (!$b.$$is_boolean || $b == true))) {
          return self.$process_identifier(self.$scanner().$matched(), cmd_start)};
        if ((($b = self.$scanner()['$eos?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
          if (self.scanner_stack.$size()['$=='](1)) {
            (($b = [false]), $c = self, $c['$yylval='].apply($c, $b), $b[$b.length-1]);
            return false;
            } else {
            self.scanner_stack.$pop();
            self.scanner = self.scanner_stack.$last();
            return self.$yylex();
          }};
        self.$raise("Unexpected content in parsing stream `" + (self.$scanner().$peek(5)) + "` :" + (self.file) + ":" + (self.line));};
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }), nil) && 'yylex';
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["racc/parser"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$class', '$_racc_do_parse_rb', '$_racc_setup', '$[]', '$!=', '$next_token', '$==', '$racc_read_token', '$+', '$<', '$nil?', '$puts', '$>', '$-', '$push', '$<<', '$racc_shift', '$-@', '$*', '$last', '$pop', '$__send__', '$raise', '$racc_reduce', '$>=', '$inspect', '$racc_next_state', '$racc_token2str', '$racc_print_stacks', '$empty?', '$map', '$racc_print_states', '$each_index', '$each']);
  return (function($base) {
    var $Racc, self = $Racc = $module($base, 'Racc');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Parser(){};
      var self = $Parser = $klass($base, $super, 'Parser', $Parser);

      var def = self.$$proto, $scope = self.$$scope;

      def.yydebug = nil;
      Opal.defn(self, '$_racc_setup', function() {
        var self = this;

        return ((self.$class()).$$scope.get('Racc_arg'));
      });

      Opal.defn(self, '$do_parse', function() {
        var self = this;

        return self.$_racc_do_parse_rb(self.$_racc_setup(), false);
      });

      Opal.defn(self, '$_racc_do_parse_rb', function(arg, in_debug) {
        var $a, $b, $c, $d, self = this, action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, goto_table = nil, goto_check = nil, goto_default = nil, goto_pointer = nil, nt_base = nil, reduce_table = nil, token_table = nil, shift_n = nil, reduce_n = nil, use_result = nil, racc_state = nil, racc_tstack = nil, racc_vstack = nil, racc_t = nil, racc_tok = nil, racc_val = nil, racc_read_next = nil, racc_user_yyerror = nil, racc_error_status = nil, token = nil, act = nil, i = nil, nerr = nil, custate = nil, curstate = nil, reduce_i = nil, reduce_len = nil, reduce_to = nil, method_id = nil, tmp_t = nil, tmp_v = nil, reduce_call_result = nil, k1 = nil;

        action_table = arg['$[]'](0);
        action_check = arg['$[]'](1);
        action_default = arg['$[]'](2);
        action_pointer = arg['$[]'](3);
        goto_table = arg['$[]'](4);
        goto_check = arg['$[]'](5);
        goto_default = arg['$[]'](6);
        goto_pointer = arg['$[]'](7);
        nt_base = arg['$[]'](8);
        reduce_table = arg['$[]'](9);
        token_table = arg['$[]'](10);
        shift_n = arg['$[]'](11);
        reduce_n = arg['$[]'](12);
        use_result = arg['$[]'](13);
        racc_state = [0];
        racc_tstack = [];
        racc_vstack = [];
        racc_t = nil;
        racc_tok = nil;
        racc_val = nil;
        racc_read_next = true;
        racc_user_yyerror = false;
        racc_error_status = 0;
        token = nil;
        act = nil;
        i = nil;
        nerr = nil;
        custate = nil;
        while ((($b = true) !== nil && (!$b.$$is_boolean || $b == true))) {
        i = action_pointer['$[]'](racc_state['$[]'](-1));
        if (i !== false && i !== nil) {
          if (racc_read_next !== false && racc_read_next !== nil) {
            if ((($b = racc_t['$!='](0)) !== nil && (!$b.$$is_boolean || $b == true))) {
              token = self.$next_token();
              racc_tok = token['$[]'](0);
              racc_val = token['$[]'](1);
              if (racc_tok['$=='](false)) {
                racc_t = 0
                } else {
                racc_t = token_table['$[]'](racc_tok);
                if (racc_t !== false && racc_t !== nil) {
                  } else {
                  racc_t = 1
                };
              };
              if ((($b = self.yydebug) !== nil && (!$b.$$is_boolean || $b == true))) {
                self.$racc_read_token(racc_t, racc_tok, racc_val)};
              racc_read_next = false;}};
          i = $rb_plus(i, racc_t);
          if ((($b = ((($c = ((($d = ($rb_lt(i, 0))) !== false && $d !== nil) ? $d : ((act = action_table['$[]'](i)))['$nil?']())) !== false && $c !== nil) ? $c : (action_check['$[]'](i)['$!='](racc_state['$[]'](-1))))) !== nil && (!$b.$$is_boolean || $b == true))) {
            act = action_default['$[]'](racc_state['$[]'](-1))};
          } else {
          act = action_default['$[]'](racc_state['$[]'](-1))
        };
        if ((($b = self.yydebug) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$puts("(act: " + (act) + ", shift_n: " + (shift_n) + ", reduce_n: " + (reduce_n) + ")")};
        if ((($b = ($c = $rb_gt(act, 0), $c !== false && $c !== nil ?$rb_lt(act, shift_n) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = $rb_gt(racc_error_status, 0)) !== nil && (!$b.$$is_boolean || $b == true))) {
            if ((($b = racc_t['$!='](1)) !== nil && (!$b.$$is_boolean || $b == true))) {
              racc_error_status = $rb_minus(racc_error_status, 1)}};
          racc_vstack.$push(racc_val);
          curstate = act;
          racc_state['$<<'](act);
          racc_read_next = true;
          if ((($b = self.yydebug) !== nil && (!$b.$$is_boolean || $b == true))) {
            racc_tstack.$push(racc_t);
            self.$racc_shift(racc_t, racc_tstack, racc_vstack);};
        } else if ((($b = ($c = $rb_lt(act, 0), $c !== false && $c !== nil ?$rb_gt(act, reduce_n['$-@']()) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
          reduce_i = $rb_times(act, -3);
          reduce_len = reduce_table['$[]'](reduce_i);
          reduce_to = reduce_table['$[]']($rb_plus(reduce_i, 1));
          method_id = reduce_table['$[]']($rb_plus(reduce_i, 2));
          tmp_t = racc_tstack.$last(reduce_len);
          tmp_v = racc_vstack.$last(reduce_len);
          racc_state.$pop(reduce_len);
          racc_vstack.$pop(reduce_len);
          racc_tstack.$pop(reduce_len);
          if (use_result !== false && use_result !== nil) {
            reduce_call_result = self.$__send__(method_id, tmp_v, nil, tmp_v['$[]'](0));
            racc_vstack.$push(reduce_call_result);
            } else {
            self.$raise("not using result??")
          };
          racc_tstack.$push(reduce_to);
          if ((($b = self.yydebug) !== nil && (!$b.$$is_boolean || $b == true))) {
            self.$racc_reduce(tmp_t, reduce_to, racc_tstack, racc_vstack)};
          k1 = $rb_minus(reduce_to, nt_base);
          if ((($b = ((reduce_i = goto_pointer['$[]'](k1)))['$!='](nil)) !== nil && (!$b.$$is_boolean || $b == true))) {
            reduce_i = $rb_plus(reduce_i, racc_state['$[]'](-1));
            if ((($b = ($c = ($d = ($rb_ge(reduce_i, 0)), $d !== false && $d !== nil ?(((curstate = goto_table['$[]'](reduce_i)))['$!='](nil)) : $d), $c !== false && $c !== nil ?(goto_check['$[]'](reduce_i)['$=='](k1)) : $c)) !== nil && (!$b.$$is_boolean || $b == true))) {
              racc_state.$push(curstate)
              } else {
              racc_state.$push(goto_default['$[]'](k1))
            };
            } else {
            racc_state.$push(goto_default['$[]'](k1))
          };
        } else if (act['$=='](shift_n)) {
          return racc_vstack['$[]'](0)
        } else if (act['$=='](reduce_n['$-@']())) {
          self.$raise($scope.get('SyntaxError'), "unexpected '" + (racc_tok.$inspect()) + "'")
          } else {
          self.$raise("Rac: unknown action: " + (act))
        };
        if ((($b = self.yydebug) !== nil && (!$b.$$is_boolean || $b == true))) {
          self.$racc_next_state(racc_state['$[]'](-1), racc_state)};};
      });

      Opal.defn(self, '$racc_read_token', function(t, tok, val) {
        var self = this;

        self.$puts("read    " + (tok) + "(" + (self.$racc_token2str(t)) + ") " + (val.$inspect()));
        return self.$puts("\n");
      });

      Opal.defn(self, '$racc_shift', function(tok, tstack, vstack) {
        var self = this;

        self.$puts("shift  " + (self.$racc_token2str(tok)));
        self.$racc_print_stacks(tstack, vstack);
        return self.$puts("\n");
      });

      Opal.defn(self, '$racc_reduce', function(toks, sim, tstack, vstack) {
        var $a, $b, TMP_1, self = this;

        self.$puts("reduce " + ((function() {if ((($a = toks['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "<none>"
          } else {
          return ($a = ($b = toks).$map, $a.$$p = (TMP_1 = function(t){var self = TMP_1.$$s || this;
if (t == null) t = nil;
          return self.$racc_token2str(t)}, TMP_1.$$s = self, TMP_1), $a).call($b)
        }; return nil; })()));
        self.$puts("  --> " + (self.$racc_token2str(sim)));
        return self.$racc_print_stacks(tstack, vstack);
      });

      Opal.defn(self, '$racc_next_state', function(curstate, state) {
        var self = this;

        self.$puts("goto  " + (curstate));
        self.$racc_print_states(state);
        return self.$puts("\n");
      });

      Opal.defn(self, '$racc_token2str', function(tok) {
        var self = this;

        return ((self.$class()).$$scope.get('Racc_token_to_s_table'))['$[]'](tok);
      });

      Opal.defn(self, '$racc_print_stacks', function(t, v) {
        var $a, $b, TMP_2, self = this;

        self.$puts("  [");
        ($a = ($b = t).$each_index, $a.$$p = (TMP_2 = function(i){var self = TMP_2.$$s || this;
if (i == null) i = nil;
        return self.$puts("    (" + (self.$racc_token2str(t['$[]'](i))) + " " + (v['$[]'](i).$inspect()) + ")")}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return self.$puts("  ]");
      });

      return (Opal.defn(self, '$racc_print_states', function(s) {
        var $a, $b, TMP_3, self = this;

        self.$puts("  [");
        ($a = ($b = s).$each, $a.$$p = (TMP_3 = function(st){var self = TMP_3.$$s || this;
if (st == null) st = nil;
        return self.$puts("   " + (st))}, TMP_3.$$s = self, TMP_3), $a).call($b);
        return self.$puts("  ]");
      }), nil) && 'racc_print_states';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/parser/grammar"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$new', '$each', '$empty?', '$[]=', '$to_i', '$+', '$split', '$new_compstmt', '$[]', '$new_block', '$<<', '$new_body', '$lex_state=', '$lexer', '$new_alias', '$s', '$to_sym', '$value', '$new_if', '$new_while', '$new_until', '$new_rescue_mod', '$new_assign', '$new_op_asgn', '$op_to_setter', '$new_unary_call', '$new_return', '$new_break', '$new_next', '$new_call', '$new_js_call', '$new_super', '$new_yield', '$concat', '$children', '$new_assignable', '$new_js_attrasgn', '$new_attrasgn', '$new_colon2', '$new_colon3', '$new_const', '$new_sym', '$new_op_asgn1', '$raise', '$new_irange', '$new_erange', '$new_binary_call', '$new_int', '$new_float', '$include?', '$type', '$==', '$-@', '$to_f', '$new_and', '$new_or', '$cond_push', '$cond_pop', '$new_hash', '$add_block_pass', '$cmdarg_push', '$cmdarg_pop', '$new_block_pass', '$new_splat', '$line', '$new_paren', '$new_array', '$new_nil', '$new_class', '$new_sclass', '$new_module', '$push_scope', '$new_def', '$pop_scope', '$new_iter', '$new_ident', '$new_block_args', '$push', '$intern', '$nil?', '$new_str', '$str_append', '$new_xstr', '$new_regexp', '$new_str_content', '$strterm', '$strterm=', '$new_evstr', '$cond_lexpop', '$cmdarg_lexpop', '$new_gvar', '$new_ivar', '$new_cvar', '$new_dsym', '$negate_num', '$new_self', '$new_true', '$new_false', '$new___FILE__', '$new___LINE__', '$new_var_ref', '$new_kwrestarg', '$new_kwoptarg', '$new_kwarg', '$new_args_tail', '$new_args', '$add_local', '$scope', '$source']);
  self.$require("racc/parser.rb");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Parser(){};
      var self = $Parser = $klass($base, $super, 'Parser', $Parser);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_3, $d, TMP_5, $e, TMP_7, clist = nil, racc_action_table = nil, arr = nil, idx = nil, racc_action_check = nil, racc_action_pointer = nil, racc_action_default = nil, racc_goto_table = nil, racc_goto_check = nil, racc_goto_pointer = nil, racc_goto_default = nil, racc_reduce_table = nil, racc_reduce_n = nil, racc_shift_n = nil, racc_token_table = nil, racc_nt_base = nil, racc_use_result_var = nil;

      clist = ["63,64,65,-95,51,-95,274,732,57,58,205,206,578,61,274,59,60,62,258,259", "66,67,795,622,-100,205,206,257,292,296,90,89,91,92,73,610,219,794,884", "-68,555,-85,74,293,656,815,94,93,84,50,86,85,87,-101,88,95,96,578,81", "82,101,205,206,-91,-98,100,600,205,206,-99,-96,101,-98,605,-93,-80,100", "655,269,817,606,578,269,357,621,578,30,-96,-95,52,273,54,578,32,612", "611,-93,101,273,584,-101,585,100,776,101,-86,731,-85,-100,100,79,73", "75,76,77,78,-95,-96,-95,74,80,-95,699,101,-98,577,-91,56,100,-91,53", "63,64,65,-540,51,297,83,-450,57,58,-97,554,-85,61,-450,59,60,62,258", "259,66,67,-85,309,-92,205,206,257,292,296,90,89,91,92,-91,-89,219,101", "599,577,-90,-87,100,293,-91,-85,94,93,84,50,86,85,362,-97,88,95,96,101", "81,82,722,101,100,577,908,101,100,577,656,820,100,585,101,227,577,656", "-93,100,-93,652,-101,-93,-101,363,782,-101,214,-539,-100,52,-100,54", "-99,-100,839,820,656,-96,732,-96,-90,655,-96,783,-98,227,-98,-88,655", "-98,79,73,75,76,77,78,732,309,-539,74,80,-97,-87,-97,-86,-89,-97,56", "-92,655,53,63,64,65,-95,51,297,83,547,57,58,549,205,206,61,-86,59,60", "62,258,259,66,67,-94,-462,-88,820,455,257,292,296,90,89,91,92,-540,-90", "219,274,-540,712,534,-539,-88,41,883,826,94,93,84,50,86,85,87,827,88", "95,96,-87,81,82,-89,38,39,-92,101,610,731,547,615,100,549,-90,-99,-93", "-99,760,-101,-99,-88,561,-86,-90,101,210,731,757,214,100,-88,52,-100", "54,564,-87,-94,-453,-89,40,309,-92,-460,269,-453,-87,269,218,-89,-460", "830,-92,79,73,75,76,77,78,-86,345,344,74,80,273,-459,923,612,611,-86", "56,760,-459,53,63,64,65,-458,51,37,83,757,57,58,-458,610,831,61,610", "59,60,62,258,259,66,67,547,758,760,546,564,257,292,296,90,89,91,92,757", "610,219,342,341,345,344,610,534,41,302,303,94,93,84,50,86,85,87,-455", "88,95,96,610,81,82,-455,38,39,413,529,530,345,344,415,414,612,611,608", "612,611,613,758,265,266,205,206,-456,-91,210,-462,267,214,664,-456,52", "547,54,-100,549,612,611,608,40,203,450,612,611,617,758,101,218,451,345", "344,100,79,73,75,76,77,78,612,611,623,74,80,834,-457,923,-85,634,633", "56,760,-457,53,63,64,65,-93,51,37,83,757,57,58,345,344,820,61,843,59", "60,62,258,259,66,67,453,204,452,839,820,257,292,296,90,89,91,92,-89", "-87,219,342,341,345,344,401,402,41,-98,-96,94,93,84,50,86,85,87,844", "88,95,96,227,81,82,531,38,39,-92,846,227,526,537,707,526,523,706,705", "-101,538,535,758,524,566,847,337,335,334,210,336,101,214,536,224,52", "100,54,226,225,222,223,224,40,-290,-290,226,225,222,223,101,218,-290", "227,699,100,79,73,75,76,77,78,-539,101,849,74,80,453,100,452,522,416", "525,56,227,540,53,63,64,65,227,51,37,83,224,57,58,309,226,225,61,857", "59,60,62,258,259,66,67,-290,403,-290,859,862,257,28,27,90,89,91,92,224", "863,219,865,226,225,867,628,869,41,688,871,94,93,84,50,86,85,87,262", "88,95,96,-269,81,82,686,38,39,227,231,236,237,238,233,235,243,244,239", "240,392,389,220,221,-80,685,241,242,683,210,550,675,214,674,309,52,551", "54,886,256,224,887,230,40,226,225,222,223,234,232,228,218,229,888,714", "889,79,260,75,76,77,78,891,892,699,74,80,492,245,714,-236,894,558,56", "-267,898,53,63,64,65,561,51,37,83,227,57,58,903,309,905,61,301,59,60", "62,258,259,66,67,342,341,345,344,227,257,28,27,90,89,91,92,227,227,219", "342,341,345,344,628,911,41,913,914,94,93,84,50,86,85,87,262,88,95,96", "309,81,82,562,38,39,227,231,236,237,238,233,235,243,244,239,240,564", "573,220,221,574,927,241,242,-270,210,300,405,214,269,246,52,930,54,632", "256,224,973,230,40,226,225,222,223,234,232,228,218,229,-540,564,867", "79,260,75,76,77,78,526,955,940,74,80,941,245,631,956,-267,198,56,946", "862,53,-259,-259,-259,948,-259,37,83,867,-259,-259,867,869,630,-259", "590,-259,-259,-259,-259,-259,-259,-259,103,104,105,106,107,-259,-259", "-259,-259,-259,-259,-259,197,566,-259,337,335,334,954,336,589,-259,196", "975,-259,-259,-259,-259,-259,-259,-259,-259,-259,-259,-259,627,-259", "-259,957,-259,-259,227,231,236,237,238,233,235,243,244,239,240,976,195", "220,221,108,963,241,242,591,-259,705,624,-259,269,620,-259,97,-259,616", "-259,224,-259,230,-259,226,225,222,223,234,232,228,-259,229,592,499", "499,-259,-259,-259,-259,-259,-259,499,499,-268,-259,-259,492,245,-67", "-236,797,798,-259,778,516,-259,63,64,65,8,51,-259,-259,490,57,58,490", "492,488,61,517,59,60,62,23,24,66,67,103,104,105,106,107,22,28,27,90", "89,91,92,873,874,17,215,875,95,96,807,7,41,6,9,94,93,84,50,86,85,87", "457,88,95,96,456,81,82,518,38,39,227,231,236,237,238,233,235,243,244", "239,240,809,810,220,221,527,454,241,242,735,36,585,699,30,814,727,52", "278,54,269,32,224,724,230,40,226,225,222,223,234,232,228,18,229,269", ",,79,73,75,76,77,78,203,201,,74,80,,245,799,202,,,56,,,53,63,64,65,", "51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,103,104,105,106,107,257", "28,27,90,89,91,92,,,219,,,,199,,200,41,,,94,93,84,50,86,85,87,262,88", "95,96,,81,82,,38,39,227,231,236,237,238,233,235,243,244,239,240,,,220", "221,,,241,242,,210,,,214,,,52,,54,,256,224,,230,40,226,225,222,223,234", "232,228,218,229,,,,79,260,75,76,77,78,526,596,,74,80,,245,,829,,,56", ",,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28", "27,90,89,91,92,,,17,,,,595,,525,41,,,94,93,84,50,86,85,87,,88,95,96", ",81,82,,38,39,227,231,236,237,238,233,235,243,244,239,240,,,220,221", ",,241,242,,210,,,214,,,52,,54,,,224,,230,40,226,225,222,223,234,232", "228,18,229,,,,79,73,75,76,77,78,-335,-335,,74,80,,245,,-335,,,56,,,53", "63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27", "90,89,91,92,,,17,,,,-335,,-335,41,,,94,93,84,50,86,85,87,,88,95,96,", "81,82,,38,39,227,231,236,237,238,233,235,243,244,239,240,,,220,221,", ",241,242,,210,,,214,,,52,,54,,,224,,230,40,226,225,222,223,234,232,228", "18,229,,,,79,73,75,76,77,78,526,587,,74,80,,245,,588,,,56,,,53,-542", "-542,-542,,-542,37,83,,-542,-542,,,,-542,,-542,-542,-542,-542,-542,-542", "-542,,,,,,-542,-542,-542,-542,-542,-542,-542,,,-542,,,,586,,589,-542", ",,-542,-542,-542,-542,-542,-542,-542,-542,-542,-542,-542,,-542,-542", ",-542,-542,227,231,236,237,238,233,235,243,244,239,240,,,220,221,,,241", "242,,-542,,,-542,-542,,-542,,-542,,-542,224,-542,230,-542,226,225,222", "223,234,232,228,-542,229,,,,-542,-542,-542,-542,-542,-542,526,596,,-542", "-542,,245,,594,,,-542,,,-542,-541,-541,-541,,-541,-542,-542,,-541,-541", ",,,-541,,-541,-541,-541,-541,-541,-541,-541,,,,,,-541,-541,-541,-541", "-541,-541,-541,,,-541,,,,595,,525,-541,,,-541,-541,-541,-541,-541,-541", "-541,-541,-541,-541,-541,,-541,-541,,-541,-541,227,231,236,237,238,233", "235,243,244,239,240,,,220,221,,,241,242,,-541,,,-541,-541,,-541,,-541", ",-541,224,-541,230,-541,226,225,222,223,234,232,228,-541,229,,,,-541", "-541,-541,-541,-541,-541,-288,-288,,-541,-541,,245,,-288,,,-541,,,-541", "-259,-259,-259,,-259,-541,-541,,-259,-259,,,,-259,,-259,-259,-259,-259", "-259,-259,-259,,,,,,-259,-259,-259,-259,-259,-259,-259,,,-259,,,,-288", ",-288,-259,,,-259,-259,-259,-259,-259,-259,-259,-259,-259,-259,-259", ",-259,-259,,-259,-259,227,231,236,237,238,233,235,243,244,239,240,,", "220,221,,,241,242,,-259,,,-259,269,,-259,,-259,,-259,224,-259,230,-259", "226,225,222,223,234,232,228,-259,229,,,,-259,-259,-259,-259,-259,-259", "-287,-287,,-259,-259,,245,,-287,,,-259,,-540,-259,63,64,65,,51,-259", "-259,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91", "92,,,219,,,,-287,,-287,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38", "39,227,231,236,237,238,233,235,243,244,239,240,,,220,221,,,241,242,", "210,,,214,,,52,,54,,,224,,230,40,226,225,222,223,234,232,228,218,229", ",,,79,73,75,76,77,78,,,,74,80,,245,,,,,56,,,53,63,64,65,8,51,37,83,", "57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,", ",,7,41,,9,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,227,231,236,237", "238,233,235,243,244,239,240,,,220,221,,,241,242,,36,,,30,,,52,,54,,32", "224,,230,40,226,225,222,223,234,232,228,18,229,,,,79,73,75,76,77,78", ",,,74,80,,245,,,,,56,,,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62", "23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50", "86,85,87,,88,95,96,,81,82,,38,39,227,231,236,237,238,233,235,243,244", "239,240,,,220,221,,,241,242,,36,,,30,,,52,,54,,32,224,,230,40,226,225", "222,223,234,232,228,18,229,,,,79,73,75,76,77,78,,,,74,80,,245,,,,,56", ",,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22", "28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,", "81,82,,38,39,227,231,236,237,238,233,235,243,244,239,240,,,220,221,", ",241,242,,36,,,30,,,52,,54,,32,224,,230,40,226,225,222,223,234,232,228", "18,229,,,,79,73,75,76,77,78,,,,74,80,,245,,,,,56,,,53,63,64,65,8,51", "37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,", ",17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,227,231", "236,237,238,233,235,243,244,239,240,,,220,221,,,241,242,,36,,,30,,,52", ",54,,32,224,,230,40,226,225,222,223,234,232,228,18,229,,,,79,73,75,76", "77,78,,,,74,80,,245,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59", "60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94", "93,84,50,86,85,87,,88,95,96,,81,82,,38,39,227,231,236,237,238,233,235", "243,244,239,240,,,220,221,,,241,242,,210,,,214,,,52,,54,,661,224,254", "230,40,226,225,222,223,234,232,228,218,229,,,,79,73,75,76,77,78,,,,74", "80,,245,,,,,56,,,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62,23,24", "66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50,86,85", "87,,88,95,96,,81,82,,38,39,227,231,236,237,238,233,235,243,244,239,240", ",,220,221,,,241,242,,36,,,30,,,52,,54,,32,224,,230,40,226,225,222,223", "234,232,228,18,229,,,,79,73,75,76,77,78,,,,74,80,,245,,,,,56,,,53,63", "64,65,8,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90", "89,91,92,,,17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,,81,82,,38", "39,227,231,236,237,238,233,235,243,244,239,240,,,220,221,,,241,242,", "36,,,30,,,52,,54,,32,224,,230,40,226,225,222,223,234,232,228,18,229", ",,,79,73,75,76,77,78,,,,74,80,,245,,,,,56,,,53,63,64,65,,51,37,83,,57", "58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219", ",,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,566,,337,335", "334,,336,,,,,,,,,328,,337,335,334,210,336,,214,,,52,,54,,661,,,,40,", ",566,569,337,335,334,218,336,,572,,79,73,75,76,77,78,339,,,74,80,,,342", "341,345,344,56,,,53,63,64,65,800,51,37,83,569,57,58,-537,,,61,572,59", "60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,566,219,337,335,334", ",336,,293,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,-453,-453,,227,,", ",,-453,,,,569,-537,,,,,,836,241,242,935,,,214,,,52,,54,,,-537,224,,230", ",226,225,222,223,,,228,,229,,,79,73,75,76,77,78,-453,,-453,74,80,,,", ",,,56,,,53,63,64,65,,51,297,83,,57,58,,,,61,,59,60,62,23,24,66,67,,", ",,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85,87,,88,95", "96,227,81,82,,38,39,,,,,,,,,,,,241,242,,,328,,337,335,334,210,336,,214", "215,224,52,230,54,226,225,222,223,,40,228,,229,,,,,18,,,,,79,73,75,76", "77,78,339,323,,74,80,,,342,341,345,344,56,,,53,63,64,65,,51,37,83,,57", "58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,219,,,,,", ",41,,,94,93,84,50,86,85,87,,88,95,96,227,81,82,,38,39,,,,,,,,,,,,241", "242,,,328,,337,335,334,210,336,,214,,224,52,230,54,226,225,222,223,", "40,228,,229,,,,,218,,,,,79,73,75,76,77,78,339,,557,74,80,,,342,341,345", "344,56,,,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,", ",,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,328,,337,335,334,36,336,,30,,,52", ",54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,339,,,74,80,,,342,341", "345,344,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66", "67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87", "262,88,95,96,,81,82,,38,39,227,-560,-560,-560,-560,233,235,,,-560,-560", ",,,,,,241,242,,210,,,214,,,52,,54,,,224,254,230,40,226,225,222,223,234", "232,228,218,229,,,,79,260,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65", ",51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89", "91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,262,88,95,96,,81,82,,38", "39,227,231,236,237,238,233,235,,,239,240,,,,,,,241,242,,210,,,214,,", "52,,54,,256,224,254,230,40,226,225,222,223,234,232,228,218,229,,,,79", "260,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,", "61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41", ",,94,93,84,50,86,85,87,262,88,95,96,,81,82,,38,39,227,231,236,237,238", "233,235,243,,239,240,,,,,,,241,242,,210,,,214,,,52,,54,,256,224,254", "230,40,226,225,222,223,234,232,228,218,229,,,,79,260,75,76,77,78,,,", "74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259", "66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85", "87,262,88,95,96,,81,82,,38,39,227,-560,-560,-560,-560,233,235,,,-560", "-560,,,,,,,241,242,,210,,,214,,,52,,54,,256,224,254,230,40,226,225,222", "223,234,232,228,218,229,,,,79,260,75,76,77,78,,,,74,80,,,,,,,56,,,53", "63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292", "296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81", "82,,38,39,227,231,236,237,238,233,235,243,244,239,240,,,-560,-560,,", "241,242,,210,,,214,,,52,,54,,,224,,230,40,226,225,222,223,234,232,228", "218,229,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37", "83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92", ",,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,227,231", "236,237,238,233,235,243,244,239,240,,,-560,-560,,,241,242,,210,,,214", ",,52,,54,,,224,,230,40,226,225,222,223,234,232,228,218,229,,,,79,73", "75,76,77,78,,,,74,80,,,,,,,56,,,53,-259,-259,-259,,-259,37,83,,-259", "-259,,,,-259,,-259,-259,-259,-259,-259,-259,-259,,,,,,-259,-259,-259", "-259,-259,-259,-259,,,-259,,,,,,,-259,,,-259,-259,-259,-259,-259,-259", "-259,-259,-259,-259,-259,,-259,-259,,-259,-259,227,-560,-560,-560,-560", "233,235,,,-560,-560,,,,,,,241,242,,-259,,,-259,269,,-259,,-259,,-259", "224,-259,230,-259,226,225,222,223,234,232,228,-259,229,,,,-259,-259", "-259,-259,-259,-259,,,,-259,-259,,,,,,,-259,,,-259,63,64,65,8,51,-259", "-259,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,", "17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,227,-560", "-560,-560,-560,233,235,,,-560,-560,,,,,,,241,242,,36,,,282,,,52,,54", ",32,224,,230,40,226,225,222,223,234,232,228,18,229,,,,79,73,75,76,77", "78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62", "258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,293,,,94,93,84", "50,86,85,87,,88,95,96,,81,82,,770,,337,335,334,760,336,,,,,,,,,757,", ",,,,,290,,,287,227,,52,,54,,286,,,,,,339,755,,,,241,242,342,341,345", "344,79,73,75,76,77,78,,,224,74,80,,226,225,222,223,,56,,,53,63,64,65", ",51,297,83,,57,58,,,,61,758,59,60,62,258,259,66,67,,,,,,257,292,296", "90,89,91,92,,,219,,,,,,,293,,,94,93,84,50,86,85,87,,88,95,96,227,81", "82,,770,,337,335,334,760,336,,,,,,,241,242,757,,,,,,,290,,,214,,224", "52,230,54,226,225,222,223,,,228,339,229,,,,,,342,341,345,344,79,73,75", "76,77,78,,,,74,80,,,,299,,,56,,,53,63,64,65,,51,297,83,,57,58,,,,61", "758,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,", "41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,227,-560,-560,-560", "-560,233,235,,,-560,-560,,,,,,,241,242,,210,,,214,,,52,,54,,,224,,230", "40,226,225,222,223,234,232,228,218,229,,,,79,73,75,76,77,78,,,,74,80", ",,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67", ",,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,", "88,95,96,,81,82,,38,39,227,-560,-560,-560,-560,233,235,,,-560,-560,", ",,,,,241,242,,210,,,214,,,52,,54,,,224,,230,40,226,225,222,223,234,232", "228,218,229,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51", "37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,", ",17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,227,,", ",,,,,,,,,,,,,,241,242,,36,,,30,,,52,,54,,32,224,,230,40,226,225,222", "223,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51", "37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,", ",17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,227,,", ",,,,,,,,,,,,,,241,242,,36,,,30,,,52,,54,,32,224,,230,40,226,225,222", "223,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,", ",,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59", "60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94", "93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,", "214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,", ",56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,", ",,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,", ",,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,", ",17,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,", ",,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77", "78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62", "23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50", "86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,54", ",32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63", "64,65,,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90", "89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39", ",,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,18,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59", "60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93", "84,50,86,85,87,262,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,", "214,,,52,,54,,256,,,,40,,,,,,,,218,,,,,79,260,75,76,77,78,,,,74,80,", ",,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67", ",,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,262", "88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40", ",,,,,,,218,,,,,79,260,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,", ",,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,256,,,,40,,,,,,,,218,,,,,79,73", "75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,", "59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,", ",94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210", ",,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,", ",,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,", ",,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96", ",81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,", "18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,", "57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,", ",,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,", ",,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74", "80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,23,24,66", "67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,", ",,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,101,,,,,100,56,,,53,63,64,65", ",51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91", "92,,,17,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,", ",,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76", "77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60", "62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,293,,,94,93", "84,50,86,85,362,,88,95,96,,81,82,,770,,337,335,334,760,336,,,,,,,,,757", ",,,368,,,363,,,214,,,52,,54,,,,,,,,339,755,,,,,,342,341,345,344,79,73", "75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,297,83,,57,58,,,,61", "758,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,", "41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,", ",,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74", "80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66", "67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87", ",88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,", "40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65", ",51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,", ",,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59", "60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,84", "50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,", "52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,", "53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257", "292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96", ",81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,", "218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51,37,83", ",57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,", ",,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,", ",,,,,,,,36,,,30,,,52,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,", ",,74,80,,,,,,,56,,,53,-536,-536,-536,,-536,37,83,,-536,-536,,,,-536", ",-536,-536,-536,-536,-536,-536,-536,,-536,,,,-536,-536,-536,-536,-536", "-536,-536,,,-536,,,,,,,-536,,,-536,-536,-536,-536,-536,-536,-536,-536", "-536,-536,-536,,-536,-536,,-536,-536,,,,,,,,,,,,,,,,,,,,,-536,,,-536", "-536,,-536,,-536,,-536,,-536,,-536,,,,,,,,-536,,-536,,,-536,-536,-536", "-536,-536,-536,,,,-536,-536,,,,,,,-536,,,-536,-537,-537,-537,,-537,-536", "-536,,-537,-537,,,,-537,,-537,-537,-537,-537,-537,-537,-537,,-537,,", ",-537,-537,-537,-537,-537,-537,-537,,,-537,,,,,,,-537,,,-537,-537,-537", "-537,-537,-537,-537,-537,-537,-537,-537,,-537,-537,,-537,-537,,,,,,", ",,,,,,,,,,,,,,-537,,,-537,-537,,-537,,-537,,-537,,-537,,-537,,,,,,,", "-537,,-537,,,-537,-537,-537,-537,-537,-537,,,,-537,-537,,,,,,,-537,", ",-537,63,64,65,,51,-537,-537,,57,58,,,,61,,59,60,62,258,259,66,67,,", ",,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,", ",,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51", "37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,", ",17,,,,,,7,41,6,9,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,", ",,,,,,,,,,,,,,,36,,,30,,,52,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76", "77,78,,,,74,80,,,,,,405,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59", "60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,84", "50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,", "52,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53", "63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27", "90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38", "39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,18,,,,,79,73", "75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,", "59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93", "84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214", ",,52,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,", ",53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28", "27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82", ",38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,18,,,,", "79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51,37,83,,57,58", ",,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41", ",9,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,", "36,,,30,,,52,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80", ",,,,,,56,,,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67", ",,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,6,9,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,54,,32,,,,40,", ",,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51", "37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,", ",17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,", ",,,,,,,,,,,,,,36,,,30,,,52,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77", "78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62", "23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50", "86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,54", ",32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63", "64,65,8,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90", "89,91,92,,,17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,,81,82,,38", "39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,54,,32,,,,40,,,,,,,,18,,,,,79,73", "75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51,37,83,,57,58,,,,61", ",59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94", "93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30", ",,52,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56", ",,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28", "27,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82", ",38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,422,,,,40,,,,,,,,218", ",,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57", "58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,219,,,,,", ",41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,", ",,,210,,,214,,,52,,54,,422,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,", ",74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,23,24", "66,67,,,,,,22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87", ",88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,", "40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65", ",51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89", "91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,262,88,95,96,,81,82,,38", "39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,256,,,,40,,,,,,,,218,,,,", "79,260,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58", ",,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,", ",41,,,94,93,84,50,86,85,87,262,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,", ",,,,,,210,,,214,,,52,,54,,256,,,,40,,,,,,,,218,,,,,79,260,75,76,77,78", ",,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,23", "24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85", "87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,", ",,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65", ",51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89", "91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39", ",,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,256,,,,40,,,,,,,,218,,,,,79", "73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61", ",59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41", ",,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210", ",,214,,,52,,54,,422,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80", ",,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67", ",,,,,22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,", ",,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,", ",17,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,", ",,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77", "78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62", "23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86", "85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54", ",,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64", "65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90", "89,91,92,,,219,,,,,,,293,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,770", ",337,335,334,760,336,,,,,,,,,757,,,,,,,290,,,287,,,52,,54,,,,,,,,339", ",,,,,,342,341,345,344,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64", "65,,51,297,83,,57,58,,,,61,758,59,60,62,258,259,66,67,,,,,,257,292,296", "90,89,91,92,,,219,,,,,,,293,,,94,93,84,50,86,85,87,,88,95,96,,81,82", ",,,,,,,,,,,,,,,,,,,,,,,290,,,287,,,52,,54,,,,,,,,,,,,,,,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51,297,83,,57,58,,,,61,,59", "60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93", "84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,", ",52,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56", ",,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22", "28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,", "81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,54,,32,,,,40,,,,,,,,18", ",,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57", "58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219", ",,,,,,41,,,94,93,84,50,86,85,87,262,88,95,96,,81,82,,38,39,,,,,,,,,", ",,,,,,,,,,,210,,,214,,,52,,54,,,,254,,40,,,,,,,,218,,,,,79,260,75,76", "77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60", "62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93", "84,50,86,85,87,262,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,", "214,,,52,,54,,661,,254,,40,,,,,,,,218,,,,,79,260,75,76,77,78,,,,74,80", ",,,,,,56,,,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67", ",,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,54,,32,,,,40,", ",,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37", "83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17", ",,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,", ",,,,,,,,210,,,214,,459,52,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78", ",,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258", "259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50", "86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52", ",54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53", "63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27", "90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,,81,82", ",38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,54,,32,,,,40,,,,,,,,18,,,,", "79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,", ",,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,", ",,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,", ",,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74", "80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66", "67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87", ",88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,", "40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65", ",51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89", "91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39", ",,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73", "75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,", "59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,", ",94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210", ",,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,", ",,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,", ",,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,", ",,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,", ",,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59", "60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94", "93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,", "214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,", ",56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,", ",,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,", ",,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,", ",,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59", "60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94", "93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,", "214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,", ",56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,", ",,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,", ",,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,", ",,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59", "60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94", "93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,", "214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,", ",56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,", ",,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,", ",,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,", ",,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59", "60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94", "93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,", "214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,", ",56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,", ",,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,", ",,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,", ",,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59", "60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94", "93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,", "214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,", ",56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,", ",,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,", ",,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,", ",,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59", "60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94", "93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,", "214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,", ",56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,", ",,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,", ",,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,", ",,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59", "60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94", "93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,", "214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,", ",56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,", ",,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,", ",,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,", ",,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51,37,83,,57,58,,,,61,,59", "60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93", "84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,", ",52,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56", ",,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257", "292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96", ",81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,", "218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83", ",57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,", "219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,", ",,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77", "78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62", "258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84", "50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,", "52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,", "53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257", "292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96", ",81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,", "218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83", ",57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,219,", ",,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,", ",,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,", ",,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,23,24", "66,67,,,,,,22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87", ",88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,", "40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65", ",51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89", "91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,262,88,95,96,,81,82,,38", "39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,256,,254,,40,,,,,,,,218,", ",,,79,260,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57", "58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,", ",,,,41,,,94,93,84,50,86,85,87,262,88,95,96,,81,82,,38,39,,,,,,,,,,,", ",,,,,,,,,210,,,214,,,508,,54,,256,,254,,40,,,,,,,,218,,,,,79,260,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59", "60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93", "84,50,86,85,87,262,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,", "214,,512,52,,54,,256,,254,,40,,,,,,,,218,,,,,79,260,75,76,77,78,,,,74", "80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,23,24,66", "67,,,,,,22,28,27,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,", "88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40", ",,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,", ",,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,781,,,,40,,,,,,,,218,,,,,79,73", "75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,", "59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,", ",94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210", ",,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,", ",,,56,,,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,", ",,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95", "96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,282,,,52,,54,,32,,,,40,,,", ",,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37", "83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17", ",,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,", ",,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,", ",,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,23,24", "66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,84,50,86,85,87", ",88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,", "40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,", "51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,262,88,95,96,,81,82,,38,39", ",,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,256,,,,40,,,,,,,,218,,,,,79", "260,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,", "61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,", "293,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,,,,,,,,,,,,,,,,,,,,,,,290", ",,214,,,52,,54,,,,,,,,,,,,,,,,,,,79,73,75,76,77,78,,,,74,80,,,,520,", ",56,,,53,63,64,65,8,51,297,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,", ",,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95", "96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,282,,,52,,54,,32,,,,40,,,", ",,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37", "83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,", ",219,,,,,,,41,,,94,93,84,50,86,85,87,262,88,95,96,,81,82,,38,39,,,,", ",,,,,,,,,,,,,,,,210,,,214,,,52,,54,,256,,,,40,,,,,,,,218,,,,,79,260", "75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,", "59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,,,,,,41,,,94", "93,84,50,86,85,87,262,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210", ",,214,,,52,,54,,256,,,,40,,,,,,,,218,,,,,79,260,75,76,77,78,,,,74,80", ",,,,,,56,,,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67", ",,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,54,,32,,,,40,", ",,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51", "37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,", ",17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,", ",,,,,,,,,,,,,,36,,,30,,,52,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77", "78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62", "23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50", "86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,54", ",32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63", "64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296", "90,89,91,92,,,219,,,,,,,293,,,94,93,84,50,86,85,87,,88,95,96,,81,82", ",,,,,,,,,,,,,,,,,,,,,,,718,,,214,,,52,,54,,,,,,,,,,,,,,,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51,297,83,,57,58,,,,61,,59", "60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93", "84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,", ",52,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56", ",,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22", "28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,", "81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,54,,32,,,,40,,,,,,,,18", ",,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57", "58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219", ",,,,,,41,,,94,93,84,50,86,85,87,262,88,95,96,,81,82,,38,39,,,,,,,,,", ",,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,260,75,76,77", "78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62", "258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84", "50,86,85,87,262,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214", ",,52,,54,,661,,254,,40,,,,,,,,218,,,,,79,260,75,76,77,78,,,,74,80,,", ",,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67", ",,,,,257,292,296,90,89,91,92,,,219,,,,,,,293,,,94,93,84,50,86,85,87", ",88,95,96,,81,82,,,,,,,,,,,,,,,,,,,,,,,,290,,,287,,,52,,54,,,,,,,,,", ",,,,,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,297,83", ",57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,", ",,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,", ",,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,", "74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259", "66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85", "87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,", ",,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64", "65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90", "89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38", "39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79", "73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61", ",59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41", ",,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210", ",,214,,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,", ",,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,", ",,,,257,292,296,90,89,91,92,,,219,,,,,,,293,,,94,93,84,50,86,85,87,", "88,95,96,,81,82,,,,,,,,,,,,,,,,,,,,,,,,290,,,287,,,52,,54,,,,,,,,,,", ",,,,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,297,83", ",57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,", "219,,,,,,,41,,,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,", ",,,,,,,,,,,,210,,,214,540,,52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76", "77,78,,,,74,80,,,,,,,56,,,53,63,64,65,8,51,37,83,,57,58,,,,61,,59,60", "62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,7,41,,9,94,93,84", "50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,36,,,30,,,52", ",54,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53", "63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28", "27,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,262,88,95,96,,81", "82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,256,,,,40,,,,,,,,218", ",,,,79,260,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57", "58,,,,61,,59,60,62,258,259,66,67,,,,,,257,28,27,90,89,91,92,,,219,,", ",,,,41,,,94,93,84,50,86,85,87,262,88,95,96,,81,82,,38,39,,,,,,,,,,,", ",,,,,,,,,210,,,214,,,52,,54,,256,,,,40,,,,,,,,218,,,,,79,260,75,76,77", "78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62", "258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,293,,,94,93,84", "50,86,85,87,,88,95,96,,81,82,,,,,,,,,,,,,,,,,,,,,,,,290,,,287,,,52,", "54,,,,,,,,,,,,,,,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64", "65,8,51,297,83,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89", "91,92,,,17,,,,,,7,41,,9,94,93,84,50,86,85,87,,88,95,96,,81,82,,38,39", ",,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,54,,32,,,,40,,,,,,,,18,,,,,79,73,75", "76,77,78,,,,74,80,,,,,,405,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,", "59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93", "84,50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214", ",679,52,,54,,,,254,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,,", ",,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,", ",,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,,88", "95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,,,40,", ",,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51", "37,83,,57,58,,,,61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91", "92,,,219,,,,,,,41,,,94,93,84,50,86,85,87,262,88,95,96,,81,82,,38,39", ",,,,,,,,,,,,,,,,,,,,210,,,214,,,52,,54,,,,254,,40,,,,,,,,218,,,,,79", "260,75,76,77,78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,", "61,,59,60,62,258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,", "41,,,94,93,84,50,86,85,87,262,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,", ",,,,,210,,,214,,,52,,54,,661,,254,,40,,,,,,,,218,,,,,79,260,75,76,77", "78,,,,74,80,,,,,,,56,,,53,63,64,65,,51,37,83,,57,58,,,,61,,59,60,62", "258,259,66,67,,,,,,257,292,296,90,89,91,92,,,219,,,,,,,41,,,94,93,84", "50,86,85,87,,88,95,96,,81,82,,38,39,,,,,,,,,,,,,,,,,,,,,210,,,214,,", "52,,54,,,,,,40,,,,,,,,218,,,,,79,73,75,76,77,78,,,,74,80,,,,,,-287,56", ",,53,,,-287,-287,-287,37,83,-287,-287,-287,,-287,,,,,,,,,,-287,-287", ",,,,,,,,-287,-287,,-287,-287,-287,-287,-287,,,,,,,,,,,,,,,,,,,,,,-287", "-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287", ",,-287,-287,-287,,642,-287,,,-287,,-287,,-287,,-287,,-287,,-287,-287", "-287,-287,-287,-287,-287,,-287,,-287,,,,,,,,,,,,,-287,-287,-287,-287", ",-287,,-287,-287,,-287,,,-99,-287,-287,-287,,,,-287,-287,,-287,,,,,", ",,,,,,,,,,,,,,-287,-287,,-287,-287,-287,-287,-287,,,,,,,,,,,,,,,,,,", ",,,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287,-287", "-287,-287,,,-287,-287,-287,,642,,,,-287,,,,,,-287,,-287,,-287,-287,-287", "-287,-287,-287,-287,,-287,,-287,,,,,,,,,,,,,-287,-287,,-90,,-287,,-543", "-287,,-287,,,-99,-543,-543,-543,,,-543,-543,-543,,-543,,,,,,,,,-543", "-543,-543,,,,,,,,,-543,-543,,-543,-543,-543,-543,-543,,,,,,,,,,,,,,", ",,,,,,,-543,-543,-543,-543,-543,-543,-543,-543,-543,-543,-543,-543,-543", "-543,-543,,,-543,-543,-543,,796,-543,,,-543,,-543,,-543,,-543,,-543", ",-543,-543,-543,-543,-543,-543,-543,,-543,-543,-543,,,,,,,,,,,,,-543", "-543,-543,-543,,-543,,-543,-543,,-543,,,-97,-543,-543,-543,,,,-543,-543", ",-543,,,,,,,,,-543,,,,,,,,,,,-543,-543,,-543,-543,-543,-543,-543,,,", ",,,,,,,,,,,,,,,,,,-543,-543,-543,-543,-543,-543,-543,-543,-543,-543", "-543,-543,-543,-543,-543,,,-543,-543,-543,,639,,,,-543,,,,,,-543,,-543", ",-543,-543,-543,-543,-543,-543,-543,,-543,-543,-543,,,,,,,,,,,,,-543", "-543,,-88,,-543,,-282,-543,,-543,,,-97,-282,-282,-282,,,-282,-282,-282", ",-282,,,,,,,,,,-282,-282,-282,,,,,,,,-282,-282,,-282,-282,-282,-282", "-282,,,,,,,,,,,,,,,,,,,,,,-282,-282,-282,-282,-282,-282,-282,-282,-282", "-282,-282,-282,-282,-282,-282,,,-282,-282,-282,,,-282,,,-282,,-282,", "-282,,-282,,-282,,-282,-282,-282,-282,-282,-282,-282,,-282,,-282,,,", ",,,,,,,,,-282,-282,-282,-282,-296,-282,,-282,-282,,-282,-296,-296,-296", ",,-296,-296,-296,,-296,,,,,,,,,,-296,-296,,,,,,,,,-296,-296,,-296,-296", "-296,-296,-296,,,,,,,,,,,,,,,,,,,,,,-296,-296,-296,-296,-296,-296,-296", "-296,-296,-296,-296,-296,-296,-296,-296,,,-296,-296,-296,,,-296,,278", "-296,,-296,,-296,,-296,,-296,,-296,-296,-296,-296,-296,-296,-296,,-296", ",-296,,,,,,,,,,,,,-296,-296,-296,-296,-559,-296,,,-296,,-296,-559,-559", "-559,,,-559,-559,-559,,-559,,,,,,,,,,-559,,,,,,,,,,-559,-559,,-559,-559", "-559,-559,-559,,,,,,,,,,,,-559,,,,,,,-559,-559,-559,,,-559,-559,-559", ",-559,,,,,-559,-559,,,,-559,,,-559,,,,,269,-559,-559,-559,,-559,-559", "-559,-559,-559,,,,,,,,,,,,-559,,,,,,,,,,,,,-559,,-559,,,-559,,,-559", "-559,,-559,,,,,-559,,-559,-559,-559,269,-559,-559,-559,-559,,-559,,", ",,,,,,,-559,,,,,-559,,,,,-559,-559,,-559,-559,-559,-559,-559,-559,,-559", ",,-559,444,435,,,445,,,,,,,,,142,143,139,121,122,123,130,127,129,,,124", "125,-559,-559,,,144,145,131,132,-559,,,,,269,-559,,,,,136,135,,120,141", "138,137,133,134,128,126,118,140,119,,-559,146,,,,,,,,,,,,-559,,-559", ",,-559,156,167,157,180,153,173,163,162,188,191,178,161,160,155,181,189", "190,165,154,168,172,174,166,159,,,,175,182,177,176,169,179,164,152,171", "170,183,184,185,186,187,151,158,149,150,147,148,111,113,110,,112,,,", ",,,,,142,143,139,121,122,123,130,127,129,,,124,125,,,,,144,145,131,132", ",,,,,,,,,,,136,135,,120,141,138,137,133,134,128,126,118,140,119,,,146", "192,,,,,,,,,,80,156,167,157,180,153,173,163,162,188,191,178,161,160", "155,181,189,190,165,154,168,172,174,166,159,,,,175,182,177,176,169,179", "164,152,171,170,183,184,185,186,187,151,158,149,150,147,148,111,113", ",,112,,,,,,,,,142,143,139,121,122,123,130,127,129,,,124,125,,,,,144", "145,131,132,,,,,,,,,,,,136,135,,120,141,138,137,133,134,128,126,118", "140,119,,,146,192,,,,,,,,,,80,156,167,157,180,153,173,163,162,188,191", "178,161,160,155,181,189,190,165,154,168,172,174,166,159,,,,175,182,177", "176,169,179,164,152,171,170,183,184,185,186,187,151,158,149,150,147", "148,111,113,,,112,,,,,,,,,142,143,139,121,122,123,130,127,129,,,124", "125,,,,,144,145,131,132,,,,,,,,,,,,136,135,,120,141,138,137,133,134", "128,126,118,140,119,,,146,192,,,,,,,,,,80,156,167,157,180,153,173,163", "162,188,191,178,161,160,155,181,189,190,165,154,168,172,174,166,159", ",,,175,182,177,176,169,179,164,152,171,170,183,184,185,186,187,151,158", "149,150,147,148,111,113,,,112,,,,,,,,,142,143,139,121,122,123,130,127", "129,,,124,125,,,,,144,145,131,132,,,,,,,,,,,,136,135,,120,141,138,137", "133,134,128,126,118,140,119,,,146,192,,,,,,,,,,80,156,167,157,180,153", "173,163,162,188,191,178,161,160,155,181,189,190,165,154,168,172,174", "166,159,,,,175,182,177,176,169,179,164,152,171,170,183,184,185,186,187", "151,158,149,150,147,148,111,113,399,398,112,,400,,,,,,,142,143,139,121", "122,123,130,127,129,,,124,125,,,,,144,145,131,132,,,,,,,,,,,,136,135", ",120,141,138,137,133,134,128,126,118,140,119,,,146,156,167,157,180,153", "173,163,162,188,191,178,161,160,155,181,189,190,165,154,168,172,174", "166,159,,,,175,182,177,176,169,179,164,152,171,170,183,184,185,186,187", "151,158,149,150,147,148,111,113,399,398,112,,400,,,,,,,142,143,139,121", "122,123,130,127,129,,,124,125,,,,,144,145,131,132,,,,,,,,,,,,136,135", ",120,141,138,137,133,134,128,126,118,140,119,,,146,156,167,157,180,153", "173,163,162,188,191,178,161,160,155,181,189,190,165,154,168,172,174", "166,159,,,,175,182,177,377,376,378,375,152,171,170,183,184,185,186,187", "151,158,149,150,373,374,371,113,86,85,372,,88,,,,,,,142,143,139,121", "122,123,130,127,129,,,124,125,,,,,144,145,131,132,,,,,,382,,,,,,136", "135,,120,141,138,137,133,134,128,126,118,140,119,,,146,156,167,157,180", "153,173,163,162,188,191,178,161,160,155,181,189,190,165,154,168,172", "174,166,159,,,,175,182,177,176,169,179,164,152,171,170,183,184,185,186", "187,151,158,149,150,147,148,111,113,,,112,,,,,,,,,142,143,139,121,122", "123,130,127,129,,,124,125,,,,,144,145,131,132,,,,,,,,,,,,136,135,,120", "141,138,137,133,134,128,126,118,140,119,444,435,146,,445,,,,,,,,,142", "143,139,121,122,123,130,127,129,,,124,125,,,,,144,145,131,132,,,,,,269", ",,,,,136,135,,120,141,138,137,133,134,128,126,118,140,119,437,441,146", ",439,,,,,,,,,142,143,139,121,122,123,130,127,129,,,124,125,,,,,144,145", "131,132,,,,,,,,,,,,136,135,,120,141,138,137,133,134,128,126,118,140", "119,444,435,146,,445,,,,,,,,,142,143,139,121,122,123,130,127,129,,,124", "125,,,,,144,145,131,132,,,,,,,,,,,,136,135,,120,141,138,137,133,134", "128,126,118,140,119,647,441,146,,648,,,,,,,,,142,143,139,121,122,123", "130,127,129,,,124,125,,,,,144,145,131,132,,,,,,,,,,,,136,135,,120,141", "138,137,133,134,128,126,118,140,119,741,441,146,,742,,,,,,,,,142,143", "139,121,122,123,130,127,129,,,124,125,,,,,144,145,131,132,,,,,,,,,,", ",136,135,,120,141,138,137,133,134,128,126,118,140,119,739,435,146,,740", ",,,,,,,,142,143,139,121,122,123,130,127,129,,,124,125,,,,,144,145,131", "132,,,,,,269,,,,,,136,135,,120,141,138,137,133,134,128,126,118,140,119", "645,435,146,,646,,,,,,,,,142,143,139,121,122,123,130,127,129,,,124,125", ",,,,144,145,131,132,,,,,,269,,,,,,136,135,,120,141,138,137,133,134,128", "126,118,140,119,444,435,146,,445,,,,,,,,,142,143,139,121,122,123,130", "127,129,,,124,125,,,,,144,145,131,132,,,,,,,,,,,,136,135,,120,141,138", "137,133,134,128,126,118,140,119,690,435,146,,691,,,,,,,,,142,143,139", "121,122,123,130,127,129,,,124,125,,,,,144,145,131,132,,,,,,269,,,,,", "136,135,,120,141,138,137,133,134,128,126,118,140,119,747,441,146,,745", ",,,,,,,,142,143,139,121,122,123,130,127,129,,,124,125,,,,,144,145,131", "132,,,,,,,,,,,,136,135,,120,141,138,137,133,134,128,126,118,140,119", "647,441,146,,648,,,,,,,,,142,143,139,121,122,123,130,127,129,,,124,125", ",,,,144,145,131,132,,,,,,,,,,,,136,135,,120,141,138,137,133,134,128", "126,118,140,119,645,435,146,,646,,,,,,,,,142,143,139,121,122,123,130", "127,129,,,124,125,,,,,144,145,131,132,,,,,,269,,,,,,136,135,,120,141", "138,137,133,134,128,126,118,140,119,444,435,146,,445,,,,,,,,,142,143", "139,121,122,123,130,127,129,,,124,125,,,,,144,145,131,132,,,,,,,,,,", ",136,135,,120,141,138,137,133,134,128,126,118,140,119,431,435,146,,432", ",,,,,,,,142,143,139,121,122,123,130,127,129,,,124,125,,,,,144,145,131", "132,,,,,,269,,,,,,136,135,,120,141,138,137,133,134,128,126,118,140,119", "968,435,146,,969,,,,,,,,,142,143,139,121,122,123,130,127,129,,,124,125", ",,,,144,145,131,132,,,,,,269,,,,,,136,135,,120,141,138,137,133,134,128", "126,118,140,119,444,435,146,,445,,,,,,,,,142,143,139,121,122,123,130", "127,129,,,124,125,,,,,144,145,131,132,,,,,,,,,,,,136,135,,120,141,138", "137,133,134,128,126,118,140,119,747,441,146,,900,,,,,,,,,142,143,139", "121,122,123,130,127,129,,,124,125,,,,,144,145,131,132,,,,,,,,,,,,136", "135,,120,141,138,137,133,134,128,126,118,140,119,970,441,146,,971,,", ",,,,,,142,143,139,121,122,123,130,127,129,,,124,125,,,,,144,145,131", "132,,,,,,,,,,,,136,135,,120,141,138,137,133,134,128,126,118,140,119", "693,441,146,,694,,,,,,,,,142,143,139,121,122,123,130,127,129,,,124,125", ",,,,144,145,131,132,,,,,,,,,,,,136,135,,120,141,138,137,133,134,128", "126,118,140,119,,,146"];

      racc_action_table = arr = Opal.get('Array').$new(25478, nil);

      idx = 0;

      ($a = ($b = clist).$each, $a.$$p = (TMP_1 = function(str){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a.$$p = (TMP_2 = function(i){var self = TMP_2.$$s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = $rb_plus(idx, 1);}, TMP_2.$$s = self, TMP_2), $a).call($b)}, TMP_1.$$s = self, TMP_1), $a).call($b);

      clist = ["62,62,62,846,62,976,55,848,62,62,752,752,348,62,26,62,62,62,62,62,62", "62,646,393,590,703,703,62,62,62,62,62,62,62,71,618,62,645,798,685,322", "288,71,62,499,696,62,62,62,62,62,62,62,358,62,62,62,349,62,62,3,347", "347,527,740,3,367,607,607,742,739,600,646,380,355,685,600,499,26,703", "380,845,697,62,393,897,62,645,798,62,55,62,904,62,618,618,933,752,26", "353,936,353,752,618,848,846,848,288,957,848,62,62,62,62,62,62,976,968", "976,62,62,976,698,348,969,348,590,62,348,527,62,370,370,370,742,370", "62,62,371,370,370,970,322,288,370,371,370,370,370,370,370,370,370,288", "607,358,458,458,370,370,370,370,370,370,370,527,740,370,349,367,349", "742,739,349,370,527,355,370,370,370,370,370,370,370,741,370,370,370", "367,370,370,567,845,367,845,845,897,845,897,509,943,897,943,904,701", "904,486,933,904,933,458,936,933,936,370,631,936,370,970,957,370,957", "370,971,957,726,726,510,968,580,968,694,509,968,632,969,702,969,693", "486,969,370,370,370,370,370,370,581,293,741,370,370,970,690,970,631", "691,970,370,291,510,370,457,457,457,631,457,370,370,318,457,457,318", "311,311,457,814,457,457,457,457,457,457,457,632,209,741,704,211,457", "457,457,457,457,457,457,694,694,457,294,971,556,454,693,693,457,797", "710,457,457,457,457,457,457,457,711,457,457,457,690,457,457,691,457", "457,291,580,388,580,708,388,580,708,694,971,209,971,867,211,971,693", "714,814,694,581,457,581,867,457,581,693,457,454,457,716,690,797,372", "691,457,311,291,373,294,372,690,296,457,691,373,718,291,457,457,457", "457,457,457,814,867,867,457,457,294,374,948,388,388,814,457,948,374", "457,456,456,456,375,456,457,457,948,456,456,375,494,719,456,386,456", "456,456,456,456,456,456,314,867,859,314,720,456,456,456,456,456,456", "456,859,384,456,948,948,948,948,390,301,456,37,37,456,456,456,456,456", "456,456,376,456,456,456,395,456,456,376,456,456,110,297,297,859,859", "110,110,494,494,494,386,386,386,948,25,25,15,15,377,301,456,35,25,456", "494,377,456,315,456,301,315,384,384,384,456,208,208,390,390,390,859", "750,456,208,564,564,750,456,456,456,456,456,456,395,395,395,456,456", "723,378,865,35,432,431,456,865,378,456,455,455,455,35,455,456,456,865", "455,455,862,862,728,455,734,455,455,455,455,455,455,455,208,14,208,958", "958,455,455,455,455,455,455,455,432,431,455,865,865,865,865,83,83,455", "432,431,455,455,455,455,455,455,455,736,455,455,455,481,455,455,298", "455,455,14,738,482,304,304,543,289,289,542,541,14,304,302,865,289,572", "743,572,572,572,455,572,352,455,303,481,455,352,455,481,481,481,481", "482,455,847,847,482,482,482,482,279,455,847,463,532,279,455,455,455", "455,455,455,747,756,748,455,455,304,756,304,289,193,289,455,306,528", "455,453,453,453,462,453,455,455,463,453,453,313,463,463,453,759,453", "453,453,453,453,453,453,847,97,847,763,764,453,453,453,453,453,453,453", "462,766,453,767,462,462,768,420,770,453,521,773,453,453,453,453,453", "453,453,453,453,453,453,780,453,453,519,453,453,420,420,420,420,420", "420,420,420,420,420,420,78,77,420,420,516,515,420,420,511,453,316,505", "453,504,501,453,317,453,801,453,420,802,420,453,420,420,420,420,420", "420,420,453,420,806,831,808,453,453,453,453,453,453,811,812,813,453", "453,319,420,558,420,818,327,453,821,822,453,452,452,452,328,452,453", "453,467,452,452,837,41,840,452,36,452,452,452,452,452,452,452,831,831", "831,831,466,452,452,452,452,452,452,452,465,464,452,558,558,558,558", "651,850,452,853,854,452,452,452,452,452,452,452,452,452,452,452,855", "452,452,330,452,452,651,651,651,651,651,651,651,651,651,651,651,331", "343,651,651,346,877,651,651,878,452,34,354,452,438,20,452,890,452,430", "452,651,962,651,452,651,651,651,651,651,651,651,452,651,900,901,964", "452,452,452,452,452,452,934,934,906,452,452,907,651,429,934,425,12,452", "915,917,452,443,443,443,920,443,452,452,921,443,443,922,923,423,443", "357,443,443,443,443,443,443,443,684,684,684,684,684,443,443,443,443", "443,443,443,11,836,443,836,836,836,934,836,934,443,10,965,443,443,443", "443,443,443,443,443,443,443,443,417,443,443,935,443,443,676,676,676", "676,676,676,676,676,676,676,676,967,9,676,676,6,945,676,676,359,443", "953,411,443,443,392,443,1,443,389,443,676,443,676,443,676,676,676,676", "676,676,676,443,676,363,635,268,443,443,443,443,443,443,640,643,629", "443,443,255,676,281,676,649,650,443,622,283,443,0,0,0,0,0,443,443,252", "0,0,658,660,251,0,284,0,0,0,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,774,774", "0,219,774,774,774,673,0,0,0,0,0,0,0,0,0,0,0,213,0,0,0,212,0,0,285,0", "0,653,653,653,653,653,653,653,653,653,653,653,677,680,653,653,290,210", "653,653,583,0,582,687,0,689,576,0,292,0,692,0,653,571,653,0,653,653", "653,653,653,653,653,0,653,695,,,0,0,0,0,0,0,13,13,,0,0,,653,653,13,", ",0,,,0,954,954,954,,954,0,0,,954,954,,,,954,,954,954,954,954,954,954", "954,280,280,280,280,280,954,954,954,954,954,954,954,,,954,,,,13,,13", "954,,,954,954,954,954,954,954,954,954,954,954,954,,954,954,,954,954", "428,428,428,428,428,428,428,428,428,428,428,,,428,428,,,428,428,,954", ",,954,,,954,,954,,954,428,,428,954,428,428,428,428,428,428,428,954,428", ",,,954,954,954,954,954,954,717,717,,954,954,,428,,717,,,954,,,954,350", "350,350,,350,954,954,,350,350,,,,350,,350,350,350,350,350,350,350,,", ",,,350,350,350,350,350,350,350,,,350,,,,717,,717,350,,,350,350,350,350", "350,350,350,,350,350,350,,350,350,,350,350,928,928,928,928,928,928,928", "928,928,928,928,,,928,928,,,928,928,,350,,,350,,,350,,350,,,928,,928", "350,928,928,928,928,928,928,928,350,928,,,,350,350,350,350,350,350,42", "42,,350,350,,928,,42,,,350,,,350,351,351,351,,351,350,350,,351,351,", ",,351,,351,351,351,351,351,351,351,,,,,,351,351,351,351,351,351,351", ",,351,,,,42,,42,351,,,351,351,351,351,351,351,351,,351,351,351,,351", "351,,351,351,19,19,19,19,19,19,19,19,19,19,19,,,19,19,,,19,19,,351,", ",351,,,351,,351,,,19,,19,351,19,19,19,19,19,19,19,351,19,,,,351,351", "351,351,351,351,356,356,,351,351,,19,,356,,,351,,,351,442,442,442,,442", "351,351,,442,442,,,,442,,442,442,442,442,442,442,442,,,,,,442,442,442", "442,442,442,442,,,442,,,,356,,356,442,,,442,442,442,442,442,442,442", "442,442,442,442,,442,442,,442,442,882,882,882,882,882,882,882,882,882", "882,882,,,882,882,,,882,882,,442,,,442,442,,442,,442,,442,882,442,882", "442,882,882,882,882,882,882,882,442,882,,,,442,442,442,442,442,442,365", "365,,442,442,,882,,365,,,442,,,442,441,441,441,,441,442,442,,441,441", ",,,441,,441,441,441,441,441,441,441,,,,,,441,441,441,441,441,441,441", ",,441,,,,365,,365,441,,,441,441,441,441,441,441,441,441,441,441,441", ",441,441,,441,441,880,880,880,880,880,880,880,880,880,880,880,,,880", "880,,,880,880,,441,,,441,441,,441,,441,,441,880,441,880,441,880,880", "880,880,880,880,880,441,880,,,,441,441,441,441,441,441,592,592,,441", "441,,880,,592,,,441,,,441,433,433,433,,433,441,441,,433,433,,,,433,", "433,433,433,433,433,433,433,,,,,,433,433,433,433,433,433,433,,,433,", ",,592,,592,433,,,433,433,433,433,433,433,433,433,433,433,433,,433,433", ",433,433,447,447,447,447,447,447,447,447,447,447,447,,,447,447,,,447", "447,,433,,,433,433,,433,,433,,433,447,433,447,433,447,447,447,447,447", "447,447,433,447,,,,433,433,433,433,433,433,745,745,,433,433,,447,,745", ",,433,,745,433,422,422,422,,422,433,433,,422,422,,,,422,,422,422,422", "422,422,422,422,,,,,,422,422,422,422,422,422,422,,,422,,,,745,,745,422", ",,422,422,422,422,422,422,422,,422,422,422,,422,422,,422,422,792,792", "792,792,792,792,792,792,792,792,792,,,792,792,,,792,792,,422,,,422,", ",422,,422,,,792,,792,422,792,792,792,792,792,792,792,422,792,,,,422", "422,422,422,422,422,,,,422,422,,792,,,,,422,,,422,952,952,952,952,952", "422,422,,952,952,,,,952,,952,952,952,952,952,952,952,,,,,,952,952,952", "952,952,952,952,,,952,,,,,,952,952,,952,952,952,952,952,952,952,952", ",952,952,952,,952,952,,952,952,790,790,790,790,790,790,790,790,790,790", "790,,,790,790,,,790,790,,952,,,952,,,952,,952,,952,790,,790,952,790", "790,790,790,790,790,790,952,790,,,,952,952,952,952,952,952,,,,952,952", ",790,,,,,952,,,952,944,944,944,944,944,952,952,,944,944,,,,944,,944", "944,944,944,944,944,944,,,,,,944,944,944,944,944,944,944,,,944,,,,,", "944,944,,944,944,944,944,944,944,944,944,,944,944,944,,944,944,,944", "944,787,787,787,787,787,787,787,787,787,787,787,,,787,787,,,787,787", ",944,,,944,,,944,,944,,944,787,,787,944,787,787,787,787,787,787,787", "944,787,,,,944,944,944,944,944,944,,,,944,944,,787,,,,,944,,,944,939", "939,939,939,939,944,944,,939,939,,,,939,,939,939,939,939,939,939,939", ",,,,,939,939,939,939,939,939,939,,,939,,,,,,939,939,,939,939,939,939", "939,939,939,939,,939,939,939,,939,939,,939,939,785,785,785,785,785,785", "785,785,785,785,785,,,785,785,,,785,785,,939,,,939,,,939,,939,,939,785", ",785,939,785,785,785,785,785,785,785,939,785,,,,939,939,939,939,939", "939,,,,939,939,,785,,,,,939,,,939,932,932,932,932,932,939,939,,932,932", ",,,932,,932,932,932,932,932,932,932,,,,,,932,932,932,932,932,932,932", ",,932,,,,,,932,932,,932,932,932,932,932,932,932,932,,932,932,932,,932", "932,,932,932,779,779,779,779,779,779,779,779,779,779,779,,,779,779,", ",779,779,,932,,,932,,,932,,932,,932,779,,779,932,779,779,779,779,779", "779,779,932,779,,,,932,932,932,932,932,932,,,,932,932,,779,,,,,932,", ",932,930,930,930,,930,932,932,,930,930,,,,930,,930,930,930,930,930,930", "930,,,,,,930,930,930,930,930,930,930,,,930,,,,,,,930,,,930,930,930,930", "930,930,930,,930,930,930,,930,930,,930,930,539,539,539,539,539,539,539", "539,539,539,539,,,539,539,,,539,539,,930,,,930,,,930,,930,,930,539,930", "539,930,539,539,539,539,539,539,539,930,539,,,,930,930,930,930,930,930", ",,,930,930,,539,,,,,930,,,930,912,912,912,912,912,930,930,,912,912,", ",,912,,912,912,912,912,912,912,912,,,,,,912,912,912,912,912,912,912", ",,912,,,,,,912,912,,912,912,912,912,912,912,912,912,,912,912,912,,912", "912,,912,912,700,700,700,700,700,700,700,700,700,700,700,,,700,700,", ",700,700,,912,,,912,,,912,,912,,912,700,,700,912,700,700,700,700,700", "700,700,912,700,,,,912,912,912,912,912,912,,,,912,912,,700,,,,,912,", ",912,909,909,909,909,909,912,912,,909,909,,,,909,,909,909,909,909,909", "909,909,,,,,,909,909,909,909,909,909,909,,,909,,,,,,909,909,,909,909", "909,909,909,909,909,909,,909,909,909,,909,909,,909,909,249,249,249,249", "249,249,249,249,249,249,249,,,249,249,,,249,249,,909,,,909,,,909,,909", ",909,249,,249,909,249,249,249,249,249,249,249,909,249,,,,909,909,909", "909,909,909,,,,909,909,,249,,,,,909,,,909,908,908,908,,908,909,909,", "908,908,,,,908,,908,908,908,908,908,908,908,,,,,,908,908,908,908,908", "908,908,,,908,,,,,,,908,,,908,908,908,908,908,908,908,,908,908,908,", "908,908,,908,908,339,,339,339,339,,339,,,,,,,,,655,,655,655,655,908", "655,,908,,,908,,908,,908,,,,908,,,569,339,569,569,569,908,569,,339,", "908,908,908,908,908,908,655,,,908,908,,,655,655,655,655,908,,,908,898", "898,898,655,898,908,908,569,898,898,362,,,898,569,898,898,898,898,898", "898,898,,,,,,898,898,898,898,898,898,898,,724,898,724,724,724,,724,", "898,,,898,898,898,898,898,898,898,,898,898,898,,898,898,,362,362,,474", ",,,,362,,,,724,362,,,,,,724,474,474,898,,,898,,,898,,898,,,362,474,", "474,,474,474,474,474,,,474,,474,,,898,898,898,898,898,898,362,,362,898", "898,,,,,,,898,,,898,17,17,17,,17,898,898,,17,17,,,,17,,17,17,17,17,17", "17,17,,,,,,17,17,17,17,17,17,17,,,17,,,,,,,17,,,17,17,17,17,17,17,17", ",17,17,17,475,17,17,,17,17,,,,,,,,,,,,475,475,,,56,,56,56,56,17,56,", "17,17,475,17,475,17,475,475,475,475,,17,475,,475,,,,,17,,,,,17,17,17", "17,17,17,56,56,,17,17,,,56,56,56,56,17,,,17,18,18,18,,18,17,17,,18,18", ",,,18,,18,18,18,18,18,18,18,,,,,,18,18,18,18,18,18,18,,,18,,,,,,,18", ",,18,18,18,18,18,18,18,,18,18,18,472,18,18,,18,18,,,,,,,,,,,,472,472", ",,323,,323,323,323,18,323,,18,,472,18,472,18,472,472,472,472,,18,472", ",472,,,,,18,,,,,18,18,18,18,18,18,323,,323,18,18,,,323,323,323,323,18", ",,18,894,894,894,894,894,18,18,,894,894,,,,894,,894,894,894,894,894", "894,894,,,,,,894,894,894,894,894,894,894,,,894,,,,,,894,894,,894,894", "894,894,894,894,894,894,,894,894,894,,894,894,,894,894,,,,,,,,,,,,,", ",,562,,562,562,562,894,562,,894,,,894,,894,,894,,,,894,,,,,,,,894,,", ",,894,894,894,894,894,894,562,,,894,894,,,562,562,562,562,894,,,894", "889,889,889,,889,894,894,,889,889,,,,889,,889,889,889,889,889,889,889", ",,,,,889,889,889,889,889,889,889,,,889,,,,,,,889,,,889,889,889,889,889", "889,889,889,889,889,889,,889,889,,889,889,477,477,477,477,477,477,477", ",,477,477,,,,,,,477,477,,889,,,889,,,889,,889,,,477,889,477,889,477", "477,477,477,477,477,477,889,477,,,,889,889,889,889,889,889,,,,889,889", ",,,,,,889,,,889,22,22,22,,22,889,889,,22,22,,,,22,,22,22,22,22,22,22", "22,,,,,,22,22,22,22,22,22,22,,,22,,,,,,,22,,,22,22,22,22,22,22,22,22", "22,22,22,,22,22,,22,22,483,483,483,483,483,483,483,,,483,483,,,,,,,483", "483,,22,,,22,,,22,,22,,22,483,22,483,22,483,483,483,483,483,483,483", "22,483,,,,22,22,22,22,22,22,,,,22,22,,,,,,,22,,,22,23,23,23,,23,22,22", ",23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,", ",,,,23,,,23,23,23,23,23,23,23,23,23,23,23,,23,23,,23,23,484,484,484", "484,484,484,484,484,,484,484,,,,,,,484,484,,23,,,23,,,23,,23,,23,484", "23,484,23,484,484,484,484,484,484,484,23,484,,,,23,23,23,23,23,23,,", ",23,23,,,,,,,23,,,23,24,24,24,,24,23,23,,24,24,,,,24,,24,24,24,24,24", "24,24,,,,,,24,24,24,24,24,24,24,,,24,,,,,,,24,,,24,24,24,24,24,24,24", "24,24,24,24,,24,24,,24,24,480,480,480,480,480,480,480,,,480,480,,,,", ",,480,480,,24,,,24,,,24,,24,,24,480,24,480,24,480,480,480,480,480,480", "480,24,480,,,,24,24,24,24,24,24,,,,24,24,,,,,,,24,,,24,885,885,885,", "885,24,24,,885,885,,,,885,,885,885,885,885,885,885,885,,,,,,885,885", "885,885,885,885,885,,,885,,,,,,,885,,,885,885,885,885,885,885,885,,885", "885,885,,885,885,,885,885,461,461,461,461,461,461,461,461,461,461,461", ",,461,461,,,461,461,,885,,,885,,,885,,885,,,461,,461,885,461,461,461", "461,461,461,461,885,461,,,,885,885,885,885,885,885,,,,885,885,,,,,,", "885,,,885,884,884,884,,884,885,885,,884,884,,,,884,,884,884,884,884", "884,884,884,,,,,,884,884,884,884,884,884,884,,,884,,,,,,,884,,,884,884", "884,884,884,884,884,,884,884,884,,884,884,,884,884,460,460,460,460,460", "460,460,460,460,460,460,,,460,460,,,460,460,,884,,,884,,,884,,884,,", "460,,460,884,460,460,460,460,460,460,460,884,460,,,,884,884,884,884", "884,884,,,,884,884,,,,,,,884,,,884,27,27,27,,27,884,884,,27,27,,,,27", ",27,27,27,27,27,27,27,,,,,,27,27,27,27,27,27,27,,,27,,,,,,,27,,,27,27", "27,27,27,27,27,27,27,27,27,,27,27,,27,27,478,478,478,478,478,478,478", ",,478,478,,,,,,,478,478,,27,,,27,27,,27,,27,,27,478,27,478,27,478,478", "478,478,478,478,478,27,478,,,,27,27,27,27,27,27,,,,27,27,,,,,,,27,,", "27,30,30,30,30,30,27,27,,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30", "30,30,30,30,30,,,30,,,,,,30,30,,30,30,30,30,30,30,30,30,,30,30,30,,30", "30,,30,30,479,479,479,479,479,479,479,,,479,479,,,,,,,479,479,,30,,", "30,,,30,,30,,30,479,,479,30,479,479,479,479,479,479,479,30,479,,,,30", "30,30,30,30,30,,,,30,30,,,,,,,30,,,30,31,31,31,,31,30,30,,31,31,,,,31", ",31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,,,,,31,,,31,31", "31,31,31,31,31,,31,31,31,,31,31,,926,,926,926,926,926,926,,,,,,,,,926", ",,,,,,31,,,31,470,,31,,31,,31,,,,,,926,926,,,,470,470,926,926,926,926", "31,31,31,31,31,31,,,470,31,31,,470,470,470,470,,31,,,31,32,32,32,,32", "31,31,,32,32,,,,32,926,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32", ",,32,,,,,,,32,,,32,32,32,32,32,32,32,,32,32,32,473,32,32,,755,,755,755", "755,755,755,,,,,,,473,473,755,,,,,,,32,,,32,,473,32,473,32,473,473,473", "473,,,473,755,473,,,,,,755,755,755,755,32,32,32,32,32,32,,,,32,32,,", ",32,,,32,,,32,883,883,883,,883,32,32,,883,883,,,,883,755,883,883,883", "883,883,883,883,,,,,,883,883,883,883,883,883,883,,,883,,,,,,,883,,,883", "883,883,883,883,883,883,,883,883,883,,883,883,,883,883,471,471,471,471", "471,471,471,,,471,471,,,,,,,471,471,,883,,,883,,,883,,883,,,471,,471", "883,471,471,471,471,471,471,471,883,471,,,,883,883,883,883,883,883,", ",,883,883,,,,,,,883,,,883,869,869,869,,869,883,883,,869,869,,,,869,", "869,869,869,869,869,869,869,,,,,,869,869,869,869,869,869,869,,,869,", ",,,,,869,,,869,869,869,869,869,869,869,,869,869,869,,869,869,,869,869", "476,476,476,476,476,476,476,,,476,476,,,,,,,476,476,,869,,,869,,,869", ",869,,,476,,476,869,476,476,476,476,476,476,476,869,476,,,,869,869,869", "869,869,869,,,,869,869,,,,,,,869,,,869,842,842,842,842,842,869,869,", "842,842,,,,842,,842,842,842,842,842,842,842,,,,,,842,842,842,842,842", "842,842,,,842,,,,,,842,842,,842,842,842,842,842,842,842,842,,842,842", "842,,842,842,,842,842,468,,,,,,,,,,,,,,,,,468,468,,842,,,842,,,842,", "842,,842,468,,468,842,468,468,468,468,,,,842,,,,,842,842,842,842,842", "842,,,,842,842,,,,,,,842,,,842,841,841,841,841,841,842,842,,841,841", ",,,841,,841,841,841,841,841,841,841,,,,,,841,841,841,841,841,841,841", ",,841,,,,,,841,841,,841,841,841,841,841,841,841,841,,841,841,841,,841", "841,,841,841,469,,,,,,,,,,,,,,,,,469,469,,841,,,841,,,841,,841,,841", "469,,469,841,469,469,469,469,,,,841,,,,,841,841,841,841,841,841,,,,841", "841,,,,,,,841,,,841,38,38,38,,38,841,841,,38,38,,,,38,,38,38,38,38,38", "38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38", ",38,38,38,,38,38,,38,38,,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,,38,,,,,,38", ",,,,,,,38,,,,,38,38,38,38,38,38,,,,38,38,,,,,,,38,,,38,39,39,39,,39", "38,38,,39,39,,,,39,,39,39,39,39,39,39,39,,,,,,39,39,39,39,39,39,39,", ",39,,,,,,,39,,,39,39,39,39,39,39,39,,39,39,39,,39,39,,39,39,,,,,,,,", ",,,,,,,,,,,,39,,,39,,,39,,39,,,,,,39,,,,,,,,39,,,,,39,39,39,39,39,39", ",,,39,39,,,,,,,39,,,39,40,40,40,,40,39,39,,40,40,,,,40,,40,40,40,40", "40,40,40,,,,,,40,40,40,40,40,40,40,,,40,,,,,,,40,,,40,40,40,40,40,40", "40,,40,40,40,,40,40,,40,40,,,,,,,,,,,,,,,,,,,,,40,,,40,,,40,,40,,,,", ",40,,,,,,,,40,,,,,40,40,40,40,40,40,,,,40,40,,,,,,,40,,,40,839,839,839", ",839,40,40,,839,839,,,,839,,839,839,839,839,839,839,839,,,,,,839,839", "839,839,839,839,839,,,839,,,,,,,839,,,839,839,839,839,839,839,839,,839", "839,839,,839,839,,839,839,,,,,,,,,,,,,,,,,,,,,839,,,839,,,839,,839,", ",,,,839,,,,,,,,839,,,,,839,839,839,839,839,839,,,,839,839,,,,,,,839", ",,839,820,820,820,820,820,839,839,,820,820,,,,820,,820,820,820,820,820", "820,820,,,,,,820,820,820,820,820,820,820,,,820,,,,,,820,820,,820,820", "820,820,820,820,820,820,,820,820,820,,820,820,,820,820,,,,,,,,,,,,,", ",,,,,,,820,,,820,,,820,,820,,820,,,,820,,,,,,,,820,,,,,820,820,820,820", "820,820,,,,820,820,,,,,,,820,,,820,52,52,52,,52,820,820,,52,52,,,,52", ",52,52,52,52,52,52,52,,,,,,52,52,52,52,52,52,52,,,52,,,,,,,52,,,52,52", "52,52,52,52,52,,52,52,52,,52,52,,52,52,,,,,,,,,,,,,,,,,,,,,52,,,52,", ",52,,52,,,,,,52,,,,,,,,52,,,,,52,52,52,52,52,52,,,,52,52,,,,,,,52,,", "52,53,53,53,,53,52,52,,53,53,,,,53,,53,53,53,53,53,53,53,,,,,,53,53", "53,53,53,53,53,,,53,,,,,,,53,,,53,53,53,53,53,53,53,53,53,53,53,,53", "53,,53,53,,,,,,,,,,,,,,,,,,,,,53,,,53,,,53,,53,,53,,,,53,,,,,,,,53,", ",,,53,53,53,53,53,53,,,,53,53,,,,,,,53,,,53,54,54,54,,54,53,53,,54,54", ",,,54,,54,54,54,54,54,54,54,,,,,,54,54,54,54,54,54,54,,,54,,,,,,,54", ",,54,54,54,54,54,54,54,54,54,54,54,,54,54,,54,54,,,,,,,,,,,,,,,,,,,", ",54,,,54,,,54,,54,,,,,,54,,,,,,,,54,,,,,54,54,54,54,54,54,,,,54,54,", ",,,,,54,,,54,809,809,809,,809,54,54,,809,809,,,,809,,809,809,809,809", "809,809,809,,,,,,809,809,809,809,809,809,809,,,809,,,,,,,809,,,809,809", "809,809,809,809,809,,809,809,809,,809,809,,809,809,,,,,,,,,,,,,,,,,", ",,,809,,,809,,,809,,809,,809,,,,809,,,,,,,,809,,,,,809,809,809,809,809", "809,,,,809,809,,,,,,,809,,,809,796,796,796,,796,809,809,,796,796,,,", "796,,796,796,796,796,796,796,796,,,,,,796,796,796,796,796,796,796,,", "796,,,,,,,796,,,796,796,796,796,796,796,796,,796,796,796,,796,796,,796", "796,,,,,,,,,,,,,,,,,,,,,796,,,796,,,796,,796,,,,,,796,,,,,,,,796,,,", ",796,796,796,796,796,796,,,,796,796,,,,,,,796,,,796,57,57,57,,57,796", "796,,57,57,,,,57,,57,57,57,57,57,57,57,,,,,,57,57,57,57,57,57,57,,,57", ",,,,,,57,,,57,57,57,57,57,57,57,,57,57,57,,57,57,,57,57,,,,,,,,,,,,", ",,,,,,,,57,,,57,,,57,,57,,,,,,57,,,,,,,,57,,,,,57,57,57,57,57,57,,,", "57,57,,,,,,,57,,,57,58,58,58,,58,57,57,,58,58,,,,58,,58,58,58,58,58", "58,58,,,,,,58,58,58,58,58,58,58,,,58,,,,,,,58,,,58,58,58,58,58,58,58", ",58,58,58,,58,58,,58,58,,,,,,,,,,,,,,,,,,,,,58,,,58,,,58,,58,,,,,,58", ",,,,,,,58,,,,,58,58,58,58,58,58,,,,58,58,,,,,,,58,,,58,61,61,61,,61", "58,58,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61,61,61,61,61,", ",61,,,,,,,61,,,61,61,61,61,61,61,61,,61,61,61,,61,61,,61,61,,,,,,,,", ",,,,,,,,,,,,61,,,61,,,61,,61,,,,,,61,,,,,,,,61,,,,,61,61,61,61,61,61", ",,,61,61,61,,,,,61,61,,,61,382,382,382,,382,61,61,,382,382,,,,382,,382", "382,382,382,382,382,382,,,,,,382,382,382,382,382,382,382,,,382,,,,,", ",382,,,382,382,382,382,382,382,382,,382,382,382,,382,382,,382,382,,", ",,,,,,,,,,,,,,,,,,382,,,382,,,382,,382,,,,,,382,,,,,,,,382,,,,,382,382", "382,382,382,382,,,,382,382,,,,,,,382,,,382,63,63,63,,63,382,382,,63", "63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,", "63,,,63,63,63,63,63,63,63,,63,63,63,,63,63,,603,,603,603,603,603,603", ",,,,,,,,603,,,,63,,,63,,,63,,,63,,63,,,,,,,,603,603,,,,,,603,603,603", "603,63,63,63,63,63,63,,,,63,63,,,,,,,63,,,63,795,795,795,,795,63,63", ",795,795,,,,795,603,795,795,795,795,795,795,795,,,,,,795,795,795,795", "795,795,795,,,795,,,,,,,795,,,795,795,795,795,795,795,795,,795,795,795", ",795,795,,795,795,,,,,,,,,,,,,,,,,,,,,795,,,795,,,795,,795,,,,,,795", ",,,,,,,795,,,,,795,795,795,795,795,795,,,,795,795,,,,,,,795,,,795,794", "794,794,,794,795,795,,794,794,,,,794,,794,794,794,794,794,794,794,,", ",,,794,794,794,794,794,794,794,,,794,,,,,,,794,,,794,794,794,794,794", "794,794,,794,794,794,,794,794,,794,794,,,,,,,,,,,,,,,,,,,,,794,,,794", ",,794,,794,,,,,,794,,,,,,,,794,,,,,794,794,794,794,794,794,,,,794,794", ",,,,,,794,,,794,783,783,783,,783,794,794,,783,783,,,,783,,783,783,783", "783,783,783,783,,,,,,783,783,783,783,783,783,783,,,783,,,,,,,783,,,783", "783,783,783,783,783,783,,783,783,783,,783,783,,783,783,,,,,,,,,,,,,", ",,,,,,,783,,,783,,,783,,783,,,,,,783,,,,,,,,783,,,,,783,783,783,783", "783,783,,,,783,783,,,,,,,783,,,783,782,782,782,,782,783,783,,782,782", ",,,782,,782,782,782,782,782,782,782,,,,,,782,782,782,782,782,782,782", ",,782,,,,,,,782,,,782,782,782,782,782,782,782,,782,782,782,,782,782", ",782,782,,,,,,,,,,,,,,,,,,,,,782,,,782,,,782,,782,,,,,,782,,,,,,,,782", ",,,,782,782,782,782,782,782,,,,782,782,,,,,,,782,,,782,781,781,781,", "781,782,782,,781,781,,,,781,,781,781,781,781,781,781,781,,,,,,781,781", "781,781,781,781,781,,,781,,,,,,,781,,,781,781,781,781,781,781,781,,781", "781,781,,781,781,,781,781,,,,,,,,,,,,,,,,,,,,,781,,,781,,,781,,781,", ",,,,781,,,,,,,,781,,,,,781,781,781,781,781,781,,,,781,781,,,,,,,781", ",,781,775,775,775,775,775,781,781,,775,775,,,,775,,775,775,775,775,775", "775,775,,,,,,775,775,775,775,775,775,775,,,775,,,,,,775,775,,775,775", "775,775,775,775,775,775,,775,775,775,,775,775,,775,775,,,,,,,,,,,,,", ",,,,,,,775,,,775,,,775,,775,,775,,,,775,,,,,,,,775,,,,,775,775,775,775", "775,775,,,,775,775,,,,,,,775,,,775,84,84,84,,84,775,775,,84,84,,,,84", ",84,84,84,84,84,84,84,,84,,,,84,84,84,84,84,84,84,,,84,,,,,,,84,,,84", "84,84,84,84,84,84,84,84,84,84,,84,84,,84,84,,,,,,,,,,,,,,,,,,,,,84,", ",84,84,,84,,84,,84,,84,,84,,,,,,,,84,,84,,,84,84,84,84,84,84,,,,84,84", ",,,,,,84,,,84,87,87,87,,87,84,84,,87,87,,,,87,,87,87,87,87,87,87,87", ",87,,,,87,87,87,87,87,87,87,,,87,,,,,,,87,,,87,87,87,87,87,87,87,87", "87,87,87,,87,87,,87,87,,,,,,,,,,,,,,,,,,,,,87,,,87,87,,87,,87,,87,,87", ",87,,,,,,,,87,,87,,,87,87,87,87,87,87,,,,87,87,,,,,,,87,,,87,761,761", "761,,761,87,87,,761,761,,,,761,,761,761,761,761,761,761,761,,,,,,761", "761,761,761,761,761,761,,,761,,,,,,,761,,,761,761,761,761,761,761,761", ",761,761,761,,761,761,,761,761,,,,,,,,,,,,,,,,,,,,,761,,,761,,,761,", "761,,,,,,761,,,,,,,,761,,,,,761,761,761,761,761,761,,,,761,761,,,,,", ",761,,,761,99,99,99,99,99,761,761,,99,99,,,,99,,99,99,99,99,99,99,99", ",,,,,99,99,99,99,99,99,99,,,99,,,,,,99,99,99,99,99,99,99,99,99,99,99", ",99,99,99,,99,99,,99,99,,,,,,,,,,,,,,,,,,,,,99,,,99,,,99,,99,,99,,,", "99,,,,,,,,99,,,,,99,99,99,99,99,99,,,,99,99,,,,,,99,99,,,99,103,103", "103,,103,99,99,,103,103,,,,103,,103,103,103,103,103,103,103,,,,,,103", "103,103,103,103,103,103,,,103,,,,,,,103,,,103,103,103,103,103,103,103", ",103,103,103,,103,103,,103,103,,,,,,,,,,,,,,,,,,,,,103,,,103,,,103,", "103,,,,,,103,,,,,,,,103,,,,,103,103,103,103,103,103,,,,103,103,,,,,", ",103,,,103,104,104,104,,104,103,103,,104,104,,,,104,,104,104,104,104", "104,104,104,,,,,,104,104,104,104,104,104,104,,,104,,,,,,,104,,,104,104", "104,104,104,104,104,,104,104,104,,104,104,,104,104,,,,,,,,,,,,,,,,,", ",,,104,,,104,,,104,,104,,,,,,104,,,,,,,,104,,,,,104,104,104,104,104", "104,,,,104,104,,,,,,,104,,,104,105,105,105,,105,104,104,,105,105,,,", "105,,105,105,105,105,105,105,105,,,,,,105,105,105,105,105,105,105,,", "105,,,,,,,105,,,105,105,105,105,105,105,105,,105,105,105,,105,105,,105", "105,,,,,,,,,,,,,,,,,,,,,105,,,105,,,105,,105,,,,,,105,,,,,,,,105,,,", ",105,105,105,105,105,105,,,,105,105,,,,,,,105,,,105,106,106,106,,106", "105,105,,106,106,,,,106,,106,106,106,106,106,106,106,,,,,,106,106,106", "106,106,106,106,,,106,,,,,,,106,,,106,106,106,106,106,106,106,,106,106", "106,,106,106,,106,106,,,,,,,,,,,,,,,,,,,,,106,,,106,,,106,,106,,,,,", "106,,,,,,,,106,,,,,106,106,106,106,106,106,,,,106,106,,,,,,,106,,,106", "107,107,107,107,107,106,106,,107,107,,,,107,,107,107,107,107,107,107", "107,,,,,,107,107,107,107,107,107,107,,,107,,,,,,107,107,,107,107,107", "107,107,107,107,107,,107,107,107,,107,107,,107,107,,,,,,,,,,,,,,,,,", ",,,107,,,107,,,107,,107,,107,,,,107,,,,,,,,107,,,,,107,107,107,107,107", "107,,,,107,107,,,,,,,107,,,107,108,108,108,108,108,107,107,,108,108", ",,,108,,108,108,108,108,108,108,108,,,,,,108,108,108,108,108,108,108", ",,108,,,,,,108,108,108,108,108,108,108,108,108,108,108,,108,108,108", ",108,108,,108,108,,,,,,,,,,,,,,,,,,,,,108,,,108,,,108,,108,,108,,,,108", ",,,,,,,108,,,,,108,108,108,108,108,108,,,,108,108,,,,,,,108,,,108,754", "754,754,754,754,108,108,,754,754,,,,754,,754,754,754,754,754,754,754", ",,,,,754,754,754,754,754,754,754,,,754,,,,,,754,754,,754,754,754,754", "754,754,754,754,,754,754,754,,754,754,,754,754,,,,,,,,,,,,,,,,,,,,,754", ",,754,,,754,,754,,754,,,,754,,,,,,,,754,,,,,754,754,754,754,754,754", ",,,754,754,,,,,,,754,,,754,753,753,753,753,753,754,754,,753,753,,,,753", ",753,753,753,753,753,753,753,,,,,,753,753,753,753,753,753,753,,,753", ",,,,,753,753,,753,753,753,753,753,753,753,753,,753,753,753,,753,753", ",753,753,,,,,,,,,,,,,,,,,,,,,753,,,753,,,753,,753,,753,,,,753,,,,,,", ",753,,,,,753,753,753,753,753,753,,,,753,753,,,,,,,753,,,753,749,749", "749,749,749,753,753,,749,749,,,,749,,749,749,749,749,749,749,749,,,", ",,749,749,749,749,749,749,749,,,749,,,,,,749,749,,749,749,749,749,749", "749,749,749,,749,749,749,,749,749,,749,749,,,,,,,,,,,,,,,,,,,,,749,", ",749,,,749,,749,,749,,,,749,,,,,,,,749,,,,,749,749,749,749,749,749,", ",,749,749,,,,,,,749,,,749,195,195,195,195,195,749,749,,195,195,,,,195", ",195,195,195,195,195,195,195,,,,,,195,195,195,195,195,195,195,,,195", ",,,,,195,195,,195,195,195,195,195,195,195,195,,195,195,195,,195,195", ",195,195,,,,,,,,,,,,,,,,,,,,,195,,,195,,,195,,195,,195,,,,195,,,,,,", ",195,,,,,195,195,195,195,195,195,,,,195,195,,,,,,,195,,,195,196,196", "196,,196,195,195,,196,196,,,,196,,196,196,196,196,196,196,196,,,,,,196", "196,196,196,196,196,196,,,196,,,,,,,196,,,196,196,196,196,196,196,196", ",196,196,196,,196,196,,196,196,,,,,,,,,,,,,,,,,,,,,196,,,196,,,196,", "196,,196,,,,196,,,,,,,,196,,,,,196,196,196,196,196,196,,,,196,196,,", ",,,,196,,,196,197,197,197,,197,196,196,,197,197,,,,197,,197,197,197", "197,197,197,197,,,,,,197,197,197,197,197,197,197,,,197,,,,,,,197,,,197", "197,197,197,197,197,197,,197,197,197,,197,197,,197,197,,,,,,,,,,,,,", ",,,,,,,197,,,197,,,197,,197,,197,,,,197,,,,,,,,197,,,,,197,197,197,197", "197,197,,,,197,197,,,,,,,197,,,197,198,198,198,,198,197,197,,198,198", ",,,198,,198,198,198,198,198,198,198,,,,,,198,198,198,198,198,198,198", ",,198,,,,,,,198,,,198,198,198,198,198,198,198,,198,198,198,,198,198", ",198,198,,,,,,,,,,,,,,,,,,,,,198,,,198,,,198,,198,,,,,,198,,,,,,,,198", ",,,,198,198,198,198,198,198,,,,198,198,,,,,,,198,,,198,199,199,199,", "199,198,198,,199,199,,,,199,,199,199,199,199,199,199,199,,,,,,199,199", "199,199,199,199,199,,,199,,,,,,,199,,,199,199,199,199,199,199,199,199", "199,199,199,,199,199,,199,199,,,,,,,,,,,,,,,,,,,,,199,,,199,,,199,,199", ",199,,,,199,,,,,,,,199,,,,,199,199,199,199,199,199,,,,199,199,,,,,,", "199,,,199,200,200,200,,200,199,199,,200,200,,,,200,,200,200,200,200", "200,200,200,,,,,,200,200,200,200,200,200,200,,,200,,,,,,,200,,,200,200", "200,200,200,200,200,200,200,200,200,,200,200,,200,200,,,,,,,,,,,,,,", ",,,,,,200,,,200,,,200,,200,,200,,,,200,,,,,,,,200,,,,,200,200,200,200", "200,200,,,,200,200,,,,,,,200,,,200,744,744,744,,744,200,200,,744,744", ",,,744,,744,744,744,744,744,744,744,,,,,,744,744,744,744,744,744,744", ",,744,,,,,,,744,,,744,744,744,744,744,744,744,,744,744,744,,744,744", ",744,744,,,,,,,,,,,,,,,,,,,,,744,,,744,,,744,,744,,,,,,744,,,,,,,,744", ",,,,744,744,744,744,744,744,,,,744,744,,,,,,,744,,,744,737,737,737,", "737,744,744,,737,737,,,,737,,737,737,737,737,737,737,737,,,,,,737,737", "737,737,737,737,737,,,737,,,,,,,737,,,737,737,737,737,737,737,737,,737", "737,737,,737,737,,737,737,,,,,,,,,,,,,,,,,,,,,737,,,737,,,737,,737,", "737,,,,737,,,,,,,,737,,,,,737,737,737,737,737,737,,,,737,737,,,,,,,737", ",,737,705,705,705,,705,737,737,,705,705,,,,705,,705,705,705,705,705", "705,705,,,,,,705,705,705,705,705,705,705,,,705,,,,,,,705,,,705,705,705", "705,705,705,705,,705,705,705,,705,705,,705,705,,,,,,,,,,,,,,,,,,,,,705", ",,705,,,705,,705,,705,,,,705,,,,,,,,705,,,,,705,705,705,705,705,705", ",,,705,705,,,,,,,705,,,705,204,204,204,,204,705,705,,204,204,,,,204", ",204,204,204,204,204,204,204,,,,,,204,204,204,204,204,204,204,,,204", ",,,,,,204,,,204,204,204,204,204,204,204,,204,204,204,,204,204,,204,204", ",,,,,,,,,,,,,,,,,,,,204,,,204,,,204,,204,,,,,,204,,,,,,,,204,,,,,204", "204,204,204,204,204,,,,204,204,,,,,,,204,,,204,205,205,205,,205,204", "204,,205,205,,,,205,,205,205,205,205,205,205,205,,,,,,205,205,205,205", "205,205,205,,,205,,,,,,,205,,,205,205,205,205,205,205,205,,205,205,205", ",205,205,,205,205,,,,,,,,,,,,,,,,,,,,,205,,,205,,,205,,205,,,,,,205", ",,,,,,,205,,,,,205,205,205,205,205,205,,,,205,205,,,,,,,205,,,205,206", "206,206,,206,205,205,,206,206,,,,206,,206,206,206,206,206,206,206,,", ",,,206,206,206,206,206,206,206,,,206,,,,,,,206,,,206,206,206,206,206", "206,206,,206,206,206,,206,206,,206,206,,,,,,,,,,,,,,,,,,,,,206,,,206", ",,206,,206,,,,,,206,,,,,,,,206,,,,,206,206,206,206,206,206,,,,206,206", ",,,,,,206,,,206,699,699,699,,699,206,206,,699,699,,,,699,,699,699,699", "699,699,699,699,,,,,,699,699,699,699,699,699,699,,,699,,,,,,,699,,,699", "699,699,699,699,699,699,,699,699,699,,699,699,,863,,863,863,863,863", "863,,,,,,,,,863,,,,,,,699,,,699,,,699,,699,,,,,,,,863,,,,,,,863,863", "863,863,699,699,699,699,699,699,,,,699,699,,,,,,,699,,,699,686,686,686", ",686,699,699,,686,686,,,,686,863,686,686,686,686,686,686,686,,,,,,686", "686,686,686,686,686,686,,,686,,,,,,,686,,,686,686,686,686,686,686,686", ",686,686,686,,686,686,,,,,,,,,,,,,,,,,,,,,,,,686,,,686,,,686,,686,,", ",,,,,,,,,,,,,,,,686,686,686,686,686,686,,,,686,686,,,,,,,686,,,686,682", "682,682,682,682,686,686,,682,682,,,,682,,682,682,682,682,682,682,682", ",,,,,682,682,682,682,682,682,682,,,682,,,,,,682,682,,682,682,682,682", "682,682,682,682,,682,682,682,,682,682,,682,682,,,,,,,,,,,,,,,,,,,,,682", ",,682,,,682,,682,,682,,,,682,,,,,,,,682,,,,,682,682,682,682,682,682", ",,,682,682,,,,,,,682,,,682,681,681,681,681,681,682,682,,681,681,,,,681", ",681,681,681,681,681,681,681,,,,,,681,681,681,681,681,681,681,,,681", ",,,,,681,681,,681,681,681,681,681,681,681,681,,681,681,681,,681,681", ",681,681,,,,,,,,,,,,,,,,,,,,,681,,,681,,,681,,681,,681,,,,681,,,,,,", ",681,,,,,681,681,681,681,681,681,,,,681,681,,,,,,,681,,,681,675,675", "675,,675,681,681,,675,675,,,,675,,675,675,675,675,675,675,675,,,,,,675", "675,675,675,675,675,675,,,675,,,,,,,675,,,675,675,675,675,675,675,675", "675,675,675,675,,675,675,,675,675,,,,,,,,,,,,,,,,,,,,,675,,,675,,,675", ",675,,,,675,,675,,,,,,,,675,,,,,675,675,675,675,675,675,,,,675,675,", ",,,,,675,,,675,674,674,674,,674,675,675,,674,674,,,,674,,674,674,674", "674,674,674,674,,,,,,674,674,674,674,674,674,674,,,674,,,,,,,674,,,674", "674,674,674,674,674,674,674,674,674,674,,674,674,,674,674,,,,,,,,,,", ",,,,,,,,,,674,,,674,,,674,,674,,674,,674,,674,,,,,,,,674,,,,,674,674", "674,674,674,674,,,,674,674,,,,,,,674,,,674,214,214,214,214,214,674,674", ",214,214,,,,214,,214,214,214,214,214,214,214,,,,,,214,214,214,214,214", "214,214,,,214,,,,,,214,214,,214,214,214,214,214,214,214,214,,214,214", "214,,214,214,,214,214,,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,,214,,214", ",,,214,,,,,,,,214,,,,,214,214,214,214,214,214,,,,214,214,,,,,,,214,", ",214,215,215,215,,215,214,214,,215,215,,,,215,,215,215,215,215,215,215", "215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,,215,,,215,215,215,215", "215,215,215,,215,215,215,,215,215,,215,215,,,,,,,,,,,,,,,,,,,,,215,", ",215,,215,215,,215,,,,,,215,,,,,,,,215,,,,,215,215,215,215,215,215,", ",,215,215,,,,,,,215,,,215,218,218,218,,218,215,215,,218,218,,,,218,", "218,218,218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,", ",,,,,218,,,218,218,218,218,218,218,218,,218,218,218,,218,218,,218,218", ",,,,,,,,,,,,,,,,,,,,218,,,218,,,218,,218,,,,,,218,,,,,,,,218,,,,,218", "218,218,218,218,218,,,,218,218,,,,,,,218,,,218,671,671,671,671,671,218", "218,,671,671,,,,671,,671,671,671,671,671,671,671,,,,,,671,671,671,671", "671,671,671,,,671,,,,,,671,671,,671,671,671,671,671,671,671,671,,671", "671,671,,671,671,,671,671,,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,,671,", "671,,,,671,,,,,,,,671,,,,,671,671,671,671,671,671,,,,671,671,,,,,,,671", ",,671,220,220,220,,220,671,671,,220,220,,,,220,,220,220,220,220,220", "220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220,220", "220,220,220,220,,220,220,220,,220,220,,220,220,,,,,,,,,,,,,,,,,,,,,220", ",,220,,,220,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,", "220,220,,,,,,,220,,,220,221,221,221,,221,220,220,,221,221,,,,221,,221", "221,221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,", ",221,,,221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,,", ",,,,,,,,,,,,,,,,,,221,,,221,,,221,,221,,,,,,221,,,,,,,,221,,,,,221,221", "221,221,221,221,,,,221,221,,,,,,,221,,,221,222,222,222,,222,221,221", ",222,222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222", "222,222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,,222,222,222,", "222,222,,222,222,,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,,222,,,,,,222,", ",,,,,,222,,,,,222,222,222,222,222,222,,,,222,222,,,,,,,222,,,222,223", "223,223,,223,222,222,,223,223,,,,223,,223,223,223,223,223,223,223,,", ",,,223,223,223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223", "223,223,,223,223,223,,223,223,,223,223,,,,,,,,,,,,,,,,,,,,,223,,,223", ",,223,,223,,,,,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223", ",,,,,,223,,,223,224,224,224,,224,223,223,,224,224,,,,224,,224,224,224", "224,224,224,224,,,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224", "224,224,224,224,224,224,,224,224,224,,224,224,,224,224,,,,,,,,,,,,,", ",,,,,,,224,,,224,,,224,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224", "224,224,,,,224,224,,,,,,,224,,,224,225,225,225,,225,224,224,,225,225", ",,,225,,225,225,225,225,225,225,225,,,,,,225,225,225,225,225,225,225", ",,225,,,,,,,225,,,225,225,225,225,225,225,225,,225,225,225,,225,225", ",225,225,,,,,,,,,,,,,,,,,,,,,225,,,225,,,225,,225,,,,,,225,,,,,,,,225", ",,,,225,225,225,225,225,225,,,,225,225,,,,,,,225,,,225,226,226,226,", "226,225,225,,226,226,,,,226,,226,226,226,226,226,226,226,,,,,,226,226", "226,226,226,226,226,,,226,,,,,,,226,,,226,226,226,226,226,226,226,,226", "226,226,,226,226,,226,226,,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,,226,", ",,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226,,,,,,,226", ",,226,227,227,227,,227,226,226,,227,227,,,,227,,227,227,227,227,227", "227,227,,,,,,227,227,227,227,227,227,227,,,227,,,,,,,227,,,227,227,227", "227,227,227,227,,227,227,227,,227,227,,227,227,,,,,,,,,,,,,,,,,,,,,227", ",,227,,,227,,227,,,,,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,", "227,227,,,,,,,227,,,227,228,228,228,,228,227,227,,228,228,,,,228,,228", "228,228,228,228,228,228,,,,,,228,228,228,228,228,228,228,,,228,,,,,", ",228,,,228,228,228,228,228,228,228,,228,228,228,,228,228,,228,228,,", ",,,,,,,,,,,,,,,,,,228,,,228,,,228,,228,,,,,,228,,,,,,,,228,,,,,228,228", "228,228,228,228,,,,228,228,,,,,,,228,,,228,229,229,229,,229,228,228", ",229,229,,,,229,,229,229,229,229,229,229,229,,,,,,229,229,229,229,229", "229,229,,,229,,,,,,,229,,,229,229,229,229,229,229,229,,229,229,229,", "229,229,,229,229,,,,,,,,,,,,,,,,,,,,,229,,,229,,,229,,229,,,,,,229,", ",,,,,,229,,,,,229,229,229,229,229,229,,,,229,229,,,,,,,229,,,229,230", "230,230,,230,229,229,,230,230,,,,230,,230,230,230,230,230,230,230,,", ",,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230", "230,230,,230,230,230,,230,230,,230,230,,,,,,,,,,,,,,,,,,,,,230,,,230", ",,230,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230", ",,,,,,230,,,230,231,231,231,,231,230,230,,231,231,,,,231,,231,231,231", "231,231,231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,,,231,,,231", "231,231,231,231,231,231,,231,231,231,,231,231,,231,231,,,,,,,,,,,,,", ",,,,,,,231,,,231,,,231,,231,,,,,,231,,,,,,,,231,,,,,231,231,231,231", "231,231,,,,231,231,,,,,,,231,,,231,232,232,232,,232,231,231,,232,232", ",,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232,232,232,232", ",,232,,,,,,,232,,,232,232,232,232,232,232,232,,232,232,232,,232,232", ",232,232,,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,,232,,,,,,232,,,,,,,,232", ",,,,232,232,232,232,232,232,,,,232,232,,,,,,,232,,,232,233,233,233,", "233,232,232,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233", "233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,,233", "233,233,,233,233,,233,233,,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,,233,", ",,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233", ",,233,234,234,234,,234,233,233,,234,234,,,,234,,234,234,234,234,234", "234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234", "234,234,234,234,,234,234,234,,234,234,,234,234,,,,,,,,,,,,,,,,,,,,,234", ",,234,,,234,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,", "234,234,,,,,,,234,,,234,235,235,235,,235,234,234,,235,235,,,,235,,235", "235,235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,", ",235,,,235,235,235,235,235,235,235,,235,235,235,,235,235,,235,235,,", ",,,,,,,,,,,,,,,,,,235,,,235,,,235,,235,,,,,,235,,,,,,,,235,,,,,235,235", "235,235,235,235,,,,235,235,,,,,,,235,,,235,236,236,236,,236,235,235", ",236,236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236,236", "236,236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,,236,236,236,", "236,236,,236,236,,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,,236,,,,,,236,", ",,,,,,236,,,,,236,236,236,236,236,236,,,,236,236,,,,,,,236,,,236,237", "237,237,,237,236,236,,237,237,,,,237,,237,237,237,237,237,237,237,,", ",,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237", "237,237,,237,237,237,,237,237,,237,237,,,,,,,,,,,,,,,,,,,,,237,,,237", ",,237,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237", ",,,,,,237,,,237,238,238,238,,238,237,237,,238,238,,,,238,,238,238,238", "238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238", "238,238,238,238,238,238,,238,238,238,,238,238,,238,238,,,,,,,,,,,,,", ",,,,,,,238,,,238,,,238,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238", "238,238,,,,238,238,,,,,,,238,,,238,239,239,239,,239,238,238,,239,239", ",,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239", ",,239,,,,,,,239,,,239,239,239,239,239,239,239,,239,239,239,,239,239", ",239,239,,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,,239,,,,,,239,,,,,,,,239", ",,,,239,239,239,239,239,239,,,,239,239,,,,,,,239,,,239,240,240,240,", "240,239,239,,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240", "240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,,240", "240,240,,240,240,,240,240,,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,,240,", ",,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,,,,,240", ",,240,241,241,241,,241,240,240,,241,241,,,,241,,241,241,241,241,241", "241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241", "241,241,241,241,,241,241,241,,241,241,,241,241,,,,,,,,,,,,,,,,,,,,,241", ",,241,,,241,,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,241,241,,,", "241,241,,,,,,,241,,,241,242,242,242,,242,241,241,,242,242,,,,242,,242", "242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,", ",242,,,242,242,242,242,242,242,242,,242,242,242,,242,242,,242,242,,", ",,,,,,,,,,,,,,,,,,242,,,242,,,242,,242,,,,,,242,,,,,,,,242,,,,,242,242", "242,242,242,242,,,,242,242,,,,,,,242,,,242,243,243,243,,243,242,242", ",243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243", "243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,,243,243,243,", "243,243,,243,243,,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,,243,,,,,,243,", ",,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,,,,,,,243,,,243,244", "244,244,,244,243,243,,244,244,,,,244,,244,244,244,244,244,244,244,,", ",,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244", "244,244,,244,244,244,,244,244,,244,244,,,,,,,,,,,,,,,,,,,,,244,,,244", ",,244,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244,244", ",,,,,,244,,,244,664,664,664,,664,244,244,,664,664,,,,664,,664,664,664", "664,664,664,664,,,,,,664,664,664,664,664,664,664,,,664,,,,,,,664,,,664", "664,664,664,664,664,664,,664,664,664,,664,664,,664,664,,,,,,,,,,,,,", ",,,,,,,664,,,664,,,664,,664,,,,,,664,,,,,,,,664,,,,,664,664,664,664", "664,664,,,,664,664,,,,,,,664,,,664,661,661,661,,661,664,664,,661,661", ",,,661,,661,661,661,661,661,661,661,,,,,,661,661,661,661,661,661,661", ",,661,,,,,,,661,,,661,661,661,661,661,661,661,,661,661,661,,661,661", ",661,661,,,,,,,,,,,,,,,,,,,,,661,,,661,,,661,,661,,,,,,661,,,,,,,,661", ",,,,661,661,661,661,661,661,,,,661,661,,,,,,,661,,,661,657,657,657,657", "657,661,661,,657,657,,,,657,,657,657,657,657,657,657,657,,,,,,657,657", "657,657,657,657,657,,,657,,,,,,657,657,,657,657,657,657,657,657,657", "657,,657,657,657,,657,657,,657,657,,,,,,,,,,,,,,,,,,,,,657,,,657,,,657", ",657,,657,,,,657,,,,,,,,657,,,,,657,657,657,657,657,657,,,,657,657,", ",,,,,657,,,657,254,254,254,,254,657,657,,254,254,,,,254,,254,254,254", "254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254", "254,254,254,254,254,254,,254,254,254,,254,254,,254,254,,,,,,,,,,,,,", ",,,,,,,254,,,254,,,254,,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254", "254,254,,,,254,254,,,,,,,254,,,254,256,256,256,,256,254,254,,256,256", ",,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256", ",,256,,,,,,,256,,,256,256,256,256,256,256,256,,256,256,256,,256,256", ",256,256,,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,,256,,,,,,256,,,,,,,,256", ",,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,262,262,262,", "262,256,256,,262,262,,,,262,,262,262,262,262,262,262,262,,,,,,262,262", "262,262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262,,262", "262,262,,262,262,,262,262,,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,,262,", ",,,,262,,,,,,,,262,,,,,262,262,262,262,262,262,,,,262,262,,,,,,,262", ",,262,642,642,642,,642,262,262,,642,642,,,,642,,642,642,642,642,642", "642,642,,,,,,642,642,642,642,642,642,642,,,642,,,,,,,642,,,642,642,642", "642,642,642,642,,642,642,642,,642,642,,642,642,,,,,,,,,,,,,,,,,,,,,642", ",,642,,,642,,642,,,,,,642,,,,,,,,642,,,,,642,642,642,642,642,642,,,", "642,642,,,,,,,642,,,642,639,639,639,,639,642,642,,639,639,,,,639,,639", "639,639,639,639,639,639,,,,,,639,639,639,639,639,639,639,,,639,,,,,", ",639,,,639,639,639,639,639,639,639,,639,639,639,,639,639,,639,639,,", ",,,,,,,,,,,,,,,,,,639,,,639,,,639,,639,,,,,,639,,,,,,,,639,,,,,639,639", "639,639,639,639,,,,639,639,,,,,,,639,,,639,634,634,634,,634,639,639", ",634,634,,,,634,,634,634,634,634,634,634,634,,,,,,634,634,634,634,634", "634,634,,,634,,,,,,,634,,,634,634,634,634,634,634,634,,634,634,634,", "634,634,,634,634,,,,,,,,,,,,,,,,,,,,,634,,,634,,,634,,634,,,,,,634,", ",,,,,,634,,,,,634,634,634,634,634,634,,,,634,634,,,,,,,634,,,634,269", "269,269,,269,634,634,,269,269,,,,269,,269,269,269,269,269,269,269,,", ",,,269,269,269,269,269,269,269,,,269,,,,,,,269,,,269,269,269,269,269", "269,269,269,269,269,269,,269,269,,269,269,,,,,,,,,,,,,,,,,,,,,269,,", "269,,,269,,269,,269,,269,,269,,,,,,,,269,,,,,269,269,269,269,269,269", ",,,269,269,,,,,,,269,,,269,270,270,270,,270,269,269,,270,270,,,,270", ",270,270,270,270,270,270,270,,,,,,270,270,270,270,270,270,270,,,270", ",,,,,,270,,,270,270,270,270,270,270,270,270,270,270,270,,270,270,,270", "270,,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,,270,,270,,270,,270,,,,,,,,270", ",,,,270,270,270,270,270,270,,,,270,270,,,,,,,270,,,270,278,278,278,", "278,270,270,,278,278,,,,278,,278,278,278,278,278,278,278,,,,,,278,278", "278,278,278,278,278,,,278,,,,,,,278,,,278,278,278,278,278,278,278,278", "278,278,278,,278,278,,278,278,,,,,,,,,,,,,,,,,,,,,278,,,278,,278,278", ",278,,278,,278,,278,,,,,,,,278,,,,,278,278,278,278,278,278,,,,278,278", ",,,,,,278,,,278,633,633,633,,633,278,278,,633,633,,,,633,,633,633,633", "633,633,633,633,,,,,,633,633,633,633,633,633,633,,,633,,,,,,,633,,,633", "633,633,633,633,633,633,,633,633,633,,633,633,,633,633,,,,,,,,,,,,,", ",,,,,,,633,,,633,,,633,,633,,,,,,633,,,,,,,,633,,,,,633,633,633,633", "633,633,,,,633,633,,,,,,,633,,,633,630,630,630,,630,633,633,,630,630", ",,,630,,630,630,630,630,630,630,630,,,,,,630,630,630,630,630,630,630", ",,630,,,,,,,630,,,630,630,630,630,630,630,630,,630,630,630,,630,630", ",630,630,,,,,,,,,,,,,,,,,,,,,630,,,630,,,630,,630,,630,,,,630,,,,,,", ",630,,,,,630,630,630,630,630,630,,,,630,630,,,,,,,630,,,630,628,628", "628,,628,630,630,,628,628,,,,628,,628,628,628,628,628,628,628,,,,,,628", "628,628,628,628,628,628,,,628,,,,,,,628,,,628,628,628,628,628,628,628", ",628,628,628,,628,628,,628,628,,,,,,,,,,,,,,,,,,,,,628,,,628,,,628,", "628,,,,,,628,,,,,,,,628,,,,,628,628,628,628,628,628,,,,628,628,,,,,", ",628,,,628,282,282,282,282,282,628,628,,282,282,,,,282,,282,282,282", "282,282,282,282,,,,,,282,282,282,282,282,282,282,,,282,,,,,,282,282", ",282,282,282,282,282,282,282,282,,282,282,282,,282,282,,282,282,,,,", ",,,,,,,,,,,,,,,,282,,,282,,,282,,282,,282,,,,282,,,,,,,,282,,,,,282", "282,282,282,282,282,,,,282,282,,,,,,,282,,,282,601,601,601,,601,282", "282,,601,601,,,,601,,601,601,601,601,601,601,601,,,,,,601,601,601,601", "601,601,601,,,601,,,,,,,601,,,601,601,601,601,601,601,601,,601,601,601", ",601,601,,601,601,,,,,,,,,,,,,,,,,,,,,601,,,601,,,601,,601,,,,,,601", ",,,,,,,601,,,,,601,601,601,601,601,601,,,,601,601,,,,,,,601,,,601,599", "599,599,,599,601,601,,599,599,,,,599,,599,599,599,599,599,599,599,,", ",,,599,599,599,599,599,599,599,,,599,,,,,,,599,,,599,599,599,599,599", "599,599,,599,599,599,,599,599,,599,599,,,,,,,,,,,,,,,,,,,,,599,,,599", ",,599,,599,,,,,,599,,,,,,,,599,,,,,599,599,599,599,599,599,,,,599,599", ",,,,,,599,,,599,595,595,595,,595,599,599,,595,595,,,,595,,595,595,595", "595,595,595,595,,,,,,595,595,595,595,595,595,595,,,595,,,,,,,595,,,595", "595,595,595,595,595,595,595,595,595,595,,595,595,,595,595,,,,,,,,,,", ",,,,,,,,,,595,,,595,,,595,,595,,595,,,,595,,,,,,,,595,,,,,595,595,595", "595,595,595,,,,595,595,,,,,,,595,,,595,286,286,286,,286,595,595,,286", "286,,,,286,,286,286,286,286,286,286,286,,,,,,286,286,286,286,286,286", "286,,,286,,,,,,,286,,,286,286,286,286,286,286,286,,286,286,286,,286", "286,,,,,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,,286,,,,,,,,,,,,,,,,,,,286", "286,286,286,286,286,,,,286,286,,,,286,,,286,,,286,287,287,287,287,287", "286,286,,287,287,,,,287,,287,287,287,287,287,287,287,,,,,,287,287,287", "287,287,287,287,,,287,,,,,,287,287,,287,287,287,287,287,287,287,287", ",287,287,287,,287,287,,287,287,,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,", "287,,287,,,,287,,,,,,,,287,,,,,287,287,287,287,287,287,,,,287,287,,", ",,,,287,,,287,589,589,589,,589,287,287,,589,589,,,,589,,589,589,589", "589,589,589,589,,,,,,589,589,589,589,589,589,589,,,589,,,,,,,589,,,589", "589,589,589,589,589,589,589,589,589,589,,589,589,,589,589,,,,,,,,,,", ",,,,,,,,,,589,,,589,,,589,,589,,589,,,,589,,,,,,,,589,,,,,589,589,589", "589,589,589,,,,589,589,,,,,,,589,,,589,586,586,586,,586,589,589,,586", "586,,,,586,,586,586,586,586,586,586,586,,,,,,586,586,586,586,586,586", "586,,,586,,,,,,,586,,,586,586,586,586,586,586,586,586,586,586,586,,586", "586,,586,586,,,,,,,,,,,,,,,,,,,,,586,,,586,,,586,,586,,586,,,,586,,", ",,,,,586,,,,,586,586,586,586,586,586,,,,586,586,,,,,,,586,,,586,584", "584,584,584,584,586,586,,584,584,,,,584,,584,584,584,584,584,584,584", ",,,,,584,584,584,584,584,584,584,,,584,,,,,,584,584,,584,584,584,584", "584,584,584,584,,584,584,584,,584,584,,584,584,,,,,,,,,,,,,,,,,,,,,584", ",,584,,,584,,584,,584,,,,584,,,,,,,,584,,,,,584,584,584,584,584,584", ",,,584,584,,,,,,,584,,,584,579,579,579,579,579,584,584,,579,579,,,,579", ",579,579,579,579,579,579,579,,,,,,579,579,579,579,579,579,579,,,579", ",,,,,579,579,,579,579,579,579,579,579,579,579,,579,579,579,,579,579", ",579,579,,,,,,,,,,,,,,,,,,,,,579,,,579,,,579,,579,,579,,,,579,,,,,,", ",579,,,,,579,579,579,579,579,579,,,,579,579,,,,,,,579,,,579,575,575", "575,575,575,579,579,,575,575,,,,575,,575,575,575,575,575,575,575,,,", ",,575,575,575,575,575,575,575,,,575,,,,,,575,575,,575,575,575,575,575", "575,575,575,,575,575,575,,575,575,,575,575,,,,,,,,,,,,,,,,,,,,,575,", ",575,,,575,,575,,575,,,,575,,,,,,,,575,,,,,575,575,575,575,575,575,", ",,575,575,,,,,,,575,,,575,561,561,561,,561,575,575,,561,561,,,,561,", "561,561,561,561,561,561,561,,,,,,561,561,561,561,561,561,561,,,561,", ",,,,,561,,,561,561,561,561,561,561,561,,561,561,561,,561,561,,,,,,,", ",,,,,,,,,,,,,,,,561,,,561,,,561,,561,,,,,,,,,,,,,,,,,,,561,561,561,561", "561,561,,,,561,561,,,,,,,561,,,561,555,555,555,555,555,561,561,,555", "555,,,,555,,555,555,555,555,555,555,555,,,,,,555,555,555,555,555,555", "555,,,555,,,,,,555,555,,555,555,555,555,555,555,555,555,,555,555,555", ",555,555,,555,555,,,,,,,,,,,,,,,,,,,,,555,,,555,,,555,,555,,555,,,,555", ",,,,,,,555,,,,,555,555,555,555,555,555,,,,555,555,,,,,,,555,,,555,554", "554,554,554,554,555,555,,554,554,,,,554,,554,554,554,554,554,554,554", ",,,,,554,554,554,554,554,554,554,,,554,,,,,,554,554,,554,554,554,554", "554,554,554,554,,554,554,554,,554,554,,554,554,,,,,,,,,,,,,,,,,,,,,554", ",,554,,,554,,554,,554,,,,554,,,,,,,,554,,,,,554,554,554,554,554,554", ",,,554,554,,,,,,,554,,,554,549,549,549,,549,554,554,,549,549,,,,549", ",549,549,549,549,549,549,549,,,,,,549,549,549,549,549,549,549,,,549", ",,,,,,549,,,549,549,549,549,549,549,549,549,549,549,549,,549,549,,549", "549,,,,,,,,,,,,,,,,,,,,,549,,,549,,,549,,549,,,,,,549,,,,,,,,549,,,", ",549,549,549,549,549,549,,,,549,549,,,,,,,549,,,549,546,546,546,,546", "549,549,,546,546,,,,546,,546,546,546,546,546,546,546,,,,,,546,546,546", "546,546,546,546,,,546,,,,,,,546,,,546,546,546,546,546,546,546,546,546", "546,546,,546,546,,546,546,,,,,,,,,,,,,,,,,,,,,546,,,546,,,546,,546,", "546,,546,,546,,,,,,,,546,,,,,546,546,546,546,546,546,,,,546,546,,,,", ",,546,,,546,299,299,299,,299,546,546,,299,299,,,,299,,299,299,299,299", "299,299,299,,,,,,299,299,299,299,299,299,299,,,299,,,,,,,299,,,299,299", "299,299,299,299,299,,299,299,299,,299,299,,,,,,,,,,,,,,,,,,,,,,,,299", ",,299,,,299,,299,,,,,,,,,,,,,,,,,,,299,299,299,299,299,299,,,,299,299", ",,,,,,299,,,299,540,540,540,,540,299,299,,540,540,,,,540,,540,540,540", "540,540,540,540,,,,,,540,540,540,540,540,540,540,,,540,,,,,,,540,,,540", "540,540,540,540,540,540,,540,540,540,,540,540,,540,540,,,,,,,,,,,,,", ",,,,,,,540,,,540,,,540,,540,,,,,,540,,,,,,,,540,,,,,540,540,540,540", "540,540,,,,540,540,,,,,,,540,,,540,536,536,536,,536,540,540,,536,536", ",,,536,,536,536,536,536,536,536,536,,,,,,536,536,536,536,536,536,536", ",,536,,,,,,,536,,,536,536,536,536,536,536,536,,536,536,536,,536,536", ",536,536,,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,,536,,,,,,536,,,,,,,,536", ",,,,536,536,536,536,536,536,,,,536,536,,,,,,,536,,,536,535,535,535,", "535,536,536,,535,535,,,,535,,535,535,535,535,535,535,535,,,,,,535,535", "535,535,535,535,535,,,535,,,,,,,535,,,535,535,535,535,535,535,535,,535", "535,535,,535,535,,535,535,,,,,,,,,,,,,,,,,,,,,535,,,535,,,535,,535,", ",,,,535,,,,,,,,535,,,,,535,535,535,535,535,535,,,,535,535,,,,,,,535", ",,535,534,534,534,,534,535,535,,534,534,,,,534,,534,534,534,534,534", "534,534,,,,,,534,534,534,534,534,534,534,,,534,,,,,,,534,,,534,534,534", "534,534,534,534,,534,534,534,,534,534,,534,534,,,,,,,,,,,,,,,,,,,,,534", ",,534,,,534,,534,,,,,,534,,,,,,,,534,,,,,534,534,534,534,534,534,,,", "534,534,,,,,,,534,,,534,531,531,531,,531,534,534,,531,531,,,,531,,531", "531,531,531,531,531,531,,,,,,531,531,531,531,531,531,531,,,531,,,,,", ",531,,,531,531,531,531,531,531,531,,531,531,531,,531,531,,,,,,,,,,,", ",,,,,,,,,,,,531,,,531,,,531,,531,,,,,,,,,,,,,,,,,,,531,531,531,531,531", "531,,,,531,531,,,,,,,531,,,531,308,308,308,,308,531,531,,308,308,,,", "308,,308,308,308,308,308,308,308,,,,,,308,308,308,308,308,308,308,,", "308,,,,,,,308,,,308,308,308,308,308,308,308,,308,308,308,,308,308,,308", "308,,,,,,,,,,,,,,,,,,,,,308,,,308,308,,308,,308,,,,,,308,,,,,,,,308", ",,,,308,308,308,308,308,308,,,,308,308,,,,,,,308,,,308,310,310,310,310", "310,308,308,,310,310,,,,310,,310,310,310,310,310,310,310,,,,,,310,310", "310,310,310,310,310,,,310,,,,,,310,310,,310,310,310,310,310,310,310", "310,,310,310,310,,310,310,,310,310,,,,,,,,,,,,,,,,,,,,,310,,,310,,,310", ",310,,310,,,,310,,,,,,,,310,,,,,310,310,310,310,310,310,,,,310,310,", ",,,,,310,,,310,525,525,525,,525,310,310,,525,525,,,,525,,525,525,525", "525,525,525,525,,,,,,525,525,525,525,525,525,525,,,525,,,,,,,525,,,525", "525,525,525,525,525,525,525,525,525,525,,525,525,,525,525,,,,,,,,,,", ",,,,,,,,,,525,,,525,,,525,,525,,525,,,,525,,,,,,,,525,,,,,525,525,525", "525,525,525,,,,525,525,,,,,,,525,,,525,522,522,522,,522,525,525,,522", "522,,,,522,,522,522,522,522,522,522,522,,,,,,522,522,522,522,522,522", "522,,,522,,,,,,,522,,,522,522,522,522,522,522,522,522,522,522,522,,522", "522,,522,522,,,,,,,,,,,,,,,,,,,,,522,,,522,,,522,,522,,522,,,,522,,", ",,,,,522,,,,,522,522,522,522,522,522,,,,522,522,,,,,,,522,,,522,520", "520,520,,520,522,522,,520,520,,,,520,,520,520,520,520,520,520,520,,", ",,,520,520,520,520,520,520,520,,,520,,,,,,,520,,,520,520,520,520,520", "520,520,,520,520,520,,520,520,,,,,,,,,,,,,,,,,,,,,,,,520,,,520,,,520", ",520,,,,,,,,,,,,,,,,,,,520,520,520,520,520,520,,,,520,520,,,,,,,520", ",,520,514,514,514,514,514,520,520,,514,514,,,,514,,514,514,514,514,514", "514,514,,,,,,514,514,514,514,514,514,514,,,514,,,,,,514,514,,514,514", "514,514,514,514,514,514,,514,514,514,,514,514,,514,514,,,,,,,,,,,,,", ",,,,,,,514,,,514,,,514,,514,,514,,,,514,,,,,,,,514,,,,,514,514,514,514", "514,514,,,,514,514,,,,,,514,514,,,514,508,508,508,,508,514,514,,508", "508,,,,508,,508,508,508,508,508,508,508,,,,,,508,508,508,508,508,508", "508,,,508,,,,,,,508,,,508,508,508,508,508,508,508,,508,508,508,,508", "508,,508,508,,,,,,,,,,,,,,,,,,,,,508,,,508,,508,508,,508,,,,508,,508", ",,,,,,,508,,,,,508,508,508,508,508,508,,,,508,508,,,,,,,508,,,508,492", "492,492,,492,508,508,,492,492,,,,492,,492,492,492,492,492,492,492,,", ",,,492,492,492,492,492,492,492,,,492,,,,,,,492,,,492,492,492,492,492", "492,492,,492,492,492,,492,492,,492,492,,,,,,,,,,,,,,,,,,,,,492,,,492", ",,492,,492,,,,,,492,,,,,,,,492,,,,,492,492,492,492,492,492,,,,492,492", ",,,,,,492,,,492,490,490,490,,490,492,492,,490,490,,,,490,,490,490,490", "490,490,490,490,,,,,,490,490,490,490,490,490,490,,,490,,,,,,,490,,,490", "490,490,490,490,490,490,490,490,490,490,,490,490,,490,490,,,,,,,,,,", ",,,,,,,,,,490,,,490,,,490,,490,,,,490,,490,,,,,,,,490,,,,,490,490,490", "490,490,490,,,,490,490,,,,,,,490,,,490,488,488,488,,488,490,490,,488", "488,,,,488,,488,488,488,488,488,488,488,,,,,,488,488,488,488,488,488", "488,,,488,,,,,,,488,,,488,488,488,488,488,488,488,488,488,488,488,,488", "488,,488,488,,,,,,,,,,,,,,,,,,,,,488,,,488,,,488,,488,,488,,488,,488", ",,,,,,,488,,,,,488,488,488,488,488,488,,,,488,488,,,,,,,488,,,488,485", "485,485,,485,488,488,,485,485,,,,485,,485,485,485,485,485,485,485,,", ",,,485,485,485,485,485,485,485,,,485,,,,,,,485,,,485,485,485,485,485", "485,485,,485,485,485,,485,485,,485,485,,,,,,,,,,,,,,,,,,,,,485,,,485", ",,485,,485,,,,,,485,,,,,,,,485,,,,,485,485,485,485,485,485,,,,485,485", ",,,,,648,485,,,485,,,648,648,648,485,485,648,648,648,,648,,,,,,,,,,648", "648,,,,,,,,,648,648,,648,648,648,648,648,,,,,,,,,,,,,,,,,,,,,,648,648", "648,648,648,648,648,648,648,648,648,648,648,648,648,,,648,648,648,,648", "648,,,648,,648,,648,,648,,648,,648,648,648,648,648,648,648,,648,,648", ",,,,,,,,,,,,648,648,648,648,,648,,439,648,,648,,,648,439,439,439,,,", "439,439,,439,,,,,,,,,,,,,,,,,,,,439,439,,439,439,439,439,439,,,,,,,", ",,,,,,,,,,,,,,439,439,439,439,439,439,439,439,439,439,439,439,439,439", "439,,,439,439,439,,439,,,,439,,,,,,439,,439,,439,439,439,439,439,439", "439,,439,,439,,,,,,,,,,,,,439,439,,439,,439,,647,439,,439,,,439,647", "647,647,,,647,647,647,,647,,,,,,,,,647,647,647,,,,,,,,,647,647,,647", "647,647,647,647,,,,,,,,,,,,,,,,,,,,,,647,647,647,647,647,647,647,647", "647,647,647,647,647,647,647,,,647,647,647,,647,647,,,647,,647,,647,", "647,,647,,647,647,647,647,647,647,647,,647,647,647,,,,,,,,,,,,,647,647", "647,647,,647,,437,647,,647,,,647,437,437,437,,,,437,437,,437,,,,,,,", ",437,,,,,,,,,,,437,437,,437,437,437,437,437,,,,,,,,,,,,,,,,,,,,,,437", "437,437,437,437,437,437,437,437,437,437,437,437,437,437,,,437,437,437", ",437,,,,437,,,,,,437,,437,,437,437,437,437,437,437,437,,437,437,437", ",,,,,,,,,,,,437,437,,437,,437,,50,437,,437,,,437,50,50,50,,,50,50,50", ",50,,,,,,,,,,50,50,50,,,,,,,,50,50,,50,50,50,50,50,,,,,,,,,,,,,,,,,", ",,,,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,,,50,50,50,,,50,,,50", ",50,,50,,50,,50,,50,50,50,50,50,50,50,,50,,50,,,,,,,,,,,,,50,50,50,50", "28,50,,50,50,,50,28,28,28,,,28,28,28,,28,,,,,,,,,,28,28,,,,,,,,,28,28", ",28,28,28,28,28,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28,28,28,28,28", "28,28,28,28,,,28,28,28,,,28,,28,28,,28,,28,,28,,28,,28,28,28,28,28,28", "28,,28,,28,,,,,,,,,,,,,28,28,28,28,498,28,,,28,,28,498,498,498,,,498", "498,498,,498,,,,,,,,,,498,,,,,,,,,,498,498,,498,498,498,498,498,,,,", ",,,,,,,496,,,,,,,496,496,496,,,496,496,496,,496,,,,,498,498,,,,496,", ",498,,,,,498,498,496,496,,496,496,496,496,496,,,,,,,,,,,,498,,,,,,,", ",,,,,498,,498,,,498,,,496,496,,497,,,,,496,,497,497,497,496,496,497", "497,497,,497,,,,,,,,,,497,,,,,496,,,,,497,497,,497,497,497,497,497,496", ",496,,,496,203,203,,,203,,,,,,,,,203,203,203,203,203,203,203,203,203", ",,203,203,497,497,,,203,203,203,203,497,,,,,497,497,,,,,203,203,,203", "203,203,203,203,203,203,203,203,203,203,,497,203,,,,,,,,,,,,497,,497", ",,497,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,,,,7,7,7,7,7,7", "7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,,7,,,,,,,,,7,7,7,7,7,7,7,7,7,,,7", "7,,,,,7,7,7,7,,,,,,,,,,,,7,7,,7,7,7,7,7,7,7,7,7,7,7,,,7,7,,,,,,,,,,7", "416,416,416,416,416,416,416,416,416,416,416,416,416,416,416,416,416", "416,416,416,416,416,416,416,,,,416,416,416,416,416,416,416,416,416,416", "416,416,416,416,416,416,416,416,416,416,416,416,416,,,416,,,,,,,,,416", "416,416,416,416,416,416,416,416,,,416,416,,,,,416,416,416,416,,,,,,", ",,,,,416,416,,416,416,416,416,416,416,416,416,416,416,416,,,416,416", ",,,,,,,,,416,412,412,412,412,412,412,412,412,412,412,412,412,412,412", "412,412,412,412,412,412,412,412,412,412,,,,412,412,412,412,412,412,412", "412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,,,412", ",,,,,,,,412,412,412,412,412,412,412,412,412,,,412,412,,,,,412,412,412", "412,,,,,,,,,,,,412,412,,412,412,412,412,412,412,412,412,412,412,412", ",,412,412,,,,,,,,,,412,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8", "8,,,,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,8,,,,,,,,,8,8,8", "8,8,8,8,8,8,,,8,8,,,,,8,8,8,8,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8", ",,8,8,,,,,,,,,,8,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79", "79,79,79,79,79,79,79,,,,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79", "79,79,79,79,79,79,79,79,79,79,79,,79,,,,,,,79,79,79,79,79,79,79,79,79", ",,79,79,,,,,79,79,79,79,,,,,,,,,,,,79,79,,79,79,79,79,79,79,79,79,79", "79,79,,,79,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192", "192,192,192,192,192,192,192,192,192,,,,192,192,192,192,192,192,192,192", "192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192", "192,,192,,,,,,,192,192,192,192,192,192,192,192,192,,,192,192,,,,,192", "192,192,192,,,,,,,,,,,,192,192,,192,192,192,192,192,192,192,192,192", "192,192,,,192,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65", "65,65,65,65,65,65,,,,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65", "65,65,65,65,65,65,65,65,65,65,,65,,,,,,,65,65,65,65,65,65,65,65,65,", ",65,65,,,,,65,65,65,65,,,,,,65,,,,,,65,65,,65,65,65,65,65,65,65,65,65", "65,65,,,65,772,772,772,772,772,772,772,772,772,772,772,772,772,772,772", "772,772,772,772,772,772,772,772,772,,,,772,772,772,772,772,772,772,772", "772,772,772,772,772,772,772,772,772,772,772,772,772,772,772,,,772,,", ",,,,,,772,772,772,772,772,772,772,772,772,,,772,772,,,,,772,772,772", "772,,,,,,,,,,,,772,772,,772,772,772,772,772,772,772,772,772,772,772", "596,596,772,,596,,,,,,,,,596,596,596,596,596,596,596,596,596,,,596,596", ",,,,596,596,596,596,,,,,,596,,,,,,596,596,,596,596,596,596,596,596,596", "596,596,596,596,202,202,596,,202,,,,,,,,,202,202,202,202,202,202,202", "202,202,,,202,202,,,,,202,202,202,202,,,,,,,,,,,,202,202,,202,202,202", "202,202,202,202,202,202,202,202,267,267,202,,267,,,,,,,,,267,267,267", "267,267,267,267,267,267,,,267,267,,,,,267,267,267,267,,,,,,,,,,,,267", "267,,267,267,267,267,267,267,267,267,267,267,267,451,451,267,,451,,", ",,,,,,451,451,451,451,451,451,451,451,451,,,451,451,,,,,451,451,451", "451,,,,,,,,,,,,451,451,,451,451,451,451,451,451,451,451,451,451,451", "588,588,451,,588,,,,,,,,,588,588,588,588,588,588,588,588,588,,,588,588", ",,,,588,588,588,588,,,,,,,,,,,,588,588,,588,588,588,588,588,588,588", "588,588,588,588,587,587,588,,587,,,,,,,,,587,587,587,587,587,587,587", "587,587,,,587,587,,,,,587,587,587,587,,,,,,587,,,,,,587,587,,587,587", "587,587,587,587,587,587,587,587,587,450,450,587,,450,,,,,,,,,450,450", "450,450,450,450,450,450,450,,,450,450,,,,,450,450,450,450,,,,,,450,", ",,,,450,450,,450,450,450,450,450,450,450,450,450,450,450,266,266,450", ",266,,,,,,,,,266,266,266,266,266,266,266,266,266,,,266,266,,,,,266,266", "266,266,,,,,,,,,,,,266,266,,266,266,266,266,266,266,266,266,266,266", "266,523,523,266,,523,,,,,,,,,523,523,523,523,523,523,523,523,523,,,523", "523,,,,,523,523,523,523,,,,,,523,,,,,,523,523,,523,523,523,523,523,523", "523,523,523,523,523,594,594,523,,594,,,,,,,,,594,594,594,594,594,594", "594,594,594,,,594,594,,,,,594,594,594,594,,,,,,,,,,,,594,594,,594,594", "594,594,594,594,594,594,594,594,594,538,538,594,,538,,,,,,,,,538,538", "538,538,538,538,538,538,538,,,538,538,,,,,538,538,538,538,,,,,,,,,,", ",538,538,,538,538,538,538,538,538,538,538,538,538,538,537,537,538,,537", ",,,,,,,,537,537,537,537,537,537,537,537,537,,,537,537,,,,,537,537,537", "537,,,,,,537,,,,,,537,537,,537,537,537,537,537,537,537,537,537,537,537", "265,265,537,,265,,,,,,,,,265,265,265,265,265,265,265,265,265,,,265,265", ",,,,265,265,265,265,,,,,,,,,,,,265,265,,265,265,265,265,265,265,265", "265,265,265,265,201,201,265,,201,,,,,,,,,201,201,201,201,201,201,201", "201,201,,,201,201,,,,,201,201,201,201,,,,,,201,,,,,,201,201,,201,201", "201,201,201,201,201,201,201,201,201,955,955,201,,955,,,,,,,,,955,955", "955,955,955,955,955,955,955,,,955,955,,,,,955,955,955,955,,,,,,955,", ",,,,955,955,,955,955,955,955,955,955,955,955,955,955,955,526,526,955", ",526,,,,,,,,,526,526,526,526,526,526,526,526,526,,,526,526,,,,,526,526", "526,526,,,,,,,,,,,,526,526,,526,526,526,526,526,526,526,526,526,526", "526,829,829,526,,829,,,,,,,,,829,829,829,829,829,829,829,829,829,,,829", "829,,,,,829,829,829,829,,,,,,,,,,,,829,829,,829,829,829,829,829,829", "829,829,829,829,829,956,956,829,,956,,,,,,,,,956,956,956,956,956,956", "956,956,956,,,956,956,,,,,956,956,956,956,,,,,,,,,,,,956,956,,956,956", "956,956,956,956,956,956,956,956,956,524,524,956,,524,,,,,,,,,524,524", "524,524,524,524,524,524,524,,,524,524,,,,,524,524,524,524,,,,,,,,,,", ",524,524,,524,524,524,524,524,524,524,524,524,524,524,,,524"];

      racc_action_check = arr = Opal.get('Array').$new(25478, nil);

      idx = 0;

      ($a = ($c = clist).$each, $a.$$p = (TMP_3 = function(str){var self = TMP_3.$$s || this, $a, $b, TMP_4;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a.$$p = (TMP_4 = function(i){var self = TMP_4.$$s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = $rb_plus(idx, 1);}, TMP_4.$$s = self, TMP_4), $a).call($b)}, TMP_3.$$s = self, TMP_3), $a).call($c);

      racc_action_pointer = [1046, 1007, nil, -63, nil, 1031, 886, 23431, 23794, 883, 825, 815, 826, 1088, 461, 436, nil, 3273, 3404, 1439, 847, nil, 3797, 3928, 4059, 394, -11, 4452, 23043, nil, 4583, 4714, 4845, nil, 744, 391, 746, 377, 5500, 5631, 5762, 674, 1350, nil, nil, nil, nil, nil, nil, nil, 22916, nil, 6155, 6286, 6417, -19, 3303, 6810, 6941, nil, nil, 7072, -2, 7334, nil, 24135, nil, nil, nil, nil, nil, -79, nil, nil, nil, nil, nil, 603, 602, 23915, nil, nil, nil, 505, 8251, nil, nil, 8382, nil, nil, nil, nil, nil, nil, nil, nil, nil, 678, nil, 8644, nil, nil, nil, 8775, 8906, 9037, 9168, 9299, 9430, nil, 404, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 24025, 523, nil, 9954, 10085, 10216, 10347, 10478, 10609, 25071, 24363, 23304, 11133, 11264, 11395, nil, 415, 199, 1073, 202, 969, 1015, 12312, 12443, nil, nil, 12574, 996, 12836, 12967, 13098, 13229, 13360, 13491, 13622, 13753, 13884, 14015, 14146, 14277, 14408, 14539, 14670, 14801, 14932, 15063, 15194, 15325, 15456, 15587, 15718, 15849, 15980, nil, nil, nil, nil, 2880, nil, 934, 929, nil, 16504, 951, 16635, nil, nil, nil, nil, nil, 16766, nil, nil, 25012, 24717, 24422, 932, 17290, 17421, nil, nil, nil, nil, nil, nil, nil, 17552, 505, 1162, 950, 18076, 956, 972, 982, 18600, 18731, 17, 517, 1072, 235, 1049, 125, 274, nil, 277, 397, 458, 20172, nil, 349, 534, 546, 514, nil, 587, nil, 20958, nil, 21089, 237, nil, 542, 292, 360, 647, 635, 146, 689, nil, nil, 12, 3434, nil, nil, nil, 655, 653, nil, 720, 734, nil, nil, nil, nil, nil, nil, nil, 3026, nil, nil, nil, 811, nil, nil, 814, 25, 0, 45, 1308, 1439, 486, 85, 743, 50, 1481, 877, 29, 975, nil, nil, 3129, 970, nil, 1612, nil, 65, nil, nil, 129, 61, 280, 285, 307, 319, 369, 397, 438, nil, -4, nil, 7203, nil, 369, nil, 348, nil, 268, 889, 375, nil, 885, -36, nil, 391, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 892, 23673, nil, nil, nil, 23552, 864, nil, nil, 653, nil, 1963, 803, nil, 785, nil, nil, 1177, 817, 786, 433, 432, 1832, nil, nil, nil, 22786, 784, 22526, nil, 1701, 1570, 915, nil, nil, nil, 1832, nil, nil, 24658, 24481, 784, 653, 216, 522, 391, 260, 120, nil, 4321, 4190, 593, 566, 756, 755, 747, 728, 5238, 5369, 4738, 4976, 3398, 4839, 3143, 3267, 5107, 3666, 4452, 4583, 4059, 516, 524, 3797, 3928, 22268, 133, nil, 22137, nil, 22006, nil, 21875, nil, 345, nil, 23225, 23304, 23170, -29, nil, 620, nil, nil, 616, 614, nil, nil, 21744, 126, 154, 647, nil, nil, 21613, 644, 607, nil, nil, 589, 21482, 609, 21351, 24776, 25366, 21220, 25189, 39, 564, nil, nil, 20827, 506, nil, 20696, 20565, 20434, 24953, 24894, 2618, 20303, 589, 586, 502, nil, nil, 20041, nil, nil, 19910, nil, nil, nil, nil, 19779, 19648, 211, nil, 728, nil, nil, 19517, 3565, nil, 403, nil, nil, 101, nil, 3063, nil, 1017, 552, nil, nil, 19386, 1124, nil, nil, 19255, 203, 221, 1116, 1121, 19124, nil, 18993, 24599, 24540, 18862, 0, nil, 1743, nil, 24835, 18469, 24304, nil, nil, 18338, -52, 18207, nil, 7347, nil, nil, nil, 31, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, -24, nil, nil, nil, 918, nil, nil, nil, nil, nil, 17945, 909, 17814, 129, 148, 17683, 17159, 931, nil, nil, nil, 17028, 939, nil, 16897, 940, nil, -49, -64, 22656, 22396, 950, 951, 784, nil, 1046, nil, 3041, nil, 16373, 932, nil, 972, 16242, nil, nil, 16111, nil, nil, nil, nil, nil, nil, 12705, nil, 999, 12181, 12050, 915, 996, nil, nil, 1033, 11919, 11788, nil, 900, -51, 11657, 1007, nil, 1043, 229, 232, 1051, 214, 207, 1066, -47, -7, -4, 11526, 2749, 139, 171, -11, 273, 11002, nil, nil, 206, nil, 197, 306, nil, nil, 205, nil, 228, 1219, 316, 279, 293, nil, nil, 424, 3129, nil, 212, nil, 522, nil, nil, nil, nil, nil, 529, nil, 568, 10871, 496, 46, 40, 160, 45, 511, 10740, 1874, nil, 551, 550, 9823, 374, nil, -26, 9692, 9561, 4858, 518, nil, nil, 619, nil, 8513, nil, 554, 555, nil, 564, 566, 569, nil, 561, nil, 24245, 610, 1030, 8120, nil, nil, nil, 2487, 586, 7989, 7858, 7727, nil, 2356, nil, 2225, nil, nil, 2094, nil, 1963, nil, 7596, 7465, 6679, 220, -48, nil, nil, 641, 741, nil, nil, nil, 652, nil, 638, 6548, nil, 661, 763, 647, 252, nil, nil, nil, 772, nil, 6024, 657, 697, nil, nil, nil, nil, nil, nil, 25248, nil, 713, nil, nil, nil, nil, 902, 787, nil, 5893, 789, 5369, 5238, nil, nil, 69, -21, 546, -19, nil, 819, nil, nil, 821, 822, 720, nil, nil, nil, 362, nil, nil, 437, 11539, nil, 466, nil, 282, nil, 5107, nil, nil, nil, nil, nil, nil, nil, 755, 742, nil, 1701, nil, 1570, 4976, 4321, 4190, nil, nil, nil, 3666, 750, nil, nil, nil, 3535, nil, nil, 73, 3142, nil, 804, 768, nil, nil, 80, nil, 895, 898, 3011, 2880, nil, nil, 2749, nil, nil, 824, nil, 789, nil, nil, 794, 798, 801, 792, nil, nil, 4727, nil, 1308, nil, 2618, nil, 2487, 84, 826, 923, 88, nil, nil, 2356, nil, nil, nil, 186, 2225, 987, nil, nil, 335, nil, nil, nil, 2094, 994, 1177, 25130, 25307, 96, 536, nil, nil, nil, 872, nil, 769, 953, nil, 899, 105, 112, 129, 211, nil, nil, nil, nil, -7];

      racc_action_default = [-3, -560, -1, -548, -4, -6, -560, -560, -560, -560, -560, -560, -560, -560, -281, -37, -38, -560, -560, -43, -45, -46, -293, -331, -332, -50, -259, -386, -259, -65, -10, -69, -77, -79, -560, -461, -560, -560, -560, -560, -560, -550, -235, -274, -275, -276, -277, -278, -279, -280, -538, -283, -560, -559, -529, -301, -559, -560, -560, -306, -309, -548, -560, -560, -323, -560, -333, -334, -404, -405, -406, -407, -408, -559, -411, -559, -559, -559, -559, -559, -438, -444, -445, -560, -450, -451, -452, -453, -454, -455, -456, -457, -458, -459, -460, -463, -464, -560, -2, -549, -555, -556, -557, -560, -560, -560, -560, -560, -3, -13, -560, -106, -107, -108, -109, -110, -111, -112, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -560, -18, -113, -10, -560, -560, -560, -559, -559, -560, -560, -560, -560, -560, -560, -41, -560, -461, -560, -281, -560, -560, -10, -560, -42, -225, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -560, -232, -373, -375, -47, -236, -252, -266, -266, -256, -560, -267, -560, -293, -331, -332, -559, -531, -560, -48, -49, -560, -560, -560, -55, -559, -560, -300, -379, -387, -389, -63, -385, -64, -560, -548, -11, -65, -10, -560, -560, -70, -73, -10, -461, -560, -560, -281, -296, -550, -560, -335, -386, -560, -75, -560, -81, -288, -446, -447, -560, -210, -211, -226, -560, -551, -10, -550, -237, -550, -552, -552, -560, -560, -552, -560, -302, -303, -560, -560, -346, -347, -354, -559, -495, -361, -559, -559, -372, -494, -496, -497, -498, -499, -500, -560, -513, -518, -519, -521, -522, -523, -560, -44, -560, -560, -560, -560, -548, -560, -549, -461, -560, -560, -281, -560, -502, -503, -102, -560, -104, -560, -281, -560, -320, -461, -560, -106, -107, -144, -145, -161, -166, -173, -176, -326, -560, -527, -560, -409, -560, -424, -560, -426, -560, -560, -560, -416, -560, -560, -422, -560, -437, -439, -440, -441, -442, -448, -449, 977, -5, -558, -19, -20, -21, -22, -23, -560, -560, -15, -16, -17, -560, -560, -25, -34, -189, -267, -560, -560, -26, -35, -36, -27, -191, -560, -560, -539, -540, -559, -382, -541, -542, -539, -259, -540, -384, -544, -545, -559, -539, -540, -33, -199, -39, -40, -560, -560, -559, -559, -288, -560, -560, -560, -560, -299, -200, -201, -202, -203, -204, -205, -206, -207, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -227, -228, -229, -230, -560, -559, -253, -560, -254, -560, -264, -560, -268, -560, -534, -259, -259, -259, -559, -56, -550, -247, -248, -266, -266, -260, -261, -560, -559, -559, -560, -295, -9, -549, -560, -66, -286, -82, -71, -560, -560, -559, -560, -560, -559, -560, -288, -560, -446, -447, -560, -78, -83, -560, -560, -560, -560, -560, -231, -560, -396, -560, -560, -238, -239, -554, -553, -241, -554, -291, -292, -530, -343, -10, -10, -560, -345, -560, -363, -370, -560, -367, -368, -560, -371, -495, -560, -504, -560, -506, -508, -512, -520, -524, -10, -336, -337, -338, -10, -560, -560, -560, -560, -10, -391, -559, -560, -560, -559, -288, -315, -102, -103, -560, -559, -560, -318, -465, -560, -560, -560, -324, -493, -328, -546, -547, -550, -410, -425, -428, -429, -431, -412, -427, -413, -414, -415, -560, -418, -420, -421, -560, -443, -7, -14, -114, -24, -560, -273, -560, -289, -290, -560, -560, -59, -245, -246, -380, -560, -61, -383, -560, -57, -381, -539, -540, -539, -540, -560, -560, -189, -298, -560, -357, -560, -359, -10, -266, -265, -269, -560, -532, -533, -560, -51, -376, -52, -377, -53, -378, -10, -243, -560, -249, -251, -43, -560, -258, -262, -560, -10, -10, -294, -12, -66, -560, -74, -80, -560, -539, -540, -559, -543, -287, -560, -560, -559, -76, -560, -198, -208, -209, -560, -559, -559, -284, -285, -552, -242, -560, -560, -344, -355, -560, -362, -559, -356, -560, -559, -559, -514, -501, -560, -560, -511, -559, -339, -559, -307, -340, -341, -342, -310, -560, -313, -560, -560, -560, -539, -540, -543, -287, -560, -560, -102, -105, -543, -560, -10, -560, -467, -560, -10, -10, -493, -560, -470, -471, -473, -474, -476, -477, -526, -526, -482, -484, -484, -484, -492, -495, -516, -560, -560, -560, -10, -417, -419, -423, -190, -271, -560, -560, -560, -30, -194, -31, -195, -60, -32, -196, -62, -197, -58, -560, -560, -560, -290, -289, -233, -358, -560, -560, -255, -270, -535, -560, -244, -266, -560, -263, -560, -560, -72, -289, -290, -84, -297, -559, -352, -10, -397, -559, -398, -399, -240, -348, -349, -369, -560, -288, -560, -365, -366, -505, -507, -510, -560, -350, -560, -560, -10, -10, -312, -314, -560, -289, -94, -560, -289, -560, -466, -321, -560, -560, -550, -469, -472, -475, -560, -480, -481, -560, -560, -488, -560, -490, -560, -491, -560, -329, -528, -430, -433, -434, -435, -436, -560, -272, -28, -192, -29, -193, -560, -560, -560, -360, -374, -54, -250, -266, -388, -390, -8, -10, -403, -353, -560, -560, -401, -287, -559, -509, -304, -560, -305, -560, -560, -560, -10, -316, -319, -10, -325, -327, -560, -478, -526, -525, -483, -484, -484, -484, -560, -517, -515, -493, -432, -234, -257, -560, -402, -10, -461, -560, -560, -281, -400, -364, -10, -308, -311, -269, -559, -10, -560, -468, -479, -560, -486, -487, -489, -10, -396, -559, -560, -560, -288, -559, -392, -393, -394, -560, -322, -484, -560, -395, -560, -539, -540, -543, -287, -351, -317, -485, -330, -289];

      clist = ["13,308,316,575,579,379,114,114,251,251,251,704,754,489,98,568,542,208", "208,397,419,426,208,208,208,769,367,102,324,332,13,289,289,532,348,349", "10,662,352,5,721,713,766,285,99,583,250,250,250,117,117,298,208,208", "216,500,281,208,208,109,194,208,356,365,114,837,10,593,252,252,252,659", "353,659,729,733,567,313,114,207,406,407,408,409,2,102,560,283,384,563", "565,678,380,818,272,276,662,924,360,13,318,604,644,208,208,208,208,13", "13,433,438,443,386,388,311,609,395,840,657,347,347,619,14,347,545,548", "860,861,552,709,310,671,397,350,841,10,351,842,5,744,944,681,682,10", "10,749,410,5,429,430,601,912,14,291,291,666,668,670,248,263,264,370", "753,603,772,347,347,347,347,926,322,553,672,496,497,498,719,769,295", "295,924,501,423,423,358,366,885,485,412,247,486,114,411,509,766,13,208", "208,208,208,208,442,510,959,208,208,208,321,822,295,295,897,383,284", "13,208,390,618,361,393,872,14,662,313,313,609,774,775,855,14,14,10,418", "424,427,917,916,193,920,893,446,404,835,737,320,568,1,317,725,381,10", "359,597,528,687,504,251,659,659,506,680,,,,251,698,489,448,449,208,208", "543,,544,734,494,,458,208,,947,,13,864,866,868,289,13,,,513,,,250,250", "556,332,972,746,289,,,250,102,,519,723,,281,,13,533,,281,713,505,252", "14,10,,514,,,10,252,,,580,581,268,275,277,960,602,,952,14,,,515,,721", "910,,521,,10,,769,777,208,208,,,,,644,,433,438,,,272,582,276,766,,,", ",365,,,,,,102,,417,,,765,208,716,,,35,720,,,,598,,,,,,284,,,568,649", "650,,14,503,507,,291,14,,114,347,347,511,114,35,288,288,803,813,291", "788,966,,,,791,768,,793,692,14,295,697,,662,949,950,951,,,,,607,692", "295,,355,369,442,369,208,208,117,850,,,117,853,854,673,,,625,284,,,626", ",284,689,659,,696,828,313,313,832,833,,974,,,,35,,,,,,,366,35,35,692", ",,,,909,637,,,692,,641,,208,,,637,902,659,13,12,,295,825,,289,,208,442", ",208,,,,823,,289,533,765,658,738,,442,743,,208,,,533,748,12,313,,,313", "10,,932,684,13,13,,,,939,,717,,,637,637,637,773,,803,311,,,,,13,750", ",,13,768,35,,,13,,208,442,,208,10,10,708,442,,208,,,,208,35,208,703", ",730,730,,,,,313,10,,313,12,10,,,945,313,10,,12,12,751,,,801,332,,,", ",208,208,961,14,918,,208,918,765,291,765,,765,,,,,,929,,291,,,901,13", "965,,938,347,,752,,,,295,35,784,786,13,288,35,,789,14,14,295,,,13,13", "366,,288,289,,921,,922,423,,10,,,35,14,533,289,,14,,,765,,14,10,295", ",12,816,870,,,,,10,10,,808,848,,845,,,765,,,12,,,,,,,635,710,711,,,640", ",,208,,643,,,13,,768,,13,13,,369,,726,,637,,728,641,,637,,736,,,,114", ",964,851,13,852,,,14,856,,208,208,,10,,,,10,10,,,14,,890,,12,,665,667", "669,12,14,14,,347,,291,,,10,,,,915,904,,879,881,13,291,,,,12,,,442,", ",,,295,,,,,,208,802,13,13,,,,295,,,,,,,,806,,10,,,,,,,692,811,812,,", ",,,14,730,,,14,14,10,10,,,,,,,,,,,,,,,,13,,876,14,934,,35,347,,967,", ",288,,,13,,,13,,,,,288,,,,,,,,,,,,,10,,13,,937,,,,,13,35,35,14,,13,10", ",369,10,,,,13,,208,442,,,877,,,35,,14,14,35,,,10,,35,,,,,10,,,313,,10", ",,,,,,,10,,,,,,,,,,,,,,,896,,,,,,,,,,,,,14,,,,936,,,,906,907,,,,12,", "14,,,14,,,,,,,,,35,,295,,,,,,,,,14,,,35,,,,14,,,,,14,35,35,12,12,,288", ",14,,,931,,,,,,,,288,,325,,,12,,943,,12,,,,,12,,,,,385,,387,387,391", "394,387,,,,,953,,,,,,,958,,,,,962,,,,,,,,35,,,,35,35,,,,,,,,,,,,,,,", ",,,,,35,,217,,,,249,249,249,,,12,,,,,,,,,,,305,306,307,12,,,,,,,,,,12", "12,249,249,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,,12,,,,12,12,,,,,,,,,,,35,,,,933,,,,,,12,385,,,,35,,,35", ",502,,,,,,,,,,,,,,,,,,35,,,,,,,35,,,,,35,,,,,12,,,35,,,420,249,428,249", "249,,,,447,,,,,,,12,12,559,,,559,559,217,,460,461,462,463,464,465,466", "467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483", "484,,,,,,,,,,249,,249,,,,,,249,,12,,,,,249,249,,,,,,,,249,12,,,12,,", ",,,,,,,,,,,,,,,,,12,,,,,,539,12,,,,,12,,,,,636,,,12,,,,,,,636,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,654,,,,,,,,,,636,636,636,654,,,", ",,,,,,654,654,,,,,,,,,,,,,,,,,,,,,,,,,,249,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,249,249,,447,651,428,319,,,,,,,,,,,,,,,,,,,,,,,,,,,653,,,249,,249", ",249,,,,,,,,,,,,,,,,676,,,,,,,,,,,,294,294,249,,,249,,294,294,294,,", ",,700,701,702,,,,,,,294,,,249,,,249,,294,294,,,,,,,,,,,,,,,,,,,,,,,", ",,636,,,,,636,,,249,,,249,819,824,,,,249,,,,,421,425,559,,,559,559,", ",,,,819,,819,,,,,,,,,,,,,,779,,249,,,785,787,,,,,790,,,792,,,,,,,,,", ",,,,,,491,,493,249,,,249,,495,,,,,,,,249,249,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,895,249,,294,899,294,294,294,294,294,294,294,294,294,294,294,294", "294,294,294,294,294,294,294,294,294,294,294,294,294,,,,249,,,,,,294", ",294,,,,,,294,,,,,,,,,,249,,,,,,,,,,,,,,294,,,,,,249,880,882,,,,559", "294,,,,,,785,787,790,294,,,,,,,,,,,,249,,,,,,,,,,,,,,,,,629,,,819,,", ",,,,,,,,,,,,819,,,,,,,,,,,,,,,294,,,,,,,,,,249,,,,,,,,,,,,,,882,880", "928,,,,249,,,660,,319,,663,,,,,,,,,,,,249,,,294,677,,,,,,,,,,,,,,,,", ",249,,,,,,,,,,,,,,294,294,294,,,,660,,,319,249,,,,,,,,,,,,,,,,,,,,294", ",,294,,294,,294,,,,,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,294,,,294,294", "294,,,,,,,,,780,294,,,294,,,,,,,,,,,,294,,,,,,,,,,,,,,,804,,,805,,,", ",,,,,,660,319,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,821,,,,,,,,294,,294,,,,,", ",,,,,,294,,,,,,,,,,421,,,,,,,,,294,,,294,,,,,,,,,,294,294,858,,,,,,", ",,,294,,,,,,,,,,878,,,294,,,,,,294,,,,,,,,,,,,,,,,,,,421,,,,,,,,,,,", ",294,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,294,,,925,,,,,,,", ",,294,294,294,,,,,,,,319,,,,,294,,,,,,,,,,,,,,942,,,,,,,,,,,,,,,,,,", ",,,942,,,,,,,,,,,,,,,,,,,,,,,,294,,,,,,,,,,,,,,294,294,294,,,,294,,", ",,,,,,294,,,,,,,,,,294,,,,,,,,,,,,,,,,,,,,,,294"];

      racc_goto_table = arr = Opal.get('Array').$new(2565, nil);

      idx = 0;

      ($a = ($d = clist).$each, $a.$$p = (TMP_5 = function(str){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a.$$p = (TMP_6 = function(i){var self = TMP_6.$$s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = $rb_plus(idx, 1);}, TMP_6.$$s = self, TMP_6), $a).call($b)}, TMP_5.$$s = self, TMP_5), $a).call($d);

      clist = ["21,51,22,79,79,47,48,48,56,56,56,10,86,64,4,147,8,21,21,47,24,24,21", "21,21,143,46,85,106,109,21,21,21,43,16,16,17,156,16,7,149,108,112,41", "6,82,29,29,29,50,50,42,21,21,18,35,38,21,21,14,14,21,21,21,48,80,17", "45,58,58,58,59,4,59,81,81,150,29,48,26,16,16,16,16,2,85,111,39,127,111", "111,59,87,11,60,60,156,153,17,21,58,88,63,21,21,21,21,21,21,33,33,33", "128,128,26,131,128,11,36,26,26,131,23,26,57,57,144,144,57,59,89,36,47", "90,91,17,92,93,7,94,95,36,36,17,17,96,7,7,22,22,97,98,23,23,23,63,63", "63,31,31,31,99,100,101,102,26,26,26,26,103,104,105,62,33,33,33,107,143", "52,52,153,61,56,56,23,23,54,53,27,114,115,48,2,117,112,21,21,21,21,21", "21,48,118,119,21,21,21,78,121,52,52,122,126,9,21,21,129,130,19,132,133", "23,156,29,29,131,134,135,137,23,23,17,18,18,18,139,141,15,146,12,18", "5,151,120,76,147,1,75,147,74,17,83,84,51,43,56,56,59,59,66,65,,,,56", "43,64,26,26,21,21,51,,51,82,127,,26,21,,144,,21,145,145,145,21,21,,", "4,,,29,29,106,109,80,45,21,,,29,85,,42,150,,38,,21,41,,38,108,58,58", "23,17,,6,,,17,58,,,16,16,34,34,34,11,46,,86,23,,,39,,149,81,,39,,17", ",143,131,21,21,,,,,63,,33,33,,,60,4,60,112,,,,,21,,,,,,85,,9,,,110,21", "113,,,44,113,,,,85,,,,,,9,,,147,22,22,,23,31,31,,23,23,,48,26,26,31", "48,44,44,44,64,43,23,35,10,,,,35,113,,35,33,23,52,33,,156,145,145,145", ",,,,26,33,52,,44,44,48,44,21,21,50,8,,,50,8,8,51,,,14,9,,,14,,9,22,59", ",22,111,29,29,111,111,,145,,,,44,,,,,,,23,44,44,33,,,,,79,60,,,33,,60", ",21,,,60,147,59,21,20,,52,57,,21,,21,48,,21,,,,24,,21,41,110,58,22,", "48,22,,21,,,41,22,20,29,,,29,17,,79,7,21,21,,,,79,,21,,,60,60,60,51", ",64,26,,,,,21,16,,,21,113,44,,,21,,21,48,,21,17,17,58,48,,21,,,,21,44", "21,26,,85,85,,,,,29,17,,29,20,17,,,8,29,17,,20,20,85,,,106,109,,,,,21", "21,82,23,110,,21,110,110,23,110,,110,,,,,,64,,23,,,113,21,8,,111,26", ",26,,,,52,44,18,18,21,44,44,,18,23,23,52,,,21,21,23,,44,21,,113,,113", "56,,17,,,44,23,41,21,,23,,,110,,23,17,52,,20,41,47,,,,,17,17,,58,16", ",56,,,110,,,20,,,,,,,34,9,9,,,34,,,21,,34,,,21,,113,,21,21,,44,,9,,60", ",9,60,,60,,9,,,,48,,113,85,21,85,,,23,85,,21,21,,17,,,,17,17,,,23,,56", ",20,,34,34,34,20,23,23,,26,,23,,,17,,,,51,16,,18,18,21,23,,,,20,,,48", ",,,,52,,,,,,21,9,21,21,,,,52,,,,,,,,9,,17,,,,,,,33,9,9,,,,,,23,85,,", "23,23,17,17,,,,,,,,,,,,,,,,21,,23,23,21,,44,26,,22,,,44,,,21,,,21,,", ",,44,,,,,,,,,,,,,17,,21,,17,,,,,21,44,44,23,,21,17,,44,17,,,,21,,21", "48,,,9,,,44,,23,23,44,,,17,,44,,,,,17,,,29,,17,,,,,,,,17,,,,,,,,,,,", ",,,9,,,,,,,,,,,,,23,,,,23,,,,9,9,,,,20,,23,,,23,,,,,,,,,44,,52,,,,,", ",,,23,,,44,,,,23,,,,,23,44,44,20,20,,44,,23,,,9,,,,,,,,44,,55,,,20,", "9,,20,,,,,20,,,,,55,,55,55,55,55,55,,,,,9,,,,,,,9,,,,,9,,,,,,,,44,,", ",44,44,,,,,,,,,,,,,,,,,,,,,44,,28,,,,28,28,28,,,20,,,,,,,,,,,28,28,28", "20,,,,,,,,,,20,20,28,28,,,,,,,44,,,,,,,,,,,,,,,,,,,,,44,44,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,20,20,,,,,,,,,,,44,,,,44,,,,,,20,55", ",,,44,,,44,,55,,,,,,,,,,,,,,,,,,44,,,,,,,44,,,,,44,,,,,20,,,44,,,28", "28,28,28,28,,,,28,,,,,,,20,20,55,,,55,55,28,,28,28,28,28,28,28,28,28", "28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,,,,,,,,,28,,28,", ",,,,28,,20,,,,,28,28,,,,,,,,28,20,,,20,,,,,,,,,,,,,,,,,,,,20,,,,,,28", "20,,,,,20,,,,,55,,,20,,,,,,,55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,,,,55,,,,,,,,,,55,55,55,55,,,,,,,,,,55,55,,,,,,,,,,,,,,,,,,,,,,,,", ",28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,28,,28,28,28,25,,,,,,,,,,,,,,,,", ",,,,,,,,,,28,,,28,,28,,28,,,,,,,,,,,,,,,,28,,,,,,,,,,,,37,37,28,,,28", ",37,37,37,,,,,28,28,28,,,,,,,37,,,28,,,28,,37,37,,,,,,,,,,,,,,,,,,,", ",,,,,,55,,,,,55,,,28,,,28,55,55,,,,28,,,,,25,25,55,,,55,55,,,,,,55,", "55,,,,,,,,,,,,,,28,,28,,,28,28,,,,,28,,,28,,,,,,,,,,,,,,,,25,,25,28", ",,28,,25,,,,,,,,28,28,,,,,,,,,,,,,,,,,,,,,,,,,,,,,55,28,,37,55,37,37", "37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37", ",,,28,,,,,,37,,37,,,,,,37,,,,,,,,,,28,,,,,,,,,,,,,,37,,,,,,28,28,28", ",,,55,37,,,,,,28,28,28,37,,,,,,,,,,,,28,,,,,,,,,,,,,,,,,25,,,55,,,,", ",,,,,,,,,,55,,,,,,,,,,,,,,,37,,,,,,,,,,28,,,,,,,,,,,,,,28,28,28,,,,28", ",,25,,25,,25,,,,,,,,,,,,28,,,37,25,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,", "37,37,37,,,,25,,,25,28,,,,,,,,,,,,,,,,,,,,37,,,37,,37,,37,,,,,,,,,,", ",,,,,,,,,,,,,,,,,37,,,,,,,,,,,37,,,37,37,37,,,,,,,,,25,37,,,37,,,,,", ",,,,,,37,,,,,,,,,,,,,,,25,,,25,,,,,,,,,,25,25,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,25,,,,,,,,37,,37,,,,,,,,,,,,37,,,,,,,,,,25,,,,,,,,,37,,,37,,", ",,,,,,,37,37,25,,,,,,,,,,37,,,,,,,,,,25,,,37,,,,,,37,,,,,,,,,,,,,,,", ",,,25,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,37", ",,25,,,,,,,,,,37,37,37,,,,,,,,25,,,,,37,,,,,,,,,,,,,,25,,,,,,,,,,,,", ",,,,,,,,,25,,,,,,,,,,,,,,,,,,,,,,,,37,,,,,,,,,,,,,,37,37,37,,,,37,,", ",,,,,,37,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,37"];

      racc_goto_check = arr = Opal.get('Array').$new(2565, nil);

      idx = 0;

      ($a = ($e = clist).$each, $a.$$p = (TMP_7 = function(str){var self = TMP_7.$$s || this, $a, $b, TMP_8;
if (str == null) str = nil;
      return ($a = ($b = str.$split(",", -1)).$each, $a.$$p = (TMP_8 = function(i){var self = TMP_8.$$s || this, $a;
if (i == null) i = nil;
        if ((($a = i['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            arr['$[]='](idx, i.$to_i())
          };
          return idx = $rb_plus(idx, 1);}, TMP_8.$$s = self, TMP_8), $a).call($b)}, TMP_7.$$s = self, TMP_7), $a).call($e);

      racc_goto_pointer = [nil, 246, 84, nil, 11, 142, 41, 39, -294, 183, -530, -611, -579, nil, 52, 229, -23, 36, 36, 156, 515, 0, -51, 122, -176, 1549, 62, 79, 1145, 24, nil, 136, nil, -92, 303, -213, -368, 1634, 26, 57, nil, 12, 19, -266, 386, -296, -37, -60, -1, nil, 42, -40, 147, -58, -613, 1031, -14, -190, 46, -417, 68, -88, -329, -341, -239, -248, -11, nil, nil, nil, nil, nil, nil, nil, 184, 193, 189, nil, 151, -345, -661, -506, -308, 189, -115, 24, -591, 27, -279, 79, 74, -595, 76, -596, -452, -770, -452, -218, -701, 97, -440, -216, -440, -701, 114, -151, -28, -386, -517, -27, -222, -241, -561, -175, 169, -56, nil, -80, -72, -740, -342, -497, -611, nil, nil, nil, 141, 15, 37, 139, -173, -269, 141, -554, -385, -385, nil, -527, nil, -624, nil, -623, nil, -578, -637, -483, -625, -324, nil, -522, -263, -482, nil, -768, nil, nil, -453];

      racc_goto_default = [nil, nil, nil, 3, nil, 4, 354, 280, nil, 541, nil, 838, nil, 279, nil, nil, nil, 212, 16, 11, 213, 304, nil, 211, nil, 255, 15, nil, 19, 20, 21, nil, 25, 695, nil, nil, nil, 26, 29, nil, 31, 34, 33, nil, 209, 364, nil, 116, 436, 115, 69, nil, 42, nil, nil, 312, 314, nil, 315, 253, 434, nil, nil, 638, 487, nil, nil, 270, 43, 44, 45, 46, 47, 48, 49, nil, 271, 55, nil, nil, nil, nil, nil, nil, nil, 576, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 327, 326, 715, 329, nil, 330, 331, nil, nil, 440, nil, nil, nil, nil, nil, nil, 68, 70, 71, 72, nil, nil, nil, nil, 614, nil, nil, nil, nil, 396, 756, 759, 764, 761, 762, 763, 919, nil, nil, 767, 338, 333, 340, nil, 570, 571, 771, 343, 346, 261];

      racc_reduce_table = [0, 0, "racc_error", 1, 141, "_reduce_none", 2, 142, "_reduce_2", 0, 143, "_reduce_3", 1, 143, "_reduce_4", 3, 143, "_reduce_5", 1, 145, "_reduce_none", 4, 145, "_reduce_7", 4, 148, "_reduce_8", 2, 149, "_reduce_9", 0, 153, "_reduce_10", 1, 153, "_reduce_11", 3, 153, "_reduce_12", 0, 167, "_reduce_13", 4, 147, "_reduce_14", 3, 147, "_reduce_15", 3, 147, "_reduce_none", 3, 147, "_reduce_17", 2, 147, "_reduce_18", 3, 147, "_reduce_19", 3, 147, "_reduce_20", 3, 147, "_reduce_21", 3, 147, "_reduce_22", 3, 147, "_reduce_23", 4, 147, "_reduce_none", 3, 147, "_reduce_25", 3, 147, "_reduce_26", 3, 147, "_reduce_27", 6, 147, "_reduce_none", 6, 147, "_reduce_none", 5, 147, "_reduce_30", 5, 147, "_reduce_none", 5, 147, "_reduce_none", 3, 147, "_reduce_none", 3, 147, "_reduce_34", 3, 147, "_reduce_35", 3, 147, "_reduce_36", 1, 147, "_reduce_none", 1, 166, "_reduce_none", 3, 166, "_reduce_39", 3, 166, "_reduce_40", 2, 166, "_reduce_41", 2, 166, "_reduce_42", 1, 166, "_reduce_none", 1, 156, "_reduce_none", 1, 158, "_reduce_none", 1, 158, "_reduce_none", 2, 158, "_reduce_47", 2, 158, "_reduce_48", 2, 158, "_reduce_49", 1, 170, "_reduce_none", 4, 170, "_reduce_none", 4, 170, "_reduce_none", 4, 170, "_reduce_none", 4, 175, "_reduce_none", 2, 169, "_reduce_55", 3, 169, "_reduce_none", 4, 169, "_reduce_57", 5, 169, "_reduce_none", 4, 169, "_reduce_59", 5, 169, "_reduce_none", 4, 169, "_reduce_61", 5, 169, "_reduce_none", 2, 169, "_reduce_63", 2, 169, "_reduce_64", 1, 159, "_reduce_65", 3, 159, "_reduce_66", 1, 179, "_reduce_67", 3, 179, "_reduce_68", 1, 178, "_reduce_69", 2, 178, "_reduce_70", 3, 178, "_reduce_71", 5, 178, "_reduce_72", 2, 178, "_reduce_73", 4, 178, "_reduce_74", 2, 178, "_reduce_75", 4, 178, "_reduce_76", 1, 178, "_reduce_77", 3, 178, "_reduce_78", 1, 181, "_reduce_79", 3, 181, "_reduce_80", 2, 180, "_reduce_81", 3, 180, "_reduce_82", 1, 183, "_reduce_83", 3, 183, "_reduce_84", 1, 182, "_reduce_85", 4, 182, "_reduce_86", 3, 182, "_reduce_87", 3, 182, "_reduce_none", 3, 182, "_reduce_none", 3, 182, "_reduce_none", 2, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 157, "_reduce_93", 4, 157, "_reduce_94", 4, 157, "_reduce_95", 3, 157, "_reduce_96", 3, 157, "_reduce_97", 3, 157, "_reduce_98", 3, 157, "_reduce_99", 2, 157, "_reduce_100", 1, 157, "_reduce_none", 1, 185, "_reduce_none", 2, 186, "_reduce_103", 1, 186, "_reduce_104", 3, 186, "_reduce_105", 1, 187, "_reduce_none", 1, 187, "_reduce_none", 1, 187, "_reduce_none", 1, 187, "_reduce_109", 1, 187, "_reduce_110", 1, 154, "_reduce_111", 1, 154, "_reduce_none", 1, 155, "_reduce_113", 3, 155, "_reduce_114", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 1, 189, "_reduce_none", 3, 168, "_reduce_189", 5, 168, "_reduce_190", 3, 168, "_reduce_191", 6, 168, "_reduce_192", 6, 168, "_reduce_193", 5, 168, "_reduce_194", 5, 168, "_reduce_none", 5, 168, "_reduce_none", 5, 168, "_reduce_none", 4, 168, "_reduce_none", 3, 168, "_reduce_none", 3, 168, "_reduce_200", 3, 168, "_reduce_201", 3, 168, "_reduce_202", 3, 168, "_reduce_203", 3, 168, "_reduce_204", 3, 168, "_reduce_205", 3, 168, "_reduce_206", 3, 168, "_reduce_207", 4, 168, "_reduce_208", 4, 168, "_reduce_209", 2, 168, "_reduce_210", 2, 168, "_reduce_211", 3, 168, "_reduce_212", 3, 168, "_reduce_213", 3, 168, "_reduce_214", 3, 168, "_reduce_215", 3, 168, "_reduce_216", 3, 168, "_reduce_217", 3, 168, "_reduce_218", 3, 168, "_reduce_219", 3, 168, "_reduce_220", 3, 168, "_reduce_221", 3, 168, "_reduce_222", 3, 168, "_reduce_223", 3, 168, "_reduce_224", 2, 168, "_reduce_225", 2, 168, "_reduce_226", 3, 168, "_reduce_227", 3, 168, "_reduce_228", 3, 168, "_reduce_229", 3, 168, "_reduce_230", 3, 168, "_reduce_231", 0, 193, "_reduce_232", 0, 194, "_reduce_233", 7, 168, "_reduce_234", 1, 168, "_reduce_none", 1, 165, "_reduce_none", 1, 162, "_reduce_237", 2, 162, "_reduce_238", 2, 162, "_reduce_239", 4, 162, "_reduce_240", 2, 162, "_reduce_241", 3, 162, "_reduce_242", 3, 200, "_reduce_243", 2, 202, "_reduce_none", 1, 203, "_reduce_245", 1, 203, "_reduce_none", 1, 201, "_reduce_247", 1, 201, "_reduce_none", 2, 201, "_reduce_249", 4, 201, "_reduce_250", 2, 201, "_reduce_251", 1, 171, "_reduce_252", 2, 171, "_reduce_253", 2, 171, "_reduce_254", 4, 171, "_reduce_255", 1, 171, "_reduce_256", 4, 205, "_reduce_none", 1, 205, "_reduce_none", 0, 207, "_reduce_259", 2, 174, "_reduce_260", 1, 206, "_reduce_none", 2, 206, "_reduce_262", 3, 206, "_reduce_263", 2, 199, "_reduce_264", 2, 204, "_reduce_265", 0, 204, "_reduce_266", 1, 196, "_reduce_267", 2, 196, "_reduce_268", 3, 196, "_reduce_269", 4, 196, "_reduce_270", 3, 164, "_reduce_271", 4, 164, "_reduce_272", 2, 164, "_reduce_273", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 1, 192, "_reduce_none", 0, 229, "_reduce_283", 4, 192, "_reduce_284", 4, 192, "_reduce_285", 3, 192, "_reduce_286", 3, 192, "_reduce_287", 2, 192, "_reduce_288", 4, 192, "_reduce_289", 4, 192, "_reduce_290", 3, 192, "_reduce_291", 3, 192, "_reduce_292", 1, 192, "_reduce_293", 4, 192, "_reduce_294", 3, 192, "_reduce_295", 1, 192, "_reduce_296", 5, 192, "_reduce_297", 4, 192, "_reduce_298", 3, 192, "_reduce_299", 2, 192, "_reduce_300", 1, 192, "_reduce_none", 2, 192, "_reduce_302", 2, 192, "_reduce_303", 6, 192, "_reduce_304", 6, 192, "_reduce_305", 0, 230, "_reduce_306", 0, 231, "_reduce_307", 7, 192, "_reduce_308", 0, 232, "_reduce_309", 0, 233, "_reduce_310", 7, 192, "_reduce_311", 5, 192, "_reduce_312", 4, 192, "_reduce_313", 5, 192, "_reduce_314", 0, 234, "_reduce_315", 0, 235, "_reduce_316", 9, 192, "_reduce_317", 0, 236, "_reduce_318", 6, 192, "_reduce_319", 0, 237, "_reduce_320", 0, 238, "_reduce_321", 8, 192, "_reduce_322", 0, 239, "_reduce_323", 0, 240, "_reduce_324", 6, 192, "_reduce_325", 0, 241, "_reduce_326", 6, 192, "_reduce_327", 0, 242, "_reduce_328", 0, 243, "_reduce_329", 9, 192, "_reduce_330", 1, 192, "_reduce_331", 1, 192, "_reduce_332", 1, 192, "_reduce_333", 1, 192, "_reduce_none", 1, 161, "_reduce_none", 1, 219, "_reduce_none", 1, 219, "_reduce_none", 1, 219, "_reduce_none", 2, 219, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 1, 221, "_reduce_none", 2, 218, "_reduce_343", 3, 244, "_reduce_344", 2, 244, "_reduce_345", 1, 244, "_reduce_none", 1, 244, "_reduce_none", 3, 245, "_reduce_348", 3, 245, "_reduce_349", 1, 220, "_reduce_350", 5, 220, "_reduce_351", 1, 151, "_reduce_none", 2, 151, "_reduce_353", 1, 247, "_reduce_354", 3, 247, "_reduce_355", 3, 248, "_reduce_356", 1, 176, "_reduce_none", 2, 176, "_reduce_358", 1, 176, "_reduce_359", 3, 176, "_reduce_360", 1, 249, "_reduce_361", 2, 251, "_reduce_362", 1, 251, "_reduce_363", 6, 246, "_reduce_364", 4, 246, "_reduce_365", 4, 246, "_reduce_366", 2, 246, "_reduce_367", 2, 246, "_reduce_368", 4, 246, "_reduce_369", 2, 246, "_reduce_370", 2, 246, "_reduce_371", 1, 246, "_reduce_372", 0, 255, "_reduce_373", 5, 254, "_reduce_374", 2, 172, "_reduce_375", 4, 172, "_reduce_none", 4, 172, "_reduce_none", 4, 172, "_reduce_none", 2, 217, "_reduce_379", 4, 217, "_reduce_380", 4, 217, "_reduce_381", 3, 217, "_reduce_382", 4, 217, "_reduce_383", 3, 217, "_reduce_384", 2, 217, "_reduce_385", 1, 217, "_reduce_386", 0, 257, "_reduce_387", 5, 216, "_reduce_388", 0, 258, "_reduce_389", 5, 216, "_reduce_390", 0, 260, "_reduce_391", 6, 222, "_reduce_392", 1, 259, "_reduce_393", 1, 259, "_reduce_none", 6, 150, "_reduce_395", 0, 150, "_reduce_396", 1, 261, "_reduce_397", 1, 261, "_reduce_none", 1, 261, "_reduce_none", 2, 262, "_reduce_400", 1, 262, "_reduce_401", 2, 152, "_reduce_402", 1, 152, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 208, "_reduce_none", 1, 209, "_reduce_407", 1, 265, "_reduce_none", 2, 265, "_reduce_409", 3, 266, "_reduce_410", 1, 266, "_reduce_411", 3, 210, "_reduce_412", 3, 211, "_reduce_413", 3, 212, "_reduce_414", 3, 212, "_reduce_415", 1, 269, "_reduce_416", 3, 269, "_reduce_417", 1, 270, "_reduce_418", 2, 270, "_reduce_419", 3, 213, "_reduce_420", 3, 213, "_reduce_421", 1, 272, "_reduce_422", 3, 272, "_reduce_423", 1, 267, "_reduce_424", 2, 267, "_reduce_425", 1, 268, "_reduce_426", 2, 268, "_reduce_427", 1, 271, "_reduce_428", 0, 274, "_reduce_429", 3, 271, "_reduce_430", 0, 275, "_reduce_431", 4, 271, "_reduce_432", 1, 273, "_reduce_433", 1, 273, "_reduce_434", 1, 273, "_reduce_435", 1, 273, "_reduce_none", 2, 190, "_reduce_437", 1, 190, "_reduce_438", 1, 276, "_reduce_none", 1, 276, "_reduce_none", 1, 276, "_reduce_none", 1, 276, "_reduce_none", 3, 264, "_reduce_443", 1, 263, "_reduce_444", 1, 263, "_reduce_445", 2, 263, "_reduce_446", 2, 263, "_reduce_447", 2, 263, "_reduce_448", 2, 263, "_reduce_449", 1, 184, "_reduce_450", 1, 184, "_reduce_451", 1, 184, "_reduce_452", 1, 184, "_reduce_453", 1, 184, "_reduce_454", 1, 184, "_reduce_455", 1, 184, "_reduce_456", 1, 184, "_reduce_457", 1, 184, "_reduce_458", 1, 184, "_reduce_459", 1, 184, "_reduce_460", 1, 214, "_reduce_461", 1, 160, "_reduce_462", 1, 163, "_reduce_463", 1, 163, "_reduce_none", 1, 224, "_reduce_465", 3, 224, "_reduce_466", 2, 224, "_reduce_467", 4, 226, "_reduce_468", 2, 226, "_reduce_469", 1, 278, "_reduce_none", 1, 278, "_reduce_none", 2, 279, "_reduce_472", 1, 279, "_reduce_473", 1, 280, "_reduce_474", 2, 281, "_reduce_475", 1, 281, "_reduce_476", 1, 282, "_reduce_477", 3, 282, "_reduce_478", 4, 283, "_reduce_479", 2, 283, "_reduce_480", 2, 283, "_reduce_481", 1, 283, "_reduce_482", 2, 285, "_reduce_483", 0, 285, "_reduce_484", 6, 277, "_reduce_485", 4, 277, "_reduce_486", 4, 277, "_reduce_487", 2, 277, "_reduce_488", 4, 277, "_reduce_489", 2, 277, "_reduce_490", 2, 277, "_reduce_491", 1, 277, "_reduce_492", 0, 277, "_reduce_493", 1, 287, "_reduce_none", 1, 287, "_reduce_495", 1, 288, "_reduce_496", 1, 288, "_reduce_497", 1, 288, "_reduce_498", 1, 288, "_reduce_499", 1, 289, "_reduce_500", 3, 289, "_reduce_501", 1, 223, "_reduce_none", 1, 223, "_reduce_none", 1, 291, "_reduce_504", 3, 291, "_reduce_none", 1, 292, "_reduce_506", 3, 292, "_reduce_507", 1, 290, "_reduce_none", 4, 290, "_reduce_none", 3, 290, "_reduce_none", 2, 290, "_reduce_none", 1, 290, "_reduce_none", 1, 252, "_reduce_513", 3, 252, "_reduce_514", 3, 293, "_reduce_515", 1, 286, "_reduce_516", 3, 286, "_reduce_517", 1, 294, "_reduce_none", 1, 294, "_reduce_none", 2, 253, "_reduce_520", 1, 253, "_reduce_521", 1, 295, "_reduce_none", 1, 295, "_reduce_none", 2, 250, "_reduce_524", 2, 284, "_reduce_525", 0, 284, "_reduce_526", 1, 227, "_reduce_527", 4, 227, "_reduce_528", 0, 215, "_reduce_529", 2, 215, "_reduce_530", 1, 198, "_reduce_531", 3, 198, "_reduce_532", 3, 296, "_reduce_533", 2, 296, "_reduce_534", 4, 296, "_reduce_535", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 173, "_reduce_none", 1, 173, "_reduce_none", 1, 173, "_reduce_none", 1, 173, "_reduce_none", 1, 256, "_reduce_none", 1, 256, "_reduce_none", 1, 256, "_reduce_none", 1, 228, "_reduce_none", 1, 228, "_reduce_none", 0, 144, "_reduce_none", 1, 144, "_reduce_none", 0, 191, "_reduce_none", 1, 191, "_reduce_none", 0, 197, "_reduce_none", 1, 197, "_reduce_none", 1, 197, "_reduce_none", 1, 225, "_reduce_none", 1, 225, "_reduce_none", 1, 146, "_reduce_none", 2, 146, "_reduce_none", 0, 195, "_reduce_559"];

      racc_reduce_n = 560;

      racc_shift_n = 977;

      racc_token_table = $hash(false, 0, "error", 1, "kCLASS", 2, "kMODULE", 3, "kDEF", 4, "kUNDEF", 5, "kBEGIN", 6, "kRESCUE", 7, "kENSURE", 8, "kEND", 9, "kIF", 10, "kUNLESS", 11, "kTHEN", 12, "kELSIF", 13, "kELSE", 14, "kCASE", 15, "kWHEN", 16, "kWHILE", 17, "kUNTIL", 18, "kFOR", 19, "kBREAK", 20, "kNEXT", 21, "kREDO", 22, "kRETRY", 23, "kIN", 24, "kDO", 25, "kDO_COND", 26, "kDO_BLOCK", 27, "kDO_LAMBDA", 28, "kRETURN", 29, "kYIELD", 30, "kSUPER", 31, "kSELF", 32, "kNIL", 33, "kTRUE", 34, "kFALSE", 35, "kAND", 36, "kOR", 37, "kNOT", 38, "kIF_MOD", 39, "kUNLESS_MOD", 40, "kWHILE_MOD", 41, "kUNTIL_MOD", 42, "kRESCUE_MOD", 43, "kALIAS", 44, "kDEFINED", 45, "klBEGIN", 46, "klEND", 47, "k__LINE__", 48, "k__FILE__", 49, "tIDENTIFIER", 50, "tFID", 51, "tGVAR", 52, "tIVAR", 53, "tCONSTANT", 54, "tLABEL", 55, "tCVAR", 56, "tNTH_REF", 57, "tBACK_REF", 58, "tSTRING_CONTENT", 59, "tINTEGER", 60, "tFLOAT", 61, "tREGEXP_END", 62, "tUPLUS", 63, "tUMINUS", 64, "tPOW", 65, "tCMP", 66, "tEQ", 67, "tEQQ", 68, "tNEQ", 69, "tGEQ", 70, "tLEQ", 71, "tANDOP", 72, "tOROP", 73, "tMATCH", 74, "tNMATCH", 75, "tJSDOT", 76, "tDOT", 77, "tDOT2", 78, "tDOT3", 79, "tAREF", 80, "tASET", 81, "tLSHFT", 82, "tRSHFT", 83, "tCOLON2", 84, "tCOLON3", 85, "tOP_ASGN", 86, "tASSOC", 87, "tLPAREN", 88, "tLPAREN2", 89, "tRPAREN", 90, "tLPAREN_ARG", 91, "tRBRACK", 92, "tLBRACE", 93, "tLBRACE_ARG", 94, "tSTAR", 95, "tSTAR2", 96, "tAMPER", 97, "tAMPER2", 98, "tTILDE", 99, "tPERCENT", 100, "tDIVIDE", 101, "tPLUS", 102, "tMINUS", 103, "tLT", 104, "tGT", 105, "tPIPE", 106, "tBANG", 107, "tCARET", 108, "tLCURLY", 109, "tRCURLY", 110, "tBACK_REF2", 111, "tSYMBEG", 112, "tSTRING_BEG", 113, "tXSTRING_BEG", 114, "tREGEXP_BEG", 115, "tWORDS_BEG", 116, "tAWORDS_BEG", 117, "tSTRING_DBEG", 118, "tSTRING_DVAR", 119, "tSTRING_END", 120, "tSTRING", 121, "tSYMBOL", 122, "tNL", 123, "tEH", 124, "tCOLON", 125, "tCOMMA", 126, "tSPACE", 127, "tSEMI", 128, "tLAMBDA", 129, "tLAMBEG", 130, "tLBRACK2", 131, "tLBRACK", 132, "tJSLBRACK", 133, "tDSTAR", 134, "tLABEL_END", 135, "tEQL", 136, "tLOWEST", 137, "-@NUM", 138, "+@NUM", 139);

      racc_nt_base = 140;

      racc_use_result_var = true;

      Opal.cdecl($scope, 'Racc_arg', [racc_action_table, racc_action_check, racc_action_default, racc_action_pointer, racc_goto_table, racc_goto_check, racc_goto_default, racc_goto_pointer, racc_nt_base, racc_reduce_table, racc_token_table, racc_shift_n, racc_reduce_n, racc_use_result_var]);

      Opal.cdecl($scope, 'Racc_token_to_s_table', ["$end", "error", "kCLASS", "kMODULE", "kDEF", "kUNDEF", "kBEGIN", "kRESCUE", "kENSURE", "kEND", "kIF", "kUNLESS", "kTHEN", "kELSIF", "kELSE", "kCASE", "kWHEN", "kWHILE", "kUNTIL", "kFOR", "kBREAK", "kNEXT", "kREDO", "kRETRY", "kIN", "kDO", "kDO_COND", "kDO_BLOCK", "kDO_LAMBDA", "kRETURN", "kYIELD", "kSUPER", "kSELF", "kNIL", "kTRUE", "kFALSE", "kAND", "kOR", "kNOT", "kIF_MOD", "kUNLESS_MOD", "kWHILE_MOD", "kUNTIL_MOD", "kRESCUE_MOD", "kALIAS", "kDEFINED", "klBEGIN", "klEND", "k__LINE__", "k__FILE__", "tIDENTIFIER", "tFID", "tGVAR", "tIVAR", "tCONSTANT", "tLABEL", "tCVAR", "tNTH_REF", "tBACK_REF", "tSTRING_CONTENT", "tINTEGER", "tFLOAT", "tREGEXP_END", "tUPLUS", "tUMINUS", "tPOW", "tCMP", "tEQ", "tEQQ", "tNEQ", "tGEQ", "tLEQ", "tANDOP", "tOROP", "tMATCH", "tNMATCH", "tJSDOT", "tDOT", "tDOT2", "tDOT3", "tAREF", "tASET", "tLSHFT", "tRSHFT", "tCOLON2", "tCOLON3", "tOP_ASGN", "tASSOC", "tLPAREN", "tLPAREN2", "tRPAREN", "tLPAREN_ARG", "tRBRACK", "tLBRACE", "tLBRACE_ARG", "tSTAR", "tSTAR2", "tAMPER", "tAMPER2", "tTILDE", "tPERCENT", "tDIVIDE", "tPLUS", "tMINUS", "tLT", "tGT", "tPIPE", "tBANG", "tCARET", "tLCURLY", "tRCURLY", "tBACK_REF2", "tSYMBEG", "tSTRING_BEG", "tXSTRING_BEG", "tREGEXP_BEG", "tWORDS_BEG", "tAWORDS_BEG", "tSTRING_DBEG", "tSTRING_DVAR", "tSTRING_END", "tSTRING", "tSYMBOL", "tNL", "tEH", "tCOLON", "tCOMMA", "tSPACE", "tSEMI", "tLAMBDA", "tLAMBEG", "tLBRACK2", "tLBRACK", "tJSLBRACK", "tDSTAR", "tLABEL_END", "tEQL", "tLOWEST", "\"-@NUM\"", "\"+@NUM\"", "$start", "program", "top_compstmt", "top_stmts", "opt_terms", "top_stmt", "terms", "stmt", "bodystmt", "compstmt", "opt_rescue", "opt_else", "opt_ensure", "stmts", "fitem", "undef_list", "expr_value", "lhs", "command_call", "mlhs", "var_lhs", "primary_value", "aref_args", "backref", "mrhs", "arg_value", "expr", "@1", "arg", "command", "block_command", "call_args", "block_call", "operation2", "command_args", "cmd_brace_block", "opt_block_var", "operation", "mlhs_basic", "mlhs_entry", "mlhs_head", "mlhs_item", "mlhs_node", "mlhs_post", "variable", "cname", "cpath", "fname", "op", "reswords", "symbol", "opt_nl", "primary", "@2", "@3", "none", "args", "trailer", "assocs", "block_arg", "paren_args", "opt_call_args", "rparen", "opt_paren_args", "opt_block_arg", "call_args2", "open_args", "@4", "literal", "strings", "xstring", "regexp", "words", "awords", "var_ref", "assoc_list", "brace_block", "method_call", "lambda", "then", "if_tail", "do", "case_body", "for_var", "superclass", "term", "f_arglist", "singleton", "dot_or_colon", "@5", "@6", "@7", "@8", "@9", "@10", "@11", "@12", "@13", "@14", "@15", "@16", "@17", "@18", "@19", "f_larglist", "lambda_body", "block_param", "f_block_optarg", "f_block_opt", "block_args_tail", "f_block_arg", "opt_block_args_tail", "f_arg", "f_rest_arg", "do_block", "@20", "operation3", "@21", "@22", "cases", "@23", "exc_list", "exc_var", "numeric", "dsym", "string", "string1", "string_contents", "xstring_contents", "word_list", "word", "string_content", "qword_list", "string_dvar", "@24", "@25", "sym", "f_args", "kwrest_mark", "f_kwrest", "f_label", "f_kw", "f_kwarg", "args_tail", "opt_f_block_arg", "opt_args_tail", "f_optarg", "f_norm_arg", "f_bad_arg", "f_arg_item", "f_margs", "f_marg", "f_marg_list", "f_opt", "restarg_mark", "blkarg_mark", "assoc"]);

      Opal.cdecl($scope, 'Racc_debug_parser', false);

      Opal.defn(self, '$_reduce_2', function(val, _values, result) {
        var self = this;

        result = self.$new_compstmt(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_3', function(val, _values, result) {
        var self = this;

        result = self.$new_block();
        return result;
      });

      Opal.defn(self, '$_reduce_4', function(val, _values, result) {
        var self = this;

        result = self.$new_block(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_5', function(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](val['$[]'](2));
        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_7', function(val, _values, result) {
        var self = this;

        result = val['$[]'](2);
        return result;
      });

      Opal.defn(self, '$_reduce_8', function(val, _values, result) {
        var self = this;

        result = self.$new_body(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_9', function(val, _values, result) {
        var self = this;

        result = self.$new_compstmt(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_10', function(val, _values, result) {
        var self = this;

        result = self.$new_block();
        return result;
      });

      Opal.defn(self, '$_reduce_11', function(val, _values, result) {
        var self = this;

        result = self.$new_block(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_12', function(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](val['$[]'](2));
        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_13', function(val, _values, result) {
        var $a, $b, self = this;

        (($a = ["expr_fname"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      });

      Opal.defn(self, '$_reduce_14', function(val, _values, result) {
        var self = this;

        result = self.$new_alias(val['$[]'](0), val['$[]'](1), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_15', function(val, _values, result) {
        var self = this;

        result = self.$s("valias", self.$value(val['$[]'](1)).$to_sym(), self.$value(val['$[]'](2)).$to_sym());
        return result;
      });

      Opal.defn(self, '$_reduce_17', function(val, _values, result) {
        var self = this;

        result = self.$s("valias", self.$value(val['$[]'](1)).$to_sym(), self.$value(val['$[]'](2)).$to_sym());
        return result;
      });

      Opal.defn(self, '$_reduce_18', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_19', function(val, _values, result) {
        var self = this;

        result = self.$new_if(val['$[]'](1), val['$[]'](2), val['$[]'](0), nil);
        return result;
      });

      Opal.defn(self, '$_reduce_20', function(val, _values, result) {
        var self = this;

        result = self.$new_if(val['$[]'](1), val['$[]'](2), nil, val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_21', function(val, _values, result) {
        var self = this;

        result = self.$new_while(val['$[]'](1), val['$[]'](2), val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_22', function(val, _values, result) {
        var self = this;

        result = self.$new_until(val['$[]'](1), val['$[]'](2), val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_23', function(val, _values, result) {
        var self = this;

        result = self.$new_rescue_mod(val['$[]'](1), val['$[]'](0), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_25', function(val, _values, result) {
        var self = this;

        result = self.$new_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_26', function(val, _values, result) {
        var self = this;

        result = self.$s("masgn", val['$[]'](0), self.$s("to_ary", val['$[]'](2)));
        return result;
      });

      Opal.defn(self, '$_reduce_27', function(val, _values, result) {
        var self = this;

        result = self.$new_op_asgn(val['$[]'](1), val['$[]'](0), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_30', function(val, _values, result) {
        var self = this;

        result = self.$s("op_asgn2", val['$[]'](0), self.$op_to_setter(val['$[]'](2)), self.$value(val['$[]'](3)).$to_sym(), val['$[]'](4));
        return result;
      });

      Opal.defn(self, '$_reduce_34', function(val, _values, result) {
        var self = this;

        result = self.$new_assign(val['$[]'](0), val['$[]'](1), self.$s("svalue", val['$[]'](2)));
        return result;
      });

      Opal.defn(self, '$_reduce_35', function(val, _values, result) {
        var self = this;

        result = self.$s("masgn", val['$[]'](0), self.$s("to_ary", val['$[]'](2)));
        return result;
      });

      Opal.defn(self, '$_reduce_36', function(val, _values, result) {
        var self = this;

        result = self.$s("masgn", val['$[]'](0), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_39', function(val, _values, result) {
        var self = this;

        result = self.$s("and", val['$[]'](0), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_40', function(val, _values, result) {
        var self = this;

        result = self.$s("or", val['$[]'](0), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_41', function(val, _values, result) {
        var self = this;

        result = self.$new_unary_call(["!", []], val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_42', function(val, _values, result) {
        var self = this;

        result = self.$new_unary_call(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_47', function(val, _values, result) {
        var self = this;

        result = self.$new_return(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_48', function(val, _values, result) {
        var self = this;

        result = self.$new_break(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_49', function(val, _values, result) {
        var self = this;

        result = self.$new_next(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_55', function(val, _values, result) {
        var self = this;

        result = self.$new_call(nil, val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_57', function(val, _values, result) {
        var self = this;

        result = self.$new_js_call(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_59', function(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_61', function(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_63', function(val, _values, result) {
        var self = this;

        result = self.$new_super(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_64', function(val, _values, result) {
        var self = this;

        result = self.$new_yield(val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_65', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_66', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_67', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_68', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_69', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_70', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_71', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.$s("splat", val['$[]'](2)));
        return result;
      });

      Opal.defn(self, '$_reduce_72', function(val, _values, result) {
        var self = this;

        result = (val['$[]'](0)['$<<'](self.$s("splat", val['$[]'](2)))).$concat(val['$[]'](4).$children());
        return result;
      });

      Opal.defn(self, '$_reduce_73', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.$s("splat"));
        return result;
      });

      Opal.defn(self, '$_reduce_74', function(val, _values, result) {
        var self = this;

        result = (val['$[]'](0)['$<<'](self.$s("splat"))).$concat(val['$[]'](3).$children());
        return result;
      });

      Opal.defn(self, '$_reduce_75', function(val, _values, result) {
        var self = this;

        result = self.$s("array", self.$s("splat", val['$[]'](1)));
        return result;
      });

      Opal.defn(self, '$_reduce_76', function(val, _values, result) {
        var self = this;

        result = self.$s("array", self.$s("splat", val['$[]'](1))).$concat(val['$[]'](3).$children());
        return result;
      });

      Opal.defn(self, '$_reduce_77', function(val, _values, result) {
        var self = this;

        result = self.$s("array", self.$s("splat"));
        return result;
      });

      Opal.defn(self, '$_reduce_78', function(val, _values, result) {
        var self = this;

        result = self.$s("array", self.$s("splat")).$concat(val['$[]'](2).$children());
        return result;
      });

      Opal.defn(self, '$_reduce_79', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_80', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_81', function(val, _values, result) {
        var self = this;

        result = self.$s("array", val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_82', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_83', function(val, _values, result) {
        var self = this;

        result = self.$s("array", val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_84', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_85', function(val, _values, result) {
        var self = this;

        result = self.$new_assignable(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_86', function(val, _values, result) {
        var $a, self = this, args = nil;

        args = (function() {if ((($a = val['$[]'](2)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return val['$[]'](2)
          } else {
          return []
        }; return nil; })();
        result = self.$s("attrasgn", val['$[]'](0), "[]=", ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args))));
        return result;
      });

      Opal.defn(self, '$_reduce_87', function(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2), []);
        return result;
      });

      Opal.defn(self, '$_reduce_93', function(val, _values, result) {
        var self = this;

        result = self.$new_assignable(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_94', function(val, _values, result) {
        var self = this;

        result = self.$new_js_attrasgn(val['$[]'](0), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_95', function(val, _values, result) {
        var self = this;

        result = self.$new_attrasgn(val['$[]'](0), "[]=", val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_96', function(val, _values, result) {
        var self = this;

        result = self.$new_attrasgn(val['$[]'](0), self.$op_to_setter(val['$[]'](2)));
        return result;
      });

      Opal.defn(self, '$_reduce_97', function(val, _values, result) {
        var self = this;

        result = self.$new_attrasgn(val['$[]'](0), self.$op_to_setter(val['$[]'](2)));
        return result;
      });

      Opal.defn(self, '$_reduce_98', function(val, _values, result) {
        var self = this;

        result = self.$new_attrasgn(val['$[]'](0), self.$op_to_setter(val['$[]'](2)));
        return result;
      });

      Opal.defn(self, '$_reduce_99', function(val, _values, result) {
        var self = this;

        result = self.$new_colon2(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_100', function(val, _values, result) {
        var self = this;

        result = self.$new_colon3(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_103', function(val, _values, result) {
        var self = this;

        result = self.$new_colon3(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_104', function(val, _values, result) {
        var self = this;

        result = self.$new_const(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_105', function(val, _values, result) {
        var self = this;

        result = self.$new_colon2(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_109', function(val, _values, result) {
        var $a, $b, self = this;

        (($a = ["expr_end"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_110', function(val, _values, result) {
        var $a, $b, self = this;

        (($a = ["expr_end"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_111', function(val, _values, result) {
        var self = this;

        result = self.$new_sym(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_113', function(val, _values, result) {
        var self = this;

        result = self.$s("undef", val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_114', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_189', function(val, _values, result) {
        var self = this;

        result = self.$new_assign(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_190', function(val, _values, result) {
        var self = this;

        result = self.$new_assign(val['$[]'](0), val['$[]'](1), self.$s("rescue_mod", val['$[]'](2), val['$[]'](4)));
        return result;
      });

      Opal.defn(self, '$_reduce_191', function(val, _values, result) {
        var self = this;

        result = self.$new_op_asgn(val['$[]'](1), val['$[]'](0), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_192', function(val, _values, result) {
        var self = this;

        result = self.$new_op_asgn1(val['$[]'](0), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      });

      Opal.defn(self, '$_reduce_193', function(val, _values, result) {
        var self = this;

        self.$raise(".JS[...] " + (val['$[]'](4)) + " is not supported");
        return result;
      });

      Opal.defn(self, '$_reduce_194', function(val, _values, result) {
        var self = this;

        result = self.$s("op_asgn2", val['$[]'](0), self.$op_to_setter(val['$[]'](2)), self.$value(val['$[]'](3)).$to_sym(), val['$[]'](4));
        return result;
      });

      Opal.defn(self, '$_reduce_200', function(val, _values, result) {
        var self = this;

        result = self.$new_irange(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_201', function(val, _values, result) {
        var self = this;

        result = self.$new_erange(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_202', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_203', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_204', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_205', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_206', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_207', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_208', function(val, _values, result) {
        var self = this;

        result = self.$new_call(self.$new_binary_call(self.$new_int(val['$[]'](1)), val['$[]'](2), val['$[]'](3)), ["-@", []], []);
        return result;
      });

      Opal.defn(self, '$_reduce_209', function(val, _values, result) {
        var self = this;

        result = self.$new_call(self.$new_binary_call(self.$new_float(val['$[]'](1)), val['$[]'](2), val['$[]'](3)), ["-@", []], []);
        return result;
      });

      Opal.defn(self, '$_reduce_210', function(val, _values, result) {
        var $a, self = this;

        result = self.$new_call(val['$[]'](1), ["+@", []], []);
        if ((($a = ["int", "float"]['$include?'](val['$[]'](1).$type())) !== nil && (!$a.$$is_boolean || $a == true))) {
          result = val['$[]'](1)};
        return result;
      });

      Opal.defn(self, '$_reduce_211', function(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](1), ["-@", []], []);
        if (val['$[]'](1).$type()['$==']("int")) {
          val['$[]'](1)['$[]='](1, val['$[]'](1)['$[]'](1)['$-@']());
          result = val['$[]'](1);
        } else if (val['$[]'](1).$type()['$==']("float")) {
          val['$[]'](1)['$[]='](1, val['$[]'](1)['$[]'](1).$to_f()['$-@']());
          result = val['$[]'](1);};
        return result;
      });

      Opal.defn(self, '$_reduce_212', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_213', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_214', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_215', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_216', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_217', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_218', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_219', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_220', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_221', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_222', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_223', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_224', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_225', function(val, _values, result) {
        var self = this;

        result = self.$new_unary_call(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_226', function(val, _values, result) {
        var self = this;

        result = self.$new_unary_call(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_227', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_228', function(val, _values, result) {
        var self = this;

        result = self.$new_binary_call(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_229', function(val, _values, result) {
        var self = this;

        result = self.$new_and(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_230', function(val, _values, result) {
        var self = this;

        result = self.$new_or(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_231', function(val, _values, result) {
        var self = this;

        result = self.$s("defined", val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_232', function(val, _values, result) {
        var self = this;

        self.$lexer().$cond_push(1);
        return result;
      });

      Opal.defn(self, '$_reduce_233', function(val, _values, result) {
        var self = this;

        self.$lexer().$cond_pop();
        return result;
      });

      Opal.defn(self, '$_reduce_234', function(val, _values, result) {
        var self = this;

        result = self.$new_if(val['$[]'](1), val['$[]'](0), val['$[]'](3), val['$[]'](6));
        return result;
      });

      Opal.defn(self, '$_reduce_237', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      Opal.defn(self, '$_reduce_238', function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      });

      Opal.defn(self, '$_reduce_239', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_240', function(val, _values, result) {
        var $a, self = this;

        val['$[]'](0)['$<<'](($a = self).$s.apply($a, ["hash"].concat(Opal.to_a(val['$[]'](2)))));
        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_241', function(val, _values, result) {
        var $a, self = this;

        result = [($a = self).$s.apply($a, ["hash"].concat(Opal.to_a(val['$[]'](0))))];
        return result;
      });

      Opal.defn(self, '$_reduce_242', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_243', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_245', function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      });

      Opal.defn(self, '$_reduce_247', function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      });

      Opal.defn(self, '$_reduce_249', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_250', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        result['$<<'](self.$new_hash(nil, val['$[]'](2), nil));
        return result;
      });

      Opal.defn(self, '$_reduce_251', function(val, _values, result) {
        var self = this;

        result = [self.$new_hash(nil, val['$[]'](0), nil)];
        return result;
      });

      Opal.defn(self, '$_reduce_252', function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      });

      Opal.defn(self, '$_reduce_253', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        self.$add_block_pass(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_254', function(val, _values, result) {
        var self = this;

        result = [self.$new_hash(nil, val['$[]'](0), nil)];
        self.$add_block_pass(result, val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_255', function(val, _values, result) {
        var $a, self = this;

        result = val['$[]'](0);
        result['$<<'](self.$new_hash(nil, val['$[]'](2), nil));
        if ((($a = val['$[]'](3)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result['$<<'](val['$[]'](3))};
        return result;
      });

      Opal.defn(self, '$_reduce_256', function(val, _values, result) {
        var self = this;

        result = [];
        self.$add_block_pass(result, val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_259', function(val, _values, result) {
        var self = this;

        self.$lexer().$cmdarg_push(1);
        return result;
      });

      Opal.defn(self, '$_reduce_260', function(val, _values, result) {
        var self = this;

        self.$lexer().$cmdarg_pop();
        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_262', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      Opal.defn(self, '$_reduce_263', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_264', function(val, _values, result) {
        var self = this;

        result = self.$new_block_pass(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_265', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_266', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      Opal.defn(self, '$_reduce_267', function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      });

      Opal.defn(self, '$_reduce_268', function(val, _values, result) {
        var self = this;

        result = [self.$new_splat(val['$[]'](0), val['$[]'](1))];
        return result;
      });

      Opal.defn(self, '$_reduce_269', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_270', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.$new_splat(val['$[]'](2), val['$[]'](3)));
        return result;
      });

      Opal.defn(self, '$_reduce_271', function(val, _values, result) {
        var $a, self = this;

        val['$[]'](0)['$<<'](val['$[]'](2));
        result = ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(val['$[]'](0))));
        return result;
      });

      Opal.defn(self, '$_reduce_272', function(val, _values, result) {
        var $a, self = this;

        val['$[]'](0)['$<<'](self.$s("splat", val['$[]'](3)));
        result = ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(val['$[]'](0))));
        return result;
      });

      Opal.defn(self, '$_reduce_273', function(val, _values, result) {
        var self = this;

        result = self.$s("splat", val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_283', function(val, _values, result) {
        var self = this;

        result = self.$lexer().$line();
        return result;
      });

      Opal.defn(self, '$_reduce_284', function(val, _values, result) {
        var self = this;

        result = self.$s("begin", val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_285', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_286', function(val, _values, result) {
        var self = this;

        result = self.$new_paren(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_287', function(val, _values, result) {
        var self = this;

        result = self.$new_colon2(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_288', function(val, _values, result) {
        var self = this;

        result = self.$new_colon3(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_289', function(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), ["[]", []], val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_290', function(val, _values, result) {
        var self = this;

        result = self.$new_js_call(val['$[]'](0), ["[]", []], val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_291', function(val, _values, result) {
        var self = this;

        result = self.$new_array(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_292', function(val, _values, result) {
        var self = this;

        result = self.$new_hash(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_293', function(val, _values, result) {
        var self = this;

        result = self.$new_return(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_294', function(val, _values, result) {
        var self = this;

        result = self.$new_yield(val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_295', function(val, _values, result) {
        var self = this;

        result = self.$s("yield");
        return result;
      });

      Opal.defn(self, '$_reduce_296', function(val, _values, result) {
        var self = this;

        result = self.$s("yield");
        return result;
      });

      Opal.defn(self, '$_reduce_297', function(val, _values, result) {
        var self = this;

        result = self.$s("defined", val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_298', function(val, _values, result) {
        var self = this;

        result = self.$new_unary_call(["!", []], val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_299', function(val, _values, result) {
        var self = this;

        result = self.$new_unary_call(["!", []], self.$new_nil(val['$[]'](0)));
        return result;
      });

      Opal.defn(self, '$_reduce_300', function(val, _values, result) {
        var self = this;

        result = self.$new_call(nil, val['$[]'](0), []);
        result['$<<'](val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_302', function(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](val['$[]'](1));
        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_303', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_304', function(val, _values, result) {
        var self = this;

        result = self.$new_if(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4));
        return result;
      });

      Opal.defn(self, '$_reduce_305', function(val, _values, result) {
        var self = this;

        result = self.$new_if(val['$[]'](0), val['$[]'](1), val['$[]'](4), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_306', function(val, _values, result) {
        var self = this;

        self.$lexer().$cond_push(1);
        result = self.$lexer().$line();
        return result;
      });

      Opal.defn(self, '$_reduce_307', function(val, _values, result) {
        var self = this;

        self.$lexer().$cond_pop();
        return result;
      });

      Opal.defn(self, '$_reduce_308', function(val, _values, result) {
        var self = this;

        result = self.$s("while", val['$[]'](2), val['$[]'](5));
        return result;
      });

      Opal.defn(self, '$_reduce_309', function(val, _values, result) {
        var self = this;

        self.$lexer().$cond_push(1);
        result = self.$lexer().$line();
        return result;
      });

      Opal.defn(self, '$_reduce_310', function(val, _values, result) {
        var self = this;

        self.$lexer().$cond_pop();
        return result;
      });

      Opal.defn(self, '$_reduce_311', function(val, _values, result) {
        var self = this;

        result = self.$s("until", val['$[]'](2), val['$[]'](5));
        return result;
      });

      Opal.defn(self, '$_reduce_312', function(val, _values, result) {
        var $a, self = this;

        result = ($a = self).$s.apply($a, ["case", val['$[]'](1)].concat(Opal.to_a(val['$[]'](3))));
        return result;
      });

      Opal.defn(self, '$_reduce_313', function(val, _values, result) {
        var $a, self = this;

        result = ($a = self).$s.apply($a, ["case", nil].concat(Opal.to_a(val['$[]'](2))));
        return result;
      });

      Opal.defn(self, '$_reduce_314', function(val, _values, result) {
        var self = this;

        result = self.$s("case", nil, val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_315', function(val, _values, result) {
        var self = this;

        self.$lexer().$cond_push(1);
        result = self.$lexer().$line();
        return result;
      });

      Opal.defn(self, '$_reduce_316', function(val, _values, result) {
        var self = this;

        self.$lexer().$cond_pop();
        return result;
      });

      Opal.defn(self, '$_reduce_317', function(val, _values, result) {
        var self = this;

        result = self.$s("for", val['$[]'](4), val['$[]'](1), val['$[]'](7));
        return result;
      });

      Opal.defn(self, '$_reduce_318', function(val, _values, result) {
        var self = this;

        return result;
      });

      Opal.defn(self, '$_reduce_319', function(val, _values, result) {
        var self = this;

        result = self.$new_class(val['$[]'](0), val['$[]'](1), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      });

      Opal.defn(self, '$_reduce_320', function(val, _values, result) {
        var self = this;

        result = self.$lexer().$line();
        return result;
      });

      Opal.defn(self, '$_reduce_321', function(val, _values, result) {
        var self = this;

        return result;
      });

      Opal.defn(self, '$_reduce_322', function(val, _values, result) {
        var self = this;

        result = self.$new_sclass(val['$[]'](0), val['$[]'](3), val['$[]'](6), val['$[]'](7));
        return result;
      });

      Opal.defn(self, '$_reduce_323', function(val, _values, result) {
        var self = this;

        result = self.$lexer().$line();
        return result;
      });

      Opal.defn(self, '$_reduce_324', function(val, _values, result) {
        var self = this;

        return result;
      });

      Opal.defn(self, '$_reduce_325', function(val, _values, result) {
        var self = this;

        result = self.$new_module(val['$[]'](0), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      });

      Opal.defn(self, '$_reduce_326', function(val, _values, result) {
        var $a, $b, self = this;

        self.$push_scope();
        (($a = ["expr_endfn"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      });

      Opal.defn(self, '$_reduce_327', function(val, _values, result) {
        var self = this;

        result = self.$new_def(val['$[]'](0), nil, val['$[]'](1), val['$[]'](3), val['$[]'](4), val['$[]'](5));
        self.$pop_scope();
        return result;
      });

      Opal.defn(self, '$_reduce_328', function(val, _values, result) {
        var $a, $b, self = this;

        (($a = ["expr_fname"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      });

      Opal.defn(self, '$_reduce_329', function(val, _values, result) {
        var $a, $b, self = this;

        self.$push_scope();
        (($a = ["expr_endfn"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      });

      Opal.defn(self, '$_reduce_330', function(val, _values, result) {
        var self = this;

        result = self.$new_def(val['$[]'](0), val['$[]'](1), val['$[]'](4), val['$[]'](6), val['$[]'](7), val['$[]'](8));
        self.$pop_scope();
        return result;
      });

      Opal.defn(self, '$_reduce_331', function(val, _values, result) {
        var self = this;

        result = self.$new_break(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_332', function(val, _values, result) {
        var self = this;

        result = self.$s("next");
        return result;
      });

      Opal.defn(self, '$_reduce_333', function(val, _values, result) {
        var self = this;

        result = self.$s("redo");
        return result;
      });

      Opal.defn(self, '$_reduce_343', function(val, _values, result) {
        var self = this;

        result = self.$new_call(nil, ["lambda", []], []);
        result['$<<'](self.$new_iter(val['$[]'](0), val['$[]'](1)));
        return result;
      });

      Opal.defn(self, '$_reduce_344', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_345', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      Opal.defn(self, '$_reduce_348', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_349', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_350', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_351', function(val, _values, result) {
        var self = this;

        result = self.$new_if(val['$[]'](0), val['$[]'](1), val['$[]'](3), val['$[]'](4));
        return result;
      });

      Opal.defn(self, '$_reduce_353', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_354', function(val, _values, result) {
        var self = this;

        result = self.$s("block", val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_355', function(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](val['$[]'](2));
        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_356', function(val, _values, result) {
        var self = this;

        result = self.$new_assign(self.$new_assignable(self.$new_ident(val['$[]'](0))), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_358', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      Opal.defn(self, '$_reduce_359', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      Opal.defn(self, '$_reduce_360', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_361', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_362', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_363', function(val, _values, result) {
        var self = this;

        nil;
        return result;
      });

      Opal.defn(self, '$_reduce_364', function(val, _values, result) {
        var self = this;

        result = self.$new_block_args(val['$[]'](0), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      });

      Opal.defn(self, '$_reduce_365', function(val, _values, result) {
        var self = this;

        result = self.$new_block_args(val['$[]'](0), val['$[]'](2), nil, val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_366', function(val, _values, result) {
        var self = this;

        result = self.$new_block_args(val['$[]'](0), nil, val['$[]'](2), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_367', function(val, _values, result) {
        var self = this;

        result = self.$new_block_args(val['$[]'](0), nil, nil, nil);
        return result;
      });

      Opal.defn(self, '$_reduce_368', function(val, _values, result) {
        var self = this;

        result = self.$new_block_args(val['$[]'](0), nil, nil, val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_369', function(val, _values, result) {
        var self = this;

        result = self.$new_block_args(nil, val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_370', function(val, _values, result) {
        var self = this;

        result = self.$new_block_args(nil, val['$[]'](0), nil, val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_371', function(val, _values, result) {
        var self = this;

        result = self.$new_block_args(nil, nil, val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_372', function(val, _values, result) {
        var self = this;

        result = self.$new_block_args(nil, nil, nil, val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_373', function(val, _values, result) {
        var self = this;

        self.$push_scope("block");
        result = self.$lexer().$line();
        return result;
      });

      Opal.defn(self, '$_reduce_374', function(val, _values, result) {
        var self = this;

        result = self.$new_iter(val['$[]'](2), val['$[]'](3));
        self.$pop_scope();
        return result;
      });

      Opal.defn(self, '$_reduce_375', function(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](val['$[]'](1));
        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_379', function(val, _values, result) {
        var self = this;

        result = self.$new_call(nil, val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_380', function(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_381', function(val, _values, result) {
        var self = this;

        result = self.$new_js_call(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_382', function(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), ["call", []], val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_383', function(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_384', function(val, _values, result) {
        var self = this;

        result = self.$new_call(val['$[]'](0), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_385', function(val, _values, result) {
        var self = this;

        result = self.$new_super(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_386', function(val, _values, result) {
        var self = this;

        result = self.$new_super(val['$[]'](0), nil);
        return result;
      });

      Opal.defn(self, '$_reduce_387', function(val, _values, result) {
        var self = this;

        self.$push_scope("block");
        result = self.$lexer().$line();
        return result;
      });

      Opal.defn(self, '$_reduce_388', function(val, _values, result) {
        var self = this;

        result = self.$new_iter(val['$[]'](2), val['$[]'](3));
        self.$pop_scope();
        return result;
      });

      Opal.defn(self, '$_reduce_389', function(val, _values, result) {
        var self = this;

        self.$push_scope("block");
        result = self.$lexer().$line();
        return result;
      });

      Opal.defn(self, '$_reduce_390', function(val, _values, result) {
        var self = this;

        result = self.$new_iter(val['$[]'](2), val['$[]'](3));
        self.$pop_scope();
        return result;
      });

      Opal.defn(self, '$_reduce_391', function(val, _values, result) {
        var self = this;

        result = self.$lexer().$line();
        return result;
      });

      Opal.defn(self, '$_reduce_392', function(val, _values, result) {
        var $a, $b, self = this, part = nil;

        part = self.$s("when", ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(val['$[]'](2)))), val['$[]'](4));
        result = [part];
        if ((($b = val['$[]'](5)) !== nil && (!$b.$$is_boolean || $b == true))) {
          ($b = result).$push.apply($b, Opal.to_a(val['$[]'](5)))};
        return result;
      });

      Opal.defn(self, '$_reduce_393', function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      });

      Opal.defn(self, '$_reduce_395', function(val, _values, result) {
        var $a, self = this, exc = nil;

        exc = ((($a = val['$[]'](1)) !== false && $a !== nil) ? $a : self.$s("array"));
        if ((($a = val['$[]'](2)) !== nil && (!$a.$$is_boolean || $a == true))) {
          exc['$<<'](self.$new_assign(val['$[]'](2), val['$[]'](2), self.$s("gvar", "$!".$intern())))};
        result = [self.$s("resbody", exc, val['$[]'](4))];
        if ((($a = val['$[]'](5)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result.$concat(val['$[]'](5))};
        return result;
      });

      Opal.defn(self, '$_reduce_396', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      Opal.defn(self, '$_reduce_397', function(val, _values, result) {
        var self = this;

        result = self.$s("array", val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_400', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_401', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      Opal.defn(self, '$_reduce_402', function(val, _values, result) {
        var $a, self = this;

        result = (function() {if ((($a = val['$[]'](1)['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$s("nil")
          } else {
          return val['$[]'](1)
        }; return nil; })();
        return result;
      });

      Opal.defn(self, '$_reduce_407', function(val, _values, result) {
        var self = this;

        result = self.$new_str(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_409', function(val, _values, result) {
        var self = this;

        result = self.$str_append(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_410', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_411', function(val, _values, result) {
        var self = this;

        result = self.$s("str", self.$value(val['$[]'](0)));
        return result;
      });

      Opal.defn(self, '$_reduce_412', function(val, _values, result) {
        var self = this;

        result = self.$new_xstr(val['$[]'](0), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_413', function(val, _values, result) {
        var self = this;

        result = self.$new_regexp(val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_414', function(val, _values, result) {
        var self = this;

        result = self.$s("array");
        return result;
      });

      Opal.defn(self, '$_reduce_415', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_416', function(val, _values, result) {
        var self = this;

        result = self.$s("array");
        return result;
      });

      Opal.defn(self, '$_reduce_417', function(val, _values, result) {
        var self = this, part = nil;

        part = val['$[]'](1);
        if (part.$type()['$==']("evstr")) {
          part = self.$s("dstr", "", val['$[]'](1))};
        result = val['$[]'](0)['$<<'](part);
        return result;
      });

      Opal.defn(self, '$_reduce_418', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_419', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0).$concat([val['$[]'](1)]);
        return result;
      });

      Opal.defn(self, '$_reduce_420', function(val, _values, result) {
        var self = this;

        result = self.$s("array");
        return result;
      });

      Opal.defn(self, '$_reduce_421', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_422', function(val, _values, result) {
        var self = this;

        result = self.$s("array");
        return result;
      });

      Opal.defn(self, '$_reduce_423', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0)['$<<'](self.$s("str", self.$value(val['$[]'](1))));
        return result;
      });

      Opal.defn(self, '$_reduce_424', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      Opal.defn(self, '$_reduce_425', function(val, _values, result) {
        var self = this;

        result = self.$str_append(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_426', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      Opal.defn(self, '$_reduce_427', function(val, _values, result) {
        var self = this;

        result = self.$str_append(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_428', function(val, _values, result) {
        var self = this;

        result = self.$new_str_content(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_429', function(val, _values, result) {
        var $a, $b, self = this;

        result = self.$lexer().$strterm();
        (($a = [nil]), $b = self.$lexer(), $b['$strterm='].apply($b, $a), $a[$a.length-1]);
        return result;
      });

      Opal.defn(self, '$_reduce_430', function(val, _values, result) {
        var $a, $b, self = this;

        (($a = [val['$[]'](1)]), $b = self.$lexer(), $b['$strterm='].apply($b, $a), $a[$a.length-1]);
        result = self.$new_evstr(val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_431', function(val, _values, result) {
        var $a, $b, self = this;

        self.$lexer().$cond_push(0);
        self.$lexer().$cmdarg_push(0);
        result = self.$lexer().$strterm();
        (($a = [nil]), $b = self.$lexer(), $b['$strterm='].apply($b, $a), $a[$a.length-1]);
        (($a = ["expr_beg"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      });

      Opal.defn(self, '$_reduce_432', function(val, _values, result) {
        var $a, $b, self = this;

        (($a = [val['$[]'](1)]), $b = self.$lexer(), $b['$strterm='].apply($b, $a), $a[$a.length-1]);
        self.$lexer().$cond_lexpop();
        self.$lexer().$cmdarg_lexpop();
        result = self.$new_evstr(val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_433', function(val, _values, result) {
        var self = this;

        result = self.$new_gvar(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_434', function(val, _values, result) {
        var self = this;

        result = self.$new_ivar(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_435', function(val, _values, result) {
        var self = this;

        result = self.$new_cvar(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_437', function(val, _values, result) {
        var $a, $b, self = this;

        result = self.$new_sym(val['$[]'](1));
        (($a = ["expr_end"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      });

      Opal.defn(self, '$_reduce_438', function(val, _values, result) {
        var self = this;

        result = self.$new_sym(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_443', function(val, _values, result) {
        var self = this;

        result = self.$new_dsym(val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_444', function(val, _values, result) {
        var self = this;

        result = self.$new_int(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_445', function(val, _values, result) {
        var self = this;

        result = self.$new_float(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_446', function(val, _values, result) {
        var self = this;

        result = self.$negate_num(self.$new_int(val['$[]'](1)));
        return result;
      });

      Opal.defn(self, '$_reduce_447', function(val, _values, result) {
        var self = this;

        result = self.$negate_num(self.$new_float(val['$[]'](1)));
        return result;
      });

      Opal.defn(self, '$_reduce_448', function(val, _values, result) {
        var self = this;

        result = self.$new_int(val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_449', function(val, _values, result) {
        var self = this;

        result = self.$new_float(val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_450', function(val, _values, result) {
        var self = this;

        result = self.$new_ident(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_451', function(val, _values, result) {
        var self = this;

        result = self.$new_ivar(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_452', function(val, _values, result) {
        var self = this;

        result = self.$new_gvar(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_453', function(val, _values, result) {
        var self = this;

        result = self.$new_const(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_454', function(val, _values, result) {
        var self = this;

        result = self.$new_cvar(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_455', function(val, _values, result) {
        var self = this;

        result = self.$new_nil(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_456', function(val, _values, result) {
        var self = this;

        result = self.$new_self(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_457', function(val, _values, result) {
        var self = this;

        result = self.$new_true(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_458', function(val, _values, result) {
        var self = this;

        result = self.$new_false(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_459', function(val, _values, result) {
        var self = this;

        result = self.$new___FILE__(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_460', function(val, _values, result) {
        var self = this;

        result = self.$new___LINE__(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_461', function(val, _values, result) {
        var self = this;

        result = self.$new_var_ref(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_462', function(val, _values, result) {
        var self = this;

        result = self.$new_assignable(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_463', function(val, _values, result) {
        var self = this;

        result = self.$s("nth_ref", self.$value(val['$[]'](0)));
        return result;
      });

      Opal.defn(self, '$_reduce_465', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      Opal.defn(self, '$_reduce_466', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_467', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      Opal.defn(self, '$_reduce_468', function(val, _values, result) {
        var $a, $b, self = this;

        result = val['$[]'](1);
        (($a = ["expr_beg"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      });

      Opal.defn(self, '$_reduce_469', function(val, _values, result) {
        var $a, $b, self = this;

        result = val['$[]'](0);
        (($a = ["expr_beg"]), $b = self.$lexer(), $b['$lex_state='].apply($b, $a), $a[$a.length-1]);
        return result;
      });

      Opal.defn(self, '$_reduce_472', function(val, _values, result) {
        var self = this;

        result = self.$new_kwrestarg(val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_473', function(val, _values, result) {
        var self = this;

        result = self.$new_kwrestarg();
        return result;
      });

      Opal.defn(self, '$_reduce_474', function(val, _values, result) {
        var self = this;

        result = self.$new_sym(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_475', function(val, _values, result) {
        var self = this;

        result = self.$new_kwoptarg(val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_476', function(val, _values, result) {
        var self = this;

        result = self.$new_kwarg(val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_477', function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      });

      Opal.defn(self, '$_reduce_478', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        result['$<<'](val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_479', function(val, _values, result) {
        var self = this;

        result = self.$new_args_tail(val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_480', function(val, _values, result) {
        var self = this;

        result = self.$new_args_tail(val['$[]'](0), nil, val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_481', function(val, _values, result) {
        var self = this;

        result = self.$new_args_tail(nil, val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_482', function(val, _values, result) {
        var self = this;

        result = self.$new_args_tail(nil, nil, val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_483', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_484', function(val, _values, result) {
        var self = this;

        result = self.$new_args_tail(nil, nil, nil);
        return result;
      });

      Opal.defn(self, '$_reduce_485', function(val, _values, result) {
        var self = this;

        result = self.$new_args(val['$[]'](0), val['$[]'](2), val['$[]'](4), val['$[]'](5));
        return result;
      });

      Opal.defn(self, '$_reduce_486', function(val, _values, result) {
        var self = this;

        result = self.$new_args(val['$[]'](0), val['$[]'](2), nil, val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_487', function(val, _values, result) {
        var self = this;

        result = self.$new_args(val['$[]'](0), nil, val['$[]'](2), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_488', function(val, _values, result) {
        var self = this;

        result = self.$new_args(val['$[]'](0), nil, nil, val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_489', function(val, _values, result) {
        var self = this;

        result = self.$new_args(nil, val['$[]'](0), val['$[]'](2), val['$[]'](3));
        return result;
      });

      Opal.defn(self, '$_reduce_490', function(val, _values, result) {
        var self = this;

        result = self.$new_args(nil, val['$[]'](0), nil, val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_491', function(val, _values, result) {
        var self = this;

        result = self.$new_args(nil, nil, val['$[]'](0), val['$[]'](1));
        return result;
      });

      Opal.defn(self, '$_reduce_492', function(val, _values, result) {
        var self = this;

        result = self.$new_args(nil, nil, nil, val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_493', function(val, _values, result) {
        var self = this;

        result = self.$new_args(nil, nil, nil, nil);
        return result;
      });

      Opal.defn(self, '$_reduce_495', function(val, _values, result) {
        var self = this;

        result = self.$value(val['$[]'](0)).$to_sym();
        self.$scope().$add_local(result);
        return result;
      });

      Opal.defn(self, '$_reduce_496', function(val, _values, result) {
        var self = this;

        self.$raise("formal argument cannot be a constant");
        return result;
      });

      Opal.defn(self, '$_reduce_497', function(val, _values, result) {
        var self = this;

        self.$raise("formal argument cannot be an instance variable");
        return result;
      });

      Opal.defn(self, '$_reduce_498', function(val, _values, result) {
        var self = this;

        self.$raise("formal argument cannot be a class variable");
        return result;
      });

      Opal.defn(self, '$_reduce_499', function(val, _values, result) {
        var self = this;

        self.$raise("formal argument cannot be a global variable");
        return result;
      });

      Opal.defn(self, '$_reduce_500', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_501', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_504', function(val, _values, result) {
        var self = this;

        result = self.$s("lasgn", val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_506', function(val, _values, result) {
        var self = this;

        result = self.$s("array", val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_507', function(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](val['$[]'](2));
        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_513', function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0)];
        return result;
      });

      Opal.defn(self, '$_reduce_514', function(val, _values, result) {
        var self = this;

        val['$[]'](0)['$<<'](val['$[]'](2));
        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_515', function(val, _values, result) {
        var self = this;

        result = self.$new_assign(self.$new_assignable(self.$new_ident(val['$[]'](0))), val['$[]'](1), val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_516', function(val, _values, result) {
        var self = this;

        result = self.$s("block", val['$[]'](0));
        return result;
      });

      Opal.defn(self, '$_reduce_517', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        val['$[]'](0)['$<<'](val['$[]'](2));
        return result;
      });

      Opal.defn(self, '$_reduce_520', function(val, _values, result) {
        var self = this;

        result = (("*") + (self.$value(val['$[]'](1)))).$to_sym();
        return result;
      });

      Opal.defn(self, '$_reduce_521', function(val, _values, result) {
        var self = this;

        result = "*";
        return result;
      });

      Opal.defn(self, '$_reduce_524', function(val, _values, result) {
        var self = this;

        result = (("&") + (self.$value(val['$[]'](1)))).$to_sym();
        return result;
      });

      Opal.defn(self, '$_reduce_525', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_526', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      Opal.defn(self, '$_reduce_527', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_528', function(val, _values, result) {
        var self = this;

        result = val['$[]'](1);
        return result;
      });

      Opal.defn(self, '$_reduce_529', function(val, _values, result) {
        var self = this;

        result = [];
        return result;
      });

      Opal.defn(self, '$_reduce_530', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_531', function(val, _values, result) {
        var self = this;

        result = val['$[]'](0);
        return result;
      });

      Opal.defn(self, '$_reduce_532', function(val, _values, result) {
        var $a, self = this;

        result = ($a = val['$[]'](0)).$push.apply($a, Opal.to_a(val['$[]'](2)));
        return result;
      });

      Opal.defn(self, '$_reduce_533', function(val, _values, result) {
        var self = this;

        result = [val['$[]'](0), val['$[]'](2)];
        return result;
      });

      Opal.defn(self, '$_reduce_534', function(val, _values, result) {
        var self = this;

        result = [self.$new_sym(val['$[]'](0)), val['$[]'](1)];
        return result;
      });

      Opal.defn(self, '$_reduce_535', function(val, _values, result) {
        var self = this;

        result = [self.$s("sym", self.$source(val['$[]'](1)).$to_sym()), val['$[]'](3)];
        return result;
      });

      Opal.defn(self, '$_reduce_559', function(val, _values, result) {
        var self = this;

        result = nil;
        return result;
      });

      return (Opal.defn(self, '$_reduce_none', function(val, _values, result) {
        var self = this;

        return val['$[]'](0);
      }), nil) && '_reduce_none';
    })($scope.base, (($scope.get('Racc')).$$scope.get('Parser')))
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/parser/parser_scope"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$==', '$<<', '$include?', '$has_local?']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $ParserScope(){};
      var self = $ParserScope = $klass($base, $super, 'ParserScope', $ParserScope);

      var def = self.$$proto, $scope = self.$$scope;

      def.locals = def.parent = def.block = nil;
      self.$attr_reader("locals");

      self.$attr_accessor("parent");

      Opal.defn(self, '$initialize', function(type) {
        var self = this;

        self.block = type['$==']("block");
        self.locals = [];
        return self.parent = nil;
      });

      Opal.defn(self, '$add_local', function(local) {
        var self = this;

        return self.locals['$<<'](local);
      });

      return (Opal.defn(self, '$has_local?', function(local) {
        var $a, $b, self = this;

        if ((($a = self.locals['$include?'](local)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return true};
        if ((($a = ($b = self.parent, $b !== false && $b !== nil ?self.block : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.parent['$has_local?'](local)};
        return false;
      }), nil) && 'has_local?';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/parser"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$attr_reader', '$!', '$[]', '$new', '$parser=', '$parse_to_sexp', '$join', '$message', '$line', '$lexer', '$column', '$split', '$-', '$+', '$*', '$>', '$raise', '$class', '$backtrace', '$push_scope', '$do_parse', '$pop_scope', '$next_token', '$last', '$parent=', '$<<', '$pop', '$inspect', '$value', '$token_to_str', '$s', '$source=', '$s0', '$source', '$s1', '$file', '$to_sym', '$nil?', '$==', '$length', '$size', '$type', '$each', '$!=', '$add_local', '$scope', '$to_s', '$empty?', '$is_a?', '$new_splat', '$new_call', '$[]=', '$array', '$-@', '$===', '$new_gettable', '$type=', '$has_local?']);
  self.$require("opal/parser/sexp");
  self.$require("opal/parser/lexer");
  self.$require("opal/parser/grammar");
  self.$require("opal/parser/parser_scope");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Parser(){};
      var self = $Parser = $klass($base, $super, 'Parser', $Parser);

      var def = self.$$proto, $scope = self.$$scope;

      def.lexer = def.file = def.scopes = nil;
      self.$attr_reader("lexer", "file", "scope");

      Opal.defn(self, '$parse', function(source, file) {
        var $a, $b, self = this, error = nil, message = nil;

        if (file == null) {
          file = "(string)"
        }
        try {
        if ((($a = $scope.get('ENV')['$[]']("RACC_DEBUG")['$!']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.yydebug = true};
          self.file = file;
          self.scopes = [];
          self.lexer = $scope.get('Lexer').$new(source, file);
          (($a = [self]), $b = self.lexer, $b['$parser='].apply($b, $a), $a[$a.length-1]);
          return self.$parse_to_sexp();
        } catch ($err) {if (true) {error = $err;
          try {
            message = [nil, error.$message(), "Source: " + (self.file) + ":" + (self.$lexer().$line()) + ":" + (self.$lexer().$column()), source.$split("\n")['$[]']($rb_minus(self.$lexer().$line(), 1)), $rb_plus($rb_times("~", ((function() {if ((($a = $rb_gt($rb_minus(self.$lexer().$column(), 1), 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $rb_minus(self.$lexer().$column(), 1)
              } else {
              return 0
            }; return nil; })())), "^")].$join("\n");
            return self.$raise(error.$class(), message, error.$backtrace());
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        };
      });

      Opal.defn(self, '$parse_to_sexp', function() {
        var self = this, result = nil;

        self.$push_scope();
        result = self.$do_parse();
        self.$pop_scope();
        return result;
      });

      Opal.defn(self, '$next_token', function() {
        var self = this;

        return self.lexer.$next_token();
      });

      Opal.defn(self, '$s', function() {
        var self = this, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var parts = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          parts[$splat_index] = arguments[$splat_index + 0];
        }
        return $scope.get('Sexp').$new(parts);
      });

      Opal.defn(self, '$push_scope', function(type) {
        var $a, $b, self = this, top = nil, scope = nil;

        if (type == null) {
          type = nil
        }
        top = self.scopes.$last();
        scope = $scope.get('ParserScope').$new(type);
        (($a = [top]), $b = scope, $b['$parent='].apply($b, $a), $a[$a.length-1]);
        self.scopes['$<<'](scope);
        return self.scope = scope;
      });

      Opal.defn(self, '$pop_scope', function() {
        var self = this;

        self.scopes.$pop();
        return self.scope = self.scopes.$last();
      });

      Opal.defn(self, '$on_error', function(t, val, vstack) {
        var $a, self = this;

        return self.$raise("parse error on value " + (self.$value(val).$inspect()) + " (" + (((($a = self.$token_to_str(t)) !== false && $a !== nil) ? $a : "?")) + ") :" + (self.file) + ":" + (self.$lexer().$line()));
      });

      Opal.defn(self, '$value', function(tok) {
        var self = this;

        return tok['$[]'](0);
      });

      Opal.defn(self, '$source', function(tok) {
        var self = this;

        if (tok !== false && tok !== nil) {
          return tok['$[]'](1)
          } else {
          return nil
        };
      });

      Opal.defn(self, '$s0', function(type, source) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s(type);
        (($a = [source]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$s1', function(type, first, source) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s(type, first);
        (($a = [source]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_nil', function(tok) {
        var self = this;

        return self.$s0("nil", self.$source(tok));
      });

      Opal.defn(self, '$new_self', function(tok) {
        var self = this;

        return self.$s0("self", self.$source(tok));
      });

      Opal.defn(self, '$new_true', function(tok) {
        var self = this;

        return self.$s0("true", self.$source(tok));
      });

      Opal.defn(self, '$new_false', function(tok) {
        var self = this;

        return self.$s0("false", self.$source(tok));
      });

      Opal.defn(self, '$new___FILE__', function(tok) {
        var self = this;

        return self.$s1("str", self.$file(), self.$source(tok));
      });

      Opal.defn(self, '$new___LINE__', function(tok) {
        var self = this;

        return self.$s1("int", self.$lexer().$line(), self.$source(tok));
      });

      Opal.defn(self, '$new_ident', function(tok) {
        var self = this;

        return self.$s1("identifier", self.$value(tok).$to_sym(), self.$source(tok));
      });

      Opal.defn(self, '$new_int', function(tok) {
        var self = this;

        return self.$s1("int", self.$value(tok), self.$source(tok));
      });

      Opal.defn(self, '$new_float', function(tok) {
        var self = this;

        return self.$s1("float", self.$value(tok), self.$source(tok));
      });

      Opal.defn(self, '$new_ivar', function(tok) {
        var self = this;

        return self.$s1("ivar", self.$value(tok).$to_sym(), self.$source(tok));
      });

      Opal.defn(self, '$new_gvar', function(tok) {
        var self = this;

        return self.$s1("gvar", self.$value(tok).$to_sym(), self.$source(tok));
      });

      Opal.defn(self, '$new_cvar', function(tok) {
        var self = this;

        return self.$s1("cvar", self.$value(tok).$to_sym(), self.$source(tok));
      });

      Opal.defn(self, '$new_const', function(tok) {
        var self = this;

        return self.$s1("const", self.$value(tok).$to_sym(), self.$source(tok));
      });

      Opal.defn(self, '$new_colon2', function(lhs, tok, name) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("colon2", lhs, self.$value(name).$to_sym());
        (($a = [self.$source(tok)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_colon3', function(tok, name) {
        var self = this;

        return self.$s1("colon3", self.$value(name).$to_sym(), self.$source(name));
      });

      Opal.defn(self, '$new_sym', function(tok) {
        var self = this;

        return self.$s1("sym", self.$value(tok).$to_sym(), self.$source(tok));
      });

      Opal.defn(self, '$new_alias', function(kw, new$, old) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("alias", new$, old);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_break', function(kw, args) {
        var $a, self = this, sexp = nil;

        if (args == null) {
          args = nil
        }
        if ((($a = args['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          sexp = self.$s("break")
        } else if (args.$length()['$=='](1)) {
          sexp = self.$s("break", args['$[]'](0))
          } else {
          sexp = self.$s("break", ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(args))))
        };
        return sexp;
      });

      Opal.defn(self, '$new_return', function(kw, args) {
        var $a, self = this, sexp = nil;

        if (args == null) {
          args = nil
        }
        if ((($a = args['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          sexp = self.$s("return")
        } else if (args.$length()['$=='](1)) {
          sexp = self.$s("return", args['$[]'](0))
          } else {
          sexp = self.$s("return", ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(args))))
        };
        return sexp;
      });

      Opal.defn(self, '$new_next', function(kw, args) {
        var $a, self = this, sexp = nil;

        if (args == null) {
          args = []
        }
        if (args.$length()['$=='](1)) {
          sexp = self.$s("next", args['$[]'](0))
          } else {
          sexp = self.$s("next", ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(args))))
        };
        return sexp;
      });

      Opal.defn(self, '$new_block', function(stmt) {
        var self = this, sexp = nil;

        if (stmt == null) {
          stmt = nil
        }
        sexp = self.$s("block");
        if (stmt !== false && stmt !== nil) {
          sexp['$<<'](stmt)};
        return sexp;
      });

      Opal.defn(self, '$new_compstmt', function(block) {
        var $a, $b, $c, self = this, comp = nil, result = nil;

        comp = (function() {if (block.$size()['$=='](1)) {
          return nil
        } else if (block.$size()['$=='](2)) {
          return block['$[]'](1)
          } else {
          return block
        }; return nil; })();
        if ((($a = ($b = (($c = comp !== false && comp !== nil) ? comp.$type()['$==']("begin") : comp), $b !== false && $b !== nil ?comp.$size()['$=='](2) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          result = comp['$[]'](1)
          } else {
          result = comp
        };
        return result;
      });

      Opal.defn(self, '$new_body', function(compstmt, res, els, ens) {
        var $a, $b, TMP_1, self = this, s = nil;

        s = ((($a = compstmt) !== false && $a !== nil) ? $a : self.$s("block"));
        if (res !== false && res !== nil) {
          s = self.$s("rescue", s);
          ($a = ($b = res).$each, $a.$$p = (TMP_1 = function(r){var self = TMP_1.$$s || this;
if (r == null) r = nil;
          return s['$<<'](r)}, TMP_1.$$s = self, TMP_1), $a).call($b);
          if (els !== false && els !== nil) {
            s['$<<'](els)};};
        if (ens !== false && ens !== nil) {
          return self.$s("ensure", s, ens)
          } else {
          return s
        };
      });

      Opal.defn(self, '$new_def', function(kw, recv, name, args, body, end_tok) {
        var $a, $b, self = this, sexp = nil;

        if ((($a = body.$type()['$!=']("block")) !== nil && (!$a.$$is_boolean || $a == true))) {
          body = self.$s("block", body)};
        if (body.$size()['$=='](1)) {
          body['$<<'](self.$s("nil"))};
        sexp = self.$s("def", recv, self.$value(name).$to_sym(), args, body);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_class', function(start, path, sup, body, endt) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("class", path, sup, body);
        (($a = [self.$source(start)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_sclass', function(kw, expr, body, end_tok) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("sclass", expr, body);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_module', function(kw, path, body, end_tok) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("module", path, body);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_iter', function(args, body) {
        var $a, self = this, s = nil;

        ((($a = args) !== false && $a !== nil) ? $a : args = nil);
        s = self.$s("iter", args);
        if (body !== false && body !== nil) {
          s['$<<'](body)};
        return s;
      });

      Opal.defn(self, '$new_if', function(if_tok, expr, stmt, tail) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("if", expr, stmt, tail);
        (($a = [self.$source(if_tok)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_while', function(kw, test, body) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("while", test, body);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_until', function(kw, test, body) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("until", test, body);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_rescue_mod', function(kw, expr, resc) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("rescue_mod", expr, resc);
        (($a = [self.$source(kw)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_array', function(start, args, finish) {
        var $a, $b, $c, self = this, sexp = nil;

        ((($a = args) !== false && $a !== nil) ? $a : args = []);
        sexp = ($a = self).$s.apply($a, ["array"].concat(Opal.to_a(args)));
        (($b = [self.$source(start)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_hash', function(open, assocs, close) {
        var $a, $b, $c, self = this, sexp = nil;

        sexp = ($a = self).$s.apply($a, ["hash"].concat(Opal.to_a(assocs)));
        (($b = [self.$source(open)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_not', function(kw, expr) {
        var self = this;

        return self.$s1("not", expr, self.$source(kw));
      });

      Opal.defn(self, '$new_paren', function(open, expr, close) {
        var $a, $b, self = this;

        if ((($a = ((($b = expr['$nil?']()) !== false && $b !== nil) ? $b : expr['$=='](["block"]))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$s1("paren", self.$s0("nil", self.$source(open)), self.$source(open))
          } else {
          return self.$s1("paren", expr, self.$source(open))
        };
      });

      Opal.defn(self, '$new_args_tail', function(kwarg, kwrest, block) {
        var self = this;

        return [kwarg, kwrest, block];
      });

      Opal.defn(self, '$new_args', function(norm, opt, rest, tail) {
        var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, self = this, res = nil, restname = nil, blockname = nil;

        res = self.$s("args");
        if (norm !== false && norm !== nil) {
          ($a = ($b = norm).$each, $a.$$p = (TMP_2 = function(arg){var self = TMP_2.$$s || this;
if (arg == null) arg = nil;
          self.$scope().$add_local(arg);
            return res['$<<'](self.$s("arg", arg));}, TMP_2.$$s = self, TMP_2), $a).call($b)};
        if (opt !== false && opt !== nil) {
          ($a = ($c = opt['$[]']($range(1, -1, false))).$each, $a.$$p = (TMP_3 = function(_opt){var self = TMP_3.$$s || this;
if (_opt == null) _opt = nil;
          return res['$<<'](self.$s("optarg", _opt['$[]'](1), _opt['$[]'](2)))}, TMP_3.$$s = self, TMP_3), $a).call($c)};
        if (rest !== false && rest !== nil) {
          restname = rest.$to_s()['$[]']($range(1, -1, false));
          if ((($a = restname['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            res['$<<'](self.$s("restarg"))
            } else {
            res['$<<'](self.$s("restarg", restname.$to_sym()));
            self.$scope().$add_local(restname.$to_sym());
          };};
        if ((($a = (($d = tail !== false && tail !== nil) ? tail['$[]'](0) : tail)) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($d = tail['$[]'](0)).$each, $a.$$p = (TMP_4 = function(kwarg){var self = TMP_4.$$s || this;
if (kwarg == null) kwarg = nil;
          return res['$<<'](kwarg)}, TMP_4.$$s = self, TMP_4), $a).call($d)};
        if ((($a = (($e = tail !== false && tail !== nil) ? tail['$[]'](1) : tail)) !== nil && (!$a.$$is_boolean || $a == true))) {
          res['$<<'](tail['$[]'](1))};
        if ((($a = (($e = tail !== false && tail !== nil) ? tail['$[]'](2) : tail)) !== nil && (!$a.$$is_boolean || $a == true))) {
          blockname = tail['$[]'](2).$to_s()['$[]']($range(1, -1, false)).$to_sym();
          self.$scope().$add_local(blockname);
          res['$<<'](self.$s("blockarg", blockname));};
        return res;
      });

      Opal.defn(self, '$new_kwarg', function(name) {
        var self = this;

        self.$scope().$add_local(name['$[]'](1));
        return self.$s("kwarg", name['$[]'](1));
      });

      Opal.defn(self, '$new_kwoptarg', function(name, val) {
        var self = this;

        self.$scope().$add_local(name['$[]'](1));
        return self.$s("kwoptarg", name['$[]'](1), val);
      });

      Opal.defn(self, '$new_kwrestarg', function(name) {
        var self = this, result = nil;

        if (name == null) {
          name = nil
        }
        result = self.$s("kwrestarg");
        if (name !== false && name !== nil) {
          self.$scope().$add_local(name['$[]'](0).$to_sym());
          result['$<<'](name['$[]'](0).$to_sym());};
        return result;
      });

      Opal.defn(self, '$new_block_args', function(norm, opt, rest, block) {
        var $a, $b, TMP_5, $c, TMP_6, $d, self = this, res = nil, r = nil, b = nil, args = nil;

        res = self.$s("array");
        if (norm !== false && norm !== nil) {
          ($a = ($b = norm).$each, $a.$$p = (TMP_5 = function(arg){var self = TMP_5.$$s || this, $a;
if (arg == null) arg = nil;
          if ((($a = arg['$is_a?']($scope.get('Symbol'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$scope().$add_local(arg);
              return res['$<<'](self.$s("lasgn", arg));
              } else {
              return res['$<<'](arg)
            }}, TMP_5.$$s = self, TMP_5), $a).call($b)};
        if (opt !== false && opt !== nil) {
          ($a = ($c = opt['$[]']($range(1, -1, false))).$each, $a.$$p = (TMP_6 = function(_opt){var self = TMP_6.$$s || this;
if (_opt == null) _opt = nil;
          return res['$<<'](self.$s("lasgn", _opt['$[]'](1)))}, TMP_6.$$s = self, TMP_6), $a).call($c)};
        if (rest !== false && rest !== nil) {
          r = rest.$to_s()['$[]']($range(1, -1, false)).$to_sym();
          res['$<<'](self.$new_splat(nil, self.$s("lasgn", r)));
          self.$scope().$add_local(r);};
        if (block !== false && block !== nil) {
          b = block.$to_s()['$[]']($range(1, -1, false)).$to_sym();
          res['$<<'](self.$s("block_pass", self.$s("lasgn", b)));
          self.$scope().$add_local(b);};
        if (opt !== false && opt !== nil) {
          res['$<<'](opt)};
        args = (function() {if ((($a = (($d = res.$size()['$=='](2)) ? norm : res.$size()['$=='](2))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return res['$[]'](1)
          } else {
          return self.$s("masgn", res)
        }; return nil; })();
        if (args.$type()['$==']("array")) {
          return self.$s("masgn", args)
          } else {
          return args
        };
      });

      Opal.defn(self, '$new_call', function(recv, meth, args) {
        var $a, $b, $c, self = this, sexp = nil;

        if (args == null) {
          args = nil
        }
        ((($a = args) !== false && $a !== nil) ? $a : args = []);
        sexp = self.$s("call", recv, self.$value(meth).$to_sym(), ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args))));
        (($b = [self.$source(meth)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_js_call', function(recv, meth, args) {
        var $a, $b, $c, self = this, sexp = nil;

        if (args == null) {
          args = nil
        }
        if (args !== false && args !== nil) {
          sexp = self.$s("jscall", recv, self.$value(meth).$to_sym(), ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args))));
          (($b = [self.$source(meth)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
          } else {
          sexp = self.$s("jscall", recv, self.$value(meth).$to_sym(), nil);
          (($b = [self.$source(meth)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
        };
        return sexp;
      });

      Opal.defn(self, '$new_binary_call', function(recv, meth, arg) {
        var self = this;

        return self.$new_call(recv, meth, [arg]);
      });

      Opal.defn(self, '$new_unary_call', function(op, recv) {
        var self = this;

        return self.$new_call(recv, op, []);
      });

      Opal.defn(self, '$new_and', function(lhs, tok, rhs) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("and", lhs, rhs);
        (($a = [self.$source(tok)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_or', function(lhs, tok, rhs) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("or", lhs, rhs);
        (($a = [self.$source(tok)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_irange', function(beg, op, finish) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("irange", beg, finish);
        (($a = [self.$source(op)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_erange', function(beg, op, finish) {
        var $a, $b, self = this, sexp = nil;

        sexp = self.$s("erange", beg, finish);
        (($a = [self.$source(op)]), $b = sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return sexp;
      });

      Opal.defn(self, '$negate_num', function(sexp) {
        var self = this;

        sexp.$array()['$[]='](1, sexp.$array()['$[]'](1)['$-@']());
        return sexp;
      });

      Opal.defn(self, '$add_block_pass', function(arglist, block) {
        var self = this;

        if (block !== false && block !== nil) {
          arglist['$<<'](block)};
        return arglist;
      });

      Opal.defn(self, '$new_block_pass', function(amper_tok, val) {
        var self = this;

        return self.$s1("block_pass", val, self.$source(amper_tok));
      });

      Opal.defn(self, '$new_splat', function(tok, value) {
        var self = this;

        return self.$s1("splat", value, self.$source(tok));
      });

      Opal.defn(self, '$new_op_asgn', function(op, lhs, rhs) {
        var self = this, $case = nil, result = nil;

        $case = self.$value(op).$to_sym();if ("||"['$===']($case)) {result = self.$s("op_asgn_or", self.$new_gettable(lhs));
        result['$<<']((lhs['$<<'](rhs)));}else if ("&&"['$===']($case)) {result = self.$s("op_asgn_and", self.$new_gettable(lhs));
        result['$<<']((lhs['$<<'](rhs)));}else {result = lhs;
        result['$<<'](self.$new_call(self.$new_gettable(lhs), op, [rhs]));};
        return result;
      });

      Opal.defn(self, '$new_op_asgn1', function(lhs, args, op, rhs) {
        var $a, $b, $c, self = this, arglist = nil, sexp = nil;

        arglist = ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args)));
        sexp = self.$s("op_asgn1", lhs, arglist, self.$value(op), rhs);
        (($b = [self.$source(op)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
        return sexp;
      });

      Opal.defn(self, '$op_to_setter', function(op) {
        var self = this;

        return ((("") + (self.$value(op))) + "=").$to_sym();
      });

      Opal.defn(self, '$new_attrasgn', function(recv, op, args) {
        var $a, self = this, arglist = nil, sexp = nil;

        if (args == null) {
          args = []
        }
        arglist = ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args)));
        sexp = self.$s("attrasgn", recv, op, arglist);
        return sexp;
      });

      Opal.defn(self, '$new_js_attrasgn', function(recv, args) {
        var $a, self = this, arglist = nil, sexp = nil;

        arglist = ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args)));
        sexp = self.$s("jsattrasgn", recv, nil, arglist);
        return sexp;
      });

      Opal.defn(self, '$new_assign', function(lhs, tok, rhs) {
        var $a, $b, self = this, $case = nil;

        return (function() {$case = lhs.$type();if ("iasgn"['$===']($case) || "cdecl"['$===']($case) || "lasgn"['$===']($case) || "gasgn"['$===']($case) || "cvdecl"['$===']($case) || "nth_ref"['$===']($case)) {lhs['$<<'](rhs);
        return lhs;}else if ("call"['$===']($case) || "attrasgn"['$===']($case) || "jsattrasgn"['$===']($case)) {lhs.$last()['$<<'](rhs);
        return lhs;}else if ("colon2"['$===']($case)) {lhs['$<<'](rhs);
        (($a = ["casgn"]), $b = lhs, $b['$type='].apply($b, $a), $a[$a.length-1]);
        return lhs;}else if ("colon3"['$===']($case)) {lhs['$<<'](rhs);
        (($a = ["casgn3"]), $b = lhs, $b['$type='].apply($b, $a), $a[$a.length-1]);
        return lhs;}else {return self.$raise("Bad lhs for new_assign: " + (lhs.$type()))}})();
      });

      Opal.defn(self, '$new_assignable', function(ref) {
        var $a, $b, self = this, $case = nil;

        $case = ref.$type();if ("ivar"['$===']($case)) {(($a = ["iasgn"]), $b = ref, $b['$type='].apply($b, $a), $a[$a.length-1])}else if ("const"['$===']($case)) {(($a = ["cdecl"]), $b = ref, $b['$type='].apply($b, $a), $a[$a.length-1])}else if ("identifier"['$===']($case)) {if ((($a = self.$scope()['$has_local?'](ref['$[]'](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$scope().$add_local(ref['$[]'](1))
        };
        (($a = ["lasgn"]), $b = ref, $b['$type='].apply($b, $a), $a[$a.length-1]);}else if ("gvar"['$===']($case)) {(($a = ["gasgn"]), $b = ref, $b['$type='].apply($b, $a), $a[$a.length-1])}else if ("cvar"['$===']($case)) {(($a = ["cvdecl"]), $b = ref, $b['$type='].apply($b, $a), $a[$a.length-1])}else {self.$raise($scope.get('SyntaxError'), "Bad new_assignable type: " + (ref.$type()))};
        return ref;
      });

      Opal.defn(self, '$new_gettable', function(ref) {
        var $a, $b, self = this, res = nil, $case = nil;

        res = (function() {$case = ref.$type();if ("lasgn"['$===']($case)) {return self.$s("lvar", ref['$[]'](1))}else if ("iasgn"['$===']($case)) {return self.$s("ivar", ref['$[]'](1))}else if ("gasgn"['$===']($case)) {return self.$s("gvar", ref['$[]'](1))}else if ("cvdecl"['$===']($case)) {return self.$s("cvar", ref['$[]'](1))}else if ("cdecl"['$===']($case)) {return self.$s("const", ref['$[]'](1))}else {return self.$raise("Bad new_gettable ref: " + (ref.$type()))}})();
        (($a = [ref.$source()]), $b = res, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return res;
      });

      Opal.defn(self, '$new_var_ref', function(ref) {
        var $a, $b, self = this, $case = nil, result = nil;

        return (function() {$case = ref.$type();if ("self"['$===']($case) || "nil"['$===']($case) || "true"['$===']($case) || "false"['$===']($case) || "line"['$===']($case) || "file"['$===']($case)) {return ref}else if ("const"['$===']($case)) {return ref}else if ("ivar"['$===']($case) || "gvar"['$===']($case) || "cvar"['$===']($case)) {return ref}else if ("int"['$===']($case)) {return ref}else if ("str"['$===']($case)) {return ref}else if ("identifier"['$===']($case)) {result = (function() {if ((($a = self.$scope()['$has_local?'](ref['$[]'](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$s("lvar", ref['$[]'](1))
          } else {
          return self.$s("call", nil, ref['$[]'](1), self.$s("arglist"))
        }; return nil; })();
        (($a = [ref.$source()]), $b = result, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return result;}else {return self.$raise("Bad var_ref type: " + (ref.$type()))}})();
      });

      Opal.defn(self, '$new_super', function(kw, args) {
        var $a, $b, $c, self = this, sexp = nil;

        if ((($a = args['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          sexp = self.$s("super", nil)
          } else {
          sexp = self.$s("super", ($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(args))))
        };
        (($b = [self.$source(kw)]), $c = sexp, $c['$source='].apply($c, $b), $b[$b.length-1]);
        return sexp;
      });

      Opal.defn(self, '$new_yield', function(args) {
        var $a, self = this;

        ((($a = args) !== false && $a !== nil) ? $a : args = []);
        return ($a = self).$s.apply($a, ["yield"].concat(Opal.to_a(args)));
      });

      Opal.defn(self, '$new_xstr', function(start_t, str, end_t) {
        var $a, $b, self = this, $case = nil;

        if (str !== false && str !== nil) {
          } else {
          return self.$s("xstr", "")
        };
        $case = str.$type();if ("str"['$===']($case)) {(($a = ["xstr"]), $b = str, $b['$type='].apply($b, $a), $a[$a.length-1])}else if ("dstr"['$===']($case)) {(($a = ["dxstr"]), $b = str, $b['$type='].apply($b, $a), $a[$a.length-1])}else if ("evstr"['$===']($case)) {str = self.$s("dxstr", "", str)};
        (($a = [self.$source(start_t)]), $b = str, $b['$source='].apply($b, $a), $a[$a.length-1]);
        return str;
      });

      Opal.defn(self, '$new_dsym', function(str) {
        var $a, $b, self = this, $case = nil;

        if (str !== false && str !== nil) {
          } else {
          return self.$s("sym", "")
        };
        $case = str.$type();if ("str"['$===']($case)) {(($a = ["sym"]), $b = str, $b['$type='].apply($b, $a), $a[$a.length-1]);
        str['$[]='](1, str['$[]'](1).$to_sym());}else if ("dstr"['$===']($case)) {(($a = ["dsym"]), $b = str, $b['$type='].apply($b, $a), $a[$a.length-1])}else if ("evstr"['$===']($case)) {str = self.$s("dsym", str)};
        return str;
      });

      Opal.defn(self, '$new_evstr', function(str) {
        var self = this;

        return self.$s("evstr", str);
      });

      Opal.defn(self, '$new_str', function(str) {
        var $a, $b, $c, self = this;

        if (str !== false && str !== nil) {
          } else {
          return self.$s("str", "")
        };
        if ((($a = ($b = (($c = str.$size()['$=='](3)) ? str['$[]'](1)['$==']("") : str.$size()['$=='](3)), $b !== false && $b !== nil ?str.$type()['$==']("str") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return str['$[]'](2)
        } else if ((($a = (($b = str.$type()['$==']("str")) ? $rb_gt(str.$size(), 3) : str.$type()['$==']("str"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = ["dstr"]), $b = str, $b['$type='].apply($b, $a), $a[$a.length-1]);
          return str;
        } else if (str.$type()['$==']("evstr")) {
          return self.$s("dstr", "", str)
          } else {
          return str
        };
      });

      Opal.defn(self, '$new_regexp', function(reg, ending) {
        var $a, $b, self = this, $case = nil;

        if (reg !== false && reg !== nil) {
          } else {
          return self.$s("regexp", "")
        };
        return (function() {$case = reg.$type();if ("str"['$===']($case)) {return self.$s("regexp", reg['$[]'](1), self.$value(ending))}else if ("evstr"['$===']($case)) {return self.$s("dregx", "", reg)}else if ("dstr"['$===']($case)) {(($a = ["dregx"]), $b = reg, $b['$type='].apply($b, $a), $a[$a.length-1]);
        return reg;}else { return nil }})();
      });

      Opal.defn(self, '$str_append', function(str, str2) {
        var self = this;

        if (str !== false && str !== nil) {
          } else {
          return str2
        };
        if (str2 !== false && str2 !== nil) {
          } else {
          return str
        };
        if (str.$type()['$==']("evstr")) {
          str = self.$s("dstr", "", str)
        } else if (str.$type()['$==']("str")) {
          str = self.$s("dstr", str['$[]'](1))};
        str['$<<'](str2);
        return str;
      });

      return (Opal.defn(self, '$new_str_content', function(tok) {
        var self = this;

        return self.$s1("str", self.$value(tok), self.$source(tok));
      }), nil) && 'new_str_content';
    })($scope.base, (($scope.get('Racc')).$$scope.get('Parser')))
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/fragment"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_s', '$line', '$column', '$inspect']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Fragment(){};
      var self = $Fragment = $klass($base, $super, 'Fragment', $Fragment);

      var def = self.$$proto, $scope = self.$$scope;

      def.sexp = def.code = nil;
      self.$attr_reader("code");

      Opal.defn(self, '$initialize', function(code, sexp) {
        var self = this;

        if (sexp == null) {
          sexp = nil
        }
        self.code = code.$to_s();
        return self.sexp = sexp;
      });

      Opal.defn(self, '$to_code', function() {
        var $a, self = this;

        if ((($a = self.sexp) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "/*:" + (self.sexp.$line()) + ":" + (self.sexp.$column()) + "*/" + (self.code)
          } else {
          return self.code
        };
      });

      Opal.defn(self, '$inspect', function() {
        var self = this;

        return "f(" + (self.code.$inspect()) + ")";
      });

      Opal.defn(self, '$line', function() {
        var $a, self = this;

        if ((($a = self.sexp) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.sexp.$line()
          } else {
          return nil
        };
      });

      return (Opal.defn(self, '$column', function() {
        var $a, self = this;

        if ((($a = self.sexp) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.sexp.$column()
          } else {
          return nil
        };
      }), nil) && 'column';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/helpers"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$valid_name?', '$inspect', '$=~', '$!', '$to_s', '$valid_ivar_name?', '$to_sym', '$+', '$indent', '$to_proc', '$compiler', '$parser_indent', '$push', '$current_indent', '$js_truthy_optimize', '$with_temp', '$fragment', '$expr', '$==', '$type', '$[]', '$uses_block!', '$scope', '$block_name', '$handlers', '$include?', '$truthy_optimize?', '$dup']);
  self.$require("opal/regexp_anchors");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Helpers, self = $Helpers = $module($base, 'Helpers');

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        Opal.cdecl($scope, 'ES51_RESERVED_WORD', (new RegExp("" + $scope.get('REGEXP_START') + "(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)" + $scope.get('REGEXP_END'))));

        Opal.cdecl($scope, 'ES3_RESERVED_WORD_EXCLUSIVE', (new RegExp("" + $scope.get('REGEXP_START') + "(?:int|byte|char|goto|long|final|float|short|double|native|throws|boolean|abstract|volatile|transient|synchronized)" + $scope.get('REGEXP_END'))));

        Opal.cdecl($scope, 'PROTO_SPECIAL_PROPS', (new RegExp("" + $scope.get('REGEXP_START') + "(?:constructor|displayName|__proto__|__parent__|__noSuchMethod__|__count__)" + $scope.get('REGEXP_END'))));

        Opal.cdecl($scope, 'PROTO_SPECIAL_METHODS', (new RegExp("" + $scope.get('REGEXP_START') + "(?:hasOwnProperty|valueOf)" + $scope.get('REGEXP_END'))));

        Opal.cdecl($scope, 'IMMUTABLE_PROPS', (new RegExp("" + $scope.get('REGEXP_START') + "(?:NaN|Infinity|undefined)" + $scope.get('REGEXP_END'))));

        Opal.cdecl($scope, 'BASIC_IDENTIFIER_RULES', (new RegExp("" + $scope.get('REGEXP_START') + "[$_a-z][$_a-z\\d]*" + $scope.get('REGEXP_END'))));

        Opal.defn(self, '$property', function(name) {
          var $a, self = this;

          if ((($a = self['$valid_name?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "." + (name)
            } else {
            return "[" + (name.$inspect()) + "]"
          };
        });

        Opal.defn(self, '$valid_name?', function(name) {
          var $a, $b, $c, self = this;

          return ($a = $scope.get('BASIC_IDENTIFIER_RULES')['$=~'](name), $a !== false && $a !== nil ?(((($b = ((($c = $scope.get('ES51_RESERVED_WORD')['$=~'](name)) !== false && $c !== nil) ? $c : $scope.get('ES3_RESERVED_WORD_EXCLUSIVE')['$=~'](name))) !== false && $b !== nil) ? $b : $scope.get('IMMUTABLE_PROPS')['$=~'](name)))['$!']() : $a);
        });

        Opal.defn(self, '$variable', function(name) {
          var $a, self = this;

          if ((($a = self['$valid_name?'](name.$to_s())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return name
            } else {
            return "" + (name) + "$"
          };
        });

        Opal.defn(self, '$valid_ivar_name?', function(name) {
          var $a, self = this;

          return (((($a = $scope.get('PROTO_SPECIAL_PROPS')['$=~'](name)) !== false && $a !== nil) ? $a : $scope.get('PROTO_SPECIAL_METHODS')['$=~'](name)))['$!']();
        });

        Opal.defn(self, '$ivar', function(name) {
          var $a, self = this;

          if ((($a = self['$valid_ivar_name?'](name.$to_s())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return name
            } else {
            return "" + (name) + "$"
          };
        });

        Opal.defn(self, '$lvar_to_js', function(var$) {
          var $a, self = this;

          if ((($a = self['$valid_name?'](var$.$to_s())) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            var$ = "" + (var$) + "$"
          };
          return var$.$to_sym();
        });

        Opal.defn(self, '$mid_to_jsid', function(mid) {
          var $a, self = this;

          if ((($a = /\=|\+|\-|\*|\/|\!|\?|<|\>|\&|\||\^|\%|\~|\[/['$=~'](mid.$to_s())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "['$" + (mid) + "']"
            } else {
            return $rb_plus(".$", mid)
          };
        });

        Opal.defn(self, '$indent', TMP_1 = function() {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          TMP_1.$$p = null;
          return ($a = ($b = self.$compiler()).$indent, $a.$$p = block.$to_proc(), $a).call($b);
        });

        Opal.defn(self, '$current_indent', function() {
          var self = this;

          return self.$compiler().$parser_indent();
        });

        Opal.defn(self, '$line', function() {
          var $a, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var strs = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            strs[$splat_index] = arguments[$splat_index + 0];
          }
          self.$push("\n" + (self.$current_indent()));
          return ($a = self).$push.apply($a, Opal.to_a(strs));
        });

        Opal.defn(self, '$empty_line', function() {
          var self = this;

          return self.$push("\n");
        });

        Opal.defn(self, '$js_truthy', function(sexp) {
          var $a, $b, TMP_2, self = this, optimize = nil;

          if ((($a = optimize = self.$js_truthy_optimize(sexp)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return optimize};
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_2 = function(tmp){var self = TMP_2.$$s || this;
if (tmp == null) tmp = nil;
          return [self.$fragment("((" + (tmp) + " = "), self.$expr(sexp), self.$fragment(") !== nil && (!" + (tmp) + ".$$is_boolean || " + (tmp) + " == true))")]}, TMP_2.$$s = self, TMP_2), $a).call($b);
        });

        Opal.defn(self, '$js_falsy', function(sexp) {
          var $a, $b, TMP_3, self = this, mid = nil;

          if (sexp.$type()['$==']("call")) {
            mid = sexp['$[]'](2);
            if (mid['$==']("block_given?")) {
              self.$scope()['$uses_block!']();
              return "" + (self.$scope().$block_name()) + " === nil";};};
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_3 = function(tmp){var self = TMP_3.$$s || this;
if (tmp == null) tmp = nil;
          return [self.$fragment("((" + (tmp) + " = "), self.$expr(sexp), self.$fragment(") === nil || (" + (tmp) + ".$$is_boolean && " + (tmp) + " == false))")]}, TMP_3.$$s = self, TMP_3), $a).call($b);
        });

        Opal.defn(self, '$js_truthy_optimize', function(sexp) {
          var $a, $b, $c, self = this, mid = nil, receiver_handler_class = nil, receiver = nil, allow_optimization_on_type = nil;

          if (sexp.$type()['$==']("call")) {
            mid = sexp['$[]'](2);
            receiver_handler_class = ($a = (receiver = sexp['$[]'](1)), $a !== false && $a !== nil ?self.$compiler().$handlers()['$[]'](receiver.$type()) : $a);
            allow_optimization_on_type = ($a = ($b = (($scope.get('Compiler')).$$scope.get('COMPARE'))['$include?'](mid.$to_s()), $b !== false && $b !== nil ?receiver_handler_class : $b), $a !== false && $a !== nil ?receiver_handler_class['$truthy_optimize?']() : $a);
            if ((($a = ((($b = ((($c = allow_optimization_on_type) !== false && $c !== nil) ? $c : mid['$==']("block_given?"))) !== false && $b !== nil) ? $b : mid['$==']("=="))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$expr(sexp)
              } else {
              return nil
            };
          } else if ((($a = ["lvar", "self"]['$include?'](sexp.$type())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return [self.$expr(sexp.$dup()), self.$fragment(" !== false && "), self.$expr(sexp.$dup()), self.$fragment(" !== nil")]
            } else {
            return nil
          };
        });
      })($scope.base)
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/base"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$each', '$[]=', '$handlers', '$each_with_index', '$define_method', '$[]', '$+', '$attr_reader', '$type', '$compile', '$raise', '$is_a?', '$fragment', '$<<', '$unshift', '$reverse', '$push', '$new', '$error', '$scope', '$s', '$==', '$process', '$expr', '$add_scope_local', '$to_sym', '$add_scope_ivar', '$add_scope_gvar', '$add_scope_temp', '$helper', '$with_temp', '$to_proc', '$in_while?', '$instance_variable_get']);
  self.$require("opal/nodes/helpers");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Base(){};
        var self = $Base = $klass($base, $super, 'Base', $Base);

        var def = self.$$proto, $scope = self.$$scope, TMP_6;

        def.sexp = def.fragments = def.compiler = def.level = nil;
        self.$include($scope.get('Helpers'));

        Opal.defs(self, '$handlers', function() {
          var $a, self = this;
          if (self.handlers == null) self.handlers = nil;

          return ((($a = self.handlers) !== false && $a !== nil) ? $a : self.handlers = $hash2([], {}));
        });

        Opal.defs(self, '$handle', function() {
          var $a, $b, TMP_1, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var types = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            types[$splat_index] = arguments[$splat_index + 0];
          }
          return ($a = ($b = types).$each, $a.$$p = (TMP_1 = function(type){var self = TMP_1.$$s || this;
if (type == null) type = nil;
          return $scope.get('Base').$handlers()['$[]='](type, self)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        });

        Opal.defs(self, '$children', function() {
          var $a, $b, TMP_2, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var names = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            names[$splat_index] = arguments[$splat_index + 0];
          }
          return ($a = ($b = names).$each_with_index, $a.$$p = (TMP_2 = function(name, idx){var self = TMP_2.$$s || this, $a, $b, TMP_3;
if (name == null) name = nil;if (idx == null) idx = nil;
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;
              if (self.sexp == null) self.sexp = nil;

            return self.sexp['$[]']($rb_plus(idx, 1))}, TMP_3.$$s = self, TMP_3), $a).call($b, name)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        });

        Opal.defs(self, '$truthy_optimize?', function() {
          var self = this;

          return false;
        });

        self.$attr_reader("compiler", "type");

        Opal.defn(self, '$initialize', function(sexp, level, compiler) {
          var self = this;

          self.sexp = sexp;
          self.type = sexp.$type();
          self.level = level;
          return self.compiler = compiler;
        });

        Opal.defn(self, '$children', function() {
          var self = this;

          return self.sexp['$[]']($range(1, -1, false));
        });

        Opal.defn(self, '$compile_to_fragments', function() {
          var $a, $b, self = this;

          if ((($a = (($b = self['fragments'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.fragments};
          self.fragments = [];
          self.$compile();
          return self.fragments;
        });

        Opal.defn(self, '$compile', function() {
          var self = this;

          return self.$raise("Not Implemented");
        });

        Opal.defn(self, '$push', function() {
          var $a, $b, TMP_4, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var strs = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            strs[$splat_index] = arguments[$splat_index + 0];
          }
          return ($a = ($b = strs).$each, $a.$$p = (TMP_4 = function(str){var self = TMP_4.$$s || this, $a;
            if (self.fragments == null) self.fragments = nil;
if (str == null) str = nil;
          if ((($a = str['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              str = self.$fragment(str)};
            return self.fragments['$<<'](str);}, TMP_4.$$s = self, TMP_4), $a).call($b);
        });

        Opal.defn(self, '$unshift', function() {
          var $a, $b, TMP_5, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var strs = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            strs[$splat_index] = arguments[$splat_index + 0];
          }
          return ($a = ($b = strs.$reverse()).$each, $a.$$p = (TMP_5 = function(str){var self = TMP_5.$$s || this, $a;
            if (self.fragments == null) self.fragments = nil;
if (str == null) str = nil;
          if ((($a = str['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              str = self.$fragment(str)};
            return self.fragments.$unshift(str);}, TMP_5.$$s = self, TMP_5), $a).call($b);
        });

        Opal.defn(self, '$wrap', function(pre, post) {
          var self = this;

          self.$unshift(pre);
          return self.$push(post);
        });

        Opal.defn(self, '$fragment', function(str) {
          var self = this;

          return (($scope.get('Opal')).$$scope.get('Fragment')).$new(str, self.sexp);
        });

        Opal.defn(self, '$error', function(msg) {
          var self = this;

          return self.compiler.$error(msg);
        });

        Opal.defn(self, '$scope', function() {
          var self = this;

          return self.compiler.$scope();
        });

        Opal.defn(self, '$s', function() {
          var $a, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          return ($a = self.compiler).$s.apply($a, Opal.to_a(args));
        });

        Opal.defn(self, '$expr?', function() {
          var self = this;

          return self.level['$==']("expr");
        });

        Opal.defn(self, '$recv?', function() {
          var self = this;

          return self.level['$==']("recv");
        });

        Opal.defn(self, '$stmt?', function() {
          var self = this;

          return self.level['$==']("stmt");
        });

        Opal.defn(self, '$process', function(sexp, level) {
          var self = this;

          if (level == null) {
            level = "expr"
          }
          return self.compiler.$process(sexp, level);
        });

        Opal.defn(self, '$expr', function(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "expr");
        });

        Opal.defn(self, '$recv', function(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "recv");
        });

        Opal.defn(self, '$stmt', function(sexp) {
          var self = this;

          return self.compiler.$process(sexp, "stmt");
        });

        Opal.defn(self, '$expr_or_nil', function(sexp) {
          var self = this;

          if (sexp !== false && sexp !== nil) {
            return self.$expr(sexp)
            } else {
            return "nil"
          };
        });

        Opal.defn(self, '$add_local', function(name) {
          var self = this;

          return self.$scope().$add_scope_local(name.$to_sym());
        });

        Opal.defn(self, '$add_ivar', function(name) {
          var self = this;

          return self.$scope().$add_scope_ivar(name);
        });

        Opal.defn(self, '$add_gvar', function(name) {
          var self = this;

          return self.$scope().$add_scope_gvar(name);
        });

        Opal.defn(self, '$add_temp', function(temp) {
          var self = this;

          return self.$scope().$add_scope_temp(temp);
        });

        Opal.defn(self, '$helper', function(name) {
          var self = this;

          return self.compiler.$helper(name);
        });

        Opal.defn(self, '$with_temp', TMP_6 = function() {
          var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil;

          TMP_6.$$p = null;
          return ($a = ($b = self.compiler).$with_temp, $a.$$p = block.$to_proc(), $a).call($b);
        });

        Opal.defn(self, '$in_while?', function() {
          var self = this;

          return self.compiler['$in_while?']();
        });

        return (Opal.defn(self, '$while_loop', function() {
          var self = this;

          return self.compiler.$instance_variable_get("@while_loop");
        }), nil) && 'while_loop';
      })($scope.base, null)
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/literal"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$handle', '$push', '$to_s', '$type', '$children', '$value', '$recv?', '$wrap', '$join', '$keys', '$gsub', '$even?', '$length', '$+', '$chop', '$[]', '$translate_escape_chars', '$inspect', '$===', '$new', '$flags', '$each_line', '$==', '$s', '$source=', '$line', '$include', '$stmt?', '$!', '$include?', '$compile_split_lines', '$needs_semicolon?', '$each_with_index', '$expr', '$raise', '$last', '$each', '$requires_semicolon', '$helper', '$start', '$finish']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ValueNode(){};
        var self = $ValueNode = $klass($base, $super, 'ValueNode', $ValueNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("true", "false", "self", "nil");

        Opal.defn(self, '$compile', function() {
          var self = this;

          return self.$push(self.$type().$to_s());
        });

        return (Opal.defs(self, '$truthy_optimize?', function() {
          var self = this;

          return true;
        }), nil) && 'truthy_optimize?';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $NumericNode(){};
        var self = $NumericNode = $klass($base, $super, 'NumericNode', $NumericNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("int", "float");

        self.$children("value");

        Opal.defn(self, '$compile', function() {
          var $a, self = this;

          self.$push(self.$value().$to_s());
          if ((($a = self['$recv?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(", ")")
            } else {
            return nil
          };
        });

        return (Opal.defs(self, '$truthy_optimize?', function() {
          var self = this;

          return true;
        }), nil) && 'truthy_optimize?';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $StringNode(){};
        var self = $StringNode = $klass($base, $super, 'StringNode', $StringNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("str");

        self.$children("value");

        Opal.cdecl($scope, 'ESCAPE_CHARS', $hash2(["a", "e"], {"a": "\\u0007", "e": "\\u001b"}));

        Opal.cdecl($scope, 'ESCAPE_REGEX', (new RegExp("(\\\\+)([" + $scope.get('ESCAPE_CHARS').$keys().$join("") + "])")));

        Opal.defn(self, '$translate_escape_chars', function(inspect_string) {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = inspect_string).$gsub, $a.$$p = (TMP_1 = function(original){var self = TMP_1.$$s || this, $a, $b;
if (original == null) original = nil;
          if ((($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1)).$length()['$even?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return original
              } else {
              return $rb_plus((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$chop(), $scope.get('ESCAPE_CHARS')['$[]']((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))))
            }}, TMP_1.$$s = self, TMP_1), $a).call($b, $scope.get('ESCAPE_REGEX'));
        });

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          return self.$push(self.$translate_escape_chars(self.$value().$inspect()));
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $SymbolNode(){};
        var self = $SymbolNode = $klass($base, $super, 'SymbolNode', $SymbolNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("sym");

        self.$children("value");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          return self.$push(self.$value().$to_s().$inspect());
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $RegexpNode(){};
        var self = $RegexpNode = $klass($base, $super, 'RegexpNode', $RegexpNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("regexp");

        self.$children("value", "flags");

        return (Opal.defn(self, '$compile', function() {
          var self = this, $case = nil, message = nil;

          return (function() {$case = self.$value();if (""['$===']($case)) {return self.$push("/(?:)/")}else if (/\?<\w+\>/['$===']($case)) {message = "named captures are not supported in javascript: " + (self.$value().$inspect());
          return self.$push("self.$raise(new SyntaxError('" + (message) + "'))");}else {return self.$push("" + ($scope.get('Regexp').$new(self.$value()).$inspect()) + (self.$flags()))}})();
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base) {
        var $XStringLineSplitter, self = $XStringLineSplitter = $module($base, 'XStringLineSplitter');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defn(self, '$compile_split_lines', function(value, sexp) {
          var $a, $b, TMP_2, self = this, idx = nil;

          idx = 0;
          return ($a = ($b = value).$each_line, $a.$$p = (TMP_2 = function(line){var self = TMP_2.$$s || this, $a, $b, line_sexp = nil, frag = nil;
if (line == null) line = nil;
          if (idx['$=='](0)) {
              self.$push(line)
              } else {
              line_sexp = self.$s();
              (($a = [[$rb_plus(sexp.$line(), idx), 0]]), $b = line_sexp, $b['$source='].apply($b, $a), $a[$a.length-1]);
              frag = $scope.get('Fragment').$new(line, line_sexp);
              self.$push(frag);
            };
            return idx = $rb_plus(idx, 1);}, TMP_2.$$s = self, TMP_2), $a).call($b);
        })
      })($scope.base);

      (function($base, $super) {
        function $XStringNode(){};
        var self = $XStringNode = $klass($base, $super, 'XStringNode', $XStringNode);

        var def = self.$$proto, $scope = self.$$scope;

        def.sexp = nil;
        self.$include($scope.get('XStringLineSplitter'));

        self.$handle("xstr");

        self.$children("value");

        Opal.defn(self, '$needs_semicolon?', function() {
          var $a, self = this;

          return ($a = self['$stmt?'](), $a !== false && $a !== nil ?self.$value().$to_s()['$include?'](";")['$!']() : $a);
        });

        Opal.defn(self, '$compile', function() {
          var $a, self = this;

          self.$compile_split_lines(self.$value().$to_s(), self.sexp);
          if ((($a = self['$needs_semicolon?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push(";")};
          if ((($a = self['$recv?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(", ")")
            } else {
            return nil
          };
        });

        return (Opal.defn(self, '$start_line', function() {
          var self = this;

          return self.sexp.$line();
        }), nil) && 'start_line';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $DynamicStringNode(){};
        var self = $DynamicStringNode = $klass($base, $super, 'DynamicStringNode', $DynamicStringNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("dstr");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_3, self = this;

          return ($a = ($b = self.$children()).$each_with_index, $a.$$p = (TMP_3 = function(part, idx){var self = TMP_3.$$s || this, $a;
if (part == null) part = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(" + ")
            };
            if ((($a = $scope.get('String')['$==='](part)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$push(part.$inspect())
            } else if (part.$type()['$==']("evstr")) {
              self.$push("(");
              self.$push((function() {if ((($a = part['$[]'](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self.$expr(part['$[]'](1))
                } else {
                return "\"\""
              }; return nil; })());
              self.$push(")");
            } else if (part.$type()['$==']("str")) {
              self.$push(part['$[]'](1).$inspect())
            } else if (part.$type()['$==']("dstr")) {
              self.$push("(");
              self.$push(self.$expr(part));
              self.$push(")");
              } else {
              self.$raise("Bad dstr part " + (part.$inspect()))
            };
            if ((($a = self['$recv?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$wrap("(", ")")
              } else {
              return nil
            };}, TMP_3.$$s = self, TMP_3), $a).call($b);
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $DynamicSymbolNode(){};
        var self = $DynamicSymbolNode = $klass($base, $super, 'DynamicSymbolNode', $DynamicSymbolNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("dsym");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_4, self = this;

          ($a = ($b = self.$children()).$each_with_index, $a.$$p = (TMP_4 = function(part, idx){var self = TMP_4.$$s || this, $a;
if (part == null) part = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(" + ")
            };
            if ((($a = $scope.get('String')['$==='](part)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$push(part.$inspect())
            } else if (part.$type()['$==']("evstr")) {
              return self.$push(self.$expr(self.$s("call", part.$last(), "to_s", self.$s("arglist"))))
            } else if (part.$type()['$==']("str")) {
              return self.$push(part.$last().$inspect())
              } else {
              return self.$raise("Bad dsym part")
            };}, TMP_4.$$s = self, TMP_4), $a).call($b);
          return self.$wrap("(", ")");
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $DynamicXStringNode(){};
        var self = $DynamicXStringNode = $klass($base, $super, 'DynamicXStringNode', $DynamicXStringNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$include($scope.get('XStringLineSplitter'));

        self.$handle("dxstr");

        Opal.defn(self, '$requires_semicolon', function(code) {
          var $a, self = this;

          return ($a = self['$stmt?'](), $a !== false && $a !== nil ?code['$include?'](";")['$!']() : $a);
        });

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_5, self = this, needs_semicolon = nil;

          needs_semicolon = false;
          ($a = ($b = self.$children()).$each, $a.$$p = (TMP_5 = function(part){var self = TMP_5.$$s || this, $a;
            if (self.sexp == null) self.sexp = nil;
if (part == null) part = nil;
          if ((($a = $scope.get('String')['$==='](part)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$compile_split_lines(part.$to_s(), self.sexp);
              if ((($a = self.$requires_semicolon(part.$to_s())) !== nil && (!$a.$$is_boolean || $a == true))) {
                return needs_semicolon = true
                } else {
                return nil
              };
            } else if (part.$type()['$==']("evstr")) {
              return self.$push(self.$expr(part['$[]'](1)))
            } else if (part.$type()['$==']("str")) {
              self.$compile_split_lines(part.$last().$to_s(), part);
              if ((($a = self.$requires_semicolon(part.$last().$to_s())) !== nil && (!$a.$$is_boolean || $a == true))) {
                return needs_semicolon = true
                } else {
                return nil
              };
              } else {
              return self.$raise("Bad dxstr part")
            }}, TMP_5.$$s = self, TMP_5), $a).call($b);
          if (needs_semicolon !== false && needs_semicolon !== nil) {
            self.$push(";")};
          if ((($a = self['$recv?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(", ")")
            } else {
            return nil
          };
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $DynamicRegexpNode(){};
        var self = $DynamicRegexpNode = $klass($base, $super, 'DynamicRegexpNode', $DynamicRegexpNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("dregx");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_6, self = this;

          ($a = ($b = self.$children()).$each_with_index, $a.$$p = (TMP_6 = function(part, idx){var self = TMP_6.$$s || this, $a;
if (part == null) part = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(" + ")
            };
            if ((($a = $scope.get('String')['$==='](part)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$push(part.$inspect())
            } else if (part.$type()['$==']("str")) {
              return self.$push(part['$[]'](1).$inspect())
              } else {
              return self.$push(self.$expr(part['$[]'](1)))
            };}, TMP_6.$$s = self, TMP_6), $a).call($b);
          return self.$wrap("(new RegExp(", "))");
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $InclusiveRangeNode(){};
        var self = $InclusiveRangeNode = $klass($base, $super, 'InclusiveRangeNode', $InclusiveRangeNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("irange");

        self.$children("start", "finish");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          self.$helper("range");
          return self.$push("$range(", self.$expr(self.$start()), ", ", self.$expr(self.$finish()), ", false)");
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ExclusiveRangeNode(){};
        var self = $ExclusiveRangeNode = $klass($base, $super, 'ExclusiveRangeNode', $ExclusiveRangeNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("erange");

        self.$children("start", "finish");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          self.$helper("range");
          return self.$push("$range(", self.$expr(self.$start()), ", ", self.$expr(self.$finish()), ", true)");
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/variables"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$irb?', '$compiler', '$top?', '$scope', '$using_irb?', '$push', '$variable', '$to_s', '$var_name', '$with_temp', '$property', '$wrap', '$add_local', '$expr', '$value', '$recv?', '$[]', '$name', '$ivar', '$add_ivar', '$helper', '$==', '$handle_global_match', '$handle_post_match', '$handle_pre_match', '$add_gvar', '$index']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $LocalVariableNode(){};
        var self = $LocalVariableNode = $klass($base, $super, 'LocalVariableNode', $LocalVariableNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("lvar");

        self.$children("var_name");

        Opal.defn(self, '$using_irb?', function() {
          var $a, self = this;

          return ($a = self.$compiler()['$irb?'](), $a !== false && $a !== nil ?self.$scope()['$top?']() : $a);
        });

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, self = this;

          if ((($a = self['$using_irb?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return self.$push(self.$variable(self.$var_name().$to_s()))
          };
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_1 = function(tmp){var self = TMP_1.$$s || this;
if (tmp == null) tmp = nil;
          self.$push(self.$property(self.$var_name().$to_s()));
            return self.$wrap("((" + (tmp) + " = Opal.irb_vars", ") == null ? nil : " + (tmp) + ")");}, TMP_1.$$s = self, TMP_1), $a).call($b);
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $LocalAssignNode(){};
        var self = $LocalAssignNode = $klass($base, $super, 'LocalAssignNode', $LocalAssignNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("lasgn");

        self.$children("var_name", "value");

        Opal.defn(self, '$using_irb?', function() {
          var $a, self = this;

          return ($a = self.$compiler()['$irb?'](), $a !== false && $a !== nil ?self.$scope()['$top?']() : $a);
        });

        return (Opal.defn(self, '$compile', function() {
          var $a, self = this;

          if ((($a = self['$using_irb?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push("Opal.irb_vars" + (self.$property(self.$var_name().$to_s())) + " = ")
            } else {
            self.$add_local(self.$variable(self.$var_name().$to_s()));
            self.$push("" + (self.$variable(self.$var_name().$to_s())) + " = ");
          };
          self.$push(self.$expr(self.$value()));
          if ((($a = self['$recv?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(", ")")
            } else {
            return nil
          };
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $InstanceVariableNode(){};
        var self = $InstanceVariableNode = $klass($base, $super, 'InstanceVariableNode', $InstanceVariableNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("ivar");

        self.$children("name");

        Opal.defn(self, '$var_name', function() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false));
        });

        return (Opal.defn(self, '$compile', function() {
          var self = this, name = nil;

          name = self.$property(self.$ivar(self.$var_name()));
          self.$add_ivar(name);
          return self.$push("self" + (name));
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $InstanceAssignNode(){};
        var self = $InstanceAssignNode = $klass($base, $super, 'InstanceAssignNode', $InstanceAssignNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("iasgn");

        self.$children("name", "value");

        Opal.defn(self, '$var_name', function() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false));
        });

        return (Opal.defn(self, '$compile', function() {
          var self = this, name = nil;

          name = self.$property(self.$ivar(self.$var_name()));
          self.$push("self" + (name) + " = ");
          return self.$push(self.$expr(self.$value()));
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $GlobalVariableNode(){};
        var self = $GlobalVariableNode = $klass($base, $super, 'GlobalVariableNode', $GlobalVariableNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("gvar");

        self.$children("name");

        Opal.defn(self, '$var_name', function() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false));
        });

        Opal.defn(self, '$compile', function() {
          var self = this, name = nil;

          self.$helper("gvars");
          if (self.$var_name()['$==']("&")) {
            return self.$handle_global_match()
          } else if (self.$var_name()['$==']("'")) {
            return self.$handle_post_match()
          } else if (self.$var_name()['$==']("`")) {
            return self.$handle_pre_match()};
          name = self.$property(self.$var_name());
          self.$add_gvar(name);
          return self.$push("$gvars" + (name));
        });

        Opal.defn(self, '$handle_global_match', function() {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_2 = function(tmp){var self = TMP_2.$$s || this;
if (tmp == null) tmp = nil;
          return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](0))")}, TMP_2.$$s = self, TMP_2), $a).call($b);
        });

        Opal.defn(self, '$handle_pre_match', function() {
          var $a, $b, TMP_3, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_3 = function(tmp){var self = TMP_3.$$s || this;
if (tmp == null) tmp = nil;
          return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$pre_match())")}, TMP_3.$$s = self, TMP_3), $a).call($b);
        });

        return (Opal.defn(self, '$handle_post_match', function() {
          var $a, $b, TMP_4, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_4 = function(tmp){var self = TMP_4.$$s || this;
if (tmp == null) tmp = nil;
          return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + ".$post_match())")}, TMP_4.$$s = self, TMP_4), $a).call($b);
        }), nil) && 'handle_post_match';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $GlobalAssignNode(){};
        var self = $GlobalAssignNode = $klass($base, $super, 'GlobalAssignNode', $GlobalAssignNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("gasgn");

        self.$children("name", "value");

        Opal.defn(self, '$var_name', function() {
          var self = this;

          return self.$name().$to_s()['$[]']($range(1, -1, false));
        });

        return (Opal.defn(self, '$compile', function() {
          var self = this, name = nil;

          self.$helper("gvars");
          name = self.$property(self.$var_name());
          self.$push("$gvars" + (name) + " = ");
          return self.$push(self.$expr(self.$value()));
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $BackrefNode(){};
        var self = $BackrefNode = $klass($base, $super, 'BackrefNode', $BackrefNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("nth_ref");

        self.$children("index");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_5, self = this;

          self.$helper("gvars");
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_5 = function(tmp){var self = TMP_5.$$s || this;
if (tmp == null) tmp = nil;
          return self.$push("((" + (tmp) + " = $gvars['~']) === nil ? nil : " + (tmp) + "['$[]'](" + (self.$index()) + "))")}, TMP_5.$$s = self, TMP_5), $a).call($b);
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ClassVariableNode(){};
        var self = $ClassVariableNode = $klass($base, $super, 'ClassVariableNode', $ClassVariableNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("cvar");

        self.$children("name");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_6, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_6 = function(tmp){var self = TMP_6.$$s || this;
if (tmp == null) tmp = nil;
          return self.$push("((" + (tmp) + " = Opal.cvars['" + (self.$name()) + "']) == null ? nil : " + (tmp) + ")")}, TMP_6.$$s = self, TMP_6), $a).call($b);
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ClassVarAssignNode(){};
        var self = $ClassVarAssignNode = $klass($base, $super, 'ClassVarAssignNode', $ClassVarAssignNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("casgn");

        self.$children("name", "value");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          self.$push("(Opal.cvars['" + (self.$name()) + "'] = ");
          self.$push(self.$expr(self.$value()));
          return self.$push(")");
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ClassVarDeclNode(){};
        var self = $ClassVarDeclNode = $klass($base, $super, 'ClassVarDeclNode', $ClassVarDeclNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("cvdecl");

        self.$children("name", "value");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          self.$push("(Opal.cvars['" + (self.$name()) + "'] = ");
          self.$push(self.$expr(self.$value()));
          return self.$push(")");
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/constants"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$==', '$name', '$eof_content', '$compiler', '$push', '$expr', '$base', '$wrap', '$value']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ConstNode(){};
        var self = $ConstNode = $klass($base, $super, 'ConstNode', $ConstNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("const");

        self.$children("name");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, self = this;

          if ((($a = (($b = self.$name()['$==']("DATA")) ? self.$compiler().$eof_content() : self.$name()['$==']("DATA"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("$__END__")
            } else {
            return self.$push("$scope.get('" + (self.$name()) + "')")
          };
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ConstDeclarationNode(){};
        var self = $ConstDeclarationNode = $klass($base, $super, 'ConstDeclarationNode', $ConstDeclarationNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("cdecl");

        self.$children("name", "base");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          self.$push(self.$expr(self.$base()));
          return self.$wrap("Opal.cdecl($scope, '" + (self.$name()) + "', ", ")");
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ConstAssignNode(){};
        var self = $ConstAssignNode = $klass($base, $super, 'ConstAssignNode', $ConstAssignNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("casgn");

        self.$children("base", "name", "value");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          self.$push("Opal.casgn(");
          self.$push(self.$expr(self.$base()));
          self.$push(", '" + (self.$name()) + "', ");
          self.$push(self.$expr(self.$value()));
          return self.$push(")");
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ConstGetNode(){};
        var self = $ConstGetNode = $klass($base, $super, 'ConstGetNode', $ConstGetNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("colon2");

        self.$children("base", "name");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          self.$push("((");
          self.$push(self.$expr(self.$base()));
          return self.$push(").$$scope.get('" + (self.$name()) + "'))");
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $TopConstNode(){};
        var self = $TopConstNode = $klass($base, $super, 'TopConstNode', $TopConstNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("colon3");

        self.$children("name");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          return self.$push("Opal.get('" + (self.$name()) + "')");
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $TopConstAssignNode(){};
        var self = $TopConstAssignNode = $klass($base, $super, 'TopConstAssignNode', $TopConstAssignNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("casgn3");

        self.$children("name", "value");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          self.$push("Opal.casgn(Opal.Object, '" + (self.$name()) + "', ");
          self.$push(self.$expr(self.$value()));
          return self.$push(")");
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["pathname"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$==', '$raise', '$attr_reader', '$path', '$start_with?', '$!', '$absolute?', '$sub', '$new']);
  (function($base, $super) {
    function $Pathname(){};
    var self = $Pathname = $klass($base, $super, 'Pathname', $Pathname);

    var def = self.$$proto, $scope = self.$$scope;

    def.path = nil;
    Opal.defn(self, '$initialize', function(path) {
      var self = this;

      if (path['$==']("\x00")) {
        self.$raise($scope.get('ArgumentError'))};
      return self.path = path;
    });

    self.$attr_reader("path");

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return other.$path()['$=='](self.path);
    });

    Opal.defn(self, '$absolute?', function() {
      var self = this;

      return self.path['$start_with?']("/");
    });

    Opal.defn(self, '$relative?', function() {
      var self = this;

      return self['$absolute?']()['$!']();
    });

    Opal.defn(self, '$root?', function() {
      var self = this;

      return self.path['$==']("/");
    });

    Opal.defn(self, '$parent', function() {
      var $a, self = this, new_path = nil;

      new_path = self.path.$sub(/\/([^\/]+\/?$)/, "");
      if (new_path['$==']("")) {
        new_path = (function() {if ((($a = self['$absolute?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "/"
          } else {
          return "."
        }; return nil; })()};
      return $scope.get('Pathname').$new(new_path);
    });

    Opal.defn(self, '$sub', function() {
      var $a, self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      return $scope.get('Pathname').$new(($a = self.path).$sub.apply($a, Opal.to_a(args)));
    });

    Opal.defn(self, '$cleanpath', function() {
      var self = this;

      return Opal.normalize_loadable_path(self.path);
    });

    Opal.defn(self, '$to_path', function() {
      var self = this;

      return self.path;
    });

    Opal.defn(self, '$hash', function() {
      var self = this;

      return self.path;
    });

    Opal.alias(self, 'to_str', 'to_path');

    return Opal.alias(self, 'to_s', 'to_path');
  })($scope.base, null);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$Pathname', function(path) {
      var self = this;

      return $scope.get('Pathname').$new(path);
    })
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/runtime_helpers"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$new', '$children', '$==', '$include?', '$to_sym', '$<<', '$define_method', '$to_proc', '$meth', '$__send__', '$raise', '$helper', '$[]', '$arglist', '$js_truthy', '$js_falsy']);
  self.$require("set");
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $RuntimeHelpers(){};
        var self = $RuntimeHelpers = $klass($base, $super, 'RuntimeHelpers', $RuntimeHelpers);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_2, $c, TMP_3;

        Opal.cdecl($scope, 'HELPERS', $scope.get('Set').$new());

        self.$children("recvr", "meth", "arglist");

        Opal.defs(self, '$compatible?', function(recvr, meth, arglist) {
          var $a, self = this;

          return (($a = recvr['$=='](["const", "Opal"])) ? $scope.get('HELPERS')['$include?'](meth.$to_sym()) : recvr['$=='](["const", "Opal"]));
        });

        Opal.defs(self, '$helper', TMP_1 = function(name) {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          TMP_1.$$p = null;
          $scope.get('HELPERS')['$<<'](name);
          return ($a = ($b = self).$define_method, $a.$$p = block.$to_proc(), $a).call($b, "compile_" + (name));
        });

        Opal.defn(self, '$compile', function() {
          var $a, self = this;

          if ((($a = $scope.get('HELPERS')['$include?'](self.$meth().$to_sym())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$__send__("compile_" + (self.$meth()))
            } else {
            return self.$raise("Helper not supported: " + (self.$meth()))
          };
        });

        ($a = ($b = self).$helper, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, sexp = nil;

        if ((($a = sexp = self.$arglist()['$[]'](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("truthy? requires an object")
          };
          return self.$js_truthy(sexp);}, TMP_2.$$s = self, TMP_2), $a).call($b, "truthy?");

        return ($a = ($c = self).$helper, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, sexp = nil;

        if ((($a = sexp = self.$arglist()['$[]'](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("falsy? requires an object")
          };
          return self.$js_falsy(sexp);}, TMP_3.$$s = self, TMP_3), $a).call($c, "falsy?");
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/call"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$[]=', '$define_method', '$to_proc', '$handle_special', '$compile_default?', '$record_method?', '$<<', '$method_calls', '$compiler', '$to_sym', '$meth', '$using_irb?', '$compile_irb_var', '$default_compile', '$mid_to_jsid', '$to_s', '$any?', '$==', '$first', '$[]', '$arglist', '$===', '$last', '$type', '$pop', '$iter', '$new_temp', '$scope', '$expr', '$recv', '$recv_sexp', '$s', '$!', '$insert', '$push', '$unshift', '$queue_temp', '$recvr', '$=~', '$with_temp', '$variable', '$intern', '$+', '$irb?', '$top?', '$nil?', '$include?', '$__send__', '$compatible?', '$compile', '$new', '$each', '$add_special', '$inline_operators?', '$operator_helpers', '$fragment', '$compile_default!', '$resolve', '$requires', '$file', '$dirname', '$cleanpath', '$join', '$Pathname', '$inspect', '$process', '$class_scope?', '$required_trees', '$handle_block_given_call', '$def?', '$mid', '$handle_part', '$map', '$expand_path', '$split', '$dynamic_require_severity', '$error', '$line', '$warning', '$inject']);
  self.$require("set");
  self.$require("pathname");
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/runtime_helpers");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CallNode(){};
        var self = $CallNode = $klass($base, $super, 'CallNode', $CallNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_6, $c, TMP_8, $d, TMP_9, $e, TMP_10, $f, TMP_11, $g, TMP_12, $h, TMP_13, $i, TMP_14, $j, TMP_15;

        def.assignment = def.compiler = def.sexp = def.level = def.compile_default = nil;
        self.$handle("call");

        self.$children("recvr", "meth", "arglist", "iter");

        Opal.cdecl($scope, 'SPECIALS', $hash2([], {}));

        Opal.cdecl($scope, 'OPERATORS', $hash2(["+", "-", "*", "/", "<", "<=", ">", ">="], {"+": "plus", "-": "minus", "*": "times", "/": "divide", "<": "lt", "<=": "le", ">": "gt", ">=": "ge"}));

        Opal.defs(self, '$add_special', TMP_1 = function(name, options) {
          var $a, $b, self = this, $iter = TMP_1.$$p, handler = $iter || nil;

          if (options == null) {
            options = $hash2([], {})
          }
          TMP_1.$$p = null;
          $scope.get('SPECIALS')['$[]='](name, options);
          return ($a = ($b = self).$define_method, $a.$$p = handler.$to_proc(), $a).call($b, "handle_" + (name));
        });

        Opal.defn(self, '$compile', function() {
          var $a, self = this;

          self.$handle_special();
          if ((($a = self['$compile_default?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          if ((($a = self['$record_method?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$compiler().$method_calls()['$<<'](self.$meth().$to_sym())};
          if ((($a = self['$using_irb?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compile_irb_var()};
          return self.$default_compile();
        });

        Opal.defn(self, '$record_method?', function() {
          var self = this;

          return true;
        });

        Opal.defn(self, '$default_compile', function() {
          var $a, $b, TMP_2, $c, self = this, mid = nil, splat = nil, block = nil, blktmp = nil, tmprecv = nil, recv_code = nil, call_recv = nil, args = nil;

          mid = self.$mid_to_jsid(self.$meth().$to_s());
          splat = ($a = ($b = self.$arglist()['$[]']($range(1, -1, false)))['$any?'], $a.$$p = (TMP_2 = function(a){var self = TMP_2.$$s || this;
if (a == null) a = nil;
          return a.$first()['$==']("splat")}, TMP_2.$$s = self, TMP_2), $a).call($b);
          if ((($a = ($c = $scope.get('Sexp')['$==='](self.$arglist().$last()), $c !== false && $c !== nil ?self.$arglist().$last().$type()['$==']("block_pass") : $c)) !== nil && (!$a.$$is_boolean || $a == true))) {
            block = self.$arglist().$pop()
          } else if ((($a = self.$iter()) !== nil && (!$a.$$is_boolean || $a == true))) {
            block = self.$iter()};
          if (block !== false && block !== nil) {
            blktmp = self.$scope().$new_temp()};
          if ((($a = ((($c = splat) !== false && $c !== nil) ? $c : blktmp)) !== nil && (!$a.$$is_boolean || $a == true))) {
            tmprecv = self.$scope().$new_temp()};
          if (block !== false && block !== nil) {
            block = self.$expr(block)};
          recv_code = self.$recv(self.$recv_sexp());
          call_recv = self.$s("js_tmp", ((($a = tmprecv) !== false && $a !== nil) ? $a : recv_code));
          if ((($a = (($c = blktmp !== false && blktmp !== nil) ? splat['$!']() : blktmp)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$arglist().$insert(1, call_recv)};
          args = self.$expr(self.$arglist());
          if (tmprecv !== false && tmprecv !== nil) {
            self.$push("(" + (tmprecv) + " = ", recv_code, ")" + (mid))
            } else {
            self.$push(recv_code, mid)
          };
          if (blktmp !== false && blktmp !== nil) {
            self.$unshift("(" + (blktmp) + " = ");
            self.$push(", " + (blktmp) + ".$$p = ", block, ", " + (blktmp) + ")");};
          if (splat !== false && splat !== nil) {
            self.$push(".apply(", (((($a = tmprecv) !== false && $a !== nil) ? $a : recv_code)), ", ", args, ")")
          } else if (blktmp !== false && blktmp !== nil) {
            self.$push(".call(", args, ")")
            } else {
            self.$push("(", args, ")")
          };
          if (blktmp !== false && blktmp !== nil) {
            return self.$scope().$queue_temp(blktmp)
            } else {
            return nil
          };
        });

        Opal.defn(self, '$recv_sexp', function() {
          var $a, self = this;

          return ((($a = self.$recvr()) !== false && $a !== nil) ? $a : self.$s("self"));
        });

        Opal.defn(self, '$attr_assignment?', function() {
          var $a, self = this;

          return ((($a = self.assignment) !== false && $a !== nil) ? $a : self.assignment = self.$meth().$to_s()['$=~']((new RegExp("" + $scope.get('REGEXP_START') + "[\\da-z]+\\=" + $scope.get('REGEXP_END')))));
        });

        Opal.defn(self, '$compile_irb_var', function() {
          var $a, $b, TMP_3, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_3 = function(tmp){var self = TMP_3.$$s || this, lvar = nil, call = nil;
if (tmp == null) tmp = nil;
          lvar = self.$variable(self.$meth());
            call = self.$s("call", self.$s("self"), self.$meth().$intern(), self.$s("arglist"));
            return self.$push("((" + (tmp) + " = Opal.irb_vars." + (lvar) + ") == null ? ", self.$expr(call), " : " + (tmp) + ")");}, TMP_3.$$s = self, TMP_3), $a).call($b);
        });

        Opal.defn(self, '$compile_assignment', function() {
          var $a, $b, TMP_4, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_4 = function(args_tmp){var self = TMP_4.$$s || this, $a, $b, TMP_5;
if (args_tmp == null) args_tmp = nil;
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_5 = function(recv_tmp){var self = TMP_5.$$s || this, args = nil, mid = nil;
if (recv_tmp == null) recv_tmp = nil;
            args = self.$expr(self.$arglist());
              mid = self.$mid_to_jsid(self.$meth().$to_s());
              return self.$push("((" + (args_tmp) + " = [", args, $rb_plus("]), ", "" + (recv_tmp) + " = "), self.$recv(self.$recv_sexp()), ", ", recv_tmp, mid, $rb_plus(".apply(" + (recv_tmp) + ", " + (args_tmp) + "), ", "" + (args_tmp) + "[" + (args_tmp) + ".length-1])"));}, TMP_5.$$s = self, TMP_5), $a).call($b)}, TMP_4.$$s = self, TMP_4), $a).call($b);
        });

        Opal.defn(self, '$using_irb?', function() {
          var $a, $b, $c, $d, self = this;

          return ($a = ($b = ($c = ($d = self.compiler['$irb?'](), $d !== false && $d !== nil ?self.$scope()['$top?']() : $d), $c !== false && $c !== nil ?self.$arglist()['$=='](self.$s("arglist")) : $c), $b !== false && $b !== nil ?self.$recvr()['$nil?']() : $b), $a !== false && $a !== nil ?self.$iter()['$nil?']() : $a);
        });

        Opal.defn(self, '$handle_special', function() {
          var $a, self = this;

          self.compile_default = true;
          if ((($a = $scope.get('SPECIALS')['$include?'](self.$meth())) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.compile_default = false;
            return self.$__send__("handle_" + (self.$meth()));
          } else if ((($a = $scope.get('RuntimeHelpers')['$compatible?'](self.$recvr(), self.$meth(), self.$arglist())) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.compile_default = false;
            return self.$push($scope.get('RuntimeHelpers').$new(self.sexp, self.level, self.compiler).$compile());
            } else {
            return nil
          };
        });

        Opal.defn(self, '$compile_default!', function() {
          var self = this;

          return self.compile_default = true;
        });

        Opal.defn(self, '$compile_default?', function() {
          var self = this;

          return self.compile_default;
        });

        ($a = ($b = $scope.get('OPERATORS')).$each, $a.$$p = (TMP_6 = function(operator, name){var self = TMP_6.$$s || this, $a, $b, TMP_7;
if (operator == null) operator = nil;if (name == null) name = nil;
        return ($a = ($b = self).$add_special, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, lhs = nil, rhs = nil;

          if ((($a = self.$compiler()['$inline_operators?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = self['$record_method?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                self.$compiler().$method_calls()['$<<'](operator.$to_sym())};
              self.$compiler().$operator_helpers()['$<<'](operator.$to_sym());
              $a = [self.$expr(self.$recvr()), self.$expr(self.$arglist()['$[]'](1))], lhs = $a[0], rhs = $a[1], $a;
              self.$push(self.$fragment("$rb_" + (name) + "("));
              self.$push(lhs);
              self.$push(self.$fragment(", "));
              self.$push(rhs);
              return self.$push(self.$fragment(")"));
              } else {
              return self['$compile_default!']()
            }}, TMP_7.$$s = self, TMP_7), $a).call($b, operator.$to_sym())}, TMP_6.$$s = self, TMP_6), $a).call($b);

        ($a = ($c = self).$add_special, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $a, str = nil;

        self['$compile_default!']();
          str = $scope.get('DependencyResolver').$new(self.$compiler(), self.$arglist()['$[]'](1)).$resolve();
          if ((($a = str['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$compiler().$requires()['$<<'](str)
          };
          return self.$push(self.$fragment(""));}, TMP_8.$$s = self, TMP_8), $a).call($c, "require");

        ($a = ($d = self).$add_special, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, arg = nil, file = nil, dir = nil;

        arg = self.$arglist()['$[]'](1);
          file = self.$compiler().$file();
          if (arg['$[]'](0)['$==']("str")) {
            dir = $scope.get('File').$dirname(file);
            self.$compiler().$requires()['$<<'](self.$Pathname(dir).$join(arg['$[]'](1)).$cleanpath().$to_s());};
          self.$push(self.$fragment("self.$require(" + (file.$inspect()) + "+ '/../' + "));
          self.$push(self.$process(self.$arglist()));
          return self.$push(self.$fragment(")"));}, TMP_9.$$s = self, TMP_9), $a).call($d, "require_relative");

        ($a = ($e = self).$add_special, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $a, str = nil;

        if ((($a = self.$scope()['$class_scope?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self['$compile_default!']();
            str = $scope.get('DependencyResolver').$new(self.$compiler(), self.$arglist()['$[]'](2)).$resolve();
            if ((($a = str['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$compiler().$requires()['$<<'](str)
            };
            return self.$push(self.$fragment(""));
            } else {
            return nil
          }}, TMP_10.$$s = self, TMP_10), $a).call($e, "autoload");

        ($a = ($f = self).$add_special, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this, arg = nil, relative_path = nil, dir = nil, full_path = nil;

        arg = self.$arglist()['$[]'](1);
          if (arg['$[]'](0)['$==']("str")) {
            relative_path = arg['$[]'](1);
            self.$compiler().$required_trees()['$<<'](relative_path);
            dir = $scope.get('File').$dirname(self.$compiler().$file());
            full_path = self.$Pathname(dir).$join(relative_path).$cleanpath().$to_s();
            arg['$[]='](1, full_path);};
          self['$compile_default!']();
          return self.$push(self.$fragment(""));}, TMP_11.$$s = self, TMP_11), $a).call($f, "require_tree");

        ($a = ($g = self).$add_special, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this;
          if (self.sexp == null) self.sexp = nil;

        return self.$push(self.$compiler().$handle_block_given_call(self.sexp))}, TMP_12.$$s = self, TMP_12), $a).call($g, "block_given?");

        ($a = ($h = self).$add_special, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $a;

        if ((($a = self.$scope()['$def?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
            } else {
            return self.$push(self.$fragment("nil"))
          }}, TMP_13.$$s = self, TMP_13), $a).call($h, "__callee__");

        ($a = ($i = self).$add_special, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this, $a;

        if ((($a = self.$scope()['$def?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push(self.$fragment(self.$scope().$mid().$to_s().$inspect()))
            } else {
            return self.$push(self.$fragment("nil"))
          }}, TMP_14.$$s = self, TMP_14), $a).call($i, "__method__");

        ($a = ($j = self).$add_special, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

        return self.$push(self.$fragment("debugger"))}, TMP_15.$$s = self, TMP_15), $a).call($j, "debugger");

        return (function($base, $super) {
          function $DependencyResolver(){};
          var self = $DependencyResolver = $klass($base, $super, 'DependencyResolver', $DependencyResolver);

          var def = self.$$proto, $scope = self.$$scope;

          def.sexp = def.compiler = nil;
          Opal.defn(self, '$initialize', function(compiler, sexp) {
            var self = this;

            self.compiler = compiler;
            return self.sexp = sexp;
          });

          Opal.defn(self, '$resolve', function() {
            var self = this;

            return self.$handle_part(self.sexp);
          });

          Opal.defn(self, '$handle_part', function(sexp) {
            var $a, $b, TMP_16, self = this, type = nil, _ = nil, recv = nil, meth = nil, args = nil, parts = nil, msg = nil, $case = nil;

            type = sexp.$type();
            if (type['$==']("str")) {
              return sexp['$[]'](1)
            } else if (type['$==']("call")) {
              $b = sexp, $a = Opal.to_ary($b), _ = ($a[0] == null ? nil : $a[0]), recv = ($a[1] == null ? nil : $a[1]), meth = ($a[2] == null ? nil : $a[2]), args = ($a[3] == null ? nil : $a[3]), $b;
              parts = ($a = ($b = args['$[]']($range(1, -1, false))).$map, $a.$$p = (TMP_16 = function(s){var self = TMP_16.$$s || this;
if (s == null) s = nil;
              return self.$handle_part(s)}, TMP_16.$$s = self, TMP_16), $a).call($b);
              if (recv['$=='](["const", "File"])) {
                if (meth['$==']("expand_path")) {
                  return ($a = self).$expand_path.apply($a, Opal.to_a(parts))
                } else if (meth['$==']("join")) {
                  return self.$expand_path(parts.$join("/"))
                } else if (meth['$==']("dirname")) {
                  return self.$expand_path(parts['$[]'](0).$split("/")['$[]']($range(0, -1, true)).$join("/"))}};};
            msg = "Cannot handle dynamic require";
            return (function() {$case = self.compiler.$dynamic_require_severity();if ("error"['$===']($case)) {return self.compiler.$error(msg, self.sexp.$line())}else if ("warning"['$===']($case)) {return self.compiler.$warning(msg, self.sexp.$line())}else { return nil }})();
          });

          return (Opal.defn(self, '$expand_path', function(path, base) {
            var $a, $b, TMP_17, self = this;

            if (base == null) {
              base = ""
            }
            return ($a = ($b = (((("") + (base)) + "/") + (path)).$split("/")).$inject, $a.$$p = (TMP_17 = function(p, part){var self = TMP_17.$$s || this;
if (p == null) p = nil;if (part == null) part = nil;
            if (part['$==']("")) {
              } else if (part['$==']("..")) {
                p.$pop()
                } else {
                p['$<<'](part)
              };
              return p;}, TMP_17.$$s = self, TMP_17), $a).call($b, []).$join("/");
          }), nil) && 'expand_path';
        })($scope.base, null);
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/call_special"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$!~', '$to_s', '$meth', '$with_temp', '$expr', '$arglist', '$mid_to_jsid', '$push', '$+', '$recv', '$recv_sexp', '$[]', '$==', '$any?', '$first', '$===', '$last', '$type', '$pop', '$iter', '$new_temp', '$scope', '$s', '$unshift', '$queue_temp', '$lhs', '$rhs', '$process', '$recvr', '$args', '$op', '$compile_or', '$compile_and', '$compile_operator', '$to_sym', '$first_arg', '$mid']);
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/call");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $AttrAssignNode(){};
        var self = $AttrAssignNode = $klass($base, $super, 'AttrAssignNode', $AttrAssignNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$handle("attrasgn");

        self.$children("recvr", "meth", "arglist");

        return (Opal.defn(self, '$default_compile', TMP_1 = function() {
          var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

          TMP_1.$$p = null;
          $zuper = [];
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if ((($a = self.$meth().$to_s()['$!~']((new RegExp("" + $scope.get('REGEXP_START') + "\\w+=" + $scope.get('REGEXP_END'))))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return Opal.find_super_dispatcher(self, 'default_compile', TMP_1, $iter).apply(self, $zuper)};
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_2 = function(args_tmp){var self = TMP_2.$$s || this, $a, $b, TMP_3;
if (args_tmp == null) args_tmp = nil;
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_3 = function(recv_tmp){var self = TMP_3.$$s || this, args = nil, mid = nil;
if (recv_tmp == null) recv_tmp = nil;
            args = self.$expr(self.$arglist());
              mid = self.$mid_to_jsid(self.$meth().$to_s());
              return self.$push("((" + (args_tmp) + " = [", args, $rb_plus("]), ", "" + (recv_tmp) + " = "), self.$recv(self.$recv_sexp()), ", ", recv_tmp, mid, $rb_plus(".apply(" + (recv_tmp) + ", " + (args_tmp) + "), ", "" + (args_tmp) + "[" + (args_tmp) + ".length-1])"));}, TMP_3.$$s = self, TMP_3), $a).call($b)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        }), nil) && 'default_compile';
      })($scope.base, $scope.get('CallNode'));

      (function($base, $super) {
        function $JsAttrAssignNode(){};
        var self = $JsAttrAssignNode = $klass($base, $super, 'JsAttrAssignNode', $JsAttrAssignNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("jsattrasgn");

        Opal.defn(self, '$record_method?', function() {
          var self = this;

          return false;
        });

        return (Opal.defn(self, '$default_compile', function() {
          var self = this;

          return self.$push(self.$recv(self.$recv_sexp()), "[", self.$expr(self.$arglist()['$[]'](1)), "]", "=", self.$expr(self.$arglist()['$[]'](2)));
        }), nil) && 'default_compile';
      })($scope.base, $scope.get('CallNode'));

      (function($base, $super) {
        function $JsCallNode(){};
        var self = $JsCallNode = $klass($base, $super, 'JsCallNode', $JsCallNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("jscall");

        Opal.defn(self, '$record_method?', function() {
          var self = this;

          return false;
        });

        return (Opal.defn(self, '$default_compile', function() {
          var $a, $b, TMP_4, $c, self = this, mid = nil, splat = nil, block = nil, blktmp = nil, tmprecv = nil, recv_code = nil, call_recv = nil, args = nil;

          if (self.$meth()['$==']("[]")) {
            return self.$push(self.$recv(self.$recv_sexp()), "[", self.$expr(self.$arglist()), "]")
            } else {
            mid = "." + (self.$meth());
            splat = ($a = ($b = self.$arglist()['$[]']($range(1, -1, false)))['$any?'], $a.$$p = (TMP_4 = function(a){var self = TMP_4.$$s || this;
if (a == null) a = nil;
            return a.$first()['$==']("splat")}, TMP_4.$$s = self, TMP_4), $a).call($b);
            if ((($a = ($c = $scope.get('Sexp')['$==='](self.$arglist().$last()), $c !== false && $c !== nil ?self.$arglist().$last().$type()['$==']("block_pass") : $c)) !== nil && (!$a.$$is_boolean || $a == true))) {
              block = self.$arglist().$pop()
            } else if ((($a = self.$iter()) !== nil && (!$a.$$is_boolean || $a == true))) {
              block = self.$iter()};
            if (block !== false && block !== nil) {
              blktmp = self.$scope().$new_temp()};
            if (splat !== false && splat !== nil) {
              tmprecv = self.$scope().$new_temp()};
            if (block !== false && block !== nil) {
              block = self.$expr(block)};
            recv_code = self.$recv(self.$recv_sexp());
            call_recv = self.$s("js_tmp", ((($a = blktmp) !== false && $a !== nil) ? $a : recv_code));
            if (blktmp !== false && blktmp !== nil) {
              self.$arglist().$push(call_recv)};
            args = self.$expr(self.$arglist());
            if (tmprecv !== false && tmprecv !== nil) {
              self.$push("(" + (tmprecv) + " = ", recv_code, ")" + (mid))
              } else {
              self.$push(recv_code, mid)
            };
            if (blktmp !== false && blktmp !== nil) {
              self.$unshift("(" + (blktmp) + " = ", block, ", ");
              self.$push(")");};
            if (splat !== false && splat !== nil) {
              self.$push(".apply(", tmprecv, ", ", args, ")")
              } else {
              self.$push("(", args, ")")
            };
            if (blktmp !== false && blktmp !== nil) {
              return self.$scope().$queue_temp(blktmp)
              } else {
              return nil
            };
          };
        }), nil) && 'default_compile';
      })($scope.base, $scope.get('CallNode'));

      (function($base, $super) {
        function $Match3Node(){};
        var self = $Match3Node = $klass($base, $super, 'Match3Node', $Match3Node);

        var def = self.$$proto, $scope = self.$$scope;

        def.level = nil;
        self.$handle("match3");

        self.$children("lhs", "rhs");

        return (Opal.defn(self, '$compile', function() {
          var self = this, sexp = nil;

          sexp = self.$s("call", self.$lhs(), "=~", self.$s("arglist", self.$rhs()));
          return self.$push(self.$process(sexp, self.level));
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $OpAsgnOrNode(){};
        var self = $OpAsgnOrNode = $klass($base, $super, 'OpAsgnOrNode', $OpAsgnOrNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("op_asgn_or");

        self.$children("recvr", "rhs");

        return (Opal.defn(self, '$compile', function() {
          var self = this, sexp = nil;

          sexp = self.$s("or", self.$recvr(), self.$rhs());
          return self.$push(self.$expr(sexp));
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $OpAsgnAndNode(){};
        var self = $OpAsgnAndNode = $klass($base, $super, 'OpAsgnAndNode', $OpAsgnAndNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("op_asgn_and");

        self.$children("recvr", "rhs");

        return (Opal.defn(self, '$compile', function() {
          var self = this, sexp = nil;

          sexp = self.$s("and", self.$recvr(), self.$rhs());
          return self.$push(self.$expr(sexp));
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $OpAsgn1Node(){};
        var self = $OpAsgn1Node = $klass($base, $super, 'OpAsgn1Node', $OpAsgn1Node);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("op_asgn1");

        self.$children("lhs", "args", "op", "rhs");

        Opal.defn(self, '$first_arg', function() {
          var self = this;

          return self.$args()['$[]'](1);
        });

        Opal.defn(self, '$compile', function() {
          var self = this, $case = nil;

          return (function() {$case = self.$op().$to_s();if ("||"['$===']($case)) {return self.$compile_or()}else if ("&&"['$===']($case)) {return self.$compile_and()}else {return self.$compile_operator()}})();
        });

        Opal.defn(self, '$compile_operator', function() {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_5 = function(a){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (a == null) a = nil;
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_6 = function(r){var self = TMP_6.$$s || this, cur = nil, rhs = nil, call = nil;
if (r == null) r = nil;
            cur = self.$s("call", self.$s("js_tmp", r), "[]", self.$s("arglist", self.$s("js_tmp", a)));
              rhs = self.$s("call", cur, self.$op().$to_sym(), self.$s("arglist", self.$rhs()));
              call = self.$s("call", self.$s("js_tmp", r), "[]=", self.$s("arglist", self.$s("js_tmp", a), rhs));
              self.$push("(" + (a) + " = ", self.$expr(self.$first_arg()), ", " + (r) + " = ", self.$expr(self.$lhs()));
              return self.$push(", ", self.$expr(call), ")");}, TMP_6.$$s = self, TMP_6), $a).call($b)}, TMP_5.$$s = self, TMP_5), $a).call($b);
        });

        Opal.defn(self, '$compile_or', function() {
          var $a, $b, TMP_7, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_7 = function(a){var self = TMP_7.$$s || this, $a, $b, TMP_8;
if (a == null) a = nil;
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_8 = function(r){var self = TMP_8.$$s || this, aref = nil, aset = nil, orop = nil;
if (r == null) r = nil;
            aref = self.$s("call", self.$s("js_tmp", r), "[]", self.$s("arglist", self.$s("js_tmp", a)));
              aset = self.$s("call", self.$s("js_tmp", r), "[]=", self.$s("arglist", self.$s("js_tmp", a), self.$rhs()));
              orop = self.$s("or", aref, aset);
              self.$push("(" + (a) + " = ", self.$expr(self.$first_arg()), ", " + (r) + " = ", self.$expr(self.$lhs()));
              return self.$push(", ", self.$expr(orop), ")");}, TMP_8.$$s = self, TMP_8), $a).call($b)}, TMP_7.$$s = self, TMP_7), $a).call($b);
        });

        return (Opal.defn(self, '$compile_and', function() {
          var $a, $b, TMP_9, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_9 = function(a){var self = TMP_9.$$s || this, $a, $b, TMP_10;
if (a == null) a = nil;
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_10 = function(r){var self = TMP_10.$$s || this, aref = nil, aset = nil, andop = nil;
if (r == null) r = nil;
            aref = self.$s("call", self.$s("js_tmp", r), "[]", self.$s("arglist", self.$s("js_tmp", a)));
              aset = self.$s("call", self.$s("js_tmp", r), "[]=", self.$s("arglist", self.$s("js_tmp", a), self.$rhs()));
              andop = self.$s("and", aref, aset);
              self.$push("(" + (a) + " = ", self.$expr(self.$first_arg()), ", " + (r) + " = ", self.$expr(self.$lhs()));
              return self.$push(", ", self.$expr(andop), ")");}, TMP_10.$$s = self, TMP_10), $a).call($b)}, TMP_9.$$s = self, TMP_9), $a).call($b);
        }), nil) && 'compile_and';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $OpAsgn2Node(){};
        var self = $OpAsgn2Node = $klass($base, $super, 'OpAsgn2Node', $OpAsgn2Node);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("op_asgn2");

        self.$children("lhs", "mid", "op", "rhs");

        Opal.defn(self, '$meth', function() {
          var self = this;

          return self.$mid().$to_s()['$[]']($range(0, -2, false));
        });

        Opal.defn(self, '$compile', function() {
          var self = this, $case = nil;

          return (function() {$case = self.$op().$to_s();if ("||"['$===']($case)) {return self.$compile_or()}else if ("&&"['$===']($case)) {return self.$compile_and()}else {return self.$compile_operator()}})();
        });

        Opal.defn(self, '$compile_or', function() {
          var $a, $b, TMP_11, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_11 = function(tmp){var self = TMP_11.$$s || this, getr = nil, asgn = nil, orop = nil;
if (tmp == null) tmp = nil;
          getr = self.$s("call", self.$s("js_tmp", tmp), self.$meth(), self.$s("arglist"));
            asgn = self.$s("call", self.$s("js_tmp", tmp), self.$mid(), self.$s("arglist", self.$rhs()));
            orop = self.$s("or", getr, asgn);
            return self.$push("(" + (tmp) + " = ", self.$expr(self.$lhs()), ", ", self.$expr(orop), ")");}, TMP_11.$$s = self, TMP_11), $a).call($b);
        });

        Opal.defn(self, '$compile_and', function() {
          var $a, $b, TMP_12, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_12 = function(tmp){var self = TMP_12.$$s || this, getr = nil, asgn = nil, andop = nil;
if (tmp == null) tmp = nil;
          getr = self.$s("call", self.$s("js_tmp", tmp), self.$meth(), self.$s("arglist"));
            asgn = self.$s("call", self.$s("js_tmp", tmp), self.$mid(), self.$s("arglist", self.$rhs()));
            andop = self.$s("and", getr, asgn);
            return self.$push("(" + (tmp) + " = ", self.$expr(self.$lhs()), ", ", self.$expr(andop), ")");}, TMP_12.$$s = self, TMP_12), $a).call($b);
        });

        return (Opal.defn(self, '$compile_operator', function() {
          var $a, $b, TMP_13, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_13 = function(tmp){var self = TMP_13.$$s || this, getr = nil, oper = nil, asgn = nil;
if (tmp == null) tmp = nil;
          getr = self.$s("call", self.$s("js_tmp", tmp), self.$meth(), self.$s("arglist"));
            oper = self.$s("call", getr, self.$op(), self.$s("arglist", self.$rhs()));
            asgn = self.$s("call", self.$s("js_tmp", tmp), self.$mid(), self.$s("arglist", oper));
            return self.$push("(" + (tmp) + " = ", self.$expr(self.$lhs()), ", ", self.$expr(asgn), ")");}, TMP_13.$$s = self, TMP_13), $a).call($b);
        }), nil) && 'compile_operator';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/scope"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$attr_accessor', '$attr_reader', '$indent', '$scope', '$compiler', '$scope=', '$call', '$==', '$!', '$class?', '$dup', '$push', '$map', '$ivars', '$gvars', '$parser_indent', '$empty?', '$join', '$+', '$proto', '$%', '$fragment', '$def_in_class?', '$add_proto_ivar', '$include?', '$<<', '$has_local?', '$pop', '$next_temp', '$succ', '$uses_block!', '$identify!', '$unique_temp', '$add_scope_temp', '$parent', '$def?', '$type', '$mid']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ScopeNode(){};
        var self = $ScopeNode = $klass($base, $super, 'ScopeNode', $ScopeNode);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        def.type = def.defs = def.parent = def.temps = def.locals = def.compiler = def.proto_ivars = def.ivars = def.gvars = def.args = def.queue = def.unique = def.while_stack = def.identity = def.uses_block = nil;
        self.$attr_accessor("parent");

        self.$attr_accessor("name");

        self.$attr_accessor("block_name");

        self.$attr_reader("scope_name");

        self.$attr_reader("locals");

        self.$attr_reader("ivars");

        self.$attr_reader("gvars");

        self.$attr_accessor("mid");

        self.$attr_accessor("defs");

        self.$attr_reader("methods");

        self.$attr_accessor("uses_super");

        self.$attr_accessor("uses_zuper");

        self.$attr_accessor("catch_return");

        Opal.defn(self, '$initialize', TMP_1 = function() {
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

          TMP_1.$$p = null;
          $zuper = [];
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
          self.locals = [];
          self.temps = [];
          self.args = [];
          self.ivars = [];
          self.gvars = [];
          self.parent = nil;
          self.queue = [];
          self.unique = "a";
          self.while_stack = [];
          self.identity = nil;
          self.defs = nil;
          self.methods = [];
          self.uses_block = false;
          return self.proto_ivars = [];
        });

        Opal.defn(self, '$in_scope', TMP_2 = function() {
          var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

          TMP_2.$$p = null;
          return ($a = ($b = self).$indent, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b;
            if (self.parent == null) self.parent = nil;

          self.parent = self.$compiler().$scope();
            (($a = [self]), $b = self.$compiler(), $b['$scope='].apply($b, $a), $a[$a.length-1]);
            block.$call(self);
            return (($a = [self.parent]), $b = self.$compiler(), $b['$scope='].apply($b, $a), $a[$a.length-1]);}, TMP_3.$$s = self, TMP_3), $a).call($b);
        });

        Opal.defn(self, '$class_scope?', function() {
          var $a, self = this;

          return ((($a = self.type['$==']("class")) !== false && $a !== nil) ? $a : self.type['$==']("module"));
        });

        Opal.defn(self, '$class?', function() {
          var self = this;

          return self.type['$==']("class");
        });

        Opal.defn(self, '$module?', function() {
          var self = this;

          return self.type['$==']("module");
        });

        Opal.defn(self, '$sclass?', function() {
          var self = this;

          return self.type['$==']("sclass");
        });

        Opal.defn(self, '$top?', function() {
          var self = this;

          return self.type['$==']("top");
        });

        Opal.defn(self, '$iter?', function() {
          var self = this;

          return self.type['$==']("iter");
        });

        Opal.defn(self, '$def?', function() {
          var self = this;

          return self.type['$==']("def");
        });

        Opal.defn(self, '$def_in_class?', function() {
          var $a, $b, $c, self = this;

          return ($a = ($b = ($c = self.defs['$!'](), $c !== false && $c !== nil ?self.type['$==']("def") : $c), $b !== false && $b !== nil ?self.parent : $b), $a !== false && $a !== nil ?self.parent['$class?']() : $a);
        });

        Opal.defn(self, '$proto', function() {
          var self = this;

          return "def";
        });

        Opal.defn(self, '$to_vars', function() {
          var $a, $b, $c, TMP_4, $d, TMP_5, $e, TMP_6, $f, TMP_7, self = this, vars = nil, iv = nil, gv = nil, indent = nil, str = nil, pvars = nil, result = nil;

          vars = self.temps.$dup();
          ($a = vars).$push.apply($a, Opal.to_a(($b = ($c = self.locals).$map, $b.$$p = (TMP_4 = function(l){var self = TMP_4.$$s || this;
if (l == null) l = nil;
          return "" + (l) + " = nil"}, TMP_4.$$s = self, TMP_4), $b).call($c)));
          iv = ($b = ($d = self.$ivars()).$map, $b.$$p = (TMP_5 = function(ivar){var self = TMP_5.$$s || this;
if (ivar == null) ivar = nil;
          return "if (self" + (ivar) + " == null) self" + (ivar) + " = nil;\n"}, TMP_5.$$s = self, TMP_5), $b).call($d);
          gv = ($b = ($e = self.$gvars()).$map, $b.$$p = (TMP_6 = function(gvar){var self = TMP_6.$$s || this;
if (gvar == null) gvar = nil;
          return "if ($gvars" + (gvar) + " == null) $gvars" + (gvar) + " = nil;\n"}, TMP_6.$$s = self, TMP_6), $b).call($e);
          indent = self.compiler.$parser_indent();
          str = (function() {if ((($b = vars['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            return ""
            } else {
            return "var " + (vars.$join(", ")) + ";\n"
          }; return nil; })();
          if ((($b = self.$ivars()['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            } else {
            str = $rb_plus(str, "" + (indent) + (iv.$join(indent)))
          };
          if ((($b = self.$gvars()['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            } else {
            str = $rb_plus(str, "" + (indent) + (gv.$join(indent)))
          };
          if ((($b = ($f = self['$class?'](), $f !== false && $f !== nil ?self.proto_ivars['$empty?']()['$!']() : $f)) !== nil && (!$b.$$is_boolean || $b == true))) {
            pvars = ($b = ($f = self.proto_ivars).$map, $b.$$p = (TMP_7 = function(i){var self = TMP_7.$$s || this;
if (i == null) i = nil;
            return "" + (self.$proto()) + (i)}, TMP_7.$$s = self, TMP_7), $b).call($f).$join(" = ");
            result = "%s\n%s%s = nil;"['$%']([str, indent, pvars]);
            } else {
            result = str
          };
          return self.$fragment(result);
        });

        Opal.defn(self, '$add_scope_ivar', function(ivar) {
          var $a, self = this;

          if ((($a = self['$def_in_class?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.parent.$add_proto_ivar(ivar)
          } else if ((($a = self.ivars['$include?'](ivar)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.ivars['$<<'](ivar)
          };
        });

        Opal.defn(self, '$add_scope_gvar', function(gvar) {
          var $a, self = this;

          if ((($a = self.gvars['$include?'](gvar)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.gvars['$<<'](gvar)
          };
        });

        Opal.defn(self, '$add_proto_ivar', function(ivar) {
          var $a, self = this;

          if ((($a = self.proto_ivars['$include?'](ivar)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.proto_ivars['$<<'](ivar)
          };
        });

        Opal.defn(self, '$add_arg', function(arg) {
          var $a, self = this;

          if ((($a = self.args['$include?'](arg)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.args['$<<'](arg)
          };
          return arg;
        });

        Opal.defn(self, '$add_scope_local', function(local) {
          var $a, self = this;

          if ((($a = self['$has_local?'](local)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          return self.locals['$<<'](local);
        });

        Opal.defn(self, '$has_local?', function(local) {
          var $a, $b, self = this;

          if ((($a = ((($b = self.locals['$include?'](local)) !== false && $b !== nil) ? $b : self.args['$include?'](local))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return true};
          if ((($a = ($b = self.parent, $b !== false && $b !== nil ?self.type['$==']("iter") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.parent['$has_local?'](local)};
          return false;
        });

        Opal.defn(self, '$add_scope_temp', function() {
          var $a, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var tmps = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            tmps[$splat_index] = arguments[$splat_index + 0];
          }
          return ($a = self.temps).$push.apply($a, Opal.to_a(tmps));
        });

        Opal.defn(self, '$has_temp?', function(tmp) {
          var self = this;

          return self.temps['$include?'](tmp);
        });

        Opal.defn(self, '$new_temp', function() {
          var $a, self = this, tmp = nil;

          if ((($a = self.queue['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return self.queue.$pop()
          };
          tmp = self.$next_temp();
          self.temps['$<<'](tmp);
          return tmp;
        });

        Opal.defn(self, '$next_temp', function() {
          var $a, $b, self = this, tmp = nil;

          while ((($b = true) !== nil && (!$b.$$is_boolean || $b == true))) {
          tmp = "$" + (self.unique);
          self.unique = self.unique.$succ();
          if ((($b = self['$has_local?'](tmp)) !== nil && (!$b.$$is_boolean || $b == true))) {
            } else {
            break;
          };};
          return tmp;
        });

        Opal.defn(self, '$queue_temp', function(name) {
          var self = this;

          return self.queue['$<<'](name);
        });

        Opal.defn(self, '$push_while', function() {
          var self = this, info = nil;

          info = $hash2([], {});
          self.while_stack.$push(info);
          return info;
        });

        Opal.defn(self, '$pop_while', function() {
          var self = this;

          return self.while_stack.$pop();
        });

        Opal.defn(self, '$in_while?', function() {
          var self = this;

          return self.while_stack['$empty?']()['$!']();
        });

        Opal.defn(self, '$uses_block!', function() {
          var $a, $b, self = this;

          if ((($a = (($b = self.type['$==']("iter")) ? self.parent : self.type['$==']("iter"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.parent['$uses_block!']()
            } else {
            self.uses_block = true;
            return self['$identify!']();
          };
        });

        Opal.defn(self, '$identify!', function() {
          var $a, self = this;

          if ((($a = self.identity) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.identity};
          self.identity = self.compiler.$unique_temp();
          if ((($a = self.parent) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.parent.$add_scope_temp(self.identity)};
          return self.identity;
        });

        Opal.defn(self, '$identity', function() {
          var self = this;

          return self.identity;
        });

        Opal.defn(self, '$find_parent_def', function() {
          var $a, $b, self = this, scope = nil;

          scope = self;
          while ((($b = scope = scope.$parent()) !== nil && (!$b.$$is_boolean || $b == true))) {
          if ((($b = scope['$def?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            return scope}};
          return nil;
        });

        Opal.defn(self, '$get_super_chain', function() {
          var $a, $b, self = this, chain = nil, scope = nil, defn = nil, mid = nil;

          $a = [[], self, "null", "null"], chain = $a[0], scope = $a[1], defn = $a[2], mid = $a[3], $a;
          while (scope !== false && scope !== nil) {
          if (scope.$type()['$==']("iter")) {
            chain['$<<'](scope['$identify!']());
            if ((($b = scope.$parent()) !== nil && (!$b.$$is_boolean || $b == true))) {
              scope = scope.$parent()};
          } else if (scope.$type()['$==']("def")) {
            defn = scope['$identify!']();
            mid = "'" + (scope.$mid()) + "'";
            break;;
            } else {
            break;
          }};
          return [chain, defn, mid];
        });

        return (Opal.defn(self, '$uses_block?', function() {
          var self = this;

          return self.uses_block;
        }), nil) && 'uses_block?';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/module"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$name_and_base', '$helper', '$push', '$line', '$in_scope', '$name=', '$scope', '$add_temp', '$proto', '$stmt', '$body', '$s', '$empty_line', '$to_vars', '$==', '$type', '$cid', '$to_s', '$[]', '$expr', '$raise']);
  self.$require("opal/nodes/scope");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ModuleNode(){};
        var self = $ModuleNode = $klass($base, $super, 'ModuleNode', $ModuleNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("module");

        self.$children("cid", "body");

        Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, self = this, name = nil, base = nil;

          $b = self.$name_and_base(), $a = Opal.to_ary($b), name = ($a[0] == null ? nil : $a[0]), base = ($a[1] == null ? nil : $a[1]), $b;
          self.$helper("module");
          self.$push("(function($base) {");
          self.$line("  var $" + (name) + ", self = $" + (name) + " = $module($base, '" + (name) + "');");
          ($a = ($b = self).$in_scope, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, body_code = nil;

          (($a = [name]), $b = self.$scope(), $b['$name='].apply($b, $a), $a[$a.length-1]);
            self.$add_temp("" + (self.$scope().$proto()) + " = self.$$proto");
            self.$add_temp("$scope = self.$$scope");
            body_code = self.$stmt(((($a = self.$body()) !== false && $a !== nil) ? $a : self.$s("nil")));
            self.$empty_line();
            self.$line(self.$scope().$to_vars());
            return self.$line(body_code);}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return self.$line("})(", base, ")");
        });

        return (Opal.defn(self, '$name_and_base', function() {
          var self = this;

          if (self.$cid().$type()['$==']("const")) {
            return [self.$cid()['$[]'](1).$to_s(), "$scope.base"]
          } else if (self.$cid().$type()['$==']("colon2")) {
            return [self.$cid()['$[]'](2).$to_s(), self.$expr(self.$cid()['$[]'](1))]
          } else if (self.$cid().$type()['$==']("colon3")) {
            return [self.$cid()['$[]'](1).$to_s(), "Opal.Object"]
            } else {
            return self.$raise("Bad receiver in module")
          };
        }), nil) && 'name_and_base';
      })($scope.base, $scope.get('ScopeNode'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/class"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$name_and_base', '$helper', '$push', '$line', '$in_scope', '$name=', '$scope', '$add_temp', '$proto', '$body_code', '$empty_line', '$to_vars', '$super_code', '$sup', '$expr', '$stmt', '$returns', '$compiler', '$body', '$s']);
  self.$require("opal/nodes/module");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ClassNode(){};
        var self = $ClassNode = $klass($base, $super, 'ClassNode', $ClassNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("class");

        self.$children("cid", "sup", "body");

        Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, self = this, name = nil, base = nil;

          $b = self.$name_and_base(), $a = Opal.to_ary($b), name = ($a[0] == null ? nil : $a[0]), base = ($a[1] == null ? nil : $a[1]), $b;
          self.$helper("klass");
          self.$push("(function($base, $super) {");
          self.$line("  function $" + (name) + "(){};");
          self.$line("  var self = $" + (name) + " = $klass($base, $super, '" + (name) + "', $" + (name) + ");");
          ($a = ($b = self).$in_scope, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, body_code = nil;

          (($a = [name]), $b = self.$scope(), $b['$name='].apply($b, $a), $a[$a.length-1]);
            self.$add_temp("" + (self.$scope().$proto()) + " = self.$$proto");
            self.$add_temp("$scope = self.$$scope");
            body_code = self.$body_code();
            self.$empty_line();
            self.$line(self.$scope().$to_vars());
            return self.$line(body_code);}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return self.$line("})(", base, ", ", self.$super_code(), ")");
        });

        Opal.defn(self, '$super_code', function() {
          var $a, self = this;

          if ((($a = self.$sup()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$expr(self.$sup())
            } else {
            return "null"
          };
        });

        return (Opal.defn(self, '$body_code', function() {
          var $a, self = this;

          return self.$stmt(self.$compiler().$returns(((($a = self.$body()) !== false && $a !== nil) ? $a : self.$s("nil"))));
        }), nil) && 'body_code';
      })($scope.base, $scope.get('ModuleNode'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/singleton_class"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$in_scope', '$add_temp', '$stmt', '$returns', '$compiler', '$body', '$line', '$to_vars', '$scope', '$recv', '$object']);
  self.$require("opal/nodes/scope");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $SingletonClassNode(){};
        var self = $SingletonClassNode = $klass($base, $super, 'SingletonClassNode', $SingletonClassNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("sclass");

        self.$children("object", "body");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, self = this;

          self.$push("(function(self) {");
          ($a = ($b = self).$in_scope, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, body_stmt = nil;

          self.$add_temp("$scope = self.$$scope");
            self.$add_temp("def = self.$$proto");
            body_stmt = self.$stmt(self.$compiler().$returns(self.$body()));
            self.$line(self.$scope().$to_vars());
            return self.$line(body_stmt);}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return self.$line("})(Opal.get_singleton_class(", self.$recv(self.$object()), "))");
        }), nil) && 'compile';
      })($scope.base, $scope.get('ScopeNode'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/iter"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$handle', '$children', '$extract_opt_args', '$extract_block_arg', '$is_a?', '$last', '$args', '$==', '$type', '$[]', '$pop', '$length', '$args_to_params', '$<<', '$in_scope', '$identify!', '$scope', '$add_temp', '$compile_args', '$add_arg', '$push', '$-', '$block_name=', '$line', '$stmt', '$body', '$to_vars', '$unshift', '$join', '$each_with_index', '$variable', '$find', '$to_sym', '$expr', '$has_key?', '$include?', '$[]=', '$map', '$raise', '$shift', '$===', '$args_sexp', '$nil?', '$s', '$returns', '$compiler', '$body_sexp', '$each', '$next_temp']);
  self.$require("opal/nodes/scope");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $IterNode(){};
        var self = $IterNode = $klass($base, $super, 'IterNode', $IterNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("iter");

        self.$children("args_sexp", "body_sexp");

        Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, self = this, opt_args = nil, block_arg = nil, splat = nil, len = nil, params = nil, to_vars = nil, identity = nil, body_code = nil;

          opt_args = self.$extract_opt_args();
          block_arg = self.$extract_block_arg();
          if ((($a = ($b = self.$args().$last()['$is_a?']($scope.get('Sexp')), $b !== false && $b !== nil ?self.$args().$last().$type()['$==']("splat") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            splat = self.$args().$last()['$[]'](1)['$[]'](1);
            self.$args().$pop();
            len = self.$args().$length();};
          params = self.$args_to_params(self.$args()['$[]']($range(1, -1, false)));
          if (splat !== false && splat !== nil) {
            params['$<<'](splat)};
          to_vars = identity = body_code = nil;
          ($a = ($b = self).$in_scope, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, scope_name = nil;

          identity = self.$scope()['$identify!']();
            self.$add_temp("self = " + (identity) + ".$$s || this");
            self.$compile_args(self.$args()['$[]']($range(1, -1, false)), opt_args, params);
            if (splat !== false && splat !== nil) {
              self.$scope().$add_arg(splat);
              self.$push("" + (splat) + " = $slice.call(arguments, " + ($rb_minus(len, 1)) + ");");};
            if (block_arg !== false && block_arg !== nil) {
              (($a = [block_arg]), $b = self.$scope(), $b['$block_name='].apply($b, $a), $a[$a.length-1]);
              self.$scope().$add_temp(block_arg);
              scope_name = self.$scope()['$identify!']();
              self.$line("" + (block_arg) + " = " + (scope_name) + ".$$p || nil, " + (scope_name) + ".$$p = null;");};
            body_code = self.$stmt(self.$body());
            return to_vars = self.$scope().$to_vars();}, TMP_1.$$s = self, TMP_1), $a).call($b);
          self.$line(body_code);
          self.$unshift(to_vars);
          self.$unshift("(" + (identity) + " = function(" + (params.$join(", ")) + "){");
          return self.$push("}, " + (identity) + ".$$s = self, " + (identity) + ")");
        });

        Opal.defn(self, '$compile_args', function(args, opt_args, params) {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = args).$each_with_index, $a.$$p = (TMP_2 = function(arg, idx){var self = TMP_2.$$s || this, $a, $b, $c, $d, TMP_3, TMP_4, TMP_5, current_opt = nil, vars = nil;
if (arg == null) arg = nil;if (idx == null) idx = nil;
          if (arg.$type()['$==']("lasgn")) {
              arg = self.$variable(arg['$[]'](1));
              if ((($a = (($b = opt_args !== false && opt_args !== nil) ? current_opt = ($c = ($d = opt_args).$find, $c.$$p = (TMP_3 = function(s){var self = TMP_3.$$s || this;
if (s == null) s = nil;
              return s['$[]'](1)['$=='](arg.$to_sym())}, TMP_3.$$s = self, TMP_3), $c).call($d) : opt_args)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self.$push("if (" + (arg) + " == null) " + (arg) + " = ", self.$expr(current_opt['$[]'](2)), ";")
                } else {
                return self.$push("if (" + (arg) + " == null) " + (arg) + " = nil;")
              };
            } else if (arg.$type()['$==']("array")) {
              vars = $hash2([], {});
              ($a = ($b = arg['$[]']($range(1, -1, false))).$each_with_index, $a.$$p = (TMP_4 = function(_arg, _idx){var self = TMP_4.$$s || this, $a, $b;
if (_arg == null) _arg = nil;if (_idx == null) _idx = nil;
              _arg = self.$variable(_arg['$[]'](1));
                if ((($a = ((($b = vars['$has_key?'](_arg)) !== false && $b !== nil) ? $b : params['$include?'](_arg))) !== nil && (!$a.$$is_boolean || $a == true))) {
                  return nil
                  } else {
                  return vars['$[]='](_arg, "" + (params['$[]'](idx)) + "[" + (_idx) + "]")
                };}, TMP_4.$$s = self, TMP_4), $a).call($b);
              return self.$push("var " + (($a = ($c = vars).$map, $a.$$p = (TMP_5 = function(k, v){var self = TMP_5.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
              return "" + (k) + " = " + (v)}, TMP_5.$$s = self, TMP_5), $a).call($c).$join(", ")) + ";");
              } else {
              return self.$raise("Bad block arg type")
            }}, TMP_2.$$s = self, TMP_2), $a).call($b);
        });

        Opal.defn(self, '$extract_opt_args', function() {
          var $a, $b, self = this, opt_args = nil;

          if ((($a = ($b = self.$args().$last()['$is_a?']($scope.get('Sexp')), $b !== false && $b !== nil ?self.$args().$last().$type()['$==']("block") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            opt_args = self.$args().$pop();
            opt_args.$shift();
            return opt_args;
            } else {
            return nil
          };
        });

        Opal.defn(self, '$extract_block_arg', function() {
          var $a, $b, self = this, block_arg = nil;

          if ((($a = ($b = self.$args().$last()['$is_a?']($scope.get('Sexp')), $b !== false && $b !== nil ?self.$args().$last().$type()['$==']("block_pass") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            block_arg = self.$args().$pop();
            return block_arg = block_arg['$[]'](1)['$[]'](1).$to_sym();
            } else {
            return nil
          };
        });

        Opal.defn(self, '$args', function() {
          var $a, $b, self = this;

          if ((($a = ((($b = $scope.get('Fixnum')['$==='](self.$args_sexp())) !== false && $b !== nil) ? $b : self.$args_sexp()['$nil?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$s("array")
          } else if (self.$args_sexp().$type()['$==']("lasgn")) {
            return self.$s("array", self.$args_sexp())
            } else {
            return self.$args_sexp()['$[]'](1)
          };
        });

        Opal.defn(self, '$body', function() {
          var $a, self = this;

          return self.$compiler().$returns(((($a = self.$body_sexp()) !== false && $a !== nil) ? $a : self.$s("nil")));
        });

        return (Opal.defn(self, '$args_to_params', function(sexp) {
          var $a, $b, TMP_6, self = this, result = nil;

          result = [];
          ($a = ($b = sexp).$each, $a.$$p = (TMP_6 = function(arg){var self = TMP_6.$$s || this, $a, $b, ref = nil;
if (arg == null) arg = nil;
          if (arg['$[]'](0)['$==']("lasgn")) {
              ref = self.$variable(arg['$[]'](1));
              if ((($a = (($b = ref['$==']("_")) ? result['$include?'](ref) : ref['$==']("_"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                return nil;};
              self.$add_arg(ref);
              return result['$<<'](ref);
            } else if (arg['$[]'](0)['$==']("array")) {
              return result['$<<'](self.$scope().$next_temp())
              } else {
              return self.$raise("Bad js_block_arg: " + (arg['$[]'](0)))
            }}, TMP_6.$$s = self, TMP_6), $a).call($b);
          return result;
        }), nil) && 'args_to_params';
      })($scope.base, $scope.get('ScopeNode'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/def"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$select', '$==', '$first', '$[]', '$args', '$find', '$include?', '$-', '$length', '$block_arg', '$rest_arg', '$size', '$keyword_args', '$to_sym', '$variable', '$arity_check?', '$compiler', '$arity_check', '$opt_args', '$mid', '$in_scope', '$mid=', '$scope', '$recvr', '$defs=', '$uses_block!', '$add_arg', '$block_name=', '$process', '$stmt', '$returns', '$stmts', '$add_temp', '$compile_rest_arg', '$compile_opt_args', '$compile_keyword_args', '$identity', '$compile_block_arg', '$delete', '$locals', '$uses_zuper', '$add_local', '$line', '$unshift', '$current_indent', '$to_vars', '$catch_return', '$push', '$recv', '$iter?', '$wrap', '$module?', '$class?', '$sclass?', '$defs', '$top?', '$raise', '$expr?', '$uses_block?', '$block_name', '$argc', '$each', '$expr', '$empty?', '$helper', '$with_temp', '$last', '$===', '$to_s', '$map', '$inspect', '$join', '$!', '$-@', '$<', '$+', '$>', '$<<', '$each_with_index']);
  self.$require("opal/nodes/scope");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $DefNode(){};
        var self = $DefNode = $klass($base, $super, 'DefNode', $DefNode);

        var def = self.$$proto, $scope = self.$$scope;

        def.opt_args = def.rest_arg = def.keyword_args = def.block_arg = def.argc = nil;
        self.$handle("def");

        self.$children("recvr", "mid", "args", "stmts");

        Opal.defn(self, '$opt_args', function() {
          var $a, $b, $c, TMP_1, self = this;

          return ((($a = self.opt_args) !== false && $a !== nil) ? $a : self.opt_args = ($b = ($c = self.$args()['$[]']($range(1, -1, false))).$select, $b.$$p = (TMP_1 = function(arg){var self = TMP_1.$$s || this;
if (arg == null) arg = nil;
          return arg.$first()['$==']("optarg")}, TMP_1.$$s = self, TMP_1), $b).call($c));
        });

        Opal.defn(self, '$rest_arg', function() {
          var $a, $b, $c, TMP_2, self = this;

          return ((($a = self.rest_arg) !== false && $a !== nil) ? $a : self.rest_arg = ($b = ($c = self.$args()['$[]']($range(1, -1, false))).$find, $b.$$p = (TMP_2 = function(arg){var self = TMP_2.$$s || this;
if (arg == null) arg = nil;
          return arg.$first()['$==']("restarg")}, TMP_2.$$s = self, TMP_2), $b).call($c));
        });

        Opal.defn(self, '$keyword_args', function() {
          var $a, $b, $c, TMP_3, self = this;

          return ((($a = self.keyword_args) !== false && $a !== nil) ? $a : self.keyword_args = ($b = ($c = self.$args()['$[]']($range(1, -1, false))).$select, $b.$$p = (TMP_3 = function(arg){var self = TMP_3.$$s || this;
if (arg == null) arg = nil;
          return ["kwarg", "kwoptarg", "kwrestarg"]['$include?'](arg.$first())}, TMP_3.$$s = self, TMP_3), $b).call($c));
        });

        Opal.defn(self, '$block_arg', function() {
          var $a, $b, $c, TMP_4, self = this;

          return ((($a = self.block_arg) !== false && $a !== nil) ? $a : self.block_arg = ($b = ($c = self.$args()['$[]']($range(1, -1, false))).$find, $b.$$p = (TMP_4 = function(arg){var self = TMP_4.$$s || this;
if (arg == null) arg = nil;
          return arg.$first()['$==']("blockarg")}, TMP_4.$$s = self, TMP_4), $b).call($c));
        });

        Opal.defn(self, '$argc', function() {
          var $a, self = this;

          if ((($a = self.argc) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.argc};
          self.argc = $rb_minus(self.$args().$length(), 1);
          if ((($a = self.$block_arg()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.argc = $rb_minus(self.argc, 1)};
          if ((($a = self.$rest_arg()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.argc = $rb_minus(self.argc, 1)};
          self.argc = $rb_minus(self.argc, self.$keyword_args().$size());
          return self.argc;
        });

        Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_5, $c, self = this, params = nil, scope_name = nil, block_name = nil, arity_code = nil;

          params = nil;
          scope_name = nil;
          if ((($a = self.$block_arg()) !== nil && (!$a.$$is_boolean || $a == true))) {
            block_name = self.$variable(self.$block_arg()['$[]'](1)).$to_sym()};
          if ((($a = self.$compiler()['$arity_check?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            arity_code = self.$arity_check(self.$args(), self.$opt_args(), self.$rest_arg(), self.$keyword_args(), block_name, self.$mid())};
          ($a = ($b = self).$in_scope, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a, $b, $c, stmt_code = nil;

          (($a = [self.$mid()]), $b = self.$scope(), $b['$mid='].apply($b, $a), $a[$a.length-1]);
            if ((($a = self.$recvr()) !== nil && (!$a.$$is_boolean || $a == true))) {
              (($a = [true]), $b = self.$scope(), $b['$defs='].apply($b, $a), $a[$a.length-1])};
            if (block_name !== false && block_name !== nil) {
              self.$scope()['$uses_block!']();
              self.$scope().$add_arg(block_name);};
            (($a = [((($c = block_name) !== false && $c !== nil) ? $c : "$yield")]), $b = self.$scope(), $b['$block_name='].apply($b, $a), $a[$a.length-1]);
            params = self.$process(self.$args());
            stmt_code = self.$stmt(self.$compiler().$returns(self.$stmts()));
            self.$add_temp("self = this");
            self.$compile_rest_arg();
            self.$compile_opt_args();
            self.$compile_keyword_args();
            scope_name = self.$scope().$identity();
            self.$compile_block_arg();
            if ((($a = self.$rest_arg()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$scope().$locals().$delete(self.$rest_arg()['$[]'](1))};
            if ((($a = self.$scope().$uses_zuper()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$add_local("$zuper");
              self.$add_local("$zuper_index");
              self.$line("$zuper = [];");
              self.$line("for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {");
              self.$line("  $zuper[$zuper_index] = arguments[$zuper_index];");
              self.$line("}");};
            self.$unshift("\n" + (self.$current_indent()), self.$scope().$to_vars());
            if (arity_code !== false && arity_code !== nil) {
              self.$line(arity_code)};
            self.$line(stmt_code);
            if ((($a = self.$scope().$catch_return()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$unshift("try {\n");
              self.$line("} catch ($returner) { if ($returner === Opal.returner) { return $returner.$v }");
              return self.$push(" throw $returner; }");
              } else {
              return nil
            };}, TMP_5.$$s = self, TMP_5), $a).call($b);
          self.$unshift(") {");
          self.$unshift(params);
          self.$unshift("function(");
          if (scope_name !== false && scope_name !== nil) {
            self.$unshift("" + (scope_name) + " = ")};
          self.$line("}");
          if ((($a = self.$recvr()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$unshift("Opal.defs(", self.$recv(self.$recvr()), ", '$" + (self.$mid()) + "', ");
            self.$push(")");
          } else if ((($a = self.$scope()['$iter?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$wrap("Opal.def(self, '$" + (self.$mid()) + "', ", ")")
          } else if ((($a = ((($c = self.$scope()['$module?']()) !== false && $c !== nil) ? $c : self.$scope()['$class?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$wrap("Opal.defn(self, '$" + (self.$mid()) + "', ", ")")
          } else if ((($a = self.$scope()['$sclass?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self.$scope().$defs()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$unshift("Opal.defs(self, '$" + (self.$mid()) + "', ")
              } else {
              self.$unshift("Opal.defn(self, '$" + (self.$mid()) + "', ")
            };
            self.$push(")");
          } else if ((($a = self.$scope()['$top?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$unshift("Opal.defn(Opal.Object, '$" + (self.$mid()) + "', ");
            self.$push(")");
            } else {
            self.$raise("Unsupported use of `def`; please file a bug at https://github.com/opal/opal reporting this message.")
          };
          if ((($a = self['$expr?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(", ", nil) && '" + (self.$mid()) + "'")
            } else {
            return nil
          };
        });

        Opal.defn(self, '$compile_block_arg', function() {
          var $a, self = this, scope_name = nil, yielder = nil;

          if ((($a = self.$scope()['$uses_block?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            scope_name = self.$scope().$identity();
            yielder = self.$scope().$block_name();
            self.$add_temp("$iter = " + (scope_name) + ".$$p");
            self.$add_temp("" + (yielder) + " = $iter || nil");
            return self.$line("" + (scope_name) + ".$$p = null;");
            } else {
            return nil
          };
        });

        Opal.defn(self, '$compile_rest_arg', function() {
          var $a, $b, self = this, splat = nil;

          if ((($a = ($b = self.$rest_arg(), $b !== false && $b !== nil ?self.$rest_arg()['$[]'](1) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            splat = self.$variable(self.$rest_arg()['$[]'](1).$to_sym());
            self.$add_local("$splat_index");
            self.$line("var array_size = arguments.length - " + (self.$argc()) + ";");
            self.$line("if(array_size < 0) array_size = 0;");
            self.$line("var " + (splat) + " = new Array(array_size);");
            self.$line("for($splat_index = 0; $splat_index < array_size; $splat_index++) {");
            self.$line("  " + (splat) + "[$splat_index] = arguments[$splat_index + " + (self.$argc()) + "];");
            return self.$line("}");
            } else {
            return nil
          };
        });

        Opal.defn(self, '$compile_opt_args', function() {
          var $a, $b, TMP_6, self = this;

          return ($a = ($b = self.$opt_args()).$each, $a.$$p = (TMP_6 = function(arg){var self = TMP_6.$$s || this;
if (arg == null) arg = nil;
          if (arg['$[]'](2)['$[]'](2)['$==']("undefined")) {
              return nil;};
            self.$line("if (" + (self.$variable(arg['$[]'](1))) + " == null) {");
            self.$line("  " + (self.$variable(arg['$[]'](1))) + " = ", self.$expr(arg['$[]'](2)));
            return self.$line("}");}, TMP_6.$$s = self, TMP_6), $a).call($b);
        });

        Opal.defn(self, '$compile_keyword_args', function() {
          var $a, $b, TMP_7, $c, TMP_8, self = this, last_opt_arg = nil, opt_arg_name = nil;

          if ((($a = self.$keyword_args()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          self.$helper("hash2");
          if ((($a = self.$rest_arg()) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = self).$with_temp, $a.$$p = (TMP_7 = function(tmp){var self = TMP_7.$$s || this, rest_arg_name = nil;
if (tmp == null) tmp = nil;
            rest_arg_name = self.$variable(self.$rest_arg()['$[]'](1).$to_sym());
              self.$line("" + (tmp) + " = " + (rest_arg_name) + "[" + (rest_arg_name) + ".length - 1];");
              self.$line("if (" + (tmp) + " == null || !" + (tmp) + ".$$is_hash) {");
              self.$line("  $kwargs = $hash2([], {});");
              self.$line("} else {");
              self.$line("  $kwargs = " + (rest_arg_name) + ".pop();");
              return self.$line("}");}, TMP_7.$$s = self, TMP_7), $a).call($b)
          } else if ((($a = last_opt_arg = self.$opt_args().$last()) !== nil && (!$a.$$is_boolean || $a == true))) {
            opt_arg_name = self.$variable(last_opt_arg['$[]'](1));
            self.$line("if (" + (opt_arg_name) + " == null) {");
            self.$line("  $kwargs = $hash2([], {});");
            self.$line("}");
            self.$line("else if (" + (opt_arg_name) + ".$$is_hash) {");
            self.$line("  $kwargs = " + (opt_arg_name) + ";");
            self.$line("  " + (opt_arg_name) + " = ", self.$expr(last_opt_arg['$[]'](2)), ";");
            self.$line("}");
            self.$line("else if ($kwargs == null) {");
            self.$line("  $kwargs = $hash2([], {});");
            self.$line("}");
            } else {
            self.$line("if ($kwargs == null) {");
            self.$line("  $kwargs = $hash2([], {});");
            self.$line("}");
          };
          self.$line("if (!$kwargs.$$is_hash) {");
          self.$line("  throw Opal.ArgumentError.$new('expecting keyword args');");
          self.$line("}");
          return ($a = ($c = self.$keyword_args()).$each, $a.$$p = (TMP_8 = function(kwarg){var self = TMP_8.$$s || this, $a, $b, TMP_9, $c, $d, TMP_10, $case = nil, arg_name = nil, var_name = nil, kwarg_names = nil, used_args = nil;
if (kwarg == null) kwarg = nil;
          return (function() {$case = kwarg.$first();if ("kwoptarg"['$===']($case)) {arg_name = kwarg['$[]'](1);
            var_name = self.$variable(arg_name.$to_s());
            self.$add_local(var_name);
            self.$line("if ((" + (var_name) + " = $kwargs.$$smap['" + (arg_name) + "']) == null) {");
            self.$line("  " + (var_name) + " = ", self.$expr(kwarg['$[]'](2)));
            return self.$line("}");}else if ("kwarg"['$===']($case)) {arg_name = kwarg['$[]'](1);
            var_name = self.$variable(arg_name.$to_s());
            self.$add_local(var_name);
            self.$line("if ((" + (var_name) + " = $kwargs.$$smap['" + (arg_name) + "']) == null) {");
            self.$line("  throw new Error('expecting keyword arg: " + (arg_name) + "')");
            return self.$line("}");}else if ("kwrestarg"['$===']($case)) {arg_name = kwarg['$[]'](1);
            var_name = self.$variable(arg_name.$to_s());
            self.$add_local(var_name);
            kwarg_names = ($a = ($b = ($c = ($d = self.$keyword_args()).$select, $c.$$p = (TMP_10 = function(kw){var self = TMP_10.$$s || this;
if (kw == null) kw = nil;
            return ["kwoptarg", "kwarg"]['$include?'](kw.$first())}, TMP_10.$$s = self, TMP_10), $c).call($d)).$map, $a.$$p = (TMP_9 = function(kw){var self = TMP_9.$$s || this;
if (kw == null) kw = nil;
            return "" + (kw['$[]'](1).$to_s().$inspect()) + ": true"}, TMP_9.$$s = self, TMP_9), $a).call($b);
            used_args = "{" + (kwarg_names.$join(",")) + "}";
            return self.$line("" + (var_name) + " = Opal.kwrestargs($kwargs, " + (used_args) + ");");}else {return self.$raise("unknown kwarg type " + (kwarg.$first()))}})()}, TMP_8.$$s = self, TMP_8), $a).call($c);
        });

        return (Opal.defn(self, '$arity_check', function(args, opt, splat, kwargs, block_name, mid) {
          var $a, $b, $c, self = this, meth = nil, arity = nil, aritycode = nil, min_arity = nil, max_arity = nil, checks = nil;

          meth = mid.$to_s().$inspect();
          arity = $rb_minus(args.$size(), 1);
          arity = $rb_minus(arity, (opt.$size()));
          if (splat !== false && splat !== nil) {
            arity = $rb_minus(arity, 1)};
          arity = $rb_minus(arity, (kwargs.$size()));
          if (block_name !== false && block_name !== nil) {
            arity = $rb_minus(arity, 1)};
          if ((($a = ((($b = ((($c = opt['$empty?']()['$!']()) !== false && $c !== nil) ? $c : kwargs['$empty?']()['$!']())) !== false && $b !== nil) ? $b : splat)) !== nil && (!$a.$$is_boolean || $a == true))) {
            arity = $rb_minus(arity['$-@'](), 1)};
          aritycode = "var $arity = arguments.length;";
          if ((($a = $rb_lt(arity, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
            min_arity = ($rb_plus(arity, 1))['$-@']();
            max_arity = $rb_minus(args.$size(), 1);
            if (block_name !== false && block_name !== nil) {
              max_arity = $rb_minus(max_arity, 1)};
            checks = [];
            if ((($a = $rb_gt(min_arity, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
              checks['$<<']("$arity < " + (min_arity))};
            if ((($a = (($b = max_arity !== false && max_arity !== nil) ? (splat)['$!']() : max_arity)) !== nil && (!$a.$$is_boolean || $a == true))) {
              checks['$<<']("$arity > " + (max_arity))};
            if ((($a = $rb_gt(checks.$size(), 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $rb_plus(aritycode, "if (" + (checks.$join(" || ")) + ") { Opal.ac($arity, " + (arity) + ", this, " + (meth) + "); }")
              } else {
              return nil
            };
            } else {
            return $rb_plus(aritycode, "if ($arity !== " + (arity) + ") { Opal.ac($arity, " + (arity) + ", this, " + (meth) + "); }")
          };
        }), nil) && 'arity_check';
      })($scope.base, $scope.get('ScopeNode'));

      (function($base, $super) {
        function $ArgsNode(){};
        var self = $ArgsNode = $klass($base, $super, 'ArgsNode', $ArgsNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("args");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_11, self = this, done_kwargs = nil, have_rest = nil;

          done_kwargs = false;
          have_rest = false;
          return ($a = ($b = self.$children()).$each_with_index, $a.$$p = (TMP_11 = function(child, idx){var self = TMP_11.$$s || this, $a, $b, $case = nil;
if (child == null) child = nil;if (idx == null) idx = nil;
          return (function() {$case = child.$first();if ("kwarg"['$===']($case) || "kwoptarg"['$===']($case) || "kwrestarg"['$===']($case)) {if (done_kwargs !== false && done_kwargs !== nil) {
              return nil
              } else {
              done_kwargs = true;
              if ((($a = ((($b = idx['$=='](0)) !== false && $b !== nil) ? $b : have_rest)) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                self.$push(", ")
              };
              self.$scope().$add_arg("$kwargs");
              return self.$push("$kwargs");
            }}else if ("blockarg"['$===']($case)) {return nil}else if ("restarg"['$===']($case)) {return have_rest = true}else {child = child['$[]'](1).$to_sym();
            if (idx['$=='](0)) {
              } else {
              self.$push(", ")
            };
            child = self.$variable(child);
            self.$scope().$add_arg(child.$to_sym());
            return self.$push(child.$to_s());}})()}, TMP_11.$$s = self, TMP_11), $a).call($b);
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/if"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$truthy', '$falsy', '$skip_check_present?', '$skip_check_present_not?', '$push', '$js_truthy', '$test', '$indent', '$line', '$stmt', '$==', '$type', '$needs_wrapper?', '$wrap', '$returns', '$compiler', '$true_body', '$s', '$false_body', '$expr?', '$recv?']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $IfNode(){};
        var self = $IfNode = $klass($base, $super, 'IfNode', $IfNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("if");

        self.$children("test", "true_body", "false_body");

        Opal.cdecl($scope, 'RUBY_ENGINE_CHECK', ["call", ["const", "RUBY_ENGINE"], "==", ["arglist", ["str", "opal"]]]);

        Opal.cdecl($scope, 'RUBY_ENGINE_CHECK_NOT', ["call", ["const", "RUBY_ENGINE"], "!=", ["arglist", ["str", "opal"]]]);

        Opal.cdecl($scope, 'RUBY_PLATFORM_CHECK', ["call", ["const", "RUBY_PLATFORM"], "==", ["arglist", ["str", "opal"]]]);

        Opal.cdecl($scope, 'RUBY_PLATFORM_CHECK_NOT', ["call", ["const", "RUBY_PLATFORM"], "!=", ["arglist", ["str", "opal"]]]);

        Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, $c, TMP_2, self = this, truthy = nil, falsy = nil;

          $a = [self.$truthy(), self.$falsy()], truthy = $a[0], falsy = $a[1], $a;
          if ((($a = self['$skip_check_present?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            falsy = nil};
          if ((($a = self['$skip_check_present_not?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            truthy = nil};
          self.$push("if (", self.$js_truthy(self.$test()), ") {");
          if (truthy !== false && truthy !== nil) {
            ($a = ($b = self).$indent, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

            return self.$line(self.$stmt(truthy))}, TMP_1.$$s = self, TMP_1), $a).call($b)};
          if (falsy !== false && falsy !== nil) {
            if (falsy.$type()['$==']("if")) {
              self.$line("} else ", self.$stmt(falsy))
              } else {
              ($a = ($c = self).$indent, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

              self.$line("} else {");
                return self.$line(self.$stmt(falsy));}, TMP_2.$$s = self, TMP_2), $a).call($c);
              self.$line("}");
            }
            } else {
            self.$push("}")
          };
          if ((($a = self['$needs_wrapper?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(function() {", "; return nil; })()")
            } else {
            return nil
          };
        });

        Opal.defn(self, '$skip_check_present?', function() {
          var $a, self = this;

          return ((($a = self.$test()['$==']($scope.get('RUBY_ENGINE_CHECK'))) !== false && $a !== nil) ? $a : self.$test()['$==']($scope.get('RUBY_PLATFORM_CHECK')));
        });

        Opal.defn(self, '$skip_check_present_not?', function() {
          var $a, self = this;

          return ((($a = self.$test()['$==']($scope.get('RUBY_ENGINE_CHECK_NOT'))) !== false && $a !== nil) ? $a : self.$test()['$==']($scope.get('RUBY_PLATFORM_CHECK_NOT')));
        });

        Opal.defn(self, '$truthy', function() {
          var $a, self = this;

          if ((($a = self['$needs_wrapper?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compiler().$returns(((($a = self.$true_body()) !== false && $a !== nil) ? $a : self.$s("nil")))
            } else {
            return self.$true_body()
          };
        });

        Opal.defn(self, '$falsy', function() {
          var $a, self = this;

          if ((($a = self['$needs_wrapper?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compiler().$returns(((($a = self.$false_body()) !== false && $a !== nil) ? $a : self.$s("nil")))
            } else {
            return self.$false_body()
          };
        });

        return (Opal.defn(self, '$needs_wrapper?', function() {
          var $a, self = this;

          return ((($a = self['$expr?']()) !== false && $a !== nil) ? $a : self['$recv?']());
        }), nil) && 'needs_wrapper?';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/logic"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$in_while?', '$push', '$expr_or_nil', '$value', '$wrap', '$compile_while', '$iter?', '$scope', '$compile_iter', '$error', '$[]', '$while_loop', '$stmt?', '$[]=', '$identity', '$with_temp', '$expr', '$==', '$empty_splat?', '$type', '$recv', '$lhs', '$rhs', '$js_truthy_optimize', '$nil?', '$s', '$>', '$size', '$find_parent_def', '$expr?', '$def?', '$return_in_iter?', '$return_expr_in_def?', '$scope_to_catch_return', '$catch_return=', '$return_val', '$raise', '$to_s']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $NextNode(){};
        var self = $NextNode = $klass($base, $super, 'NextNode', $NextNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("next");

        self.$children("value");

        return (Opal.defn(self, '$compile', function() {
          var $a, self = this;

          if ((($a = self['$in_while?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("continue;")};
          self.$push(self.$expr_or_nil(self.$value()));
          return self.$wrap("return ", ";");
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $BreakNode(){};
        var self = $BreakNode = $klass($base, $super, 'BreakNode', $BreakNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("break");

        self.$children("value");

        Opal.defn(self, '$compile', function() {
          var $a, self = this;

          if ((($a = self['$in_while?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compile_while()
          } else if ((($a = self.$scope()['$iter?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compile_iter()
            } else {
            return self.$error("void value expression: cannot use break outside of iter/while")
          };
        });

        Opal.defn(self, '$compile_while', function() {
          var $a, self = this;

          if ((($a = self.$while_loop()['$[]']("closure")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("return ", self.$expr_or_nil(self.$value()))
            } else {
            return self.$push("break;")
          };
        });

        return (Opal.defn(self, '$compile_iter', function() {
          var $a, self = this;

          if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$error("break must be used as a statement")
          };
          self.$push(self.$expr_or_nil(self.$value()));
          return self.$wrap("return ($breaker.$v = ", ", $breaker)");
        }), nil) && 'compile_iter';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $RedoNode(){};
        var self = $RedoNode = $klass($base, $super, 'RedoNode', $RedoNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("redo");

        Opal.defn(self, '$compile', function() {
          var $a, self = this;

          if ((($a = self['$in_while?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compile_while()
          } else if ((($a = self.$scope()['$iter?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compile_iter()
            } else {
            return self.$push("REDO()")
          };
        });

        Opal.defn(self, '$compile_while', function() {
          var self = this;

          self.$while_loop()['$[]=']("use_redo", true);
          return self.$push("" + (self.$while_loop()['$[]']("redo_var")) + " = true");
        });

        return (Opal.defn(self, '$compile_iter', function() {
          var self = this;

          return self.$push("return " + (self.$scope().$identity()) + ".apply(null, $slice.call(arguments))");
        }), nil) && 'compile_iter';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $NotNode(){};
        var self = $NotNode = $klass($base, $super, 'NotNode', $NotNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("not");

        self.$children("value");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_1 = function(tmp){var self = TMP_1.$$s || this;
if (tmp == null) tmp = nil;
          self.$push(self.$expr(self.$value()));
            return self.$wrap("(" + (tmp) + " = ", ", (" + (tmp) + " === nil || " + (tmp) + " === false))");}, TMP_1.$$s = self, TMP_1), $a).call($b);
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $SplatNode(){};
        var self = $SplatNode = $klass($base, $super, 'SplatNode', $SplatNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("splat");

        self.$children("value");

        Opal.defn(self, '$empty_splat?', function() {
          var $a, self = this;

          return ((($a = self.$value()['$=='](["nil"])) !== false && $a !== nil) ? $a : self.$value()['$=='](["paren", ["nil"]]));
        });

        return (Opal.defn(self, '$compile', function() {
          var $a, self = this;

          if ((($a = self['$empty_splat?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("[]")
          } else if (self.$value().$type()['$==']("sym")) {
            return self.$push("[", self.$expr(self.$value()), "]")
            } else {
            return self.$push("Opal.to_a(", self.$recv(self.$value()), ")")
          };
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $OrNode(){};
        var self = $OrNode = $klass($base, $super, 'OrNode', $OrNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("or");

        self.$children("lhs", "rhs");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_2 = function(tmp){var self = TMP_2.$$s || this;
if (tmp == null) tmp = nil;
          self.$push("(((" + (tmp) + " = ");
            self.$push(self.$expr(self.$lhs()));
            self.$push(") !== false && " + (tmp) + " !== nil) ? " + (tmp) + " : ");
            self.$push(self.$expr(self.$rhs()));
            return self.$push(")");}, TMP_2.$$s = self, TMP_2), $a).call($b);
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $AndNode(){};
        var self = $AndNode = $klass($base, $super, 'AndNode', $AndNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("and");

        self.$children("lhs", "rhs");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_3, self = this, truthy_opt = nil;

          truthy_opt = nil;
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_3 = function(tmp){var self = TMP_3.$$s || this, $a;
if (tmp == null) tmp = nil;
          if ((($a = truthy_opt = self.$js_truthy_optimize(self.$lhs())) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$push("((" + (tmp) + " = ", truthy_opt);
              self.$push(") ? ");
              self.$push(self.$expr(self.$rhs()));
              return self.$push(" : ", self.$expr(self.$lhs()), ")");
              } else {
              self.$push("(" + (tmp) + " = ");
              self.$push(self.$expr(self.$lhs()));
              self.$push(", " + (tmp) + " !== false && " + (tmp) + " !== nil ?");
              self.$push(self.$expr(self.$rhs()));
              return self.$push(" : " + (tmp) + ")");
            }}, TMP_3.$$s = self, TMP_3), $a).call($b);
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ReturnNode(){};
        var self = $ReturnNode = $klass($base, $super, 'ReturnNode', $ReturnNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("return");

        self.$children("value");

        Opal.defn(self, '$return_val', function() {
          var $a, self = this;

          if ((($a = self.$value()['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$expr(self.$s("nil"))
          } else if ((($a = $rb_gt(self.$children().$size(), 1)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$expr(($a = self).$s.apply($a, ["array"].concat(Opal.to_a(self.$children()))))
            } else {
            return self.$expr(self.$value())
          };
        });

        Opal.defn(self, '$return_in_iter?', function() {
          var $a, $b, self = this, parent_def = nil;

          if ((($a = ($b = self.$scope()['$iter?'](), $b !== false && $b !== nil ?parent_def = self.$scope().$find_parent_def() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return parent_def
            } else {
            return nil
          };
        });

        Opal.defn(self, '$return_expr_in_def?', function() {
          var $a, $b, self = this;

          if ((($a = ($b = self['$expr?'](), $b !== false && $b !== nil ?self.$scope()['$def?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$scope()
            } else {
            return nil
          };
        });

        Opal.defn(self, '$scope_to_catch_return', function() {
          var $a, self = this;

          return ((($a = self['$return_in_iter?']()) !== false && $a !== nil) ? $a : self['$return_expr_in_def?']());
        });

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, self = this, def_scope = nil;

          if ((($a = def_scope = self.$scope_to_catch_return()) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($a = [true]), $b = def_scope, $b['$catch_return='].apply($b, $a), $a[$a.length-1]);
            return self.$push("Opal.ret(", self.$return_val(), ")");
          } else if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("return ", self.$return_val())
            } else {
            return self.$raise($scope.get('SyntaxError'), "void value expression: cannot return as an expression")
          };
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $JSReturnNode(){};
        var self = $JSReturnNode = $klass($base, $super, 'JSReturnNode', $JSReturnNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("js_return");

        self.$children("value");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          self.$push("return ");
          return self.$push(self.$expr(self.$value()));
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $JSTempNode(){};
        var self = $JSTempNode = $klass($base, $super, 'JSTempNode', $JSTempNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("js_tmp");

        self.$children("value");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          return self.$push(self.$value().$to_s());
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $BlockPassNode(){};
        var self = $BlockPassNode = $klass($base, $super, 'BlockPassNode', $BlockPassNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("block_pass");

        self.$children("value");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          return self.$push(self.$expr(self.$s("call", self.$value(), "to_proc", self.$s("arglist"))));
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/definitions"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$process', '$value', '$each', '$[]', '$==', '$<<', '$expr', '$s', '$to_s', '$>', '$length', '$!=', '$first', '$line', '$mid_to_jsid', '$new_name', '$old_name', '$class?', '$scope', '$module?', '$methods', '$!', '$stmt?', '$type', '$body', '$stmt', '$returns', '$compiler', '$wrap', '$each_with_index', '$empty?', '$stmt_join', '$find_inline_yield', '$child_is_expr?', '$class_scope?', '$current_indent', '$raw_expression?', '$include?', '$===', '$[]=', '$+', '$has_temp?', '$add_temp']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $SvalueNode(){};
        var self = $SvalueNode = $klass($base, $super, 'SvalueNode', $SvalueNode);

        var def = self.$$proto, $scope = self.$$scope;

        def.level = nil;
        self.$handle("svalue");

        self.$children("value");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          return self.$push(self.$process(self.$value(), self.level));
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $UndefNode(){};
        var self = $UndefNode = $klass($base, $super, 'UndefNode', $UndefNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("undef");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = self.$children()).$each, $a.$$p = (TMP_1 = function(child){var self = TMP_1.$$s || this, $a, $b, value = nil, statements = nil;
if (child == null) child = nil;
          value = child['$[]'](1);
            statements = [];
            if (child['$[]'](0)['$==']("js_return")) {
              value = value['$[]'](1);
              statements['$<<'](self.$expr(self.$s("js_return")));};
            statements['$<<']("Opal.udef(self, '$" + (value.$to_s()) + "');");
            if ((($a = ($b = $rb_gt(self.$children().$length(), 1), $b !== false && $b !== nil ?child['$!='](self.$children().$first()) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ($a = self).$line.apply($a, Opal.to_a(statements))
              } else {
              return ($b = self).$push.apply($b, Opal.to_a(statements))
            };}, TMP_1.$$s = self, TMP_1), $a).call($b);
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $AliasNode(){};
        var self = $AliasNode = $klass($base, $super, 'AliasNode', $AliasNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("alias");

        self.$children("new_name", "old_name");

        Opal.defn(self, '$new_mid', function() {
          var self = this;

          return self.$mid_to_jsid(self.$new_name()['$[]'](1).$to_s());
        });

        Opal.defn(self, '$old_mid', function() {
          var self = this;

          return self.$mid_to_jsid(self.$old_name()['$[]'](1).$to_s());
        });

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, self = this;

          if ((($a = ((($b = self.$scope()['$class?']()) !== false && $b !== nil) ? $b : self.$scope()['$module?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$scope().$methods()['$<<']("$" + (self.$new_name()['$[]'](1)))};
          return self.$push("Opal.alias(self, '" + (self.$new_name()['$[]'](1)) + "', '" + (self.$old_name()['$[]'](1)) + "')");
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $BeginNode(){};
        var self = $BeginNode = $klass($base, $super, 'BeginNode', $BeginNode);

        var def = self.$$proto, $scope = self.$$scope;

        def.level = nil;
        self.$handle("begin");

        self.$children("body");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, self = this;

          if ((($a = ($b = self['$stmt?']()['$!'](), $b !== false && $b !== nil ?self.$body().$type()['$==']("block") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push(self.$stmt(self.$compiler().$returns(self.$body())));
            return self.$wrap("(function() {", "})()");
            } else {
            return self.$push(self.$process(self.$body(), self.level))
          };
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ParenNode(){};
        var self = $ParenNode = $klass($base, $super, 'ParenNode', $ParenNode);

        var def = self.$$proto, $scope = self.$$scope;

        def.level = nil;
        self.$handle("paren");

        self.$children("body");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_2, self = this;

          if (self.$body().$type()['$==']("block")) {
            ($a = ($b = self.$body().$children()).$each_with_index, $a.$$p = (TMP_2 = function(child, idx){var self = TMP_2.$$s || this;
if (child == null) child = nil;if (idx == null) idx = nil;
            if (idx['$=='](0)) {
                } else {
                self.$push(", ")
              };
              return self.$push(self.$expr(child));}, TMP_2.$$s = self, TMP_2), $a).call($b);
            return self.$wrap("(", ")");
            } else {
            self.$push(self.$process(self.$body(), self.level));
            if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$wrap("(", ")")
            };
          };
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $BlockNode(){};
        var self = $BlockNode = $klass($base, $super, 'BlockNode', $BlockNode);

        var def = self.$$proto, $scope = self.$$scope;

        def.level = nil;
        self.$handle("block");

        Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_3, self = this;

          if ((($a = self.$children()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("nil")};
          return ($a = ($b = self.$children()).$each_with_index, $a.$$p = (TMP_3 = function(child, idx){var self = TMP_3.$$s || this, $a, yasgn = nil;
            if (self.level == null) self.level = nil;
if (child == null) child = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(self.$stmt_join())
            };
            if ((($a = yasgn = self.$find_inline_yield(child)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$push(self.$compiler().$process(yasgn, self.level));
              self.$push(";");};
            self.$push(self.$compiler().$process(child, self.level));
            if ((($a = self['$child_is_expr?'](child)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$push(";")
              } else {
              return nil
            };}, TMP_3.$$s = self, TMP_3), $a).call($b);
        });

        Opal.defn(self, '$stmt_join', function() {
          var $a, self = this;

          if ((($a = self.$scope()['$class_scope?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "\n\n" + (self.$current_indent())
            } else {
            return "\n" + (self.$current_indent())
          };
        });

        Opal.defn(self, '$child_is_expr?', function(child) {
          var $a, self = this;

          return ($a = self['$raw_expression?'](child), $a !== false && $a !== nil ?["stmt", "stmt_closure"]['$include?'](self.level) : $a);
        });

        Opal.defn(self, '$raw_expression?', function(child) {
          var self = this;

          return ["xstr", "dxstr"]['$include?'](child.$type())['$!']();
        });

        return (Opal.defn(self, '$find_inline_yield', function(stmt) {
          var $a, $b, TMP_4, $c, TMP_5, self = this, found = nil, $case = nil, arglist = nil;

          found = nil;
          $case = stmt.$first();if ("js_return"['$===']($case)) {if ((($a = found = self.$find_inline_yield(stmt['$[]'](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
            found = found['$[]'](2)}}else if ("array"['$===']($case)) {($a = ($b = stmt['$[]']($range(1, -1, false))).$each_with_index, $a.$$p = (TMP_4 = function(el, idx){var self = TMP_4.$$s || this;
if (el == null) el = nil;if (idx == null) idx = nil;
          if (el.$first()['$==']("yield")) {
              found = el;
              return stmt['$[]=']($rb_plus(idx, 1), self.$s("js_tmp", "$yielded"));
              } else {
              return nil
            }}, TMP_4.$$s = self, TMP_4), $a).call($b)}else if ("call"['$===']($case)) {arglist = stmt['$[]'](3);
          ($a = ($c = arglist['$[]']($range(1, -1, false))).$each_with_index, $a.$$p = (TMP_5 = function(el, idx){var self = TMP_5.$$s || this;
if (el == null) el = nil;if (idx == null) idx = nil;
          if (el.$first()['$==']("yield")) {
              found = el;
              return arglist['$[]=']($rb_plus(idx, 1), self.$s("js_tmp", "$yielded"));
              } else {
              return nil
            }}, TMP_5.$$s = self, TMP_5), $a).call($c);};
          if (found !== false && found !== nil) {
            if ((($a = self.$scope()['$has_temp?']("$yielded")) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$scope().$add_temp("$yielded")
            };
            return self.$s("yasgn", "$yielded", found);
            } else {
            return nil
          };
        }), nil) && 'find_inline_yield';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/yield"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$find_yielding_scope', '$uses_block!', '$block_name', '$yields_single_arg?', '$push', '$expr', '$first', '$wrap', '$s', '$uses_splat?', '$scope', '$def?', '$parent', '$!', '$==', '$size', '$any?', '$type', '$handle', '$compile_call', '$children', '$stmt?', '$with_temp', '$[]', '$yield_args', '$var_name']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $BaseYieldNode(){};
        var self = $BaseYieldNode = $klass($base, $super, 'BaseYieldNode', $BaseYieldNode);

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defn(self, '$compile_call', function(children, level) {
          var $a, $b, self = this, yielding_scope = nil, block_name = nil;

          yielding_scope = self.$find_yielding_scope();
          yielding_scope['$uses_block!']();
          block_name = ((($a = yielding_scope.$block_name()) !== false && $a !== nil) ? $a : "$yield");
          if ((($a = self['$yields_single_arg?'](children)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push(self.$expr(children.$first()));
            return self.$wrap("Opal.yield1(" + (block_name) + ", ", ")");
            } else {
            self.$push(self.$expr(($a = self).$s.apply($a, ["arglist"].concat(Opal.to_a(children)))));
            if ((($b = self['$uses_splat?'](children)) !== nil && (!$b.$$is_boolean || $b == true))) {
              return self.$wrap("Opal.yieldX(" + (block_name) + ", ", ")")
              } else {
              return self.$wrap("Opal.yieldX(" + (block_name) + ", [", "])")
            };
          };
        });

        Opal.defn(self, '$find_yielding_scope', function() {
          var $a, $b, $c, self = this, working = nil;

          working = self.$scope();
          while (working !== false && working !== nil) {
          if ((($b = ((($c = working.$block_name()) !== false && $c !== nil) ? $c : working['$def?']())) !== nil && (!$b.$$is_boolean || $b == true))) {
            break;};
          working = working.$parent();};
          return working;
        });

        Opal.defn(self, '$yields_single_arg?', function(children) {
          var $a, self = this;

          return ($a = self['$uses_splat?'](children)['$!'](), $a !== false && $a !== nil ?children.$size()['$=='](1) : $a);
        });

        return (Opal.defn(self, '$uses_splat?', function(children) {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = children)['$any?'], $a.$$p = (TMP_1 = function(child){var self = TMP_1.$$s || this;
if (child == null) child = nil;
          return child.$type()['$==']("splat")}, TMP_1.$$s = self, TMP_1), $a).call($b);
        }), nil) && 'uses_splat?';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $YieldNode(){};
        var self = $YieldNode = $klass($base, $super, 'YieldNode', $YieldNode);

        var def = self.$$proto, $scope = self.$$scope;

        def.level = nil;
        self.$handle("yield");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_2, self = this;

          self.$compile_call(self.$children(), self.level);
          if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("if (", " === $breaker) return $breaker.$v")
            } else {
            return ($a = ($b = self).$with_temp, $a.$$p = (TMP_2 = function(tmp){var self = TMP_2.$$s || this;
if (tmp == null) tmp = nil;
            return self.$wrap("(((" + (tmp) + " = ", ") === $breaker) ? $breaker.$v : " + (tmp) + ")")}, TMP_2.$$s = self, TMP_2), $a).call($b)
          };
        }), nil) && 'compile';
      })($scope.base, $scope.get('BaseYieldNode'));

      (function($base, $super) {
        function $YasgnNode(){};
        var self = $YasgnNode = $klass($base, $super, 'YasgnNode', $YasgnNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("yasgn");

        self.$children("var_name", "yield_args");

        return (Opal.defn(self, '$compile', function() {
          var $a, self = this;

          self.$compile_call(($a = self).$s.apply($a, Opal.to_a(self.$yield_args()['$[]']($range(1, -1, false)))), "stmt");
          return self.$wrap("if ((" + (self.$var_name()) + " = ", ") === $breaker) return $breaker.$v");
        }), nil) && 'compile';
      })($scope.base, $scope.get('BaseYieldNode'));

      (function($base, $super) {
        function $ReturnableYieldNode(){};
        var self = $ReturnableYieldNode = $klass($base, $super, 'ReturnableYieldNode', $ReturnableYieldNode);

        var def = self.$$proto, $scope = self.$$scope;

        def.level = nil;
        self.$handle("returnable_yield");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_3, self = this;

          self.$compile_call(self.$children(), self.level);
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_3 = function(tmp){var self = TMP_3.$$s || this;
if (tmp == null) tmp = nil;
          return self.$wrap("return " + (tmp) + " = ", ", " + (tmp) + " === $breaker ? " + (tmp) + " : " + (tmp))}, TMP_3.$$s = self, TMP_3), $a).call($b);
        }), nil) && 'compile';
      })($scope.base, $scope.get('BaseYieldNode'));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/rescue"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$stmt?', '$lhs', '$returns', '$compiler', '$rhs', '$push', '$expr', '$body', '$rescue_val', '$wrap', '$line', '$process', '$body_sexp', '$ensr_sexp', '$wrap_in_closure?', '$begn', '$ensr', '$s', '$recv?', '$expr?', '$indent', '$body_code', '$each_with_index', '$==', '$type', '$[]', '$!', '$empty?', '$rescue_exprs', '$rescue_variable', '$[]=', '$rescue_body', '$===', '$include?', '$rescue_variable?', '$last', '$args', '$dup', '$pop']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $RescueModNode(){};
        var self = $RescueModNode = $klass($base, $super, 'RescueModNode', $RescueModNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("rescue_mod");

        self.$children("lhs", "rhs");

        Opal.defn(self, '$body', function() {
          var $a, self = this;

          if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$lhs()
            } else {
            return self.$compiler().$returns(self.$lhs())
          };
        });

        Opal.defn(self, '$rescue_val', function() {
          var $a, self = this;

          if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$rhs()
            } else {
            return self.$compiler().$returns(self.$rhs())
          };
        });

        return (Opal.defn(self, '$compile', function() {
          var $a, self = this;

          self.$push("try {", self.$expr(self.$body()), " } catch ($err) { ", self.$expr(self.$rescue_val()), " }");
          if ((($a = self['$stmt?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$wrap("(function() {", "})()")
          };
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $EnsureNode(){};
        var self = $EnsureNode = $klass($base, $super, 'EnsureNode', $EnsureNode);

        var def = self.$$proto, $scope = self.$$scope;

        def.level = nil;
        self.$handle("ensure");

        self.$children("begn", "ensr");

        Opal.defn(self, '$compile', function() {
          var $a, self = this;

          self.$push("try {");
          self.$line(self.$compiler().$process(self.$body_sexp(), self.level));
          self.$line("} finally {");
          self.$line(self.$compiler().$process(self.$ensr_sexp(), self.level));
          self.$line("}");
          if ((($a = self['$wrap_in_closure?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(function() {", "; })()")
            } else {
            return nil
          };
        });

        Opal.defn(self, '$body_sexp', function() {
          var $a, self = this;

          if ((($a = self['$wrap_in_closure?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compiler().$returns(self.$begn())
            } else {
            return self.$begn()
          };
        });

        Opal.defn(self, '$ensr_sexp', function() {
          var $a, self = this;

          return ((($a = self.$ensr()) !== false && $a !== nil) ? $a : self.$s("nil"));
        });

        return (Opal.defn(self, '$wrap_in_closure?', function() {
          var $a, self = this;

          return ((($a = self['$recv?']()) !== false && $a !== nil) ? $a : self['$expr?']());
        }), nil) && 'wrap_in_closure?';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $RescueNode(){};
        var self = $RescueNode = $klass($base, $super, 'RescueNode', $RescueNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("rescue");

        self.$children("body");

        Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, $c, TMP_2, self = this, handled_else = nil;

          handled_else = false;
          self.$push("try {");
          self.$line(($a = ($b = self).$indent, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;
            if (self.level == null) self.level = nil;

          return self.$process(self.$body_code(), self.level)}, TMP_1.$$s = self, TMP_1), $a).call($b));
          self.$line("} catch ($err) {");
          ($a = ($c = self.$children()['$[]']($range(1, -1, false))).$each_with_index, $a.$$p = (TMP_2 = function(child, idx){var self = TMP_2.$$s || this, $a, $b, TMP_3;
if (child == null) child = nil;if (idx == null) idx = nil;
          if (child.$type()['$==']("resbody")) {
              } else {
              handled_else = true
            };
            if (idx['$=='](0)) {
              } else {
              self.$push("else ")
            };
            return self.$push(($a = ($b = self).$indent, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;
              if (self.level == null) self.level = nil;

            return self.$process(child, self.level)}, TMP_3.$$s = self, TMP_3), $a).call($b));}, TMP_2.$$s = self, TMP_2), $a).call($c);
          if (handled_else !== false && handled_else !== nil) {
            } else {
            self.$push("else { throw $err; }")
          };
          self.$line("}");
          if ((($a = self['$expr?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(function() { ", "})()")
            } else {
            return nil
          };
        });

        return (Opal.defn(self, '$body_code', function() {
          var $a, self = this, body_code = nil;

          body_code = ((function() {if (self.$body().$type()['$==']("resbody")) {
            return self.$s("nil")
            } else {
            return self.$body()
          }; return nil; })());
          if ((($a = self['$stmt?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compiler().$returns(body_code)
            } else {
            return body_code
          };
        }), nil) && 'body_code';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $ResBodyNode(){};
        var self = $ResBodyNode = $klass($base, $super, 'ResBodyNode', $ResBodyNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("resbody");

        self.$children("args", "body");

        Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, self = this, variable = nil;

          self.$push("if (");
          if ((($a = self.$rescue_exprs()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$push("true")
            } else {
            self.$push("Opal.rescue($err, [");
            ($a = ($b = self.$rescue_exprs()).$each_with_index, $a.$$p = (TMP_4 = function(rexpr, idx){var self = TMP_4.$$s || this;
if (rexpr == null) rexpr = nil;if (idx == null) idx = nil;
            if (idx['$=='](0)) {
                } else {
                self.$push(", ")
              };
              return self.$push(self.$expr(rexpr));}, TMP_4.$$s = self, TMP_4), $a).call($b);
            self.$push("])");
          };
          self.$push(") {");
          if ((($a = variable = self.$rescue_variable()) !== nil && (!$a.$$is_boolean || $a == true))) {
            variable['$[]='](2, self.$s("js_tmp", "$err"));
            self.$push(self.$expr(variable), ";");};
          self.$line("try {");
          ($a = ($c = self).$indent, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;
            if (self.level == null) self.level = nil;

          return self.$line(self.$process(self.$rescue_body(), self.level))}, TMP_5.$$s = self, TMP_5), $a).call($c);
          self.$line("} finally {");
          ($a = ($d = self).$indent, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

          return self.$line("Opal.gvars[\"!\"] = Opal.exceptions.pop() || Opal.nil;")}, TMP_6.$$s = self, TMP_6), $a).call($d);
          self.$line("}");
          return self.$line("}");
        });

        Opal.defn(self, '$rescue_variable?', function(variable) {
          var $a, self = this;

          return ($a = $scope.get('Sexp')['$==='](variable), $a !== false && $a !== nil ?["lasgn", "iasgn"]['$include?'](variable.$type()) : $a);
        });

        Opal.defn(self, '$rescue_variable', function() {
          var $a, self = this;

          if ((($a = self['$rescue_variable?'](self.$args().$last())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$args().$last().$dup()
            } else {
            return nil
          };
        });

        Opal.defn(self, '$rescue_exprs', function() {
          var $a, self = this, exprs = nil;

          exprs = self.$args().$dup();
          if ((($a = self['$rescue_variable?'](exprs.$last())) !== nil && (!$a.$$is_boolean || $a == true))) {
            exprs.$pop()};
          return exprs.$children();
        });

        return (Opal.defn(self, '$rescue_body', function() {
          var $a, self = this, body_code = nil;

          body_code = (((($a = self.$body()) !== false && $a !== nil) ? $a : self.$s("nil")));
          if ((($a = self['$stmt?']()['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            body_code = self.$compiler().$returns(body_code)};
          return body_code;
        }), nil) && 'rescue_body';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/case"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$in_case', '$condition', '$[]=', '$case_stmt', '$add_local', '$push', '$expr', '$each_with_index', '$==', '$type', '$needs_closure?', '$returns', '$compiler', '$stmt', '$case_parts', '$!', '$wrap', '$stmt?', '$[]', '$s', '$js_truthy', '$when_checks', '$process', '$body_code', '$whens', '$body']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CaseNode(){};
        var self = $CaseNode = $klass($base, $super, 'CaseNode', $CaseNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("case");

        self.$children("condition");

        Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, self = this, handled_else = nil;

          handled_else = false;
          return ($a = ($b = self.$compiler()).$in_case, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c;

          if ((($a = self.$condition()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$case_stmt()['$[]=']("cond", true);
              self.$add_local("$case");
              self.$push("$case = ", self.$expr(self.$condition()), ";");};
            ($a = ($b = self.$case_parts()).$each_with_index, $a.$$p = (TMP_2 = function(wen, idx){var self = TMP_2.$$s || this, $a, $b;
if (wen == null) wen = nil;if (idx == null) idx = nil;
            if ((($a = (($b = wen !== false && wen !== nil) ? wen.$type()['$==']("when") : wen)) !== nil && (!$a.$$is_boolean || $a == true))) {
                if ((($a = self['$needs_closure?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                  self.$compiler().$returns(wen)};
                if (idx['$=='](0)) {
                  } else {
                  self.$push("else ")
                };
                return self.$push(self.$stmt(wen));
              } else if (wen !== false && wen !== nil) {
                handled_else = true;
                if ((($a = self['$needs_closure?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                  wen = self.$compiler().$returns(wen)};
                return self.$push("else {", self.$stmt(wen), "}");
                } else {
                return nil
              }}, TMP_2.$$s = self, TMP_2), $a).call($b);
            if ((($a = ($c = self['$needs_closure?'](), $c !== false && $c !== nil ?handled_else['$!']() : $c)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$push("else { return nil }")};
            if ((($a = self['$needs_closure?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$wrap("(function() {", "})()")
              } else {
              return nil
            };}, TMP_1.$$s = self, TMP_1), $a).call($b);
        });

        Opal.defn(self, '$needs_closure?', function() {
          var self = this;

          return self['$stmt?']()['$!']();
        });

        Opal.defn(self, '$case_parts', function() {
          var self = this;

          return self.$children()['$[]']($range(1, -1, false));
        });

        return (Opal.defn(self, '$case_stmt', function() {
          var self = this;

          return self.$compiler().$case_stmt();
        }), nil) && 'case_stmt';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $WhenNode(){};
        var self = $WhenNode = $klass($base, $super, 'WhenNode', $WhenNode);

        var def = self.$$proto, $scope = self.$$scope;

        def.level = nil;
        self.$handle("when");

        self.$children("whens", "body");

        Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_3, self = this;

          self.$push("if (");
          ($a = ($b = self.$when_checks()).$each_with_index, $a.$$p = (TMP_3 = function(check, idx){var self = TMP_3.$$s || this, $a, call = nil;
if (check == null) check = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(" || ")
            };
            if (check.$type()['$==']("splat")) {
              self.$push("(function($splt) { for (var i = 0; i < $splt.length; i++) {");
              self.$push("if ($splt[i]['$===']($case)) { return true; }");
              return self.$push("} return false; })(", self.$expr(check['$[]'](1)), ")");
            } else if ((($a = self.$case_stmt()['$[]']("cond")) !== nil && (!$a.$$is_boolean || $a == true))) {
              call = self.$s("call", check, "===", self.$s("arglist", self.$s("js_tmp", "$case")));
              return self.$push(self.$expr(call));
              } else {
              return self.$push(self.$js_truthy(check))
            };}, TMP_3.$$s = self, TMP_3), $a).call($b);
          return self.$push(") {", self.$process(self.$body_code(), self.level), "}");
        });

        Opal.defn(self, '$when_checks', function() {
          var self = this;

          return self.$whens().$children();
        });

        Opal.defn(self, '$case_stmt', function() {
          var self = this;

          return self.$compiler().$case_stmt();
        });

        return (Opal.defn(self, '$body_code', function() {
          var $a, self = this;

          return ((($a = self.$body()) !== false && $a !== nil) ? $a : self.$s("nil"));
        }), nil) && 'body_code';
      })($scope.base, $scope.get('Base'));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/super"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$children', '$arglist', '$iter', '$expr', '$iter_sexp', '$uses_block!', '$scope', '$def?', '$identify!', '$name', '$parent', '$defs', '$push', '$to_s', '$mid', '$iter?', '$get_super_chain', '$join', '$map', '$raise', '$s', '$handle', '$compile_dispatcher', '$wrap', '$has_splat?', '$args', '$fragment', '$uses_zuper=', '$any?', '$==', '$type']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $BaseSuperNode(){};
        var self = $BaseSuperNode = $klass($base, $super, 'BaseSuperNode', $BaseSuperNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$children("arglist", "iter");

        Opal.defn(self, '$compile_dispatcher', function() {
          var $a, $b, TMP_1, self = this, iter = nil, scope_name = nil, class_name = nil, chain = nil, cur_defn = nil, mid = nil, trys = nil;

          if ((($a = ((($b = self.$arglist()) !== false && $b !== nil) ? $b : self.$iter())) !== nil && (!$a.$$is_boolean || $a == true))) {
            iter = self.$expr(self.$iter_sexp())
            } else {
            self.$scope()['$uses_block!']();
            iter = "$iter";
          };
          if ((($a = self.$scope()['$def?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$scope()['$uses_block!']();
            scope_name = self.$scope()['$identify!']();
            class_name = (function() {if ((($a = self.$scope().$parent().$name()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "$" + (self.$scope().$parent().$name())
              } else {
              return "self.$$class.$$proto"
            }; return nil; })();
            if ((($a = self.$scope().$defs()) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$push("Opal.find_super_dispatcher(self, '" + (self.$scope().$mid().$to_s()) + "', " + (scope_name) + ", ");
              self.$push(iter);
              return self.$push(", " + (class_name) + ")");
              } else {
              self.$push("Opal.find_super_dispatcher(self, '" + (self.$scope().$mid().$to_s()) + "', " + (scope_name) + ", ");
              self.$push(iter);
              return self.$push(")");
            };
          } else if ((($a = self.$scope()['$iter?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            $b = self.$scope().$get_super_chain(), $a = Opal.to_ary($b), chain = ($a[0] == null ? nil : $a[0]), cur_defn = ($a[1] == null ? nil : $a[1]), mid = ($a[2] == null ? nil : $a[2]), $b;
            trys = ($a = ($b = chain).$map, $a.$$p = (TMP_1 = function(c){var self = TMP_1.$$s || this;
if (c == null) c = nil;
            return "" + (c) + ".$$def"}, TMP_1.$$s = self, TMP_1), $a).call($b).$join(" || ");
            return self.$push("Opal.find_iter_super_dispatcher(self, " + (mid) + ", (" + (trys) + " || " + (cur_defn) + "), null)");
            } else {
            return self.$raise("Cannot call super() from outside a method block")
          };
        });

        Opal.defn(self, '$args', function() {
          var $a, self = this;

          return ((($a = self.$arglist()) !== false && $a !== nil) ? $a : self.$s("arglist"));
        });

        return (Opal.defn(self, '$iter_sexp', function() {
          var $a, self = this;

          return ((($a = self.$iter()) !== false && $a !== nil) ? $a : self.$s("js_tmp", "null"));
        }), nil) && 'iter_sexp';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $DefinedSuperNode(){};
        var self = $DefinedSuperNode = $klass($base, $super, 'DefinedSuperNode', $DefinedSuperNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("defined_super");

        return (Opal.defn(self, '$compile', function() {
          var self = this;

          self.$compile_dispatcher();
          return self.$wrap("((", ") != null ? \"super\" : nil)");
        }), nil) && 'compile';
      })($scope.base, $scope.get('BaseSuperNode'));

      (function($base, $super) {
        function $SuperNode(){};
        var self = $SuperNode = $klass($base, $super, 'SuperNode', $SuperNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("super");

        self.$children("arglist", "iter");

        Opal.defn(self, '$compile', function() {
          var $a, $b, self = this, splat = nil, args = nil;

          if ((($a = ((($b = self.$arglist()) !== false && $b !== nil) ? $b : self.$iter())) !== nil && (!$a.$$is_boolean || $a == true))) {
            splat = self['$has_splat?']();
            args = self.$expr(self.$args());
            if (splat !== false && splat !== nil) {
              } else {
              args = [self.$fragment("["), args, self.$fragment("]")]
            };
          } else if ((($a = self.$scope()['$def?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            (($a = [true]), $b = self.$scope(), $b['$uses_zuper='].apply($b, $a), $a[$a.length-1]);
            args = self.$fragment("$zuper");
            } else {
            args = self.$fragment("$slice.call(arguments)")
          };
          self.$compile_dispatcher();
          self.$push(".apply(self, ");
          ($a = self).$push.apply($a, Opal.to_a(args));
          return self.$push(")");
        });

        return (Opal.defn(self, '$has_splat?', function() {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self.$args().$children())['$any?'], $a.$$p = (TMP_2 = function(child){var self = TMP_2.$$s || this;
if (child == null) child = nil;
          return child.$type()['$==']("splat")}, TMP_2.$$s = self, TMP_2), $a).call($b);
        }), nil) && 'has_splat?';
      })($scope.base, $scope.get('BaseSuperNode'));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/version"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.9.4")
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/top"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$push', '$version_comment', '$opening', '$in_scope', '$line', '$inspect', '$to_s', '$dynamic_require_severity', '$compiler', '$compile_config', '$stmt', '$stmts', '$is_a?', '$eval?', '$add_temp', '$add_used_helpers', '$add_used_operators', '$to_vars', '$scope', '$compile_method_stubs', '$compile_irb_vars', '$compile_end_construct', '$closing', '$requirable?', '$cleanpath', '$Pathname', '$file', '$returns', '$body', '$irb?', '$to_a', '$helpers', '$each', '$operator_helpers', '$[]', '$method_missing?', '$method_calls', '$join', '$map', '$empty?', '$eof_content', '$arity_check?', '$freezing?', '$tainting?']);
  self.$require("pathname");
  self.$require("opal/version");
  self.$require("opal/nodes/scope");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $TopNode(){};
        var self = $TopNode = $klass($base, $super, 'TopNode', $TopNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("top");

        self.$children("body");

        Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, self = this;

          self.$push(self.$version_comment());
          self.$opening();
          ($a = ($b = self).$in_scope, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, body_code = nil;

          self.$line("Opal.dynamic_require_severity = " + (self.$compiler().$dynamic_require_severity().$to_s().$inspect()) + ";");
            self.$compile_config();
            body_code = self.$stmt(self.$stmts());
            if ((($a = body_code['$is_a?']($scope.get('Array'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              body_code = [body_code]
            };
            if ((($a = self.$compiler()['$eval?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$add_temp("self = Opal.top")
            };
            self.$add_temp((function() {if ((($a = self.$compiler()['$eval?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return "$scope = (self.$$scope || self.$$class.$$scope)"
              } else {
              return "$scope = Opal"
            }; return nil; })());
            self.$add_temp("nil = Opal.nil");
            self.$add_used_helpers();
            self.$add_used_operators();
            self.$line(self.$scope().$to_vars());
            self.$compile_method_stubs();
            self.$compile_irb_vars();
            self.$compile_end_construct();
            return self.$line(body_code);}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return self.$closing();
        });

        Opal.defn(self, '$opening', function() {
          var $a, self = this, path = nil;

          if ((($a = self.$compiler()['$requirable?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            path = self.$Pathname(self.$compiler().$file()).$cleanpath().$to_s();
            return self.$line("Opal.modules[" + (path.$inspect()) + "] = function(Opal) {");
          } else if ((($a = self.$compiler()['$eval?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$line("(function(Opal, self) {")
            } else {
            return self.$line("(function(Opal) {")
          };
        });

        Opal.defn(self, '$closing', function() {
          var $a, self = this;

          if ((($a = self.$compiler()['$requirable?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$line("};\n")
          } else if ((($a = self.$compiler()['$eval?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$line("})(Opal, self)")
            } else {
            return self.$line("})(Opal);\n")
          };
        });

        Opal.defn(self, '$stmts', function() {
          var self = this;

          return self.$compiler().$returns(self.$body());
        });

        Opal.defn(self, '$compile_irb_vars', function() {
          var $a, self = this;

          if ((($a = self.$compiler()['$irb?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$line("if (!Opal.irb_vars) { Opal.irb_vars = {}; }")
            } else {
            return nil
          };
        });

        Opal.defn(self, '$add_used_helpers', function() {
          var $a, $b, TMP_2, self = this, helpers = nil;

          helpers = self.$compiler().$helpers().$to_a();
          return ($a = ($b = helpers.$to_a()).$each, $a.$$p = (TMP_2 = function(h){var self = TMP_2.$$s || this;
if (h == null) h = nil;
          return self.$add_temp("$" + (h) + " = Opal." + (h))}, TMP_2.$$s = self, TMP_2), $a).call($b);
        });

        Opal.defn(self, '$add_used_operators', function() {
          var $a, $b, TMP_3, self = this, operators = nil;

          operators = self.$compiler().$operator_helpers().$to_a();
          return ($a = ($b = operators).$each, $a.$$p = (TMP_3 = function(op){var self = TMP_3.$$s || this, name = nil;
if (op == null) op = nil;
          name = (((($scope.get('Nodes')).$$scope.get('CallNode'))).$$scope.get('OPERATORS'))['$[]'](op);
            self.$line("function $rb_" + (name) + "(lhs, rhs) {");
            self.$line("  return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs " + (op) + " rhs : lhs['$" + (op) + "'](rhs);");
            return self.$line("}");}, TMP_3.$$s = self, TMP_3), $a).call($b);
        });

        Opal.defn(self, '$compile_method_stubs', function() {
          var $a, $b, TMP_4, self = this, calls = nil, stubs = nil;

          if ((($a = self.$compiler()['$method_missing?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            calls = self.$compiler().$method_calls();
            stubs = ($a = ($b = calls.$to_a()).$map, $a.$$p = (TMP_4 = function(k){var self = TMP_4.$$s || this;
if (k == null) k = nil;
            return "'$" + (k) + "'"}, TMP_4.$$s = self, TMP_4), $a).call($b).$join(", ");
            if ((($a = stubs['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self.$line("Opal.add_stubs([" + (stubs) + "]);")
            };
            } else {
            return nil
          };
        });

        Opal.defn(self, '$compile_end_construct', function() {
          var $a, self = this, content = nil;

          if ((($a = content = self.$compiler().$eof_content()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$line("var $__END__ = Opal.Object.$new();");
            return self.$line("$__END__.$read = function() { return " + (content.$inspect()) + "; };");
            } else {
            return nil
          };
        });

        Opal.defn(self, '$compile_config', function() {
          var self = this;

          self.$line("var OPAL_CONFIG = { ");
          self.$push("method_missing: " + (self.$compiler()['$method_missing?']()) + ", ");
          self.$push("arity_check: " + (self.$compiler()['$arity_check?']()) + ", ");
          self.$push("freezing: " + (self.$compiler()['$freezing?']()) + ", ");
          self.$push("tainting: " + (self.$compiler()['$tainting?']()) + " ");
          return self.$push("};");
        });

        return (Opal.defn(self, '$version_comment', function() {
          var self = this;

          return "/* Generated by Opal " + ((($scope.get('Opal')).$$scope.get('VERSION'))) + " */";
        }), nil) && 'version_comment';
      })($scope.base, $scope.get('ScopeNode'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/while"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$with_temp', '$js_truthy', '$test', '$in_while', '$wrap_in_closure?', '$[]=', '$while_loop', '$stmt', '$body', '$uses_redo?', '$push', '$while_open', '$while_close', '$line', '$compiler', '$wrap', '$[]', '$expr?', '$recv?']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $WhileNode(){};
        var self = $WhileNode = $klass($base, $super, 'WhileNode', $WhileNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("while");

        self.$children("test", "body");

        Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, self = this;

          ($a = ($b = self).$with_temp, $a.$$p = (TMP_1 = function(redo_var){var self = TMP_1.$$s || this, $a, $b, TMP_2, test_code = nil;
if (redo_var == null) redo_var = nil;
          test_code = self.$js_truthy(self.$test());
            return ($a = ($b = self.$compiler()).$in_while, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, body_code = nil;

            if ((($a = self['$wrap_in_closure?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                self.$while_loop()['$[]=']("closure", true)};
              self.$while_loop()['$[]=']("redo_var", redo_var);
              body_code = self.$stmt(self.$body());
              if ((($a = self['$uses_redo?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                self.$push("" + (redo_var) + " = false; " + (self.$while_open()) + (redo_var) + " || ");
                self.$push(test_code);
                self.$push(self.$while_close());
                } else {
                self.$push(self.$while_open(), test_code, self.$while_close())
              };
              if ((($a = self['$uses_redo?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                self.$push("" + (redo_var) + " = false;")};
              return self.$line(body_code, "}");}, TMP_2.$$s = self, TMP_2), $a).call($b);}, TMP_1.$$s = self, TMP_1), $a).call($b);
          if ((($a = self['$wrap_in_closure?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$wrap("(function() {", "; return nil; })()")
            } else {
            return nil
          };
        });

        Opal.defn(self, '$while_open', function() {
          var self = this;

          return "while (";
        });

        Opal.defn(self, '$while_close', function() {
          var self = this;

          return ") {";
        });

        Opal.defn(self, '$uses_redo?', function() {
          var self = this;

          return self.$while_loop()['$[]']("use_redo");
        });

        return (Opal.defn(self, '$wrap_in_closure?', function() {
          var $a, self = this;

          return ((($a = self['$expr?']()) !== false && $a !== nil) ? $a : self['$recv?']());
        }), nil) && 'wrap_in_closure?';
      })($scope.base, $scope.get('Base'));

      (function($base, $super) {
        function $UntilNode(){};
        var self = $UntilNode = $klass($base, $super, 'UntilNode', $UntilNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("until");

        Opal.defn(self, '$while_open', function() {
          var self = this;

          return "while (!(";
        });

        return (Opal.defn(self, '$while_close', function() {
          var self = this;

          return ")) {";
        }), nil) && 'while_close';
      })($scope.base, $scope.get('WhileNode'));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/for"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$with_temp', '$==', '$type', '$args_sexp', '$s', '$<<', '$body_sexp', '$first', '$insert', '$each', '$[]', '$===', '$add_local', '$value', '$push', '$expr']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ForNode(){};
        var self = $ForNode = $klass($base, $super, 'ForNode', $ForNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("for");

        self.$children("value", "args_sexp", "body_sexp");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_1 = function(loop_var){var self = TMP_1.$$s || this, $a, $b, TMP_2, assign = nil, iter = nil, sexp = nil;
if (loop_var == null) loop_var = nil;
          if (self.$args_sexp().$type()['$==']("array")) {
              assign = self.$s("masgn", self.$args_sexp());
              assign['$<<'](self.$s("to_ary", self.$s("js_tmp", loop_var)));
              } else {
              assign = self.$args_sexp()['$<<'](self.$s("js_tmp", loop_var))
            };
            if ((($a = self.$body_sexp()) !== nil && (!$a.$$is_boolean || $a == true))) {
              if (self.$body_sexp().$first()['$==']("block")) {
                self.$body_sexp().$insert(1, assign);
                assign = self.$body_sexp();
                } else {
                assign = self.$s("block", assign, self.$body_sexp())
              }};
            ($a = ($b = assign.$children()).$each, $a.$$p = (TMP_2 = function(sexp){var self = TMP_2.$$s || this, $a, $b, TMP_3, $case = nil;
if (sexp == null) sexp = nil;
            return (function() {$case = sexp['$[]'](0);if ("lasgn"['$===']($case)) {return self.$add_local(sexp['$[]'](1))}else if ("masgn"['$===']($case)) {if (sexp['$[]'](1)['$[]'](0)['$==']("array")) {
                return ($a = ($b = sexp['$[]'](1)['$[]'](1)).$each, $a.$$p = (TMP_3 = function(sexp){var self = TMP_3.$$s || this;
if (sexp == null) sexp = nil;
                if (sexp['$[]'](0)['$==']("lasgn")) {
                    return self.$add_local(sexp['$[]'](1))
                    } else {
                    return nil
                  }}, TMP_3.$$s = self, TMP_3), $a).call($b)
                } else {
                return nil
              }}else { return nil }})()}, TMP_2.$$s = self, TMP_2), $a).call($b);
            iter = self.$s("iter", self.$s("lasgn", loop_var), assign);
            sexp = self.$s("call", self.$value(), "each", self.$s("arglist"), iter);
            return self.$push(self.$expr(sexp));}, TMP_1.$$s = self, TMP_1), $a).call($b);
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/hash"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$handle', '$each_with_index', '$even?', '$<<', '$children', '$all?', '$include?', '$type', '$keys_and_values', '$simple_keys?', '$compile_hash2', '$compile_hash', '$helper', '$==', '$push', '$expr', '$wrap', '$times', '$inspect', '$to_s', '$[]', '$[]=', '$size', '$join']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $HashNode(){};
        var self = $HashNode = $klass($base, $super, 'HashNode', $HashNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("hash");

        Opal.defn(self, '$keys_and_values', function() {
          var $a, $b, TMP_1, self = this, keys = nil, values = nil;

          $a = [[], []], keys = $a[0], values = $a[1], $a;
          ($a = ($b = self.$children()).$each_with_index, $a.$$p = (TMP_1 = function(obj, idx){var self = TMP_1.$$s || this, $a;
if (obj == null) obj = nil;if (idx == null) idx = nil;
          if ((($a = idx['$even?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return keys['$<<'](obj)
              } else {
              return values['$<<'](obj)
            }}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return [keys, values];
        });

        Opal.defn(self, '$simple_keys?', function(keys) {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = keys)['$all?'], $a.$$p = (TMP_2 = function(key){var self = TMP_2.$$s || this;
if (key == null) key = nil;
          return ["sym", "str"]['$include?'](key.$type())}, TMP_2.$$s = self, TMP_2), $a).call($b);
        });

        Opal.defn(self, '$compile', function() {
          var $a, $b, self = this, keys = nil, values = nil;

          $b = self.$keys_and_values(), $a = Opal.to_ary($b), keys = ($a[0] == null ? nil : $a[0]), values = ($a[1] == null ? nil : $a[1]), $b;
          if ((($a = self['$simple_keys?'](keys)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$compile_hash2(keys, values)
            } else {
            return self.$compile_hash()
          };
        });

        Opal.defn(self, '$compile_hash', function() {
          var $a, $b, TMP_3, self = this;

          self.$helper("hash");
          ($a = ($b = self.$children()).$each_with_index, $a.$$p = (TMP_3 = function(child, idx){var self = TMP_3.$$s || this;
if (child == null) child = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(", ")
            };
            return self.$push(self.$expr(child));}, TMP_3.$$s = self, TMP_3), $a).call($b);
          return self.$wrap("$hash(", ")");
        });

        return (Opal.defn(self, '$compile_hash2', function(keys, values) {
          var $a, $b, TMP_4, $c, TMP_5, self = this, hash_obj = nil, hash_keys = nil;

          $a = [$hash2([], {}), []], hash_obj = $a[0], hash_keys = $a[1], $a;
          self.$helper("hash2");
          ($a = ($b = keys.$size()).$times, $a.$$p = (TMP_4 = function(idx){var self = TMP_4.$$s || this, $a, key = nil;
if (idx == null) idx = nil;
          key = keys['$[]'](idx)['$[]'](1).$to_s().$inspect();
            if ((($a = hash_obj['$include?'](key)) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              hash_keys['$<<'](key)
            };
            return hash_obj['$[]='](key, self.$expr(values['$[]'](idx)));}, TMP_4.$$s = self, TMP_4), $a).call($b);
          ($a = ($c = hash_keys).$each_with_index, $a.$$p = (TMP_5 = function(key, idx){var self = TMP_5.$$s || this;
if (key == null) key = nil;if (idx == null) idx = nil;
          if (idx['$=='](0)) {
              } else {
              self.$push(", ")
            };
            self.$push("" + (key) + ": ");
            return self.$push(hash_obj['$[]'](key));}, TMP_5.$$s = self, TMP_5), $a).call($c);
          return self.$wrap("$hash2([" + (hash_keys.$join(", ")) + "], {", "})");
        }), nil) && 'compile_hash2';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/array"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$empty?', '$children', '$push', '$each', '$==', '$type', '$expr', '$<<', '$fragment']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ArrayNode(){};
        var self = $ArrayNode = $klass($base, $super, 'ArrayNode', $ArrayNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("array");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, self = this, code = nil, work = nil, join = nil;

          if ((($a = self.$children()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("[]")};
          $a = [[], []], code = $a[0], work = $a[1], $a;
          ($a = ($b = self.$children()).$each, $a.$$p = (TMP_1 = function(child){var self = TMP_1.$$s || this, $a, splat = nil, part = nil;
if (child == null) child = nil;
          splat = child.$type()['$==']("splat");
            part = self.$expr(child);
            if (splat !== false && splat !== nil) {
              if ((($a = work['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                if ((($a = code['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                  code['$<<'](self.$fragment("[].concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                  } else {
                  code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"))
                }
                } else {
                if ((($a = code['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                  code['$<<'](self.$fragment("["))['$<<'](work)['$<<'](self.$fragment("]"))
                  } else {
                  code['$<<'](self.$fragment(".concat(["))['$<<'](work)['$<<'](self.$fragment("])"))
                };
                code['$<<'](self.$fragment(".concat("))['$<<'](part)['$<<'](self.$fragment(")"));
              };
              return work = [];
              } else {
              if ((($a = work['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                work['$<<'](self.$fragment(", "))
              };
              return work['$<<'](part);
            };}, TMP_1.$$s = self, TMP_1), $a).call($b);
          if ((($a = work['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            join = [self.$fragment("["), work, self.$fragment("]")];
            if ((($a = code['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              code = join
              } else {
              code.$push([self.$fragment(".concat("), join, self.$fragment(")")])
            };
          };
          return self.$push(code);
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/defined"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$handle', '$children', '$type', '$value', '$===', '$push', '$inspect', '$to_s', '$expr', '$s', '$[]', '$respond_to?', '$__send__', '$mid_to_jsid', '$with_temp', '$handle_block_given_call', '$compiler', '$wrap', '$include?']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $DefinedNode(){};
        var self = $DefinedNode = $klass($base, $super, 'DefinedNode', $DefinedNode);

        var def = self.$$proto, $scope = self.$$scope;

        def.sexp = nil;
        self.$handle("defined");

        self.$children("value");

        Opal.defn(self, '$compile', function() {
          var $a, self = this, type = nil, $case = nil;

          type = self.$value().$type();
          return (function() {$case = type;if ("self"['$===']($case) || "nil"['$===']($case) || "false"['$===']($case) || "true"['$===']($case)) {return self.$push(type.$to_s().$inspect())}else if ("lasgn"['$===']($case) || "iasgn"['$===']($case) || "gasgn"['$===']($case) || "cvdecl"['$===']($case) || "masgn"['$===']($case) || "op_asgn_or"['$===']($case) || "op_asgn_and"['$===']($case)) {return self.$push("'assignment'")}else if ("paren"['$===']($case) || "not"['$===']($case)) {return self.$push(self.$expr(self.$s("defined", self.$value()['$[]'](1))))}else if ("lvar"['$===']($case)) {return self.$push("'local-variable'")}else {if ((($a = self['$respond_to?']("compile_" + (type))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$__send__("compile_" + (type))
            } else {
            return self.$push("'expression'")
          }}})();
        });

        Opal.defn(self, '$compile_call', function() {
          var $a, $b, TMP_1, self = this, mid = nil, recv = nil;

          mid = self.$mid_to_jsid(self.$value()['$[]'](2).$to_s());
          recv = (function() {if ((($a = self.$value()['$[]'](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$expr(self.$value()['$[]'](1))
            } else {
            return "self"
          }; return nil; })();
          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_1 = function(tmp){var self = TMP_1.$$s || this;
if (tmp == null) tmp = nil;
          self.$push("(((" + (tmp) + " = ", recv, "" + (mid) + ") && !" + (tmp) + ".$$stub) || ", recv);
            return self.$push("['$respond_to_missing?']('" + (self.$value()['$[]'](2).$to_s()) + "') ? 'method' : nil)");}, TMP_1.$$s = self, TMP_1), $a).call($b);
        });

        Opal.defn(self, '$compile_ivar', function() {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_2 = function(tmp){var self = TMP_2.$$s || this, name = nil;
if (tmp == null) tmp = nil;
          name = self.$value()['$[]'](1).$to_s()['$[]']($range(1, -1, false));
            self.$push("((" + (tmp) + " = self['" + (name) + "'], " + (tmp) + " != null && " + (tmp) + " !== nil) ? ");
            return self.$push("'instance-variable' : nil)");}, TMP_2.$$s = self, TMP_2), $a).call($b);
        });

        Opal.defn(self, '$compile_super', function() {
          var self = this;

          return self.$push(self.$expr(self.$s("defined_super", self.$value())));
        });

        Opal.defn(self, '$compile_yield', function() {
          var self = this;

          self.$push(self.$compiler().$handle_block_given_call(self.sexp));
          return self.$wrap("((", ") != null ? \"yield\" : nil)");
        });

        Opal.defn(self, '$compile_xstr', function() {
          var self = this;

          self.$push(self.$expr(self.$value()));
          return self.$wrap("(typeof(", ") !== \"undefined\")");
        });

        Opal.alias(self, 'compile_dxstr', 'compile_xstr');

        Opal.defn(self, '$compile_const', function() {
          var self = this;

          return self.$push("($scope." + (self.$value()['$[]'](1)) + " != null)");
        });

        Opal.defn(self, '$compile_colon2', function() {
          var self = this;

          self.$push("(function(){ try { return ((");
          self.$push(self.$expr(self.$value()));
          self.$push(") != null ? 'constant' : nil); } catch (err) { if (err.$$class");
          return self.$push(" === Opal.NameError) { return nil; } else { throw(err); }}; })()");
        });

        Opal.defn(self, '$compile_colon3', function() {
          var self = this;

          return self.$push("(Opal.Object.$$scope." + (self.$value()['$[]'](1)) + " == null ? nil : 'constant')");
        });

        Opal.defn(self, '$compile_cvar', function() {
          var self = this;

          return self.$push("(Opal.cvars['" + (self.$value()['$[]'](1)) + "'] != null ? 'class variable' : nil)");
        });

        Opal.defn(self, '$compile_gvar', function() {
          var $a, $b, TMP_3, self = this, name = nil;

          name = self.$value()['$[]'](1).$to_s()['$[]']($range(1, -1, false));
          if ((($a = ["~", "!"]['$include?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$push("'global-variable'")
          } else if ((($a = ["`", "'", "+", "&"]['$include?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self).$with_temp, $a.$$p = (TMP_3 = function(tmp){var self = TMP_3.$$s || this;
if (tmp == null) tmp = nil;
            self.$push("((" + (tmp) + " = $gvars['~'], " + (tmp) + " != null && " + (tmp) + " !== nil) ? ");
              return self.$push("'global-variable' : nil)");}, TMP_3.$$s = self, TMP_3), $a).call($b)
            } else {
            return self.$push("($gvars[" + (name.$inspect()) + "] != null ? 'global-variable' : nil)")
          };
        });

        return (Opal.defn(self, '$compile_nth_ref', function() {
          var $a, $b, TMP_4, self = this;

          return ($a = ($b = self).$with_temp, $a.$$p = (TMP_4 = function(tmp){var self = TMP_4.$$s || this;
if (tmp == null) tmp = nil;
          self.$push("((" + (tmp) + " = $gvars['~'], " + (tmp) + " != null && " + (tmp) + " != nil) ? ");
            return self.$push("'global-variable' : nil)");}, TMP_4.$$s = self, TMP_4), $a).call($b);
        }), nil) && 'compile_nth_ref';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/masgn"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$children', '$new_temp', '$scope', '$==', '$type', '$rhs', '$push', '$expr', '$compile_masgn', '$lhs', '$-', '$size', '$[]', '$queue_temp', '$raise', '$take_while', '$!=', '$drop', '$each_with_index', '$compile_assignment', '$empty?', '$shift', '$<<', '$dup', '$s', '$!', '$>=', '$include?', '$[]=', '$to_sym', '$last']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $MassAssignNode(){};
        var self = $MassAssignNode = $klass($base, $super, 'MassAssignNode', $MassAssignNode);

        var def = self.$$proto, $scope = self.$$scope;

        Opal.cdecl($scope, 'SIMPLE_ASSIGNMENT', ["lasgn", "iasgn", "lvar", "gasgn"]);

        self.$handle("masgn");

        self.$children("lhs", "rhs");

        Opal.defn(self, '$compile', function() {
          var self = this, array = nil, retval = nil;

          array = self.$scope().$new_temp();
          if (self.$rhs().$type()['$==']("array")) {
            self.$push("" + (array) + " = ", self.$expr(self.$rhs()));
            self.$compile_masgn(self.$lhs().$children(), array, $rb_minus(self.$rhs().$size(), 1));
            self.$push(", " + (array));
          } else if (self.$rhs().$type()['$==']("to_ary")) {
            retval = self.$scope().$new_temp();
            self.$push("" + (retval) + " = ", self.$expr(self.$rhs()['$[]'](1)));
            self.$push(", " + (array) + " = Opal.to_ary(" + (retval) + ")");
            self.$compile_masgn(self.$lhs().$children(), array);
            self.$push(", " + (retval));
            self.$scope().$queue_temp(retval);
          } else if (self.$rhs().$type()['$==']("splat")) {
            self.$push("" + (array) + " = Opal.to_a(", self.$expr(self.$rhs()['$[]'](1)), ")");
            self.$compile_masgn(self.$lhs().$children(), array);
            self.$push(", " + (array));
            } else {
            self.$raise("unsupported mlhs type")
          };
          return self.$scope().$queue_temp(array);
        });

        Opal.defn(self, '$compile_masgn', function(lhs_items, array, len) {
          var $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, self = this, pre_splat = nil, post_splat = nil, splat = nil, part = nil, tmp = nil;

          if (len == null) {
            len = nil
          }
          pre_splat = ($a = ($b = lhs_items).$take_while, $a.$$p = (TMP_1 = function(child){var self = TMP_1.$$s || this;
if (child == null) child = nil;
          return child.$type()['$!=']("splat")}, TMP_1.$$s = self, TMP_1), $a).call($b);
          post_splat = lhs_items.$drop(pre_splat.$size());
          ($a = ($c = pre_splat).$each_with_index, $a.$$p = (TMP_2 = function(child, idx){var self = TMP_2.$$s || this;
if (child == null) child = nil;if (idx == null) idx = nil;
          return self.$compile_assignment(child, array, idx, len)}, TMP_2.$$s = self, TMP_2), $a).call($c);
          if ((($a = post_splat['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            splat = post_splat.$shift();
            if ((($a = post_splat['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = part = splat['$[]'](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
                part = part.$dup()['$<<'](self.$s("js_tmp", "$slice.call(" + (array) + ", " + (pre_splat.$size()) + ")"));
                self.$push(", ");
                return self.$push(self.$expr(part));
                } else {
                return nil
              }
              } else {
              tmp = self.$scope().$new_temp();
              self.$push(", " + (tmp) + " = " + (array) + ".length - " + (post_splat.$size()));
              self.$push(", " + (tmp) + " = (" + (tmp) + " < " + (pre_splat.$size()) + ") ? " + (pre_splat.$size()) + " : " + (tmp));
              if ((($a = part = splat['$[]'](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
                part = part.$dup()['$<<'](self.$s("js_tmp", "$slice.call(" + (array) + ", " + (pre_splat.$size()) + ", " + (tmp) + ")"));
                self.$push(", ");
                self.$push(self.$expr(part));};
              ($a = ($d = post_splat).$each_with_index, $a.$$p = (TMP_3 = function(child, idx){var self = TMP_3.$$s || this;
if (child == null) child = nil;if (idx == null) idx = nil;
              if (idx['$=='](0)) {
                  return self.$compile_assignment(child, array, tmp)
                  } else {
                  return self.$compile_assignment(child, array, "" + (tmp) + " + " + (idx))
                }}, TMP_3.$$s = self, TMP_3), $a).call($d);
              return self.$scope().$queue_temp(tmp);
            };
          };
        });

        return (Opal.defn(self, '$compile_assignment', function(child, array, idx, len) {
          var $a, $b, self = this, assign = nil, part = nil, tmp = nil;

          if (len == null) {
            len = nil
          }
          if ((($a = ((($b = len['$!']()) !== false && $b !== nil) ? $b : $rb_ge(idx, len))) !== nil && (!$a.$$is_boolean || $a == true))) {
            assign = self.$s("js_tmp", "(" + (array) + "[" + (idx) + "] == null ? nil : " + (array) + "[" + (idx) + "])")
            } else {
            assign = self.$s("js_tmp", "" + (array) + "[" + (idx) + "]")
          };
          part = child.$dup();
          if ((($a = $scope.get('SIMPLE_ASSIGNMENT')['$include?'](child.$type())) !== nil && (!$a.$$is_boolean || $a == true))) {
            part['$<<'](assign)
          } else if (child.$type()['$==']("call")) {
            part['$[]='](2, ((("") + (part['$[]'](2))) + "=").$to_sym());
            part.$last()['$<<'](assign);
          } else if (child.$type()['$==']("attrasgn")) {
            part.$last()['$<<'](assign)
          } else if (child.$type()['$==']("array")) {
            tmp = self.$scope().$new_temp();
            self.$push(", (" + (tmp) + " = Opal.to_ary(" + (assign['$[]'](1)) + ")");
            self.$compile_masgn(child.$children(), tmp);
            self.$push(")");
            self.$scope().$queue_temp(tmp);
            return nil;
            } else {
            self.$raise("Bad child node in masgn LHS: " + (child) + ". LHS: " + (self.$lhs()))
          };
          self.$push(", ");
          return self.$push(self.$expr(part));
        }), nil) && 'compile_assignment';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes/arglist"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$handle', '$each', '$==', '$first', '$expr', '$empty?', '$<<', '$fragment', '$children', '$push']);
  self.$require("opal/nodes/base");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Nodes, self = $Nodes = $module($base, 'Nodes');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $ArglistNode(){};
        var self = $ArglistNode = $klass($base, $super, 'ArglistNode', $ArglistNode);

        var def = self.$$proto, $scope = self.$$scope;

        self.$handle("arglist");

        return (Opal.defn(self, '$compile', function() {
          var $a, $b, TMP_1, self = this, code = nil, work = nil, join = nil;

          $a = [[], []], code = $a[0], work = $a[1], $a;
          ($a = ($b = self.$children()).$each, $a.$$p = (TMP_1 = function(current){var self = TMP_1.$$s || this, $a, splat = nil, arg = nil;
if (current == null) current = nil;
          splat = current.$first()['$==']("splat");
            arg = self.$expr(current);
            if (splat !== false && splat !== nil) {
              if ((($a = work['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                if ((($a = code['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                  code['$<<'](arg)
                  } else {
                  code['$<<'](self.$fragment(".concat("))['$<<'](arg)['$<<'](self.$fragment(")"))
                }
                } else {
                if ((($a = code['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                  code['$<<'](self.$fragment("["))['$<<'](work)['$<<'](self.$fragment("]"))
                  } else {
                  code['$<<'](self.$fragment(".concat(["))['$<<'](work)['$<<'](self.$fragment("])"))
                };
                code['$<<'](self.$fragment(".concat("))['$<<'](arg)['$<<'](self.$fragment(")"));
              };
              return work = [];
              } else {
              if ((($a = work['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                work['$<<'](self.$fragment(", "))
              };
              return work['$<<'](arg);
            };}, TMP_1.$$s = self, TMP_1), $a).call($b);
          if ((($a = work['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            join = work;
            if ((($a = code['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              code = join
              } else {
              code['$<<'](self.$fragment(".concat("))['$<<'](join)['$<<'](self.$fragment(")"))
            };
          };
          return ($a = self).$push.apply($a, Opal.to_a(code));
        }), nil) && 'compile';
      })($scope.base, $scope.get('Base'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/nodes"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("opal/nodes/base");
  self.$require("opal/nodes/literal");
  self.$require("opal/nodes/variables");
  self.$require("opal/nodes/constants");
  self.$require("opal/nodes/call");
  self.$require("opal/nodes/call_special");
  self.$require("opal/nodes/module");
  self.$require("opal/nodes/class");
  self.$require("opal/nodes/singleton_class");
  self.$require("opal/nodes/iter");
  self.$require("opal/nodes/def");
  self.$require("opal/nodes/if");
  self.$require("opal/nodes/logic");
  self.$require("opal/nodes/definitions");
  self.$require("opal/nodes/yield");
  self.$require("opal/nodes/rescue");
  self.$require("opal/nodes/case");
  self.$require("opal/nodes/super");
  self.$require("opal/nodes/top");
  self.$require("opal/nodes/while");
  self.$require("opal/nodes/for");
  self.$require("opal/nodes/hash");
  self.$require("opal/nodes/array");
  self.$require("opal/nodes/defined");
  self.$require("opal/nodes/masgn");
  return self.$require("opal/nodes/arglist");
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/compiler"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$compile', '$new', '$[]', '$define_method', '$fetch', '$!', '$include?', '$raise', '$+', '$inspect', '$compiler_option', '$attr_reader', '$attr_accessor', '$s', '$parse', '$file', '$eof_content', '$lexer', '$flatten', '$process', '$join', '$map', '$to_proc', '$message', '$class', '$backtrace', '$warn', '$<<', '$helpers', '$new_temp', '$queue_temp', '$push_while', '$pop_while', '$in_while?', '$==', '$fragment', '$handlers', '$type', '$compile_to_fragments', '$returns', '$===', '$pop', '$[]=', '$>', '$length', '$=~', '$tap', '$source=', '$source', '$uses_block!', '$block_name', '$find_parent_def']);
  self.$require("set");
  self.$require("opal/parser");
  self.$require("opal/fragment");
  self.$require("opal/nodes");
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$compile', function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      return $scope.get('Compiler').$new(source, options).$compile();
    });

    (function($base, $super) {
      function $Compiler(){};
      var self = $Compiler = $klass($base, $super, 'Compiler', $Compiler);

      var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6;

      def.parser = def.source = def.sexp = def.fragments = def.helpers = def.operator_helpers = def.method_calls = def.indent = def.unique = def.scope = def.case_stmt = def.handlers = def.requires = def.required_trees = nil;
      Opal.cdecl($scope, 'INDENT', "  ");

      Opal.cdecl($scope, 'COMPARE', ["<", ">", "<=", ">="]);

      Opal.defs(self, '$compiler_option', function(name, default_value, options) {
        var $a, $b, TMP_1, $c, self = this, mid = nil, valid_values = nil;

        if (options == null) {
          options = $hash2([], {})
        }
        mid = options['$[]']("as");
        valid_values = options['$[]']("valid_values");
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, value = nil;
          if (self.options == null) self.options = nil;

        value = ($a = ($b = self.options).$fetch, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return default_value}, TMP_2.$$s = self, TMP_2), $a).call($b, name);
          if ((($a = (($c = valid_values !== false && valid_values !== nil) ? (valid_values['$include?'](value))['$!']() : valid_values)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise($scope.get('ArgumentError'), $rb_plus("invalid value " + (value.$inspect()) + " for option " + (name.$inspect()) + " ", "(valid values: " + (valid_values.$inspect()) + ")"))};
          return value;}, TMP_1.$$s = self, TMP_1), $a).call($b, ((($c = mid) !== false && $c !== nil) ? $c : name));
      });

      self.$compiler_option("file", "(file)");

      self.$compiler_option("method_missing", true, $hash2(["as"], {"as": "method_missing?"}));

      self.$compiler_option("arity_check", false, $hash2(["as"], {"as": "arity_check?"}));

      self.$compiler_option("freezing", true, $hash2(["as"], {"as": "freezing?"}));

      self.$compiler_option("tainting", true, $hash2(["as"], {"as": "tainting?"}));

      self.$compiler_option("irb", false, $hash2(["as"], {"as": "irb?"}));

      self.$compiler_option("dynamic_require_severity", "error", $hash2(["valid_values"], {"valid_values": ["error", "warning", "ignore"]}));

      self.$compiler_option("requirable", false, $hash2(["as"], {"as": "requirable?"}));

      self.$compiler_option("inline_operators", true, $hash2(["as"], {"as": "inline_operators?"}));

      self.$compiler_option("eval", false, $hash2(["as"], {"as": "eval?"}));

      self.$attr_reader("result");

      self.$attr_reader("fragments");

      self.$attr_accessor("scope");

      self.$attr_reader("case_stmt");

      self.$attr_reader("eof_content");

      Opal.defn(self, '$initialize', function(source, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {})
        }
        self.source = source;
        self.indent = "";
        self.unique = 0;
        return self.options = options;
      });

      Opal.defn(self, '$compile', function() {
        var $a, $b, self = this, error = nil, message = nil;

        try {
        self.parser = $scope.get('Parser').$new();
          self.sexp = self.$s("top", ((($a = self.parser.$parse(self.source, self.$file())) !== false && $a !== nil) ? $a : self.$s("nil")));
          self.eof_content = self.parser.$lexer().$eof_content();
          self.fragments = self.$process(self.sexp).$flatten();
          return self.result = ($a = ($b = self.fragments).$map, $a.$$p = "code".$to_proc(), $a).call($b).$join("");
        } catch ($err) {if (true) {error = $err;
          try {
            message = "An error occurred while compiling: " + (self.$file()) + "\n" + (error.$message());
            return self.$raise(error.$class(), message, error.$backtrace());
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        };
      });

      Opal.defn(self, '$source_map', function(source_file) {
        var $a, self = this;

        if (source_file == null) {
          source_file = nil
        }
        return (($scope.get('Opal')).$$scope.get('SourceMap')).$new(self.fragments, ((($a = source_file) !== false && $a !== nil) ? $a : self.$file()));
      });

      Opal.defn(self, '$helpers', function() {
        var $a, self = this;

        return ((($a = self.helpers) !== false && $a !== nil) ? $a : self.helpers = $scope.get('Set').$new(["breaker", "slice"]));
      });

      Opal.defn(self, '$operator_helpers', function() {
        var $a, self = this;

        return ((($a = self.operator_helpers) !== false && $a !== nil) ? $a : self.operator_helpers = $scope.get('Set').$new());
      });

      Opal.defn(self, '$method_calls', function() {
        var $a, self = this;

        return ((($a = self.method_calls) !== false && $a !== nil) ? $a : self.method_calls = $scope.get('Set').$new());
      });

      Opal.defn(self, '$error', function(msg, line) {
        var self = this;

        if (line == null) {
          line = nil
        }
        return self.$raise($scope.get('SyntaxError'), "" + (msg) + " :" + (self.$file()) + ":" + (line));
      });

      Opal.defn(self, '$warning', function(msg, line) {
        var self = this;

        if (line == null) {
          line = nil
        }
        return self.$warn("WARNING: " + (msg) + " -- " + (self.$file()) + ":" + (line));
      });

      Opal.defn(self, '$parser_indent', function() {
        var self = this;

        return self.indent;
      });

      Opal.defn(self, '$s', function() {
        var self = this, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var parts = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          parts[$splat_index] = arguments[$splat_index + 0];
        }
        return $scope.get('Sexp').$new(parts);
      });

      Opal.defn(self, '$fragment', function(str, sexp) {
        var self = this;

        if (sexp == null) {
          sexp = nil
        }
        return $scope.get('Fragment').$new(str, sexp);
      });

      Opal.defn(self, '$unique_temp', function() {
        var self = this;

        return "TMP_" + (self.unique = $rb_plus(self.unique, 1));
      });

      Opal.defn(self, '$helper', function(name) {
        var self = this;

        return self.$helpers()['$<<'](name);
      });

      Opal.defn(self, '$indent', TMP_3 = function() {
        var $a, self = this, $iter = TMP_3.$$p, block = $iter || nil, indent = nil, res = nil;

        TMP_3.$$p = null;
        indent = self.indent;
        self.indent = $rb_plus(self.indent, $scope.get('INDENT'));
        self.space = "\n" + (self.indent);
        res = ((($a = Opal.yieldX(block, [])) === $breaker) ? $breaker.$v : $a);
        self.indent = indent;
        self.space = "\n" + (self.indent);
        return res;
      });

      Opal.defn(self, '$with_temp', TMP_4 = function() {
        var $a, self = this, $iter = TMP_4.$$p, block = $iter || nil, tmp = nil, res = nil;

        TMP_4.$$p = null;
        tmp = self.scope.$new_temp();
        res = ((($a = Opal.yield1(block, tmp)) === $breaker) ? $breaker.$v : $a);
        self.scope.$queue_temp(tmp);
        return res;
      });

      Opal.defn(self, '$in_while', TMP_5 = function() {
        var $a, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, result = nil;

        TMP_5.$$p = null;
        if (($yield !== nil)) {
          } else {
          return nil
        };
        self.while_loop = self.scope.$push_while();
        result = ((($a = Opal.yieldX($yield, [])) === $breaker) ? $breaker.$v : $a);
        self.scope.$pop_while();
        return result;
      });

      Opal.defn(self, '$in_case', TMP_6 = function() {
        var self = this, $iter = TMP_6.$$p, $yield = $iter || nil, old = nil;

        TMP_6.$$p = null;
        if (($yield !== nil)) {
          } else {
          return nil
        };
        old = self.case_stmt;
        self.case_stmt = $hash2([], {});
        if (Opal.yieldX($yield, []) === $breaker) return $breaker.$v;
        return self.case_stmt = old;
      });

      Opal.defn(self, '$in_while?', function() {
        var self = this;

        return self.scope['$in_while?']();
      });

      Opal.defn(self, '$process', function(sexp, level) {
        var $a, self = this, handler = nil;

        if (level == null) {
          level = "expr"
        }
        if (sexp['$=='](nil)) {
          return self.$fragment("")};
        if ((($a = handler = self.$handlers()['$[]'](sexp.$type())) !== nil && (!$a.$$is_boolean || $a == true))) {
          return handler.$new(sexp, level, self).$compile_to_fragments()
          } else {
          return self.$raise("Unsupported sexp: " + (sexp.$type()))
        };
      });

      Opal.defn(self, '$handlers', function() {
        var $a, self = this;

        return ((($a = self.handlers) !== false && $a !== nil) ? $a : self.handlers = (((($scope.get('Opal')).$$scope.get('Nodes'))).$$scope.get('Base')).$handlers());
      });

      Opal.defn(self, '$requires', function() {
        var $a, self = this;

        return ((($a = self.requires) !== false && $a !== nil) ? $a : self.requires = []);
      });

      Opal.defn(self, '$required_trees', function() {
        var $a, self = this;

        return ((($a = self.required_trees) !== false && $a !== nil) ? $a : self.required_trees = []);
      });

      Opal.defn(self, '$returns', function(sexp) {
        var $a, $b, TMP_7, self = this, $case = nil, last = nil;

        if (sexp !== false && sexp !== nil) {
          } else {
          return self.$returns(self.$s("nil"))
        };
        return (function() {$case = sexp.$type();if ("undef"['$===']($case)) {last = sexp.$pop();
        return sexp['$<<'](self.$returns(last));}else if ("break"['$===']($case) || "next"['$===']($case) || "redo"['$===']($case)) {return sexp}else if ("yield"['$===']($case)) {sexp['$[]='](0, "returnable_yield");
        return sexp;}else if ("scope"['$===']($case)) {sexp['$[]='](1, self.$returns(sexp['$[]'](1)));
        return sexp;}else if ("block"['$===']($case)) {if ((($a = $rb_gt(sexp.$length(), 1)) !== nil && (!$a.$$is_boolean || $a == true))) {
          sexp['$[]='](-1, self.$returns(sexp['$[]'](-1)))
          } else {
          sexp['$<<'](self.$returns(self.$s("nil")))
        };
        return sexp;}else if ("when"['$===']($case)) {sexp['$[]='](2, self.$returns(sexp['$[]'](2)));
        return sexp;}else if ("rescue"['$===']($case)) {sexp['$[]='](1, self.$returns(sexp['$[]'](1)));
        if ((($a = ($b = sexp['$[]'](2), $b !== false && $b !== nil ?sexp['$[]'](2)['$[]'](0)['$==']("resbody") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = sexp['$[]'](2)['$[]'](2)) !== nil && (!$a.$$is_boolean || $a == true))) {
            sexp['$[]'](2)['$[]='](2, self.$returns(sexp['$[]'](2)['$[]'](2)))
            } else {
            sexp['$[]'](2)['$[]='](2, self.$returns(self.$s("nil")))
          }};
        return sexp;}else if ("ensure"['$===']($case)) {sexp['$[]='](1, self.$returns(sexp['$[]'](1)));
        return sexp;}else if ("begin"['$===']($case)) {sexp['$[]='](1, self.$returns(sexp['$[]'](1)));
        return sexp;}else if ("rescue_mod"['$===']($case)) {sexp['$[]='](1, self.$returns(sexp['$[]'](1)));
        sexp['$[]='](2, self.$returns(sexp['$[]'](2)));
        return sexp;}else if ("while"['$===']($case)) {return sexp}else if ("return"['$===']($case) || "js_return"['$===']($case)) {return sexp}else if ("xstr"['$===']($case)) {if ((($a = /return|;/['$=~'](sexp['$[]'](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          sexp['$[]='](1, "return " + (sexp['$[]'](1)) + ";")
        };
        return sexp;}else if ("dxstr"['$===']($case)) {if ((($a = /return|;|\n/['$=~'](sexp['$[]'](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          sexp['$[]='](1, "return " + (sexp['$[]'](1)))
        };
        return sexp;}else if ("if"['$===']($case)) {sexp['$[]='](2, self.$returns(((($a = sexp['$[]'](2)) !== false && $a !== nil) ? $a : self.$s("nil"))));
        sexp['$[]='](3, self.$returns(((($a = sexp['$[]'](3)) !== false && $a !== nil) ? $a : self.$s("nil"))));
        return sexp;}else {return ($a = ($b = self.$s("js_return", sexp)).$tap, $a.$$p = (TMP_7 = function(s){var self = TMP_7.$$s || this, $a, $b;
if (s == null) s = nil;
        return (($a = [sexp.$source()]), $b = s, $b['$source='].apply($b, $a), $a[$a.length-1])}, TMP_7.$$s = self, TMP_7), $a).call($b)}})();
      });

      return (Opal.defn(self, '$handle_block_given_call', function(sexp) {
        var $a, $b, self = this, scope = nil;

        self.scope['$uses_block!']();
        if ((($a = self.scope.$block_name()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$fragment("(" + (self.scope.$block_name()) + " !== nil)", sexp)
        } else if ((($a = ($b = scope = self.scope.$find_parent_def(), $b !== false && $b !== nil ?scope.$block_name() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$fragment("(" + (scope.$block_name()) + " !== nil)", sexp)
          } else {
          return self.$fragment("false", sexp)
        };
      }), nil) && 'handle_block_given_call';
    })($scope.base, null);
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["native"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$is_a?', '$map', '$alias_method', '$to_a', '$_Array', '$include', '$method_missing', '$bind', '$instance_method', '$[]=', '$slice', '$-', '$length', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$exiting_mid', '$native_module']);
  (function($base) {
    var $Native, self = $Native = $module($base, 'Native');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defs(self, '$is_a?', function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    ;
    });

    Opal.defs(self, '$try_convert', function(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return nil;
      }
    ;
    });

    Opal.defs(self, '$convert', function(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($scope.get('ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    ;
    });

    Opal.defs(self, '$call', TMP_1 = function(obj, key) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 2;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 2];
      }
      TMP_1.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, length = args.length; i < length; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    });

    Opal.defs(self, '$proc', TMP_2 = function() {
      var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise($scope.get('LocalJumpError'), "no block given")
      };
      return ($a = ($b = $scope.get('Kernel')).$proc, $a.$$p = (TMP_3 = function(args){var self = TMP_3.$$s || this, $a, $b, TMP_4, instance = nil;
args = $slice.call(arguments, 0);
      ($a = ($b = args)['$map!'], $a.$$p = (TMP_4 = function(arg){var self = TMP_4.$$s || this;
if (arg == null) arg = nil;
        return self.$Native(arg)}, TMP_4.$$s = self, TMP_4), $a).call($b);
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, TMP_3.$$s = self, TMP_3), $a).call($b);
    });

    (function($base) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defn(self, '$alias_native', function(new$, old, $kwargs) {
        var $a, $b, TMP_5, $c, TMP_6, $d, TMP_7, self = this, as = nil;

        if (old == null) {
          old = new$
        }
        if (old == null) {
          $kwargs = $hash2([], {});
        }
        else if (old.$$is_hash) {
          $kwargs = old;
          old = new$;
        }
        else if ($kwargs == null) {
          $kwargs = $hash2([], {});
        }
        if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expecting keyword args');
        }
        if ((as = $kwargs.$$smap['as']) == null) {
          as = nil
        }
        if ((($a = old['$end_with?']("=")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_5 = function(value){var self = TMP_5.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          self["native"][old['$[]']($range(0, -2, false))] = $scope.get('Native').$convert(value);
            return value;}, TMP_5.$$s = self, TMP_5), $a).call($b, new$)
        } else if (as !== false && as !== nil) {
          return ($a = ($c = self).$define_method, $a.$$p = (TMP_6 = function(args){var self = TMP_6.$$s || this, block, $a, $b, $c, value = nil;
            if (self["native"] == null) self["native"] = nil;
args = $slice.call(arguments, 0);
            block = TMP_6.$$p || nil, TMP_6.$$p = null;
          if ((($a = value = ($b = ($c = $scope.get('Native')).$call, $b.$$p = block.$to_proc(), $b).apply($c, [self["native"], old].concat(Opal.to_a(args)))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_6.$$s = self, TMP_6), $a).call($c, new$)
          } else {
          return ($a = ($d = self).$define_method, $a.$$p = (TMP_7 = function(args){var self = TMP_7.$$s || this, block, $a, $b;
            if (self["native"] == null) self["native"] = nil;
args = $slice.call(arguments, 0);
            block = TMP_7.$$p || nil, TMP_7.$$p = null;
          return ($a = ($b = $scope.get('Native')).$call, $a.$$p = block.$to_proc(), $a).apply($b, [self["native"], old].concat(Opal.to_a(args)))}, TMP_7.$$s = self, TMP_7), $a).call($d, new$)
        };
      });

      Opal.defn(self, '$native_reader', function() {
        var $a, $b, TMP_8, self = this, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var names = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          names[$splat_index] = arguments[$splat_index + 0];
        }
        return ($a = ($b = names).$each, $a.$$p = (TMP_8 = function(name){var self = TMP_8.$$s || this, $a, $b, TMP_9;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_9.$$s = self, TMP_9), $a).call($b, name)}, TMP_8.$$s = self, TMP_8), $a).call($b);
      });

      Opal.defn(self, '$native_writer', function() {
        var $a, $b, TMP_10, self = this, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var names = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          names[$splat_index] = arguments[$splat_index + 0];
        }
        return ($a = ($b = names).$each, $a.$$p = (TMP_10 = function(name){var self = TMP_10.$$s || this, $a, $b, TMP_11;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_11 = function(value){var self = TMP_11.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_11.$$s = self, TMP_11), $a).call($b, "" + (name) + "=")}, TMP_10.$$s = self, TMP_10), $a).call($b);
      });

      Opal.defn(self, '$native_accessor', function() {
        var $a, $b, self = this, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var names = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          names[$splat_index] = arguments[$splat_index + 0];
        }
        ($a = self).$native_reader.apply($a, Opal.to_a(names));
        return ($b = self).$native_writer.apply($b, Opal.to_a(names));
      });
    })($scope.base);

    Opal.defs(self, '$included', function(klass) {
      var self = this;

      return klass.$extend($scope.get('Helpers'));
    });

    Opal.defn(self, '$initialize', function(native$) {
      var $a, self = this;

      if ((($a = $scope.get('Kernel')['$native?'](native$)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return self["native"] = native$;
    });

    Opal.defn(self, '$to_n', function() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"];
    });
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_14;

    Opal.defn(self, '$native?', function(value) {
      var self = this;

      return value == null || !value.$$class;
    });

    Opal.defn(self, '$Native', function(obj) {
      var $a, $b, TMP_12, $c, TMP_13, self = this;

      if ((($a = obj == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
      } else if ((($a = self['$native?'](obj)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Native')).$$scope.get('Object')).$new(obj)
      } else if ((($a = obj['$is_a?']($scope.get('Array'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = obj).$map, $a.$$p = (TMP_12 = function(o){var self = TMP_12.$$s || this;
if (o == null) o = nil;
        return self.$Native(o)}, TMP_12.$$s = self, TMP_12), $a).call($b)
      } else if ((($a = obj['$is_a?']($scope.get('Proc'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = self).$proc, $a.$$p = (TMP_13 = function(args){var self = TMP_13.$$s || this, block, $a, $b;
args = $slice.call(arguments, 0);
          block = TMP_13.$$p || nil, TMP_13.$$p = null;
        return self.$Native(($a = ($b = obj).$call, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args)))}, TMP_13.$$s = self, TMP_13), $a).call($c)
        } else {
        return obj
      };
    });

    self.$alias_method("_Array", "Array");

    Opal.defn(self, '$Array', TMP_14 = function(object) {
      var $a, $b, self = this, $iter = TMP_14.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      TMP_14.$$p = null;
      if ((($a = self['$native?'](object)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = block.$to_proc(), $a).apply($b, [object].concat(Opal.to_a(args))).$to_a()};
      return self.$_Array(object);
    });
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_15, TMP_16, TMP_17;

    def["native"] = nil;
    self.$include(Opal.get('Native'));

    Opal.defn(self, '$==', function(other) {
      var self = this;

      return self["native"] === $scope.get('Native').$try_convert(other);
    });

    Opal.defn(self, '$has_key?', function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name);
    });

    Opal.alias(self, 'key?', 'has_key?');

    Opal.alias(self, 'include?', 'has_key?');

    Opal.alias(self, 'member?', 'has_key?');

    Opal.defn(self, '$each', TMP_15 = function() {
      var $a, self = this, $iter = TMP_15.$$p, $yield = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_15.$$p = null;
      if (($yield !== nil)) {
        
        for (var key in self["native"]) {
          ((($a = Opal.yieldX($yield, [key, self["native"][key]])) === $breaker) ? $breaker.$v : $a)
        }
      ;
        return self;
        } else {
        return ($a = self).$method_missing.apply($a, ["each"].concat(Opal.to_a(args)))
      };
    });

    Opal.defn(self, '$[]', function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.get('Native').$call(self["native"], key)
      }
    ;
    });

    Opal.defn(self, '$[]=', function(key, value) {
      var $a, self = this, native$ = nil;

      native$ = $scope.get('Native').$try_convert(value);
      if ((($a = native$ === nil) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][key] = value;
        } else {
        return self["native"][key] = native$;
      };
    });

    Opal.defn(self, '$merge!', function(other) {
      var self = this;

      
      other = $scope.get('Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    });

    Opal.defn(self, '$respond_to?', function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false
      }
      return $scope.get('Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all);
    });

    Opal.defn(self, '$respond_to_missing?', function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false
      }
      return Opal.hasOwnProperty.call(self["native"], name);
    });

    Opal.defn(self, '$method_missing', TMP_16 = function(mid) {
      var $a, $b, self = this, $iter = TMP_16.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      TMP_16.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return self['$[]='](mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0));
      }
      else {
        return ($a = ($b = Opal.get('Native')).$call, $a.$$p = block.$to_proc(), $a).apply($b, [self["native"], mid].concat(Opal.to_a(args)));
      }
    ;
    });

    Opal.defn(self, '$nil?', function() {
      var self = this;

      return false;
    });

    Opal.defn(self, '$is_a?', function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    });

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$instance_of?', function(klass) {
      var self = this;

      return self.$$class === klass;
    });

    Opal.defn(self, '$class', function() {
      var self = this;

      return self.$$class;
    });

    Opal.defn(self, '$to_a', TMP_17 = function(options) {
      var $a, $b, self = this, $iter = TMP_17.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {})
      }
      TMP_17.$$p = null;
      return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], options).$to_a();
    });

    return (Opal.defn(self, '$inspect', function() {
      var self = this;

      return "#<Native:" + (String(self["native"])) + ">";
    }), nil) && 'inspect';
  })($scope.get('Native'), $scope.get('BasicObject'));
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_18, TMP_19;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    self.$include($scope.get('Native'));

    self.$include($scope.get('Enumerable'));

    Opal.defn(self, '$initialize', TMP_18 = function(native$, options) {
      var $a, self = this, $iter = TMP_18.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {})
      }
      TMP_18.$$p = null;
      Opal.find_super_dispatcher(self, 'initialize', TMP_18, null).apply(self, [native$]);
      self.get = ((($a = options['$[]']("get")) !== false && $a !== nil) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ((($a = options['$[]']("set")) !== false && $a !== nil) ? $a : options['$[]']("access"));
      self.length = ((($a = options['$[]']("length")) !== false && $a !== nil) ? $a : "length");
      self.block = block;
      if ((($a = self.$length() == null) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    });

    Opal.defn(self, '$each', TMP_19 = function() {
      var self = this, $iter = TMP_19.$$p, block = $iter || nil;

      TMP_19.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        var value = Opal.yield1(block, self['$[]'](i));

        if (value === $breaker) {
          return $breaker.$v;
        }
      }
    ;
      return self;
    });

    Opal.defn(self, '$[]', function(index) {
      var $a, self = this, result = nil, $case = nil;

      result = (function() {$case = index;if ($scope.get('String')['$===']($case) || $scope.get('Symbol')['$===']($case)) {if ((($a = self.named) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.named](index);
        } else {
        return self["native"][index];
      }}else if ($scope.get('Integer')['$===']($case)) {if ((($a = self.get) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.get](index);
        } else {
        return self["native"][index];
      }}else { return nil }})();
      if (result !== false && result !== nil) {
        if ((($a = self.block) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    });

    Opal.defn(self, '$[]=', function(index, value) {
      var $a, self = this;

      if ((($a = self.set) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.set](index, $scope.get('Native').$convert(value));
        } else {
        return self["native"][index] = $scope.get('Native').$convert(value);
      };
    });

    Opal.defn(self, '$last', function(count) {
      var $a, $b, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil
      }
      if (count !== false && count !== nil) {
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ((($b = $rb_ge(index, 0)) !== nil && (!$b.$$is_boolean || $b == true))) {
        result['$<<'](self['$[]'](index));
        index = $rb_minus(index, 1);};
        return result;
        } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      };
    });

    Opal.defn(self, '$length', function() {
      var self = this;

      return self["native"][self.length];
    });

    Opal.alias(self, 'to_ary', 'to_a');

    return (Opal.defn(self, '$inspect', function() {
      var self = this;

      return self.$to_a().$inspect();
    }), nil) && 'inspect';
  })($scope.get('Native'), null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_n', function() {
      var self = this;

      return self.valueOf();
    }), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_n', function() {
      var self = this;

      return self;
    }), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_n', function() {
      var self = this;

      return self.valueOf();
    }), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_n', function() {
      var self = this;

      return self.valueOf();
    }), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope;

    def.matches = nil;
    return (Opal.defn(self, '$to_n', function() {
      var self = this;

      return self.matches;
    }), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_n', function() {
      var $a, $b, TMP_20, self = this, result = nil;

      result = {};
      ($a = ($b = self).$each_pair, $a.$$p = (TMP_20 = function(name, value){var self = TMP_20.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = $scope.get('Native').$try_convert(value);}, TMP_20.$$s = self, TMP_20), $a).call($b);
      return result;
    }), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_n', function() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push($scope.get('Native').$try_convert(obj));
      }

      return result;
    
    }), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_n', function() {
      var self = this;

      return self.valueOf();
    }), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_n', function() {
      var self = this;

      return self;
    }), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_n', function() {
      var self = this;

      return null;
    }), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_21;

    self.$alias_method("_initialize", "initialize");

    Opal.defn(self, '$initialize', TMP_21 = function(defaults) {
      var $a, $b, self = this, $iter = TMP_21.$$p, block = $iter || nil;

      TMP_21.$$p = null;
      
      if (defaults != null && defaults.constructor === Object) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value && value.constructor === Object) {
            smap[key] = $scope.get('Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item && item.constructor === Object) {
                return $scope.get('Hash').$new(item);
              }

              return item;
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return ($a = ($b = self).$_initialize, $a.$$p = block.$to_proc(), $a).call($b, defaults);
    
    });

    return (Opal.defn(self, '$to_n', function() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = $scope.get('Native').$try_convert(value);
      }

      return result;
    
    }), nil) && 'to_n';
  })($scope.base, null);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$native_module', function() {
      var self = this;

      return Opal.global[self.$name()] = self;
    }), nil) && 'native_module'
  })($scope.base, null);
  (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$native_alias', function(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", self.$exiting_mid()));
      }
      self.$$proto[new_jsid] = aliased;
    ;
    });

    return (Opal.defn(self, '$native_class', function() {
      var self = this;

      self.$native_module();
      self["new"] = self.$new;
    }), nil) && 'native_class';
  })($scope.base, null);
  return $gvars.$ = $gvars.global = self.$Native(Opal.global);
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/utils"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$size', '$min', '$scan', '$gsub', '$proc', '$===', '$merge', '$to_proc', '$merge!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base) {
      var $Utils, self = $Utils = $module($base, 'Utils');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defs(self, '$heredoc', function(string) {
        var self = this, indent = nil;

        indent = (function() {try {return string.$scan(/^[ \t]*(?=\S)/).$min().$size() } catch ($err) { return 0 }})();
        return string.$gsub((new RegExp("^[ \\t]{" + indent + "}")), "");
      });

      Opal.defs(self, '$deep_merge', function(a, b) {
        var $a, $b, TMP_1, $c, self = this, merger = nil;

        merger = ($a = ($b = self).$proc, $a.$$p = (TMP_1 = function(key, v1, v2){var self = TMP_1.$$s || this, $a, $b;
if (key == null) key = nil;if (v1 == null) v1 = nil;if (v2 == null) v2 = nil;
        if ((($a = ($b = $scope.get('Hash')['$==='](v1), $b !== false && $b !== nil ?$scope.get('Hash')['$==='](v2) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = v1).$merge, $a.$$p = merger.$to_proc(), $a).call($b, v2)
            } else {
            return v2
          }}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return ($a = ($c = a).$merge, $a.$$p = merger.$to_proc(), $a).call($c, b);
      });

      Opal.defs(self, '$deep_merge!', function(a, b) {
        var $a, $b, TMP_2, $c, self = this, merger = nil;

        merger = ($a = ($b = self).$proc, $a.$$p = (TMP_2 = function(key, v1, v2){var self = TMP_2.$$s || this, $a, $b;
if (key == null) key = nil;if (v1 == null) v1 = nil;if (v2 == null) v2 = nil;
        if ((($a = ($b = $scope.get('Hash')['$==='](v1), $b !== false && $b !== nil ?$scope.get('Hash')['$==='](v2) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = v1)['$merge!'], $a.$$p = merger.$to_proc(), $a).call($b, v2);
            return v1;
            } else {
            return v2
          }}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return ($a = ($c = a)['$merge!'], $a.$$p = merger.$to_proc(), $a).call($c, b);
      });
    })($scope.base)
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/helpers"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$define_method', '$instance_exec', '$to_proc', '$do', '$defhelper', '$[]=']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        Opal.defs(self, '$defhelper', TMP_1 = function(name) {
          var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          TMP_1.$$p = null;
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(args){var self = TMP_2.$$s || this, body, $a, $b, $c;
args = $slice.call(arguments, 0);
            body = TMP_2.$$p || nil, TMP_2.$$p = null;
          ($a = ($b = self).$instance_exec, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
            if (body !== false && body !== nil) {
              ($a = ($c = self).$do, $a.$$p = body.$to_proc(), $a).call($c)};
            return self;}, TMP_2.$$s = self, TMP_2), $a).call($b, name);
        });

        return (Opal.defs(self, '$defhelper!', function(name, attribute) {
          var $a, $b, TMP_3, self = this;

          if (attribute == null) {
            attribute = name
          }
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;
            if (self.attributes == null) self.attributes = nil;

          return self.attributes['$[]='](attribute, true)}, TMP_3.$$s = self, TMP_3), $a).call($b, "" + (name) + "!");
        }), nil) && 'defhelper!';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/a"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s', '$defhelper!', '$<<']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $A(){};
          var self = $A = $klass($base, $super, 'A', $A);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_3;

          ($a = ($b = $hash2(["href", "url", "rel", "relative", "target", "type", "lang", "language", "media"], {"href": "href", "url": "href", "rel": "rel", "relative": "rel", "target": "target", "type": "type", "lang": "hreflang", "language": "hreflang", "media": "media"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b);

          self['$defhelper!']("download");

          self['$defhelper!']("ping");

          return ($a = ($c = self).$defhelper, $a.$$p = (TMP_3 = function(string){var self = TMP_3.$$s || this;
if (string == null) string = nil;
          return self['$<<'](string)}, TMP_3.$$s = self, TMP_3), $a).call($c, "text");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/base"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Base(){};
          var self = $Base = $klass($base, $super, 'Base', $Base);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["href", "url", "target"], {"href": "href", "url": "href", "target": "target"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/blockquote"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Blockquote(){};
          var self = $Blockquote = $klass($base, $super, 'Blockquote', $Blockquote);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_1 = function(value){var self = TMP_1.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          return self.attributes['$[]=']("cite", value.$to_s())}, TMP_1.$$s = self, TMP_1), $a).call($b, "cite")
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/button"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s', '$defhelper!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Button(){};
          var self = $Button = $klass($base, $super, 'Button', $Button);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          ($a = ($b = $hash2(["form", "name", "type", "value", "action", "encoding", "method", "target"], {"form": "form", "name": "name", "type": "type", "value": "value", "action": "formaction", "encoding": "formenctype", "method": "formmethod", "target": "formtarget"})).$each, $a.$$p = (TMP_1 = function(name, attributes){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;if (attributes == null) attributes = nil;
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b);

          self['$defhelper!']("autofocus");

          return self['$defhelper!']("disabled");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/canvas"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Canvas(){};
          var self = $Canvas = $klass($base, $super, 'Canvas', $Canvas);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["width", "height"], {"width": "width", "height": "height"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/embed"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Embed(){};
          var self = $Embed = $klass($base, $super, 'Embed', $Embed);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["type", "height", "width"], {"type": "type", "height": "height", "width": "width"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/img"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Img(){};
          var self = $Img = $klass($base, $super, 'Img', $Img);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_3;

          ($a = ($b = $hash2(["src", "url", "alt", "description", "height", "width", "map"], {"src": "src", "url": "src", "alt": "alt", "description": "alt", "height": "height", "width": "width", "map": "usemap"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b);

          return ($a = ($c = self).$defhelper, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;
            if (self.attributes == null) self.attributes = nil;

          return self.attributes['$[]=']("ismap", true)}, TMP_3.$$s = self, TMP_3), $a).call($c, "map!");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/input"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Input(){};
          var self = $Input = $klass($base, $super, 'Input', $Input);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["type", "name", "value", "size", "place_holder", "read_only", "required", "limit"], {"type": "type", "name": "name", "value": "value", "size": "size", "place_holder": "placeholder", "read_only": "readonly", "required": "required", "limit": "maxlength"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/link"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$to_s']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Link(){};
          var self = $Link = $klass($base, $super, 'Link', $Link);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["cross_origin", "href", "href_lang", "media", "rel", "sizes", "type"], {"cross_origin": "crossorigin", "href": "href", "href_lang": "hreflang", "media": "media", "rel": "rel", "sizes": "sizes", "type": "type"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value.$to_s())}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/object"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Object(){};
          var self = $Object = $klass($base, $super, 'Object', $Object);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          return ($a = ($b = $hash2(["type", "data", "name", "height", "width"], {"type": "type", "data": "data", "name": "name", "height": "height", "width": "width"})).$each, $a.$$p = (TMP_1 = function(name, attribute){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b)
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/option"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$defhelper!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Option(){};
          var self = $Option = $klass($base, $super, 'Option', $Option);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          ($a = ($b = ["label", "value"]).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b);

          self['$defhelper!']("disabled");

          return self['$defhelper!']("selected");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/optgroup"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$defhelper!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Optgroup(){};
          var self = $Optgroup = $klass($base, $super, 'Optgroup', $Optgroup);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          ($a = ($b = ["label", "value"]).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b);

          self['$defhelper!']("disabled");

          return self['$defhelper!']("selected");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/select"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$defhelper!']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Select(){};
          var self = $Select = $klass($base, $super, 'Select', $Select);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          ($a = ($b = ["form", "name", "size"]).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;
          return ($a = ($b = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            return self.attributes['$[]='](name, value)}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b);

          self['$defhelper!']("auto_focus", "autofocus");

          self['$defhelper!']("disabled");

          return self['$defhelper!']("required");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element/td"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$defhelper', '$[]=', '$to_s', '$join']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Td(){};
          var self = $Td = $klass($base, $super, 'Td', $Td);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3;

          ($a = ($b = self).$defhelper, $a.$$p = (TMP_1 = function(value){var self = TMP_1.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          return self.attributes['$[]=']("colspan", value.$to_s())}, TMP_1.$$s = self, TMP_1), $a).call($b, "columns");

          ($a = ($c = self).$defhelper, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          return self.attributes['$[]=']("rowspan", value.$to_s())}, TMP_2.$$s = self, TMP_2), $a).call($c, "rows");

          return ($a = ($d = self).$defhelper, $a.$$p = (TMP_3 = function(args){var self = TMP_3.$$s || this;
            if (self.attributes == null) self.attributes = nil;
args = $slice.call(arguments, 0);
          return self.attributes['$[]=']("headers", args.$join(" "))}, TMP_3.$$s = self, TMP_3), $a).call($d, "headers");
        })($scope.base, self)
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html/element"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$==', '$capitalize', '$const_defined?', '$new', '$const_get', '$each', '$to_proc', '$<<', '$end_with?', '$to_s', '$[]=', '$[]', '$===', '$has_key?', '$unshift', '$|', '$split', '$delete', '$to_a', '$deep_merge!', '$>>', '$extend!', '$pop', '$join', '$heredoc', '$defhelper', '$map', '$empty?', '$upcase', '$inspect']);
  self.$require("paggio/html/element/a");
  self.$require("paggio/html/element/base");
  self.$require("paggio/html/element/blockquote");
  self.$require("paggio/html/element/button");
  self.$require("paggio/html/element/canvas");
  self.$require("paggio/html/element/embed");
  self.$require("paggio/html/element/img");
  self.$require("paggio/html/element/input");
  self.$require("paggio/html/element/link");
  self.$require("paggio/html/element/object");
  self.$require("paggio/html/element/option");
  self.$require("paggio/html/element/optgroup");
  self.$require("paggio/html/element/select");
  self.$require("paggio/html/element/td");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, $a, $b, TMP_5, $c, TMP_7;

        def.children = def.attributes = def.class_names = def.owner = def.name = nil;
        Opal.defs(self, '$new', TMP_1 = function(owner, name, attributes) {
          var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, const$ = nil, $zuper = nil, $zuper_index = nil;

          if (attributes == null) {
            attributes = $hash2([], {})
          }
          TMP_1.$$p = null;
          $zuper = [];
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if (self['$==']($scope.get('Element'))) {
            } else {
            return Opal.find_super_dispatcher(self, 'new', TMP_1, $iter, $Element).apply(self, $zuper)
          };
          const$ = name.$capitalize();
          if ((($a = self['$const_defined?'](const$)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$const_get(const$).$new(owner, name, attributes)
            } else {
            return Opal.find_super_dispatcher(self, 'new', TMP_1, $iter, $Element).apply(self, $zuper)
          };
        });

        Opal.defn(self, '$initialize', function(owner, name, attributes) {
          var self = this;

          if (attributes == null) {
            attributes = $hash2([], {})
          }
          self.owner = owner;
          self.name = name;
          self.attributes = attributes;
          self.children = [];
          return self.class_names = [];
        });

        Opal.defn(self, '$each', TMP_2 = function() {
          var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

          TMP_2.$$p = null;
          return ($a = ($b = self.children).$each, $a.$$p = block.$to_proc(), $a).call($b);
        });

        Opal.defn(self, '$<<', function(what) {
          var self = this;

          self.children['$<<'](what);
          return self;
        });

        Opal.defn(self, '$method_missing', TMP_3 = function(name, content) {
          var $a, $b, $c, self = this, $iter = TMP_3.$$p, block = $iter || nil;

          if (content == null) {
            content = nil
          }
          TMP_3.$$p = null;
          if ((($a = name.$to_s()['$end_with?']("!")) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.attributes['$[]=']("id", name['$[]']($range(0, -2, false)))
            } else {
            self.class_names['$<<'](name)
          };
          if ((($a = Opal.get('Hash')['$==='](content)) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = ((($b = content['$has_key?']("class")) !== false && $b !== nil) ? $b : content['$has_key?']("classes"))) !== nil && (!$a.$$is_boolean || $a == true))) {
              ($a = self.class_names).$unshift.apply($a, Opal.to_a((content.$delete("class").$to_s().$split()['$|'](content.$delete("classes").$to_a()))))};
            ((Opal.get('Paggio')).$$scope.get('Utils'))['$deep_merge!'](self.attributes, content);
          } else if (content !== false && content !== nil) {
            self['$>>'](content)};
          if (block !== false && block !== nil) {
            ($b = ($c = self.owner)['$extend!'], $b.$$p = block.$to_proc(), $b).call($c, self)};
          return self;
        });

        Opal.defn(self, '$[]', function() {
          var $a, self = this, last = nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var names = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            names[$splat_index] = arguments[$splat_index + 0];
          }
          if ((($a = last = self.class_names.$pop()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.class_names['$<<']([last].concat(Opal.to_a(names)).$join("-"))};
          return self;
        });

        Opal.defn(self, '$do', TMP_4 = function() {
          var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          ($a = ($b = self.owner)['$extend!'], $a.$$p = block.$to_proc(), $a).call($b, self);
          return self;
        });

        Opal.defn(self, '$>>', function(content) {
          var self = this;

          self['$<<'](((Opal.get('Paggio')).$$scope.get('Utils')).$heredoc(content.$to_s()));
          return self;
        });

        ($a = ($b = self).$defhelper, $a.$$p = (TMP_5 = function(hash){var self = TMP_5.$$s || this, $a, $b, TMP_6;
          if (self.attributes == null) self.attributes = nil;
if (hash == null) hash = nil;
        return self.attributes['$[]=']("style", ($a = ($b = hash).$map, $a.$$p = (TMP_6 = function(name, value){var self = TMP_6.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          return "" + (name) + ": " + (value)}, TMP_6.$$s = self, TMP_6), $a).call($b).$join(";"))}, TMP_5.$$s = self, TMP_5), $a).call($b, "style");

        ($a = ($c = self).$defhelper, $a.$$p = (TMP_7 = function(hash){var self = TMP_7.$$s || this, $a, $b, TMP_8;
if (hash == null) hash = nil;
        return ($a = ($b = hash).$each, $a.$$p = (TMP_8 = function(name, value){var self = TMP_8.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (name == null) name = nil;if (value == null) value = nil;
          return self.attributes['$[]=']("data-" + (name), value.$to_s())}, TMP_8.$$s = self, TMP_8), $a).call($b)}, TMP_7.$$s = self, TMP_7), $a).call($c, "data");

        return (Opal.defn(self, '$inspect', function() {
          var $a, self = this;

          if ((($a = self.children['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return "#<HTML::Element(" + (self.name.$upcase()) + ")>"
            } else {
            return "#<HTML::Element(" + (self.name.$upcase()) + "): " + (self.children.$inspect()['$[]']($range(1, -2, false))) + ">"
          };
        }), nil) && 'inspect';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/html"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$attr_reader', '$raise', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$<<', '$first', '$===', '$instance_eval', '$each', '$end_with?', '$to_s', '$empty?', '$heredoc', '$shift', '$new', '$[]', '$inspect']);
  self.$require("paggio/html/helpers");
  self.$require("paggio/html/element");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5;

      def.current = def.roots = def.version = nil;
      self.$attr_reader("version");

      Opal.defn(self, '$initialize', TMP_1 = function(version) {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        if (version == null) {
          version = 5
        }
        TMP_1.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          Opal.get('Kernel').$raise(Opal.get('ArgumentError'), "no block given")
        };
        self.version = version;
        self.roots = [];
        self.current = nil;
        if (block.$arity()['$=='](0)) {
          return ($a = ($b = self).$instance_exec, $a.$$p = block.$to_proc(), $a).call($b)
          } else {
          return block.$call(self)
        };
      });

      Opal.defn(self, '$<<', function(what) {
        var $a, self = this;

        return (((($a = self.current) !== false && $a !== nil) ? $a : self.roots))['$<<'](what);
      });

      Opal.defn(self, '$root!', function() {
        var self = this;

        return self.roots.$first();
      });

      Opal.defn(self, '$roots!', function() {
        var self = this;

        return self.roots;
      });

      Opal.defn(self, '$element!', function() {
        var self = this;

        return self.current;
      });

      Opal.defn(self, '$extend!', TMP_2 = function(element) {
        var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil, old = nil, result = nil;

        if (element == null) {
          element = nil
        }
        TMP_2.$$p = null;
        $a = [self.current, element], old = $a[0], self.current = $a[1], $a;
        result = block.$call(self);
        if ((($a = Opal.get('String')['$==='](result)) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = self.current).$instance_eval, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.inner_html = result}, TMP_3.$$s = self, TMP_3), $a).call($b)};
        self.current = old;
        return self;
      });

      Opal.defn(self, '$each', TMP_4 = function() {
        var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

        TMP_4.$$p = null;
        return ($a = ($b = self.roots).$each, $a.$$p = block.$to_proc(), $a).call($b);
      });

      Opal.defn(self, '$method_missing', TMP_5 = function(name) {
        var $a, $b, $c, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil, content = nil, element = nil, parent = nil, result = nil, $splat_index = nil, $zuper = nil, $zuper_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        TMP_5.$$p = null;
        $zuper = [];
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if ((($a = name.$to_s()['$end_with?']("!")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return Opal.find_super_dispatcher(self, 'method_missing', TMP_5, $iter).apply(self, $zuper)};
        if ((($a = ((($b = args['$empty?']()) !== false && $b !== nil) ? $b : Opal.get('Hash')['$==='](args.$first()))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          content = ((Opal.get('Paggio')).$$scope.get('Utils')).$heredoc(args.$shift().$to_s())
        };
        element = ($a = $scope.get('Element')).$new.apply($a, [self, name].concat(Opal.to_a(args)));
        if (content !== false && content !== nil) {
          element['$<<'](content)};
        if (block !== false && block !== nil) {
          parent = self.current;
          self.current = element;
          result = block.$call(self);
          self.current = parent;
          if ((($b = Opal.get('String')['$==='](result)) !== nil && (!$b.$$is_boolean || $b == true))) {
            ($b = ($c = element).$instance_eval, $b.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.inner_html = result}, TMP_6.$$s = self, TMP_6), $b).call($c)};};
        self['$<<'](element);
        return element;
      });

      return (Opal.defn(self, '$inspect', function() {
        var $a, self = this;

        if ((($a = self.roots['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "#<HTML(" + (self.version) + ")>"
          } else {
          return "#<HTML(" + (self.version) + "): " + (self.roots.$inspect()['$[]']($range(1, -2, false))) + ">"
        };
      }), nil) && 'inspect';
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/css/unit"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var $a, $b, TMP_5, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$map', '$to_proc', '$attr_reader', '$===', '$respond_to?', '$raise', '$class', '$to_u', '$new', '$==', '$convert', '$type', '$number', '$hash', '$each', '$define_method', '$+', '$compatible?', '$-', '$*', '$/', '$to_i', '$to_f', '$private', '$include?', '$class_eval', '$old_percent', '$match', '$[]', '$__send__', '$downcase']);
  (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Unit(){};
        var self = $Unit = $klass($base, $super, 'Unit', $Unit);

        var def = self.$$proto, $scope = self.$$scope, $a, $b, $c, $d, TMP_1;

        def.type = def.number = nil;
        Opal.cdecl($scope, 'TYPES', ($a = ($b = ["em", "ex", "ch", "rem", "vh", "vw", "vmin", "vmax", "px", "mm", "cm", "in", "pt", "pc", "s", "deg"]).$map, $a.$$p = "to_sym".$to_proc(), $a).call($b));

        Opal.cdecl($scope, 'COMPATIBLE', ($a = ($c = ["in", "pt", "mm", "cm", "px", "pc"]).$map, $a.$$p = "to_sym".$to_proc(), $a).call($c));

        self.$attr_reader("type", "number");

        Opal.defn(self, '$initialize', function(number, type) {
          var self = this;

          self.number = number;
          return self.type = type;
        });

        Opal.defn(self, '$coerce', function(other) {
          var self = this;

          return [self, other];
        });

        Opal.defn(self, '$==', function(other) {
          var $a, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            if ((($a = other['$respond_to?']("to_u")) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise($scope.get('TypeError'), "no implicit conversion of " + (other.$class()) + " into Unit")
            };
            other = other.$to_u();
          };
          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            other = $scope.get('Unit').$new(other, self.type)
          };
          return self.number['$=='](self.$convert(other, self.type));
        });

        Opal.defn(self, '$===', function(other) {
          var $a, self = this;

          return (($a = self.type['$=='](other.$type())) ? self.number['$=='](other.$number()) : self.type['$=='](other.$type()));
        });

        Opal.alias(self, 'eql?', '==');

        Opal.defn(self, '$hash', function() {
          var self = this;

          return [self.number, self.type].$hash();
        });

        ($a = ($d = $scope.get('TYPES')).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return $scope.get('Unit').$new(self.$convert(self, name), name)}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($d);

        Opal.defn(self, '$+', function(other) {
          var $a, $b, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('Unit').$new($rb_plus(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $scope.get('Unit').$new($rb_plus(self.number, other.$number()), self.type)
          } else if ((($a = ($b = self['$compatible?'](self), $b !== false && $b !== nil ?self['$compatible?'](other) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Unit').$new($rb_plus(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise($scope.get('ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        });

        Opal.defn(self, '$-', function(other) {
          var $a, $b, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('Unit').$new($rb_minus(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $scope.get('Unit').$new($rb_minus(self.number, other.$number()), self.type)
          } else if ((($a = ($b = self['$compatible?'](self), $b !== false && $b !== nil ?self['$compatible?'](other) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Unit').$new($rb_minus(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise($scope.get('ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        });

        Opal.defn(self, '$*', function(other) {
          var $a, $b, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('Unit').$new($rb_times(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $scope.get('Unit').$new($rb_times(self.number, other.$number()), self.type)
          } else if ((($a = ($b = self['$compatible?'](self), $b !== false && $b !== nil ?self['$compatible?'](other) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Unit').$new($rb_times(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise($scope.get('ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        });

        Opal.defn(self, '$/', function(other) {
          var $a, $b, self = this;

          if ((($a = $scope.get('Unit')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('Unit').$new($rb_divide(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return $scope.get('Unit').$new($rb_divide(self.number, other.$number()), self.type)
          } else if ((($a = ($b = self['$compatible?'](self), $b !== false && $b !== nil ?self['$compatible?'](other) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Unit').$new($rb_divide(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise($scope.get('ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        });

        Opal.defn(self, '$-@', function() {
          var self = this;

          return $scope.get('Unit').$new($rb_times(self.number, -1), self.type);
        });

        Opal.defn(self, '$+@', function() {
          var self = this;

          return $scope.get('Unit').$new(self.number, self.type);
        });

        Opal.defn(self, '$to_i', function() {
          var self = this;

          return self.number.$to_i();
        });

        Opal.defn(self, '$to_f', function() {
          var self = this;

          return self.number.$to_f();
        });

        Opal.defn(self, '$to_u', function() {
          var self = this;

          return self;
        });

        Opal.defn(self, '$to_s', function() {
          var self = this;

          return "" + (self.number) + (self.type);
        });

        Opal.alias(self, 'to_str', 'to_s');

        Opal.alias(self, 'inspect', 'to_s');

        self.$private();

        Opal.defn(self, '$compatible?', function(unit) {
          var self = this;

          return $scope.get('COMPATIBLE')['$include?'](unit.$type());
        });

        return (Opal.defn(self, '$convert', function(unit, type) {
          var self = this, value = nil, px = nil, $case = nil;

          value = unit.$number();
          if (unit.$type()['$=='](type)) {
            return value};
          px = (function() {$case = unit.$type();if ("in"['$===']($case)) {return $rb_times(value, 96)}else if ("pt"['$===']($case)) {return $rb_divide($rb_times(value, 4.0), 3.0)}else if ("pc"['$===']($case)) {return $rb_divide($rb_times($rb_divide(value, 12), 4.0), 3.0)}else if ("mm"['$===']($case)) {return $rb_times(value, 3.77953)}else if ("cm"['$===']($case)) {return $rb_times($rb_times(value, 10), 3.77953)}else if ("px"['$===']($case)) {return value}else { return nil }})();
          return (function() {$case = type;if ("in"['$===']($case)) {return $rb_divide(px, 96.0)}else if ("pt"['$===']($case)) {return $rb_divide($rb_divide(px, 4.0), 3.0)}else if ("pc"['$===']($case)) {return $rb_divide($rb_divide($rb_times(px, 12), 4.0), 3.0)}else if ("mm"['$===']($case)) {return $rb_divide(px, 3.77953)}else if ("cm"['$===']($case)) {return $rb_divide($rb_divide(px, 10), 3.77953)}else if ("px"['$===']($case)) {return px}else { return nil }})();
        }), nil) && 'convert';
      })($scope.base, null)
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_3;

    ($a = ($b = (((((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Unit'))).$$scope.get('TYPES'))).$each, $a.$$p = (TMP_3 = function(name){var self = TMP_3.$$s || this, $a, $b, TMP_4;
if (name == null) name = nil;
    return ($a = ($b = self).$define_method, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

      return (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Unit')).$new(self, name)}, TMP_4.$$s = self, TMP_4), $a).call($b, name)}, TMP_3.$$s = self, TMP_3), $a).call($b);

    return (Opal.defn(self, '$to_u', function() {
      var self = this;

      return self;
    }), nil) && 'to_u';
  })($scope.base, null);
  ($a = ($b = [$scope.get('Fixnum'), $scope.get('Float')]).$each, $a.$$p = (TMP_5 = function(klass){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (klass == null) klass = nil;
  return ($a = ($b = klass).$class_eval, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

    Opal.alias(self, 'old_percent', '%');
      return (Opal.def(self, '$%', function(other) {
        var self = this;

        if (other == null) {
          other = nil
        }
        if (other !== false && other !== nil) {
          return self.$old_percent(other)
          } else {
          return (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Unit')).$new(self, "%")
        };
      }), nil) && '%';}, TMP_6.$$s = self, TMP_6), $a).call($b)}, TMP_5.$$s = self, TMP_5), $a).call($b);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_u', function() {
      var $a, self = this, matches = nil, value = nil, unit = nil;

      if ((($a = matches = self.$match(/^([\d+.]+)(.+)?$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
        value = matches['$[]'](1).$to_f();
        if ((($a = unit = matches['$[]'](2)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return value.$__send__(unit.$downcase())
          } else {
          return value
        };
        } else {
        return 0
      };
    }), nil) && 'to_u'
  })($scope.base, null);
  return (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_u', function() {
      var self = this;

      return 0;
    }), nil) && 'to_u'
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/css/color"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$each', '$define_method', '$new', '$map', '$to_proc']);
  (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Color(){};
        var self = $Color = $klass($base, $super, 'Color', $Color);

        var def = self.$$proto, $scope = self.$$scope;

        return (Opal.defn(self, '$initialize', function(value, type) {
          var self = this;

          self.internal = value;
          return self.type = type;
        }), nil) && 'initialize'
      })($scope.base, null)
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, $d;

    return ($a = ($b = ($c = ($d = ["rgb", "rgba", "hsl", "hsla"]).$map, $c.$$p = "to_sym".$to_proc(), $c).call($d)).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $b, TMP_2;
if (name == null) name = nil;
    return ($a = ($b = self).$define_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

      return (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Color')).$new(self, name)}, TMP_2.$$s = self, TMP_2), $a).call($b, name)}, TMP_1.$$s = self, TMP_1), $a).call($b)
  })($scope.base, null);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_3, $c, $d;

    return ($a = ($b = ($c = ($d = ["rgb", "rgba", "hsl", "hsla"]).$map, $c.$$p = "to_sym".$to_proc(), $c).call($d)).$each, $a.$$p = (TMP_3 = function(name){var self = TMP_3.$$s || this, $a, $b, TMP_4;
if (name == null) name = nil;
    return ($a = ($b = self).$define_method, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

      return (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Color')).$new(self, name)}, TMP_4.$$s = self, TMP_4), $a).call($b, name)}, TMP_3.$$s = self, TMP_3), $a).call($b)
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/css/definition"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$empty?', '$each', '$inspect', '$to_s', '$define_method', '$a', '$===', '$first', '$>', '$length', '$raise', '$style', '$name', '$value', '$[]', '$join', '$map', '$to_i', '$*', '$end_with?', '$__send__', '$<<', '$last', '$pop', '$!', '$other', '$shift', '$horizontal?', '$private']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Definition(){};
        var self = $Definition = $klass($base, $super, 'Definition', $Definition);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, $a, $b, TMP_3, $c, TMP_5, $d, TMP_7, TMP_19;

        def.style = def.important = nil;
        Opal.cdecl($scope, 'Style', Opal.get('Struct').$new("name", "value", "important"));

        Opal.defn(self, '$initialize', TMP_1 = function() {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          TMP_1.$$p = null;
          self.style = [];
          if (block !== false && block !== nil) {
            if (block.$arity()['$=='](0)) {
              return ($a = ($b = self).$instance_exec, $a.$$p = block.$to_proc(), $a).call($b)
              } else {
              return block.$call(self)
            }
            } else {
            return nil
          };
        });

        Opal.defn(self, '$empty?', function() {
          var self = this;

          return self.style['$empty?']();
        });

        Opal.defn(self, '$each', TMP_2 = function() {
          var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

          TMP_2.$$p = null;
          return ($a = ($b = self.style).$each, $a.$$p = block.$to_proc(), $a).call($b);
        });

        Opal.defn(self, '$gradient', function() {
          var $a, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          return ($a = $scope.get('Gradient')).$new.apply($a, Opal.to_a(args));
        });

        Opal.defn(self, '$url', function(value) {
          var self = this;

          return "url(" + (value.$to_s().$inspect()) + ")";
        });

        ($a = ($b = ["url", "blur", "brightness", "rotate", "contrast", "grayscale", "invert", "opacity", "saturate", "sepia"]).$each, $a.$$p = (TMP_3 = function(name){var self = TMP_3.$$s || this, $a, $b, TMP_4;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_4 = function(value){var self = TMP_4.$$s || this;
if (value == null) value = nil;
          return "" + (name) + "(" + (value) + ")"}, TMP_4.$$s = self, TMP_4), $a).call($b, name)}, TMP_3.$$s = self, TMP_3), $a).call($b);

        Opal.defn(self, '$rgb', function(r, g, b) {
          var self = this;

          return "rgb(" + (r) + ", " + (g) + ", " + (b) + ", " + (self.$a()) + ")";
        });

        Opal.defn(self, '$rgba', function(r, g, b, a) {
          var self = this;

          return "rgba(" + (r) + ", " + (g) + ", " + (b) + ", " + (a) + ")";
        });

        ($a = ($c = ["scale", "skew", "translate"]).$each, $a.$$p = (TMP_5 = function(name){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_6 = function(a, b){var self = TMP_6.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
          if (b !== false && b !== nil) {
              return "" + (name) + "(" + (a) + ", " + (b) + ")"
              } else {
              return "" + (name) + "(" + (a) + ")"
            }}, TMP_6.$$s = self, TMP_6), $a).call($b, name)}, TMP_5.$$s = self, TMP_5), $a).call($c);

        ($a = ($d = ["translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ", "skewX", "skewY", "scaleX", "scaleY"]).$each, $a.$$p = (TMP_7 = function(name){var self = TMP_7.$$s || this, $a, $b, TMP_8;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(value){var self = TMP_8.$$s || this;
if (value == null) value = nil;
          return "" + (name) + "(" + (value) + ")"}, TMP_8.$$s = self, TMP_8), $a).call($b, name)}, TMP_7.$$s = self, TMP_7), $a).call($d);

        Opal.defn(self, '$background', function() {
          var $a, $b, TMP_9, $c, TMP_10, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          if ((($a = $scope.get('Gradient')['$==='](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = $rb_gt(args.$length(), 1)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$raise($scope.get('NotImplementedError'), "multiple gradients not implemented yet")};
            return ($a = ($b = args.$first()).$each, $a.$$p = (TMP_9 = function(s){var self = TMP_9.$$s || this, $a;
if (s == null) s = nil;
            return self.$style(((($a = s.$name()) !== false && $a !== nil) ? $a : "background-image"), s.$value())}, TMP_9.$$s = self, TMP_9), $a).call($b);
          } else if ((($a = Opal.get('Hash')['$==='](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($c = args.$first()).$each, $a.$$p = (TMP_10 = function(sub, value){var self = TMP_10.$$s || this;
if (sub == null) sub = nil;if (value == null) value = nil;
            return self.$style("background-" + (sub), value)}, TMP_10.$$s = self, TMP_10), $a).call($c)
            } else {
            return self.$style("background", args)
          };
        });

        Opal.defn(self, '$border', function() {
          var $a, $b, TMP_11, self = this, options = nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          if ((($a = Opal.get('Hash')['$==='](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
            if (args.$length()['$=='](1)) {
              options = args.$first()};
            return ($a = ($b = options).$each, $a.$$p = (TMP_11 = function(name, value){var self = TMP_11.$$s || this, $a, $b, TMP_12, $c, TMP_13, $d, TMP_15, $case = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return (function() {$case = name;if ("top"['$===']($case) || "bottom"['$===']($case) || "left"['$===']($case) || "right"['$===']($case)) {if ((($a = Opal.get('Hash')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($b = value).$each, $a.$$p = (TMP_12 = function(n, v){var self = TMP_12.$$s || this;
if (n == null) n = nil;if (v == null) v = nil;
                return self.$style("border-" + (name) + "-" + (n), v)}, TMP_12.$$s = self, TMP_12), $a).call($b)
                } else {
                return self.$style("border-" + (name), value)
              }}else if ("radius"['$===']($case)) {if ((($a = Opal.get('Hash')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($c = value).$each, $a.$$p = (TMP_13 = function(horizontal, value){var self = TMP_13.$$s || this, $a, $b, TMP_14;
if (horizontal == null) horizontal = nil;if (value == null) value = nil;
                return ($a = ($b = value).$each, $a.$$p = (TMP_14 = function(vertical, value){var self = TMP_14.$$s || this;
if (vertical == null) vertical = nil;if (value == null) value = nil;
                  self.$style("-moz-border-radius-" + (horizontal) + (vertical), value);
                    self.$style("-webkit-border-" + (horizontal) + "-" + (vertical) + "-radius", value);
                    return self.$style("border-" + (horizontal) + "-" + (vertical) + "-radius", value);}, TMP_14.$$s = self, TMP_14), $a).call($b)}, TMP_13.$$s = self, TMP_13), $a).call($c)
                } else {
                self.$style("-moz-border-radius", value);
                self.$style("-webkit-border-radius", value);
                return self.$style("border-radius", value);
              }}else if ("color"['$===']($case)) {if ((($a = Opal.get('Hash')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($d = value).$each, $a.$$p = (TMP_15 = function(name, value){var self = TMP_15.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
                return self.$style("border-" + (name) + "-color", value)}, TMP_15.$$s = self, TMP_15), $a).call($d)
                } else {
                return self.$style("border-color", value)
              }}else {return self.$style("border-" + (name), value)}})()}, TMP_11.$$s = self, TMP_11), $a).call($b);
            } else {
            return self.$style("border", args)
          };
        });

        Opal.defn(self, '$box', function(options) {
          var $a, $b, TMP_16, self = this;

          if ((($a = Opal.get('Hash')['$==='](options)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = options).$each, $a.$$p = (TMP_16 = function(name, value){var self = TMP_16.$$s || this, $a, $b, TMP_17, $case = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return (function() {$case = name;if ("shadow"['$===']($case)) {if ((($a = Opal.get('Array')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
                if ((($a = Opal.get('Array')['$==='](value['$[]'](0))) !== nil && (!$a.$$is_boolean || $a == true))) {
                  value = ($a = ($b = value).$map, $a.$$p = (TMP_17 = function(v){var self = TMP_17.$$s || this;
if (v == null) v = nil;
                  return v.$join(" ")}, TMP_17.$$s = self, TMP_17), $a).call($b).$join(", ")
                  } else {
                  value = value.$join(" ")
                }};
              self.$style("-moz-box-shadow", value);
              self.$style("-webkit-box-shadow", value);
              return self.$style("box-shadow", value);}else {return self.$style("box-" + (name), value)}})()}, TMP_16.$$s = self, TMP_16), $a).call($b)
            } else {
            return self.$style("box", options)
          };
        });

        Opal.defn(self, '$opacity', function(value) {
          var self = this;

          self.$style("opacity", value);
          self.$style("-moz-opacity", value);
          self.$style("-ms-filter", "\"progid:DXImageTransform.Microsoft.Alpha(Opacity=" + (($rb_times(value, 100)).$to_i()) + ")\"");
          return self.$style("filter", "alpha(opacity=" + (($rb_times(value, 100)).$to_i()) + ")");
        });

        Opal.defn(self, '$animation', function() {
          var $a, $b, TMP_18, self = this, options = nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          if ((($a = $scope.get('Hash')['$==='](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
            if (args.$length()['$=='](1)) {
              options = args.$first()};
            return ($a = ($b = options).$each, $a.$$p = (TMP_18 = function(name, value){var self = TMP_18.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            self.$style("-webkit-animation-" + (name), value);
              return self.$style("animation-" + (name), value);}, TMP_18.$$s = self, TMP_18), $a).call($b);
            } else {
            self.$style("animation", args);
            return self.$style("-webkit-animation", args);
          };
        });

        Opal.defn(self, '$transition', function() {
          var self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          self.$style("transition", args);
          self.$style("-webkit-transition", args);
          return self.$style("-moz-transition", args);
        });

        Opal.defn(self, '$user_select', function() {
          var self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          self.$style("user-select", args);
          self.$style("-webkit-user-select", args);
          self.$style("-moz-user-select", args);
          return self.$style("-ms-user-select", args);
        });

        Opal.defn(self, '$transform', function() {
          var self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          self.$style("transform", args);
          self.$style("-webkit-transform", args);
          self.$style("-moz-transform", args);
          self.$style("-ms-transform", args);
          return self.$style("-o-transform", args);
        });

        Opal.defn(self, '$filter', function() {
          var self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          self.$style("filter", args);
          self.$style("-webkit-filter", args);
          self.$style("-moz-filter", args);
          self.$style("-ms-filter", args);
          return self.$style("-o-filter", args);
        });

        Opal.defn(self, '$method_missing', TMP_19 = function(name) {
          var $a, $b, $c, TMP_20, self = this, $iter = TMP_19.$$p, block = $iter || nil, argument = nil, $splat_index = nil;

          var array_size = arguments.length - 1;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 1];
          }
          TMP_19.$$p = null;
          name = name.$to_s();
          if ((($a = name['$end_with?']("!")) !== nil && (!$a.$$is_boolean || $a == true))) {
            name = name['$[]']($range(0, -2, false));
            self.important = true;
            ($a = ($b = self).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [name].concat(Opal.to_a(args)));
            self.important = false;
            return nil;};
          if (args.$length()['$=='](1)) {
            argument = args.$first();
            if ((($a = Opal.get('Hash')['$==='](argument)) !== nil && (!$a.$$is_boolean || $a == true))) {
              ($a = ($c = argument).$each, $a.$$p = (TMP_20 = function(sub, value){var self = TMP_20.$$s || this;
if (sub == null) sub = nil;if (value == null) value = nil;
              return self.$style("" + (name) + "-" + (sub), value)}, TMP_20.$$s = self, TMP_20), $a).call($c)
              } else {
              self.$style(name, argument)
            };
            } else {
            self.$style(name, args.$join(" "))
          };
          self.important = false;
          return self;
        });

        Opal.defn(self, '$style', function(name, value, important) {
          var $a, self = this;

          if (value == null) {
            value = nil
          }
          if (important == null) {
            important = self.important
          }
          if ((($a = Opal.get('Array')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
            value = value.$join(" ")};
          if ((($a = $scope.get('Style')['$==='](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.style['$<<'](name)
            } else {
            return self.style['$<<']($scope.get('Style').$new(name, value, important))
          };
        });

        Opal.defn(self, '$style!', function(name, value) {
          var self = this;

          if (value == null) {
            value = nil
          }
          return self.$style(name, value, true);
        });

        return (function($base, $super) {
          function $Gradient(){};
          var self = $Gradient = $klass($base, $super, 'Gradient', $Gradient);

          var def = self.$$proto, $scope = self.$$scope, TMP_21;

          def.to = def.from = def.start = def.end = nil;
          Opal.defn(self, '$initialize', function() {
            var $a, $b, self = this, options = nil, $splat_index = nil;

            var array_size = arguments.length - 0;
            if(array_size < 0) array_size = 0;
            var args = new Array(array_size);
            for($splat_index = 0; $splat_index < array_size; $splat_index++) {
              args[$splat_index] = arguments[$splat_index + 0];
            }
            options = (function() {if ((($a = Opal.get('Hash')['$==='](args.$last())) !== nil && (!$a.$$is_boolean || $a == true))) {
              return args.$pop()
              } else {
              return $hash2([], {})
            }; return nil; })();
            self.to = options['$[]']("to");
            self.from = options['$[]']("from");
            if ((($a = ($b = self.to, $b !== false && $b !== nil ?self.from['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.from = self.$other(self.to)
            } else if ((($a = ($b = self.from, $b !== false && $b !== nil ?self.to['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.to = self.$other(self.from)};
            self.start = args.$shift();
            return self.end = args.$shift();
          });

          Opal.defn(self, '$each', TMP_21 = function() {
            var $a, self = this, $iter = TMP_21.$$p, block = $iter || nil;

            TMP_21.$$p = null;
            block.$call(self.$style("-moz-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            if ((($a = self['$horizontal?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              block.$call(self.$style("-webkit-gradient(linear, " + (self.from) + " top, " + (self.to) + " top, color-stop(0%, " + (self.start) + "), color-stop(100%, " + (self.end) + "))"))
              } else {
              block.$call(self.$style("-webkit-gradient(linear, left " + (self.from) + ", left " + (self.to) + ", color-stop(0%, " + (self.start) + "), color-stop(100%, " + (self.end) + "))"))
            };
            block.$call(self.$style("-webkit-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            block.$call(self.$style("-o-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            block.$call(self.$style("-ms-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            return block.$call(self.$style("linear-gradient(to " + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
          });

          Opal.defn(self, '$horizontal?', function() {
            var $a, self = this;

            return ((($a = self.to['$==']("left")) !== false && $a !== nil) ? $a : self.to['$==']("right"));
          });

          Opal.defn(self, '$vertical?', function() {
            var $a, self = this;

            return ((($a = self.to['$==']("top")) !== false && $a !== nil) ? $a : self.to['$==']("bottom"));
          });

          self.$private();

          Opal.defn(self, '$other', function(side) {
            var self = this, $case = nil;

            return (function() {$case = side;if ("left"['$===']($case)) {return "right"}else if ("right"['$===']($case)) {return "left"}else if ("top"['$===']($case)) {return "bottom"}else if ("bottom"['$===']($case)) {return "top"}else { return nil }})();
          });

          return (Opal.defn(self, '$style', function() {
            var $a, self = this, $splat_index = nil;

            var array_size = arguments.length - 0;
            if(array_size < 0) array_size = 0;
            var args = new Array(array_size);
            for($splat_index = 0; $splat_index < array_size; $splat_index++) {
              args[$splat_index] = arguments[$splat_index + 0];
            }
            if (args.$length()['$=='](1)) {
              return $scope.get('Style').$new(nil, args.$first())
              } else {
              return ($a = $scope.get('Style')).$new.apply($a, Opal.to_a(args))
            };
          }), nil) && 'style';
        })($scope.base, null);
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/css/rule"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$new', '$__send__', '$to_proc']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.definition = nil;
        self.$attr_reader("selector", "media");

        Opal.defn(self, '$initialize', function(selector, media) {
          var self = this;

          self.selector = selector;
          self.media = media;
          return self.definition = $scope.get('Definition').$new();
        });

        return (Opal.defn(self, '$method_missing', TMP_1 = function() {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          TMP_1.$$p = null;
          return ($a = ($b = self.definition).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
        }), nil) && 'method_missing';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/css/font"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$new', '$font', '$__send__', '$to_proc']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Font(){};
        var self = $Font = $klass($base, $super, 'Font', $Font);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def.definition = nil;
        self.$attr_reader("name");

        Opal.defn(self, '$initialize', function(name) {
          var self = this;

          self.name = name;
          self.definition = $scope.get('Definition').$new();
          return self.$font($hash2(["family"], {"family": name}));
        });

        return (Opal.defn(self, '$method_missing', TMP_1 = function() {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          TMP_1.$$p = null;
          return ($a = ($b = self.definition).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
        }), nil) && 'method_missing';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/css/animation"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$new', '$__send__', '$to_proc', '$<<', '$call', '$%', '$last']);
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Animation(){};
        var self = $Animation = $klass($base, $super, 'Animation', $Animation);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

        def.steps = nil;
        (function($base, $super) {
          function $Step(){};
          var self = $Step = $klass($base, $super, 'Step', $Step);

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          def.definition = nil;
          self.$attr_reader("value");

          Opal.defn(self, '$initialize', function(value) {
            var self = this;

            self.value = value;
            return self.definition = $scope.get('Definition').$new();
          });

          return (Opal.defn(self, '$method_missing', TMP_1 = function() {
            var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

            var array_size = arguments.length - 0;
            if(array_size < 0) array_size = 0;
            var args = new Array(array_size);
            for($splat_index = 0; $splat_index < array_size; $splat_index++) {
              args[$splat_index] = arguments[$splat_index + 0];
            }
            TMP_1.$$p = null;
            return ($a = ($b = self.definition).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
          }), nil) && 'method_missing';
        })($scope.base, $scope.get('BasicObject'));

        self.$attr_reader("name", "steps");

        Opal.defn(self, '$initialize', function(name) {
          var self = this;

          self.name = name;
          return self.steps = [];
        });

        Opal.defn(self, '$step', TMP_2 = function(value) {
          var self = this, $iter = TMP_2.$$p, block = $iter || nil;

          TMP_2.$$p = null;
          self.steps['$<<']($scope.get('Step').$new(value));
          return block.$call();
        });

        Opal.defn(self, '$from', TMP_3 = function(value) {
          var self = this, $iter = TMP_3.$$p, block = $iter || nil;

          TMP_3.$$p = null;
          self.steps['$<<']($scope.get('Step').$new((0)['$%']()));
          return block.$call();
        });

        Opal.defn(self, '$to', TMP_4 = function(value) {
          var self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          self.steps['$<<']($scope.get('Step').$new((100)['$%']()));
          return block.$call();
        });

        return (Opal.defn(self, '$method_missing', TMP_5 = function() {
          var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          TMP_5.$$p = null;
          return ($a = ($b = self.steps.$last()).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
        }), nil) && 'method_missing';
      })($scope.base, $scope.get('BasicObject'))
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/css"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$each', '$start_with?', '$+', '$[]', '$==', '$attr_reader', '$raise', '$arity', '$instance_exec', '$to_proc', '$call', '$any?', '$include?', '$<<', '$new', '$selector', '$pop', '$method_missing', '$__send__', '$last']);
  self.$require("paggio/css/unit");
  self.$require("paggio/css/color");
  self.$require("paggio/css/definition");
  self.$require("paggio/css/rule");
  self.$require("paggio/css/font");
  self.$require("paggio/css/animation");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_6, TMP_7, TMP_8, TMP_9;

      def.media = def.current = def.fonts = def.animations = nil;
      Opal.defs(self, '$selector', function(list) {
        var $a, $b, TMP_1, self = this, result = nil;

        result = "";
        ($a = ($b = list).$each, $a.$$p = (TMP_1 = function(part){var self = TMP_1.$$s || this, $a;
if (part == null) part = nil;
        if ((($a = part['$start_with?']("&")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return result = $rb_plus(result, part['$[]']($range(1, -1, false)))
            } else {
            return result = $rb_plus(result, $rb_plus(" ", part))
          }}, TMP_1.$$s = self, TMP_1), $a).call($b);
        if (result['$[]'](0)['$=='](" ")) {
          return result['$[]']($range(1, -1, false))
          } else {
          return result
        };
      });

      self.$attr_reader("rules", "media", "fonts", "animations");

      Opal.defn(self, '$initialize', TMP_2 = function() {
        var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          Opal.get('Kernel').$raise(Opal.get('ArgumentError'), "no block given")
        };
        self.selector = [];
        self.current = [];
        self.rules = [];
        self.fonts = [];
        self.animations = [];
        if (block.$arity()['$=='](0)) {
          return ($a = ($b = self).$instance_exec, $a.$$p = block.$to_proc(), $a).call($b)
          } else {
          return block.$call(self)
        };
      });

      Opal.defn(self, '$rule', TMP_3 = function() {
        var $a, $b, $c, TMP_4, TMP_5, self = this, $iter = TMP_3.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var names = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          names[$splat_index] = arguments[$splat_index + 0];
        }
        TMP_3.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          return nil
        };
        if ((($a = ($b = ($c = names)['$any?'], $b.$$p = (TMP_4 = function(n){var self = TMP_4.$$s || this;
if (n == null) n = nil;
        return n['$include?'](",")}, TMP_4.$$s = self, TMP_4), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.get('Kernel').$raise(Opal.get('ArgumentError'), "selectors cannot contain commas")};
        return ($a = ($b = names).$each, $a.$$p = (TMP_5 = function(name){var self = TMP_5.$$s || this;
          if (self.selector == null) self.selector = nil;
          if (self.current == null) self.current = nil;
          if (self.media == null) self.media = nil;
          if (self.rules == null) self.rules = nil;
if (name == null) name = nil;
        self.selector['$<<'](name);
          self.current['$<<']($scope.get('Rule').$new($scope.get('CSS').$selector(self.selector), self.media));
          block.$call();
          self.selector.$pop();
          return self.rules['$<<'](self.current.$pop());}, TMP_5.$$s = self, TMP_5), $a).call($b);
      });

      Opal.defn(self, '$media', TMP_6 = function(query) {
        var $a, self = this, $iter = TMP_6.$$p, block = $iter || nil, old = nil, $splat_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        TMP_6.$$p = null;
        if (block !== false && block !== nil) {
          $a = [self.media, query], old = $a[0], self.media = $a[1], $a;
          block.$call();
          return self.media = old;
          } else {
          return ($a = self).$method_missing.apply($a, ["media", query].concat(Opal.to_a(args)))
        };
      });

      Opal.defn(self, '$font', TMP_7 = function(name) {
        var $a, self = this, $iter = TMP_7.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        TMP_7.$$p = null;
        if (block !== false && block !== nil) {
          self.current['$<<']($scope.get('Font').$new(name));
          block.$call();
          return self.fonts['$<<'](self.current.$pop());
          } else {
          return ($a = self).$method_missing.apply($a, ["font", name].concat(Opal.to_a(args)))
        };
      });

      Opal.defn(self, '$animation', TMP_8 = function(name) {
        var $a, self = this, $iter = TMP_8.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        TMP_8.$$p = null;
        if (block !== false && block !== nil) {
          self.current['$<<']($scope.get('Animation').$new(name));
          block.$call();
          return self.animations['$<<'](self.current.$pop());
          } else {
          return ($a = self).$method_missing.apply($a, ["animation", name].concat(Opal.to_a(args)))
        };
      });

      return (Opal.defn(self, '$method_missing', TMP_9 = function() {
        var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 0];
        }
        TMP_9.$$p = null;
        return ($a = ($b = self.current.$last()).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
      }), nil) && 'method_missing';
    })($scope.base, $scope.get('BasicObject'));

    return (function($base, $super) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $scope = self.$$scope, TMP_10;

      def.current = def.roots = nil;
      return (Opal.defn(self, '$style', TMP_10 = function() {
        var $a, $b, self = this, $iter = TMP_10.$$p, block = $iter || nil;

        TMP_10.$$p = null;
        return (((($a = self.current) !== false && $a !== nil) ? $a : self.roots))['$<<'](($a = ($b = $scope.get('CSS')).$new, $a.$$p = block.$to_proc(), $a).call($b));
      }), nil) && 'style'
    })($scope.base, $scope.get('BasicObject'));
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["stringio"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$include', '$new', '$call', '$close', '$attr_accessor', '$length', '$include?', '$!', '$check_readable', '$==', '$===', '$>=', '$raise', '$>', '$+', '$-', '$seek', '$enum_for', '$eof?', '$ord', '$[]', '$check_writable', '$String', '$write', '$closed_write?', '$closed_read?']);
  return (function($base, $super) {
    function $StringIO(){};
    var self = $StringIO = $klass($base, $super, 'StringIO', $StringIO);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    def.position = def.string = def.closed = nil;
    self.$include((($scope.get('IO')).$$scope.get('Readable')));

    self.$include((($scope.get('IO')).$$scope.get('Writable')));

    Opal.defs(self, '$open', TMP_1 = function(string, mode) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, io = nil, res = nil;

      if (string == null) {
        string = ""
      }
      if (mode == null) {
        mode = nil
      }
      TMP_1.$$p = null;
      io = self.$new(string, mode);
      res = block.$call(io);
      io.$close();
      return res;
    });

    self.$attr_accessor("string");

    Opal.defn(self, '$initialize', function(string, mode) {
      var $a, $b, self = this;

      if (string == null) {
        string = ""
      }
      if (mode == null) {
        mode = "rw"
      }
      self.string = string;
      self.position = string.$length();
      if ((($a = ($b = mode['$include?']("r"), $b !== false && $b !== nil ?mode['$include?']("w")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.closed = "write"
      } else if ((($a = ($b = mode['$include?']("w"), $b !== false && $b !== nil ?mode['$include?']("r")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.closed = "read"
        } else {
        return nil
      };
    });

    Opal.defn(self, '$eof?', function() {
      var self = this;

      self.$check_readable();
      return self.position['$=='](self.string.$length());
    });

    Opal.alias(self, 'eof', 'eof?');

    Opal.defn(self, '$seek', function(pos, whence) {
      var $a, self = this, $case = nil;

      if (whence == null) {
        whence = (($scope.get('IO')).$$scope.get('SEEK_SET'))
      }
      $case = whence;if ((($scope.get('IO')).$$scope.get('SEEK_SET'))['$===']($case)) {if ((($a = $rb_ge(pos, 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise((($scope.get('Errno')).$$scope.get('EINVAL')))
      };
      self.position = pos;}else if ((($scope.get('IO')).$$scope.get('SEEK_CUR'))['$===']($case)) {if ((($a = $rb_gt($rb_plus(self.position, pos), self.string.$length())) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.position = self.string.$length()
        } else {
        self.position = $rb_plus(self.position, pos)
      }}else if ((($scope.get('IO')).$$scope.get('SEEK_END'))['$===']($case)) {if ((($a = $rb_gt(pos, self.string.$length())) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.position = 0
        } else {
        self.position = $rb_minus(self.position, pos)
      }};
      return 0;
    });

    Opal.defn(self, '$tell', function() {
      var self = this;

      return self.position;
    });

    Opal.alias(self, 'pos', 'tell');

    Opal.alias(self, 'pos=', 'seek');

    Opal.defn(self, '$rewind', function() {
      var self = this;

      return self.$seek(0);
    });

    Opal.defn(self, '$each_byte', TMP_2 = function() {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil, i = nil;

      TMP_2.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each_byte")
      };
      self.$check_readable();
      i = self.position;
      while (!((($b = self['$eof?']()) !== nil && (!$b.$$is_boolean || $b == true)))) {
      block.$call(self.string['$[]'](i).$ord());
      i = $rb_plus(i, 1);};
      return self;
    });

    Opal.defn(self, '$each_char', TMP_3 = function() {
      var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil, i = nil;

      TMP_3.$$p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each_char")
      };
      self.$check_readable();
      i = self.position;
      while (!((($b = self['$eof?']()) !== nil && (!$b.$$is_boolean || $b == true)))) {
      block.$call(self.string['$[]'](i));
      i = $rb_plus(i, 1);};
      return self;
    });

    Opal.defn(self, '$write', function(string) {
      var self = this, before = nil, after = nil;

      self.$check_writable();
      string = self.$String(string);
      if (self.string.$length()['$=='](self.position)) {
        self.string = $rb_plus(self.string, string);
        return self.position = $rb_plus(self.position, string.$length());
        } else {
        before = self.string['$[]']($range(0, $rb_minus(self.position, 1), false));
        after = self.string['$[]']($range($rb_plus(self.position, string.$length()), -1, false));
        self.string = $rb_plus($rb_plus(before, string), after);
        return self.position = $rb_plus(self.position, string.$length());
      };
    });

    Opal.defn(self, '$read', function(length, outbuf) {
      var $a, self = this, string = nil, str = nil;

      if (length == null) {
        length = nil
      }
      if (outbuf == null) {
        outbuf = nil
      }
      self.$check_readable();
      if ((($a = self['$eof?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil};
      string = (function() {if (length !== false && length !== nil) {
        str = self.string['$[]'](self.position, length);
        self.position = $rb_plus(self.position, length);
        return str;
        } else {
        str = self.string['$[]']($range(self.position, -1, false));
        self.position = self.string.$length();
        return str;
      }; return nil; })();
      if (outbuf !== false && outbuf !== nil) {
        return outbuf.$write(string)
        } else {
        return string
      };
    });

    Opal.defn(self, '$close', function() {
      var self = this;

      return self.closed = "both";
    });

    Opal.defn(self, '$close_read', function() {
      var self = this;

      if (self.closed['$==']("write")) {
        return self.closed = "both"
        } else {
        return self.closed = "read"
      };
    });

    Opal.defn(self, '$close_write', function() {
      var self = this;

      if (self.closed['$==']("read")) {
        return self.closed = "both"
        } else {
        return self.closed = "write"
      };
    });

    Opal.defn(self, '$closed?', function() {
      var self = this;

      return self.closed['$==']("both");
    });

    Opal.defn(self, '$closed_read?', function() {
      var $a, self = this;

      return ((($a = self.closed['$==']("read")) !== false && $a !== nil) ? $a : self.closed['$==']("both"));
    });

    Opal.defn(self, '$closed_write?', function() {
      var $a, self = this;

      return ((($a = self.closed['$==']("write")) !== false && $a !== nil) ? $a : self.closed['$==']("both"));
    });

    Opal.defn(self, '$check_writable', function() {
      var $a, self = this;

      if ((($a = self['$closed_write?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('IOError'), "not opened for writing")
        } else {
        return nil
      };
    });

    return (Opal.defn(self, '$check_readable', function() {
      var $a, self = this;

      if ((($a = self['$closed_read?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('IOError'), "not opened for reading")
        } else {
        return nil
      };
    }), nil) && 'check_readable';
  })($scope.base, $scope.get('IO'))
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio/formatter"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$[]=', '$to_h', '$[]', '$dup', '$deep_merge!', '$call', '$replace', '$===', '$new', '$merge', '$each', '$string', '$indent?', '$+', '$-', '$puts', '$*', '$chomp', '$lines', '$print', '$gsub', '$to_s', '$for', '$version', '$indent', '$format', '$instance_eval', '$empty?', '$map', '$escape', '$<<', '$join', '$include?', '$downcase', '$name', '$value', '$important', '$fonts', '$steps', '$animations', '$media', '$selector', '$deindent', '$reverse', '$rules']);
  self.$require("stringio");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_7, $c, TMP_10, $d, TMP_17, $e, TMP_18;

    (function($base, $super) {
      function $Formatter(){};
      var self = $Formatter = $klass($base, $super, 'Formatter', $Formatter);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5;

      def.options = def.io = nil;
      Opal.defs(self, '$to_h', function() {
        var $a, self = this;
        if (self.formatters == null) self.formatters = nil;

        return ((($a = self.formatters) !== false && $a !== nil) ? $a : self.formatters = $hash2([], {}));
      });

      Opal.defs(self, '$for', TMP_1 = function(klass) {
        var self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        if (block !== false && block !== nil) {
          return self.$to_h()['$[]='](klass, block)
          } else {
          return self.$to_h()['$[]'](klass)
        };
      });

      Opal.defs(self, '$options', TMP_2 = function(options) {
        var self = this, $iter = TMP_2.$$p, block = $iter || nil, old = nil, result = nil;

        TMP_2.$$p = null;
        old = $scope.get('OPTIONS').$dup();
        $scope.get('Utils')['$deep_merge!']($scope.get('OPTIONS'), options);
        result = block.$call();
        $scope.get('OPTIONS').$replace(old);
        return result;
      });

      Opal.cdecl($scope, 'OPTIONS', $hash2(["indent"], {"indent": $hash2(["level", "with"], {"level": 0, "with": "\t"})}));

      Opal.defn(self, '$initialize', function(io, options) {
        var $a, self = this;

        if (io == null) {
          io = nil
        }
        if (options == null) {
          options = $hash2([], {})
        }
        if ((($a = $scope.get('Hash')['$==='](io)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.io = $scope.get('StringIO').$new();
          self.options = io;
          } else {
          self.io = ((($a = io) !== false && $a !== nil) ? $a : $scope.get('StringIO').$new());
          self.options = options;
        };
        return self.options = $scope.get('OPTIONS').$merge(self.options);
      });

      Opal.defn(self, '$format', function(item) {
        var $a, $b, TMP_3, self = this;

        ($a = ($b = $scope.get('Formatter').$to_h()).$each, $a.$$p = (TMP_3 = function(klass, block){var self = TMP_3.$$s || this, $a;
if (klass == null) klass = nil;if (block == null) block = nil;
        if ((($a = klass['$==='](item)) !== nil && (!$a.$$is_boolean || $a == true))) {
            block.$call(self, item);
            return ($breaker.$v = nil, $breaker);
            } else {
            return nil
          }}, TMP_3.$$s = self, TMP_3), $a).call($b);
        return self;
      });

      Opal.defn(self, '$to_s', function() {
        var self = this;

        return self.io.$string();
      });

      Opal.defn(self, '$indent?', TMP_4 = function() {
        var self = this, $iter = TMP_4.$$p, block = $iter || nil;

        TMP_4.$$p = null;
        try {
        return self.options['$[]']("indent")['$[]']("level")
        } catch ($err) {if (true) {
          try {
            return false
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        };
      });

      Opal.defn(self, '$indent', TMP_5 = function() {
        var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

        TMP_5.$$p = null;
        if ((($a = self['$indent?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if (block !== false && block !== nil) {
            ($a = "level", $b = self.options['$[]']("indent"), $b['$[]=']($a, $rb_plus($b['$[]']($a), 1)));
            block.$call();
            return ($a = "level", $b = self.options['$[]']("indent"), $b['$[]=']($a, $rb_minus($b['$[]']($a), 1)));
            } else {
            return ($a = "level", $b = self.options['$[]']("indent"), $b['$[]=']($a, $rb_plus($b['$[]']($a), 1)))
          }
        } else if (block !== false && block !== nil) {
          return block.$call()
          } else {
          return nil
        };
      });

      Opal.defn(self, '$deindent', function() {
        var $a, $b, self = this;

        if ((($a = self['$indent?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = "level", $b = self.options['$[]']("indent"), $b['$[]=']($a, $rb_minus($b['$[]']($a), 1)))
          } else {
          return nil
        };
      });

      Opal.defn(self, '$print', function(text) {
        var $a, $b, TMP_6, self = this, level = nil;

        if ((($a = level = self['$indent?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = text.$lines()).$each, $a.$$p = (TMP_6 = function(line){var self = TMP_6.$$s || this;
            if (self.io == null) self.io = nil;
            if (self.options == null) self.options = nil;
if (line == null) line = nil;
          return self.io.$puts("" + ($rb_times(self.options['$[]']("indent")['$[]']("with"), level)) + (line.$chomp()))}, TMP_6.$$s = self, TMP_6), $a).call($b)
          } else {
          return self.io.$print(text)
        };
      });

      return (Opal.defn(self, '$escape', function(string) {
        var self = this;

        return string.$to_s().$gsub(/["><']|&(?!([a-zA-Z]+|(#\d+));)/, $hash2(["&", ">", "<", "\"", "'"], {"&": "&amp;", ">": "&gt;", "<": "&lt;", "\"": "&quot;", "'": "&#39;"}));
      }), nil) && 'escape';
    })($scope.base, null);

    ($a = ($b = $scope.get('Formatter')).$for, $a.$$p = (TMP_7 = function(f, item){var self = TMP_7.$$s || this, $a, $b, TMP_8, $case = nil;
if (f == null) f = nil;if (item == null) item = nil;
    $case = item.$version();if ((5)['$===']($case)) {f.$print("<!DOCTYPE html>")};
      f.$print("<html>");
      ($a = ($b = f).$indent, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $a, $b, TMP_9;

      return ($a = ($b = item).$each, $a.$$p = (TMP_9 = function(root){var self = TMP_9.$$s || this;
if (root == null) root = nil;
        return f.$format(root)}, TMP_9.$$s = self, TMP_9), $a).call($b)}, TMP_8.$$s = self, TMP_8), $a).call($b);
      return f.$print("</html>");}, TMP_7.$$s = self, TMP_7), $a).call($b, $scope.get('HTML'));

    ($a = ($c = $scope.get('Formatter')).$for, $a.$$p = (TMP_10 = function(f, item){var self = TMP_10.$$s || this, $a, $b, $c, $d, TMP_11, TMP_12, TMP_13, name = nil, attributes = nil, class_names = nil, attrs = nil;
if (f == null) f = nil;if (item == null) item = nil;
    $b = ($c = ($d = item).$instance_eval, $c.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;
        if (self.name == null) self.name = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.class_names == null) self.class_names = nil;

      return [self.name, self.attributes, self.class_names]}, TMP_11.$$s = self, TMP_11), $c).call($d), $a = Opal.to_ary($b), name = ($a[0] == null ? nil : $a[0]), attributes = ($a[1] == null ? nil : $a[1]), class_names = ($a[2] == null ? nil : $a[2]), $b;
      if ((($a = ($b = attributes['$empty?'](), $b !== false && $b !== nil ?class_names['$empty?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        f.$print("<" + (name) + ">")
        } else {
        attrs = ($a = ($b = attributes).$map, $a.$$p = (TMP_12 = function(key, value){var self = TMP_12.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return "" + (f.$escape(key)) + "=\"" + (f.$escape(value)) + "\""}, TMP_12.$$s = self, TMP_12), $a).call($b);
        if ((($a = class_names['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          attrs['$<<']("class=\"" + (f.$escape(class_names.$join(" "))) + "\"")
        };
        f.$print("<" + (name) + " " + (attrs.$join(" ")) + ">");
      };
      if ((($a = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]['$include?'](name.$to_s().$downcase())) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil;};
      ($a = ($c = f).$indent, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $a, $b, $c, TMP_14, TMP_15, inner = nil;

      if ((($a = inner = ($b = ($c = item).$instance_eval, $b.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this;
          if (self.inner_html == null) self.inner_html = nil;

        return self.inner_html}, TMP_14.$$s = self, TMP_14), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return f.$print(inner)
          } else {
          return ($a = ($b = item).$each, $a.$$p = (TMP_15 = function(child){var self = TMP_15.$$s || this, $a, $b, TMP_16, $case = nil;
if (child == null) child = nil;
          return (function() {$case = child;if ($scope.get('String')['$===']($case)) {return f.$print(f.$escape(child))}else if ($scope.get('CSS')['$===']($case)) {f.$print("<style>");
            ($a = ($b = f).$indent, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

            return f.$format(child)}, TMP_16.$$s = self, TMP_16), $a).call($b);
            return f.$print("</style>");}else {return f.$format(child)}})()}, TMP_15.$$s = self, TMP_15), $a).call($b)
        }}, TMP_13.$$s = self, TMP_13), $a).call($c);
      return f.$print("</" + (name) + ">");}, TMP_10.$$s = self, TMP_10), $a).call($c, (($scope.get('HTML')).$$scope.get('Element')));

    ($a = ($d = $scope.get('Formatter')).$for, $a.$$p = (TMP_17 = function(f, style){var self = TMP_17.$$s || this, $a;
if (f == null) f = nil;if (style == null) style = nil;
    return f.$print("" + (style.$name()) + ": " + (style.$value()) + ((function() {if ((($a = style.$important()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return " !important"
        } else {
        return nil
      }; return nil; })()) + ";")}, TMP_17.$$s = self, TMP_17), $a).call($d, (((($scope.get('CSS')).$$scope.get('Definition'))).$$scope.get('Style')));

    return ($a = ($e = $scope.get('Formatter')).$for, $a.$$p = (TMP_18 = function(f, item){var self = TMP_18.$$s || this, $a, $b, TMP_19, $c, TMP_22, $d, TMP_26;
if (f == null) f = nil;if (item == null) item = nil;
    ($a = ($b = item.$fonts()).$each, $a.$$p = (TMP_19 = function(font){var self = TMP_19.$$s || this, $a, $b, TMP_20;
if (font == null) font = nil;
      f.$print("@font-face {");
        ($a = ($b = f).$indent, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this, $a, $b, TMP_21;

        return ($a = ($b = font).$each, $a.$$p = (TMP_21 = function(style){var self = TMP_21.$$s || this;
if (style == null) style = nil;
          return f.$format(style)}, TMP_21.$$s = self, TMP_21), $a).call($b)}, TMP_20.$$s = self, TMP_20), $a).call($b);
        return f.$print("}");}, TMP_19.$$s = self, TMP_19), $a).call($b);
      ($a = ($c = item.$animations()).$each, $a.$$p = (TMP_22 = function(animation){var self = TMP_22.$$s || this, $a, $b, TMP_23;
if (animation == null) animation = nil;
      return ($a = ($b = ["", "-webkit-", "-moz-", "-o-"]).$each, $a.$$p = (TMP_23 = function(platform){var self = TMP_23.$$s || this, $a, $b, TMP_24;
if (platform == null) platform = nil;
        f.$print("@" + (platform) + "keyframes " + (animation.$name()) + " {");
          ($a = ($b = animation.$steps()).$each, $a.$$p = (TMP_24 = function(step){var self = TMP_24.$$s || this, $a, $b, TMP_25;
if (step == null) step = nil;
          f.$print("" + (step.$value()) + " {");
            ($a = ($b = step).$each, $a.$$p = (TMP_25 = function(style){var self = TMP_25.$$s || this;
if (style == null) style = nil;
            return f.$format(style)}, TMP_25.$$s = self, TMP_25), $a).call($b);
            return f.$print("}");}, TMP_24.$$s = self, TMP_24), $a).call($b);
          return f.$print("}");}, TMP_23.$$s = self, TMP_23), $a).call($b)}, TMP_22.$$s = self, TMP_22), $a).call($c);
      return ($a = ($d = item.$rules().$reverse()).$each, $a.$$p = (TMP_26 = function(rule){var self = TMP_26.$$s || this, $a, $b, TMP_27, m = nil;
if (rule == null) rule = nil;
      if ((($a = rule['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil;};
        if ((($a = m = rule.$media()) !== nil && (!$a.$$is_boolean || $a == true))) {
          f.$print("@media " + (m) + " {");
          f.$indent();};
        f.$print("" + (rule.$selector()) + " {");
        ($a = ($b = f).$indent, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this, $a, $b, TMP_28;

        return ($a = ($b = rule).$each, $a.$$p = (TMP_28 = function(style){var self = TMP_28.$$s || this;
if (style == null) style = nil;
          return f.$format(style)}, TMP_28.$$s = self, TMP_28), $a).call($b)}, TMP_27.$$s = self, TMP_27), $a).call($b);
        f.$print("}");
        if ((($a = rule.$media()) !== nil && (!$a.$$is_boolean || $a == true))) {
          f.$print("}");
          return f.$deindent();
          } else {
          return nil
        };}, TMP_26.$$s = self, TMP_26), $a).call($d);}, TMP_18.$$s = self, TMP_18), $a).call($e, $scope.get('CSS'));
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["paggio"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$options', '$to_proc', '$to_s', '$format', '$new', '$tap', '$each']);
  self.$require("paggio/utils");
  self.$require("paggio/html");
  self.$require("paggio/css");
  self.$require("paggio/formatter");
  return (function($base, $super) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

    Opal.defs(self, '$options', TMP_1 = function(options) {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      return ($a = ($b = $scope.get('Formatter')).$options, $a.$$p = block.$to_proc(), $a).call($b, options);
    });

    Opal.defs(self, '$indent', TMP_2 = function(options) {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      return ($a = ($b = self).$options, $a.$$p = block.$to_proc(), $a).call($b, $hash2(["indent"], {"indent": options}));
    });

    Opal.defs(self, '$css', TMP_3 = function() {
      var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_3.$$p = null;
      return $scope.get('Formatter').$new().$format(($a = ($b = $scope.get('CSS')).$new, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args))).$to_s();
    });

    Opal.defs(self, '$html', TMP_4 = function() {
      var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_4.$$p = null;
      return $scope.get('Formatter').$new().$format(($a = ($b = $scope.get('HTML')).$new, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args))).$to_s();
    });

    return (Opal.defs(self, '$html!', TMP_5 = function() {
      var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      return ($a = ($b = $scope.get('Formatter').$new()).$tap, $a.$$p = (TMP_6 = function(f){var self = TMP_6.$$s || this, $a, $b, TMP_7, $c, $d;
if (f == null) f = nil;
      return ($a = ($b = ($c = ($d = $scope.get('HTML')).$new, $c.$$p = block.$to_proc(), $c).call($d)).$each, $a.$$p = (TMP_7 = function(root){var self = TMP_7.$$s || this;
if (root == null) root = nil;
        return f.$format(root)}, TMP_7.$$s = self, TMP_7), $a).call($b)}, TMP_6.$$s = self, TMP_6), $a).call($b).$to_s();
    }), nil) && 'html!';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/version"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.2.0")
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/utils"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$encode_uri', '$to_s', '$encode_uri_component', '$[]', '$map', '$split', '$decode_uri_component', '$join']);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'Size', $scope.get('Struct').$new("width", "height"));

    Opal.cdecl($scope, 'Position', $scope.get('Struct').$new("x", "y"));
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$encode_uri', function() {
      var self = this;

      return self.$to_s().$encode_uri();
    });

    return (Opal.defn(self, '$encode_uri_component', function() {
      var self = this;

      return self.$to_s().$encode_uri_component();
    }), nil) && 'encode_uri_component';
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$encode_uri_component', function() {
      var self = this;

      return encodeURIComponent(self);
    });

    Opal.defn(self, '$encode_uri', function() {
      var self = this;

      return encodeURI(self);
    });

    Opal.defn(self, '$decode_uri_component', function() {
      var self = this;

      return decodeURIComponent(self);
    });

    return (Opal.defn(self, '$decode_uri', function() {
      var self = this;

      return decodeURI(self);
    }), nil) && 'decode_uri';
  })($scope.base, null);
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$decode_uri', function(string) {
      var $a, $b, TMP_1, self = this;

      return self['$[]'](($a = ($b = string.$split("&")).$map, $a.$$p = (TMP_1 = function(part){var self = TMP_1.$$s || this, $a, $b, name = nil, value = nil;
if (part == null) part = nil;
      $b = part.$split("="), $a = Opal.to_ary($b), name = ($a[0] == null ? nil : $a[0]), value = ($a[1] == null ? nil : $a[1]), $b;
        return [name.$decode_uri_component(), value.$decode_uri_component()];}, TMP_1.$$s = self, TMP_1), $a).call($b));
    });

    return (Opal.defn(self, '$encode_uri', function() {
      var $a, $b, TMP_2, self = this;

      return ($a = ($b = self).$map, $a.$$p = (TMP_2 = function(name, value){var self = TMP_2.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name.$to_s().$encode_uri_component()) + "=" + (value.$to_s().$encode_uri_component())}, TMP_2.$$s = self, TMP_2), $a).call($b).$join("&");
    }), nil) && 'encode_uri';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/support"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$downcase', '$===', '$!', '$supports?']);
  Opal.cdecl($scope, 'BROWSER_ENGINE', (function() {try {return (/MSIE|WebKit|Presto|Gecko/.exec(navigator.userAgent)[0]).$downcase() } catch ($err) { return "unknown" }})());
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    self.support = {};

    Opal.defs(self, '$supports?', function(feature) {
      var $a, $b, self = this, support = nil, $case = nil;
      if (self.support == null) self.support = nil;

      if ((($a = (typeof(self.support[feature]) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.support[feature]};
      support = (function() {$case = feature;if ("MutationObserver"['$===']($case)) {return (typeof(window.MutationObserver) !== "undefined")}else if ("WebSocket"['$===']($case)) {return (typeof(window.WebSocket) !== "undefined")}else if ("EventSource"['$===']($case)) {return (typeof(window.EventSource) !== "undefined")}else if ("XHR"['$===']($case)) {return (typeof(window.XMLHttpRequest) !== "undefined")}else if ("ActiveX"['$===']($case)) {return (typeof(window.ActiveXObject) !== "undefined")}else if ("WebSQL"['$===']($case)) {return (typeof(window.openDatabase) !== "undefined")}else if ("Query.css"['$===']($case)) {return (typeof(document.querySelectorAll) !== "undefined")}else if ("Query.xpath"['$===']($case)) {return (typeof(document.evaluate) !== "undefined")}else if ("Storage.local"['$===']($case)) {return (typeof(window.localStorage) !== "undefined")}else if ("Storage.global"['$===']($case)) {return (typeof(window.globalStorage) !== "undefined")}else if ("Storage.session"['$===']($case)) {return (typeof(window.sessionStorage) !== "undefined")}else if ("Immediate"['$===']($case)) {return (typeof(window.setImmediate) !== "undefined")}else if ("Immediate (Internet Explorer)"['$===']($case)) {return (typeof(window.msSetImmediate) !== "undefined")}else if ("Immediate (Firefox)"['$===']($case)) {return (typeof(window.mozSetImmediate) !== "undefined")}else if ("Immediate (Opera)"['$===']($case)) {return (typeof(window.oSetImmediate) !== "undefined")}else if ("Immediate (Chrome)"['$===']($case) || "setImmediate (Safari)"['$===']($case)) {return (typeof(window.webkitSetImmediate) !== "undefined")}else if ("CSS.computed"['$===']($case)) {return (typeof(window.getComputedStyle) !== "undefined")}else if ("CSS.current"['$===']($case)) {return (typeof(document.documentElement.currentStyle) !== "undefined")}else if ("Window.send"['$===']($case)) {return (typeof(window.postMessage) !== "undefined")}else if ("Window.send (Asynchronous)"['$===']($case)) {if ((($a = ($b = (typeof(window.postMessage) !== "undefined"), $b !== false && $b !== nil ?(typeof(window.importScripts) !== "undefined")['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        
            var ok  = true,
                old = window.onmessage;

            window.onmessage = function() { ok = false; };
            window.postMessage("", "*")
            window.onmessage = old;

            return ok;
          
        } else {
        return nil
      }}else if ("Window.send (Synchronous)"['$===']($case)) {return self['$supports?']("Window.send (Asynchronous)")['$!']()}else if ("Window.innerSize"['$===']($case)) {return (typeof(window.innerHeight) !== "undefined")}else if ("Window.outerSize"['$===']($case)) {return (typeof(window.outerHeight) !== "undefined")}else if ("Window.scroll"['$===']($case)) {return (typeof(document.documentElement.scrollLeft) !== "undefined")}else if ("Window.pageOffset"['$===']($case)) {return (typeof(window.pageXOffset) !== "undefined")}else if ("Attr.isId"['$===']($case)) {
          var div = document.createElement('div');
              div.setAttribute('id', 'xxxxxxxxxxxxx');

          return typeof(div.attributes['id'].isId) !== "undefined";
        }else if ("Element.addBehavior"['$===']($case)) {return (typeof(document.documentElement.addBehavior) !== "undefined")}else if ("Element.className"['$===']($case)) {
          var div = document.createElement("div");
              div.setAttribute('className', 'x');

          return div.className === 'x';
        }else if ("Element.class"['$===']($case)) {
          var div = document.createElement("div");
              div.setAttribute('class', 'x');

          return div.className === 'x';
        }else if ("Element.for"['$===']($case)) {
          var label = document.createElement("label");
              label.setAttribute('for', 'x');

          return label.htmlFor === 'x';
        }else if ("Element.htmlFor"['$===']($case)) {
          var label = document.createElement("label");
              label.setAttribute('htmlFor', 'x');

          return label.htmlFor === 'x';
        }else if ("Element.clientSize"['$===']($case)) {return (typeof(document.documentElement.clientHeight) !== "undefined")}else if ("Element.scroll"['$===']($case)) {return (typeof(document.documentElement.scrollLeft) !== "undefined")}else if ("Element.textContent"['$===']($case)) {return (typeof(document.documentElement.textContent) !== "undefined")}else if ("Element.innerText"['$===']($case)) {return (typeof(document.documentElement.innerText) !== "undefined")}else if ("Element.matches"['$===']($case)) {return (typeof(document.documentElement.matches) !== "undefined")}else if ("Element.matches (Internet Explorer)"['$===']($case)) {return (typeof(document.documentElement.msMatchesSelector) !== "undefined")}else if ("Element.matches (Firefox)"['$===']($case)) {return (typeof(document.documentElement.mozMatchesSelector) !== "undefined")}else if ("Element.matches (Opera)"['$===']($case)) {return (typeof(document.documentElement.oMatchesSelector) !== "undefined")}else if ("Element.matches (Chrome)"['$===']($case) || "Element.matches (Safari)"['$===']($case)) {return (typeof(document.documentElement.webkitMatchesSelector) !== "undefined")}else if ("Element.getBoundingClientRect"['$===']($case)) {return (typeof(document.documentElement.getBoundingClientRect) !== "undefined")}else if ("Event.readystatechange"['$===']($case)) {return "onreadystatechange" in window.document.createElement("script");}else if ("Event.constructor"['$===']($case)) {try {
      new MouseEvent("click");
        return true;
      } catch ($err) {if (true) {
        try {
          return false
        } finally {
          Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
        }
        }else { throw $err; }
      }}else if ("Event.create"['$===']($case)) {return (typeof(document.createEvent) !== "undefined")}else if ("Event.createObject"['$===']($case)) {return (typeof(document.createEventObject) !== "undefined")}else if ("Event.addListener"['$===']($case)) {return (typeof(document.addEventListener) !== "undefined")}else if ("Event.attach"['$===']($case)) {return (typeof(document.attachEvent) !== "undefined")}else if ("Event.removeListener"['$===']($case)) {return (typeof(document.removeEventListener) !== "undefined")}else if ("Event.detach"['$===']($case)) {return (typeof(document.detachEvent) !== "undefined")}else if ("Event.dispatch"['$===']($case)) {return (typeof(document.dispatchEvent) !== "undefined")}else if ("Event.fire"['$===']($case)) {return (typeof(document.fireEvent) !== "undefined")}else if (/^Event\.([A-Z].*?)$/['$===']($case)) {return ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)) + "Event") in window;}else if ("Document.view"['$===']($case)) {return (typeof(document.defaultView) !== "undefined")}else if ("Document.window"['$===']($case)) {return (typeof(document.parentWindow) !== "undefined")}else if ("History"['$===']($case)) {return (typeof(window.history.pushState) !== "undefined")}else if ("History.state"['$===']($case)) {return (typeof(window.history.state) !== "undefined")}else if ("Animation.request"['$===']($case)) {return (typeof(window.requestAnimationFrame) !== "undefined")}else if ("Animation.request (Internet Explorer)"['$===']($case)) {return (typeof(window.msRequestAnimationFrame) !== "undefined")}else if ("Animation.request (Firefox)"['$===']($case)) {return (typeof(window.mozRequestAnimationFrame) !== "undefined")}else if ("Animation.request (Opera)"['$===']($case)) {return (typeof(window.oRequestAnimationFrame) !== "undefined")}else if ("Animation.request (Chrome)"['$===']($case) || "Animation.request (Safari)"['$===']($case)) {return (typeof(window.webkitRequestAnimationFrame) !== "undefined")}else if ("Animation.cancel"['$===']($case)) {return (typeof(window.cancelAnimationFrame) !== "undefined")}else if ("Animation.cancel (Internet Explorer)"['$===']($case)) {return (typeof(window.msCancelAnimationFrame) !== "undefined")}else if ("Animation.cancel (Firefox)"['$===']($case)) {return (typeof(window.mozCancelAnimationFrame) !== "undefined")}else if ("Animation.cancel (Opera)"['$===']($case)) {return (typeof(window.oCancelAnimationFrame) !== "undefined")}else if ("Animation.cancel (Chrome)"['$===']($case) || "Animation.cancel (Safari)"['$===']($case)) {return (typeof(window.webkitCancelAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest"['$===']($case)) {return (typeof(window.cancelRequestAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest (Internet Explorer)"['$===']($case)) {return (typeof(window.msCancelRequestAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest (Firefox)"['$===']($case)) {return (typeof(window.mozCancelRequestAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest (Opera)"['$===']($case)) {return (typeof(window.oCancelRequestAnimationFrame) !== "undefined")}else if ("Animation.cancelRequest (Chrome)"['$===']($case) || "Animation.cancelRequest (Safari)"['$===']($case)) {return (typeof(window.webkitCancelRequestAnimationFrame) !== "undefined")}else { return nil }})();
      return self.support[feature] = support;
    });

    Opal.defs(self, '$loaded?', function(name) {
      var self = this, $case = nil;

      return (function() {$case = name;if ("Sizzle"['$===']($case)) {return (typeof(window.Sizzle) !== "undefined")}else if ("wicked-good-xpath"['$===']($case)) {return (typeof(window.wgxpath) !== "undefined")}else { return nil }})();
    });
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/base"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$call', '$to_n', '$<<', '$converters', '$native?', '$each', '$instance_eval', '$register', '$to_proc', '$attr_reader', '$lambda', '$new', '$stopped?', '$arguments', '$!', '$prevented?', '$class_for', '$off', '$target', '$[]', '$delegated', '$delete', '$last', '$empty?', '$first', '$raise', '$name_for', '$handlers', '$[]=', '$include?', '$callback=', '$on!', '$delegate', '$on', '$handlers=', '$push', '$callbacks', '$attach', '$attach!', '$supports?', '$name', '$==', '$event', '$===', '$warn', '$detach', '$gsub', '$delete_if', '$=~', '$clear', '$none?', '$is_a?', '$create', '$dispatch', '$trigger', '$bubbles=', '$private', '$nil?', '$dup', '$on=', '$parent']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      self.$include($scope.get('Native'));

      (function($base, $super) {
        function $Definition(){};
        var self = $Definition = $klass($base, $super, 'Definition', $Definition);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.defs(self, '$new', TMP_1 = function() {
          var self = this, $iter = TMP_1.$$p, block = $iter || nil, data = nil;

          TMP_1.$$p = null;
          data = Opal.find_super_dispatcher(self, 'new', TMP_1, null, $Definition).apply(self, [{ bubbles: true, cancelable: true }]);
          if (block !== false && block !== nil) {
            block.$call(data)};
          return data.$to_n();
        });

        Opal.defn(self, '$bubbles=', function(value) {
          var self = this;

          return self["native"].bubbles = value;
        });

        return (Opal.defn(self, '$cancelable=', function(value) {
          var self = this;

          return self["native"].cancelable = value;
        }), nil) && 'cancelable=';
      })($scope.base, null);

      return (function($base) {
        var $Target, self = $Target = $module($base, 'Target');

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_8, TMP_11, $a, TMP_16, TMP_17;

        Opal.defs(self, '$converters', function() {
          var $a, self = this;
          if (self.converters == null) self.converters = nil;

          return ((($a = self.converters) !== false && $a !== nil) ? $a : self.converters = []);
        });

        Opal.defs(self, '$register', TMP_2 = function() {
          var self = this, $iter = TMP_2.$$p, block = $iter || nil;

          TMP_2.$$p = null;
          return self.$converters()['$<<'](block);
        });

        Opal.defs(self, '$convert', function(value) {try {

          var $a, $b, TMP_3, self = this;

          if ((($a = self['$native?'](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return value
          };
          ($a = ($b = self.$converters()).$each, $a.$$p = (TMP_3 = function(block){var self = TMP_3.$$s || this, $a, result = nil;
if (block == null) block = nil;
          if ((($a = result = block.$call(value)) !== nil && (!$a.$$is_boolean || $a == true))) {
              Opal.ret(result)
              } else {
              return nil
            }}, TMP_3.$$s = self, TMP_3), $a).call($b);
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        });

        Opal.defs(self, '$included', function(klass) {
          var $a, $b, TMP_4, self = this;

          return ($a = ($b = klass).$instance_eval, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, TMP_5;

          return (Opal.defs(self, '$target', TMP_5 = function() {
              var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

              TMP_5.$$p = null;
              return ($a = ($b = (($scope.get('Event')).$$scope.get('Target'))).$register, $a.$$p = block.$to_proc(), $a).call($b);
            }), nil) && 'target'}, TMP_4.$$s = self, TMP_4), $a).call($b);
        });

        (function($base, $super) {
          function $Callback(){};
          var self = $Callback = $klass($base, $super, 'Callback', $Callback);

          var def = self.$$proto, $scope = self.$$scope, TMP_6;

          def.proc = def.name = nil;
          self.$attr_reader("target", "name", "selector");

          Opal.defn(self, '$initialize', TMP_6 = function(target, name, selector) {
            var self = this, $iter = TMP_6.$$p, block = $iter || nil;

            if (selector == null) {
              selector = nil
            }
            TMP_6.$$p = null;
            self.target = target;
            self.name = name;
            self.selector = selector;
            return self.block = block;
          });

          Opal.defn(self, '$call', function(event) {
            var self = this;

            return self.$to_proc().$call(event);
          });

          Opal.defn(self, '$to_proc', function() {
            var $a, $b, $c, TMP_7, self = this;

            return ((($a = self.proc) !== false && $a !== nil) ? $a : self.proc = ($b = ($c = self).$lambda, $b.$$p = (TMP_7 = function(event){var self = TMP_7.$$s || this, $a;
              if (self.block == null) self.block = nil;
if (event == null) event = nil;
            
            if (!event.currentTarget) {
              event.currentTarget = self.target.native;
            }
          
              event = $scope.get('Event').$new(event, self);
              if ((($a = event['$stopped?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                ($a = self.block).$call.apply($a, [event].concat(Opal.to_a(event.$arguments())))
              };
              return event['$prevented?']()['$!']();}, TMP_7.$$s = self, TMP_7), $b).call($c));
          });

          Opal.defn(self, '$event', function() {
            var self = this;

            return $scope.get('Event').$class_for(self.name);
          });

          return (Opal.defn(self, '$off', function() {
            var self = this;

            return self.$target().$off(self);
          }), nil) && 'off';
        })($scope.base, null);

        (function($base, $super) {
          function $Delegate(){};
          var self = $Delegate = $klass($base, $super, 'Delegate', $Delegate);

          var def = self.$$proto, $scope = self.$$scope;

          def.target = def.name = def.pair = nil;
          Opal.defn(self, '$initialize', function(target, name, pair) {
            var self = this;

            self.target = target;
            self.name = name;
            return self.pair = pair;
          });

          return (Opal.defn(self, '$off', function() {
            var $a, self = this, delegate = nil;

            delegate = self.target.$delegated()['$[]'](self.name);
            delegate.$last().$delete(self.pair);
            if ((($a = delegate.$last()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              delegate.$first().$off();
              return delegate.$delete(self.name);
              } else {
              return nil
            };
          }), nil) && 'off';
        })($scope.base, null);

        Opal.cdecl($scope, 'Delegates', $scope.get('Struct').$new("callback", "handlers"));

        Opal.defn(self, '$on', TMP_8 = function(name, selector) {
          var $a, $b, $c, $d, TMP_9, $e, TMP_10, self = this, $iter = TMP_8.$$p, block = $iter || nil, delegate = nil, pair = nil, callback = nil;

          if (selector == null) {
            selector = nil
          }
          TMP_8.$$p = null;
          if (block !== false && block !== nil) {
            } else {
            self.$raise($scope.get('ArgumentError'), "no block has been given")
          };
          name = $scope.get('Event').$name_for(name);
          if (selector !== false && selector !== nil) {
            if ((($a = delegate = self.$delegated()['$[]'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              pair = [selector, block];
              delegate.$handlers()['$<<'](pair);
              return $scope.get('Delegate').$new(self, name, pair);
              } else {
              delegate = self.$delegated()['$[]='](name, $scope.get('Delegates').$new());
              if ((($a = ["blur", "focus"]['$include?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
                (($a = [($c = ($d = self)['$on!'], $c.$$p = (TMP_9 = function(e){var self = TMP_9.$$s || this;
if (e == null) e = nil;
                return self.$delegate(delegate, e)}, TMP_9.$$s = self, TMP_9), $c).call($d, name)]), $b = delegate, $b['$callback='].apply($b, $a), $a[$a.length-1])
                } else {
                (($a = [($c = ($e = self).$on, $c.$$p = (TMP_10 = function(e){var self = TMP_10.$$s || this;
if (e == null) e = nil;
                return self.$delegate(delegate, e)}, TMP_10.$$s = self, TMP_10), $c).call($e, name)]), $b = delegate, $b['$callback='].apply($b, $a), $a[$a.length-1])
              };
              pair = [selector, block];
              (($a = [[pair]]), $b = delegate, $b['$handlers='].apply($b, $a), $a[$a.length-1]);
              return $scope.get('Delegate').$new(self, name, pair);
            }
            } else {
            callback = ($a = ($b = $scope.get('Callback')).$new, $a.$$p = block.$to_proc(), $a).call($b, self, name, selector);
            self.$callbacks().$push(callback);
            return self.$attach(callback);
          };
        });

        Opal.defn(self, '$on!', TMP_11 = function(name) {
          var $a, $b, self = this, $iter = TMP_11.$$p, block = $iter || nil, callback = nil;

          TMP_11.$$p = null;
          if (block !== false && block !== nil) {
            } else {
            self.$raise($scope.get('ArgumentError'), "no block has been given")
          };
          name = $scope.get('Event').$name_for(name);
          callback = ($a = ($b = $scope.get('Callback')).$new, $a.$$p = block.$to_proc(), $a).call($b, self, name);
          self.$callbacks().$push(callback);
          return self['$attach!'](callback);
        });

        if ((($a = $scope.get('Browser')['$supports?']("Event.addListener")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$attach', function(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            self["native"].addEventListener(callback.$name(), callback.$to_proc());
            return callback;
          });

          Opal.defn(self, '$attach!', function(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            self["native"].addEventListener(callback.$name(), callback.$to_proc(), true);
            return callback;
          });
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.attach")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$attach', function(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            if (callback.$event()['$==']($scope.get('Custom'))) {
              
            if (!self["native"].$custom) {
              self["native"].$custom = function(event) {
                for (var i = 0, length = self["native"].$callbacks.length; i < length; i++) {
                  var callback = self["native"].$callbacks[i];

                  if ((callback).$event()['$==']($scope.get('Custom'))) {
                    event.type = callback.name;

                    (callback).$call(event);
                  }
                }
              };

              self["native"].attachEvent("ondataavailable", self["native"].$custom);
            }
          ;
              } else {
              self["native"].attachEvent("on" + callback.$name(), callback.$to_proc());
            };
            return callback;
          });

          Opal.defn(self, '$attach!', function(callback) {
            var self = this, $case = nil;
            if (self["native"] == null) self["native"] = nil;

            $case = callback.$name();if ("blur"['$===']($case)) {self["native"].attachEvent("onfocusout", callback.$to_proc());}else if ("focus"['$===']($case)) {self["native"].attachEvent("onfocusin", callback.$to_proc());}else {self.$warn("attach: capture doesn't work on this browser");
            self.$attach(callback);};
            return callback;
          });
          } else {
          Opal.defn(self, '$attach', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          });

          Opal.defn(self, '$attach!', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          });
        };

        Opal.defn(self, '$off', function(what) {
          var $a, $b, TMP_12, $c, TMP_13, $d, TMP_14, self = this, $case = nil;

          if (what == null) {
            what = nil
          }
          return (function() {$case = what;if ($scope.get('Callback')['$===']($case)) {self.$callbacks().$delete(what);
          return self.$detach(what);}else if ($scope.get('String')['$===']($case)) {if ((($a = ((($b = what['$include?']("*")) !== false && $b !== nil) ? $b : what['$include?']("?"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$off($scope.get('Regexp').$new(what.$gsub(/\*/, ".*?").$gsub(/\?/, ".")))
            } else {
            what = $scope.get('Event').$name_for(what);
            return ($a = ($b = self.$callbacks()).$delete_if, $a.$$p = (TMP_12 = function(callback){var self = TMP_12.$$s || this;
if (callback == null) callback = nil;
            if (callback.$name()['$=='](what)) {
                self.$detach(callback);
                return true;
                } else {
                return nil
              }}, TMP_12.$$s = self, TMP_12), $a).call($b);
          }}else if ($scope.get('Regexp')['$===']($case)) {return ($a = ($c = self.$callbacks()).$delete_if, $a.$$p = (TMP_13 = function(callback){var self = TMP_13.$$s || this, $a;
if (callback == null) callback = nil;
          if ((($a = callback.$name()['$=~'](what)) !== nil && (!$a.$$is_boolean || $a == true))) {
              self.$detach(callback);
              return true;
              } else {
              return nil
            }}, TMP_13.$$s = self, TMP_13), $a).call($c)}else {($a = ($d = self.$callbacks()).$each, $a.$$p = (TMP_14 = function(callback){var self = TMP_14.$$s || this;
if (callback == null) callback = nil;
          return self.$detach(callback)}, TMP_14.$$s = self, TMP_14), $a).call($d);
          return self.$callbacks().$clear();}})();
        });

        if ((($a = $scope.get('Browser')['$supports?']("Event.removeListener")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$detach', function(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].removeEventListener(callback.$name(), callback.$to_proc(), false);
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.detach")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$detach', function(callback) {
            var $a, $b, $c, TMP_15, self = this;
            if (self["native"] == null) self["native"] = nil;

            if (callback.$event()['$==']($scope.get('Custom'))) {
              if ((($a = ($b = ($c = self.$callbacks())['$none?'], $b.$$p = (TMP_15 = function(c){var self = TMP_15.$$s || this;
if (c == null) c = nil;
              return c.$event()['$==']($scope.get('Custom'))}, TMP_15.$$s = self, TMP_15), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
                
              self["native"].detachEvent("ondataavailable", self["native"].$custom);

              delete self["native"].$custom;
            ;
                } else {
                return nil
              }
              } else {
              return self["native"].detachEvent("on" + callback.$name(), callback.$to_proc());
            };
          })
          } else {
          Opal.defn(self, '$detach', function(callback) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          })
        };

        Opal.defn(self, '$trigger', TMP_16 = function(event) {
          var $a, $b, self = this, $iter = TMP_16.$$p, block = $iter || nil, $splat_index = nil;

          var array_size = arguments.length - 1;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 1];
          }
          TMP_16.$$p = null;
          if ((($a = event['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            event = ($a = ($b = $scope.get('Event')).$create, $a.$$p = block.$to_proc(), $a).apply($b, [event].concat(Opal.to_a(args)))};
          return self.$dispatch(event);
        });

        Opal.defn(self, '$trigger!', TMP_17 = function(event) {
          var $a, $b, TMP_18, self = this, $iter = TMP_17.$$p, block = $iter || nil, $splat_index = nil;

          var array_size = arguments.length - 1;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 1];
          }
          TMP_17.$$p = null;
          return ($a = ($b = self).$trigger, $a.$$p = (TMP_18 = function(e){var self = TMP_18.$$s || this, $a, $b;
if (e == null) e = nil;
          if (block !== false && block !== nil) {
              block.$call(e)};
            return (($a = [false]), $b = e, $b['$bubbles='].apply($b, $a), $a[$a.length-1]);}, TMP_18.$$s = self, TMP_18), $a).apply($b, [event].concat(Opal.to_a(args)));
        });

        if ((($a = $scope.get('Browser')['$supports?']("Event.dispatch")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$dispatch', function(event) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].dispatchEvent(event.$to_n());
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.fire")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$dispatch', function(event) {
            var $a, self = this;
            if (self["native"] == null) self["native"] = nil;

            if ((($a = $scope.get('Custom')['$==='](event)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self["native"].fireEvent("ondataavailable", event.$to_n());
              } else {
              return self["native"].fireEvent("on" + event.$name(), event.$to_n());
            };
          })
          } else {
          Opal.defn(self, '$dispatch', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'));
          })
        };

        self.$private();

        Opal.defn(self, '$callbacks', function() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$callbacks) {
          self["native"].$callbacks = [];
        }

        return self["native"].$callbacks;
      ;
        });

        Opal.defn(self, '$delegated', function() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$delegated) {
          self["native"].$delegated = $hash2([], {});
        }

        return self["native"].$delegated;
      ;
        });

        Opal.defn(self, '$delegate', function(delegates, event, element) {
          var $a, $b, TMP_19, self = this;

          if (element == null) {
            element = event.$target()
          }
          if ((($a = ((($b = element['$nil?']()) !== false && $b !== nil) ? $b : element['$=='](event.$on()))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil};
          ($a = ($b = delegates.$handlers()).$each, $a.$$p = (TMP_19 = function(selector, block){var self = TMP_19.$$s || this, $a, $b, new$ = nil;
if (selector == null) selector = nil;if (block == null) block = nil;
          if ((($a = element['$=~'](selector)) !== nil && (!$a.$$is_boolean || $a == true))) {
              new$ = event.$dup();
              (($a = [element]), $b = new$, $b['$on='].apply($b, $a), $a[$a.length-1]);
              return ($a = block).$call.apply($a, [new$].concat(Opal.to_a(new$.$arguments())));
              } else {
              return nil
            }}, TMP_19.$$s = self, TMP_19), $a).call($b);
          return self.$delegate(delegates, event, element.$parent());
        });
      })($scope.base);
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/ui"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $UI(){};
        var self = $UI = $klass($base, $super, 'UI', $UI);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.UI");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$detail=', function(value) {
            var self = this;

            return self["native"].detail = value;
          });

          return (Opal.defn(self, '$view=', function(value) {
            var self = this;

            return self["native"].view = value;
          }), nil) && 'view=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new UIEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("UIEvent");
            event.initUIEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0);

        return event;
      
            })}};

        self.$alias_native("detail");

        return self.$alias_native("view");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/mouse"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$include', '$new', '$try_convert', '$supported?', '$supports?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$==', '$downcase', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Mouse(){};
        var self = $Mouse = $klass($base, $super, 'Mouse', $Mouse);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("MouseEvent")['$nil?']()['$!']();
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          (function($base, $super) {
            function $Client(){};
            var self = $Client = $klass($base, $super, 'Client', $Client);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', function(value) {
              var self = this;

              return self["native"].clientX = value;
            });

            return (Opal.defn(self, '$y=', function(value) {
              var self = this;

              return self["native"].clientY = value;
            }), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Layer(){};
            var self = $Layer = $klass($base, $super, 'Layer', $Layer);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', function(value) {
              var self = this;

              return self["native"].layerX = value;
            });

            return (Opal.defn(self, '$y=', function(value) {
              var self = this;

              return self["native"].layerY = value;
            }), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Offset(){};
            var self = $Offset = $klass($base, $super, 'Offset', $Offset);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', function(value) {
              var self = this;

              return self["native"].offsetX = value;
            });

            return (Opal.defn(self, '$y=', function(value) {
              var self = this;

              return self["native"].offsetY= value;
            }), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Page(){};
            var self = $Page = $klass($base, $super, 'Page', $Page);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', function(value) {
              var self = this;

              return self["native"].pageX = value;
            });

            return (Opal.defn(self, '$y=', function(value) {
              var self = this;

              return self["native"].pageY = value;
            }), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Screen(){};
            var self = $Screen = $klass($base, $super, 'Screen', $Screen);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', function(value) {
              var self = this;

              return self["native"].screenX = value;
            });

            return (Opal.defn(self, '$y=', function(value) {
              var self = this;

              return self["native"].screenY = value;
            }), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Ancestor(){};
            var self = $Ancestor = $klass($base, $super, 'Ancestor', $Ancestor);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', function(value) {
              var self = this;

              return self["native"].x = value;
            });

            return (Opal.defn(self, '$y=', function(value) {
              var self = this;

              return self["native"].y = value;
            }), nil) && 'y=';
          })($scope.base, null);

          Opal.defn(self, '$x=', function(value) {
            var self = this;

            return self["native"].screenX = value;
          });

          Opal.defn(self, '$y=', function(value) {
            var self = this;

            return self["native"].screenY = value;
          });

          Opal.defn(self, '$alt!', function() {
            var self = this;

            return self["native"].altKey = true;
          });

          Opal.defn(self, '$ctrl!', function() {
            var self = this;

            return self["native"].ctrlKey = true;
          });

          Opal.defn(self, '$meta!', function() {
            var self = this;

            return self["native"].metaKey = true;
          });

          Opal.defn(self, '$button=', function(value) {
            var self = this;

            return self["native"].button = value;
          });

          Opal.defn(self, '$client', function() {
            var self = this;

            return $scope.get('Client').$new(self["native"]);
          });

          Opal.defn(self, '$layer', function() {
            var self = this;

            return $scope.get('Layer').$new(self["native"]);
          });

          Opal.defn(self, '$offset', function() {
            var self = this;

            return $scope.get('Offset').$new(self["native"]);
          });

          Opal.defn(self, '$page', function() {
            var self = this;

            return $scope.get('Page').$new(self["native"]);
          });

          Opal.defn(self, '$screen', function() {
            var self = this;

            return $scope.get('Screen').$new(self["native"]);
          });

          Opal.defn(self, '$ancestor', function() {
            var self = this;

            return $scope.get('Ancestor').$new(self["native"]);
          });

          Opal.defn(self, '$related=', function(elem) {
            var self = this;

            return self["native"].relatedTarget = $scope.get('Native').$try_convert(elem);
          });

          Opal.defn(self, '$from=', function(elem) {
            var self = this;

            return self["native"].fromElement = $scope.get('Native').$try_convert(elem);
          });

          return (Opal.defn(self, '$to=', function(elem) {
            var self = this;

            return self["native"].toElement = $scope.get('Native').$try_convert(elem);
          }), nil) && 'to=';
        })($scope.base, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new MouseEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("MouseEvent");
            event.initMouseEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey || false, desc.altKey || false,
              desc.shiftKey || false, desc.metaKey || false,
              desc.button || 0, desc.relatedTarget || null);

        return event;
      
            })}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        self.$alias_native("button");

        Opal.defn(self, '$client', function() {
          var self = this;

          return $scope.get('Position').$new(self["native"].clientX, self["native"].clientY);
        });

        Opal.defn(self, '$layer', function() {
          var $a, self = this;

          if ((($a = self["native"].layerX == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].layerX, self["native"].layerY)
          };
        });

        Opal.defn(self, '$offset', function() {
          var $a, self = this;

          if ((($a = self["native"].offsetX == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].offsetX, self["native"].offsetY)
          };
        });

        Opal.defn(self, '$page', function() {
          var $a, self = this;

          if ((($a = self["native"].pageX == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].pageX, self["native"].pageY)
          };
        });

        Opal.defn(self, '$screen', function() {
          var $a, self = this;

          if ((($a = self["native"].screenX == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].screenX, self["native"].screenY)
          };
        });

        Opal.defn(self, '$ancestor', function() {
          var $a, self = this;

          if ((($a = self["native"].x == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return $scope.get('Position').$new(self["native"].x, self["native"].y)
          };
        });

        Opal.defn(self, '$x', function() {
          var self = this;

          return self.$screen().$x();
        });

        Opal.defn(self, '$y', function() {
          var self = this;

          return self.$screen().$y();
        });

        Opal.defn(self, '$related', function() {
          var $a, self = this;

          if ((($a = self["native"].relatedTarget == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$DOM(self["native"].relatedTarget)
          };
        });

        Opal.defn(self, '$from', function() {
          var $a, self = this;

          if ((($a = self["native"].fromElement == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$DOM(self["native"].fromElement)
          };
        });

        Opal.defn(self, '$to', function() {
          var $a, self = this;

          if ((($a = self["native"].toElement == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.$DOM(self["native"].toElement)
          };
        });

        Opal.defn(self, '$click?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("click");
        });

        Opal.defn(self, '$double_click?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("dblclick");
        });

        Opal.defn(self, '$down?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousedown");
        });

        Opal.defn(self, '$enter?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseenter");
        });

        Opal.defn(self, '$leave?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseleave");
        });

        Opal.defn(self, '$move?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousemove");
        });

        Opal.defn(self, '$out?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseout");
        });

        Opal.defn(self, '$over?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseover");
        });

        Opal.defn(self, '$up?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseup");
        });

        return (Opal.defn(self, '$show?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("show");
        }), nil) && 'show?';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/keyboard"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$code', '$chr', '$==', '$downcase', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Keyboard(){};
        var self = $Keyboard = $klass($base, $super, 'Keyboard', $Keyboard);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Keyboard");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$alt!', function() {
            var self = this;

            return self["native"].altKey = true;
          });

          Opal.defn(self, '$ctrl!', function() {
            var self = this;

            return self["native"].ctrlKey = true;
          });

          Opal.defn(self, '$meta!', function() {
            var self = this;

            return self["native"].metaKey = true;
          });

          Opal.defn(self, '$shift!', function() {
            var self = this;

            return self["native"].shiftKey = true;
          });

          Opal.defn(self, '$code=', function(code) {
            var self = this;

            return self["native"].keyCode = self["native"].which = code;
          });

          Opal.defn(self, '$key=', function(key) {
            var self = this;

            return self["native"].key = key;
          });

          Opal.defn(self, '$char=', function(char$) {
            var self = this;

            return self["native"].char = self["native"].charCode = char$;
          });

          Opal.defn(self, '$repeat!', function() {
            var self = this;

            return self["native"].repeat = true;
          });

          return (Opal.defn(self, '$locale=', function(value) {
            var self = this;

            return self["native"].locale = value;
          }), nil) && 'locale=';
        })($scope.base, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new KeyboardEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var modifiers = "";

        if (desc.altKey) {
          modifiers += "Alt ";
        }

        if (desc.ctrlKey) {
          modifiers += "Ctrl ";
        }

        if (desc.shiftKey) {
          modifiers += "Shift" ;
        }

        if (desc.metaKey) {
          modifiers += "Meta ";
        }

        var event = document.createEvent("KeyboardEvent");
            event.initKeyboardEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.which, 0,
              modifiers, desc.repeat, desc.locale);

        return event;
      
            })}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        self.$alias_native("locale");

        self.$alias_native("repeat?", "repeat");

        Opal.defn(self, '$key', function() {
          var self = this;

          return self["native"].key || self["native"].keyIdentifier || nil;
        });

        Opal.defn(self, '$code', function() {
          var self = this;

          return self["native"].keyCode || self["native"].which || nil;
        });

        Opal.defn(self, '$char', function() {
          var $a, self = this;

          return self["native"].char || self["native"].charCode || (function() {if ((($a = self.$code()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$code().$chr()
            } else {
            return nil
          }; return nil; })();
        });

        Opal.alias(self, 'to_i', 'key');

        Opal.defn(self, '$down?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("keydown");
        });

        Opal.defn(self, '$press?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("keypress");
        });

        return (Opal.defn(self, '$up?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("keyup");
        }), nil) && 'up?';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/focus"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$convert', '$supported?', '$DOM']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Focus(){};
        var self = $Focus = $klass($base, $super, 'Focus', $Focus);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Focus");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$view=', function(value) {
            var self = this;

            return self["native"].view = $scope.get('Native').$convert(value);
          });

          return (Opal.defn(self, '$related=', function(elem) {
            var self = this;

            return self["native"].relatedTarget = $scope.get('Native').$convert(elem);
          }), nil) && 'related=';
        })($scope.base, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new FocusEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("FocusEvent");
            event.initFocusEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0, desc.relatedTarget);

        return event;
      
            })}};

        return (Opal.defn(self, '$related', function() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget);
        }), nil) && 'related';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/wheel"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$===', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Wheel(){};
        var self = $Wheel = $klass($base, $super, 'Wheel', $Wheel);

        var def = self.$$proto, $scope = self.$$scope;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("WheelEvent")['$nil?']()['$!']();
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$x=', function(value) {
            var self = this;

            return self["native"].deltaX = value;
          });

          Opal.defn(self, '$y=', function(value) {
            var self = this;

            return self["native"].deltaY = value;
          });

          Opal.defn(self, '$z=', function(value) {
            var self = this;

            return self["native"].deltaZ = value;
          });

          return (Opal.defn(self, '$mode=', function(value) {
            var self = this, $case = nil;

            value = (function() {$case = value;if ("pixel"['$===']($case)) {return WheelEvent.DOM_DELTA_PIXEL;}else if ("line"['$===']($case)) {return WheelEvent.DOM_DELTA_LINE;}else if ("page"['$===']($case)) {return WheelEvent.DOM_DELTA_PAGE;}else { return nil }})();
            return self["native"].deltaMode = value;
          }), nil) && 'mode=';
        })($scope.base, $scope.get('Definition'));

        Opal.defs(self, '$construct', function(name, desc) {
          var self = this;

          return new WheelEvent(name, desc);
        });

        self.$alias_native("x", "deltaX");

        self.$alias_native("y", "deltaY");

        self.$alias_native("z", "deltaZ");

        return (Opal.defn(self, '$mode', function() {
          var self = this, $case = nil;

          return (function() {$case = self["native"].deltaMode;if ((WheelEvent.DOM_DELTA_PIXEL)['$===']($case)) {return "pixel"}else if ((WheelEvent.DOM_DELTA_LINE)['$===']($case)) {return "line"}else if ((WheelEvent.DOM_DELTA_PAGE)['$===']($case)) {return "page"}else { return nil }})();
        }), nil) && 'mode';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/composition"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Composition(){};
        var self = $Composition = $klass($base, $super, 'Composition', $Composition);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Composition");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$data=', function(value) {
            var self = this;

            return self["native"].data = value;
          });

          return (Opal.defn(self, '$locale=', function(value) {
            var self = this;

            return self["native"].locale = value;
          }), nil) && 'locale=';
        })($scope.base, (($scope.get('UI')).$$scope.get('Definition')));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new CompositionEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("CompositionEvent");
            event.initCompositionEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.data, desc.locale);

        return event;
      
            })}};

        self.$alias_native("data");

        self.$alias_native("locale");

        Opal.defn(self, '$start?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionstart");
        });

        Opal.defn(self, '$update?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionupdate");
        });

        return (Opal.defn(self, '$end?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionend");
        }), nil) && 'end?';
      })($scope.base, $scope.get('UI'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/animation"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Animation(){};
        var self = $Animation = $klass($base, $super, 'Animation', $Animation);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Animation");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$animation=', function(value) {
            var self = this;

            return self["native"].animationName = value;
          });

          return (Opal.defn(self, '$elapsed=', function(value) {
            var self = this;

            return self["native"].elapsedTime = value;
          }), nil) && 'elapsed=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new AnimationEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("AnimationEvent");
            event.initAnimationEvent(name, desc.bubbles, desc.cancelable,
              desc.animationName, desc.elapsedTime);

        return event;
      
            })}};

        self.$alias_native("name", "animationName");

        return self.$alias_native("elapsed", "elapsedTime");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/audio_processing"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $AudioProcessing(){};
        var self = $AudioProcessing = $klass($base, $super, 'AudioProcessing', $AudioProcessing);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.AudioProcessing");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$time=', function(value) {
            var self = this;

            return self["native"].playbackTime = value;
          });

          Opal.defn(self, '$input=', function(value) {
            var self = this;

            return self["native"].inputBuffer = value;
          });

          return (Opal.defn(self, '$output=', function(value) {
            var self = this;

            return self["native"].outputBuffer = value;
          }), nil) && 'output=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new AudioProcessingEvent(name, desc);
            })}};

        self.$alias_native("time", "playbackTime");

        self.$alias_native("input", "inputBuffer");

        return self.$alias_native("output", "outputBuffer");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/before_unload"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $BeforeUnload(){};
        var self = $BeforeUnload = $klass($base, $super, 'BeforeUnload', $BeforeUnload);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.BeforeUnload");
        });

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new BeforeUnloadEvent(name, desc);
            }), nil) && 'construct'
            } else {
            return nil
          }
          } else {
          return nil
        };
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/clipboard"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Clipboard(){};
        var self = $Clipboard = $klass($base, $super, 'Clipboard', $Clipboard);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Clipboard");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$data=', function(value) {
            var self = this;

            return self["native"].data = value;
          });

          return (Opal.defn(self, '$type=', function(value) {
            var self = this;

            return self["native"].dataType = value;
          }), nil) && 'type=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new ClipboardEvent(name, desc);
            })}};

        self.$alias_native("data");

        return self.$alias_native("type", "dataType");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/device_light"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceLight(){};
        var self = $DeviceLight = $klass($base, $super, 'DeviceLight', $DeviceLight);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceLight");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          return (Opal.defn(self, '$value=', function(value) {
            var self = this;

            return self["native"].value = value;
          }), nil) && 'value='
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new DeviceLightEvent(name, desc);
            })}};

        return self.$alias_native("value");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/device_motion"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$new', '$to_n', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceMotion(){};
        var self = $DeviceMotion = $klass($base, $super, 'DeviceMotion', $DeviceMotion);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceMotion");
        });

        Opal.cdecl($scope, 'Acceleration', $scope.get('Struct').$new("x", "y", "z"));

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$acceleration=', function(value) {
            var self = this;

            return self["native"].acceleration = value.$to_n();
          });

          Opal.defn(self, '$acceleration_with_gravity=', function(value) {
            var self = this;

            return self["native"].accelerationIncludingGravity = value.$to_n();
          });

          Opal.defn(self, '$rotation=', function(value) {
            var self = this;

            return self["native"].rotationRate = value;
          });

          return (Opal.defn(self, '$interval=', function(value) {
            var self = this;

            return self["native"].interval = value;
          }), nil) && 'interval=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new DeviceMotionEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceMotionEvent");
            event.initDeviceMotionEvent(name, desc.bubbles, desc.cancelable,
              desc.acceleration, desc.accelerationIncludingGravity,
              desc.rotationRate, desc.interval);

        return event;
      
            })}};

        self.$alias_native("acceleration");

        self.$alias_native("acceleration_with_gravity", "accelerationIncludingGravity");

        self.$alias_native("rotation", "rotationRate");

        return self.$alias_native("interval");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/device_orientation"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceOrientation(){};
        var self = $DeviceOrientation = $klass($base, $super, 'DeviceOrientation', $DeviceOrientation);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceOrientation");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$absolute=', function(value) {
            var self = this;

            return self["native"].absolute = value;
          });

          Opal.defn(self, '$alpha=', function(value) {
            var self = this;

            return self["native"].alpha = value;
          });

          Opal.defn(self, '$beta=', function(value) {
            var self = this;

            return self["native"].beta = value;
          });

          return (Opal.defn(self, '$gamma=', function(value) {
            var self = this;

            return self["native"].gamma = value;
          }), nil) && 'gamma=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new DeviceOrientationEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceOrientationEvent");
            event.initDeviceOrientationEvent(name, desc.bubbles, desc.cancelable,
              desc.alpha, desc.beta, desc.gamma, desc.absolute);

        return event;
      
            })}};

        self.$alias_native("absolute");

        self.$alias_native("alpha");

        self.$alias_native("beta");

        return self.$alias_native("gamma");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/device_proximity"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DeviceProximity(){};
        var self = $DeviceProximity = $klass($base, $super, 'DeviceProximity', $DeviceProximity);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.DeviceProximity");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$value=', function(value) {
            var self = this;

            return self["native"].value = value;
          });

          Opal.defn(self, '$min=', function(value) {
            var self = this;

            return self["native"].min = value;
          });

          return (Opal.defn(self, '$max=', function(value) {
            var self = this;

            return self["native"].max = value;
          }), nil) && 'max=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new DeviceProximityEvent(name, desc);
            })}};

        self.$alias_native("value");

        self.$alias_native("min");

        return self.$alias_native("max");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/drag"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$include', '$new', '$convert', '$elem', '$supported?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$raise']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Drag(){};
        var self = $Drag = $klass($base, $super, 'Drag', $Drag);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Drag");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          (function($base, $super) {
            function $Client(){};
            var self = $Client = $klass($base, $super, 'Client', $Client);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', function(value) {
              var self = this;

              return self["native"].clientX = value;
            });

            return (Opal.defn(self, '$y=', function(value) {
              var self = this;

              return self["native"].clientY = value;
            }), nil) && 'y=';
          })($scope.base, null);

          (function($base, $super) {
            function $Screen(){};
            var self = $Screen = $klass($base, $super, 'Screen', $Screen);

            var def = self.$$proto, $scope = self.$$scope;

            def["native"] = nil;
            self.$include($scope.get('Native'));

            Opal.defn(self, '$x=', function(value) {
              var self = this;

              return self["native"].screenX = value;
            });

            return (Opal.defn(self, '$y=', function(value) {
              var self = this;

              return self["native"].screenY = value;
            }), nil) && 'y=';
          })($scope.base, null);

          Opal.defn(self, '$alt!', function() {
            var self = this;

            return self["native"].altKey = true;
          });

          Opal.defn(self, '$ctrl!', function() {
            var self = this;

            return self["native"].ctrlKey = true;
          });

          Opal.defn(self, '$meta!', function() {
            var self = this;

            return self["native"].metaKey = true;
          });

          Opal.defn(self, '$button=', function(value) {
            var self = this;

            return self["native"].button = value;
          });

          Opal.defn(self, '$client', function() {
            var self = this;

            return $scope.get('Client').$new(self["native"]);
          });

          Opal.defn(self, '$screen', function() {
            var self = this;

            return $scope.get('Screen').$new(self["native"]);
          });

          Opal.defn(self, '$related=', function(elem) {
            var self = this;

            return self["native"].relatedTarget = $scope.get('Native').$convert(elem);
          });

          return (Opal.defn(self, '$transfer=', function(value) {
            var self = this;

            return self["native"].dataTransfer = $scope.get('Native').$convert(self.$elem());
          }), nil) && 'transfer=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new DragEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("DragEvent");
            event.initDragEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey, desc.altKey, desc.shiftKey, desc.metaKey,
              desc.button || 0, desc.relatedTarget, desc.dataTransfer);

        return event;
      
            })}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        self.$alias_native("button");

        Opal.defn(self, '$client', function() {
          var self = this;

          return $scope.get('Position').$new(self["native"].clientX, self["native"].clientY);
        });

        Opal.defn(self, '$screen', function() {
          var $a, self = this;

          if ((($a = (typeof(self["native"].screenX) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Position').$new(self["native"].screenX, self["native"].screenY)
            } else {
            return nil
          };
        });

        Opal.defn(self, '$x', function() {
          var self = this;

          return self.$screen().$x();
        });

        Opal.defn(self, '$y', function() {
          var self = this;

          return self.$screen().$y();
        });

        Opal.defn(self, '$related', function() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget);
        });

        return (Opal.defn(self, '$transfer', function() {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        }), nil) && 'transfer';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/gamepad"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Gamepad(){};
        var self = $Gamepad = $klass($base, $super, 'Gamepad', $Gamepad);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Gamepad");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$id=', function(value) {
            var self = this;

            return self["native"].id = value;
          });

          Opal.defn(self, '$index=', function(value) {
            var self = this;

            return self["native"].index = value;
          });

          Opal.defn(self, '$at=', function(value) {
            var self = this;

            return self["native"].timestamp = value;
          });

          Opal.defn(self, '$axes=', function(value) {
            var self = this;

            return self["native"].axes = value;
          });

          return (Opal.defn(self, '$buttons=', function(value) {
            var self = this;

            return self["native"].buttons = value;
          }), nil) && 'buttons=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new GamepadEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        gamepad:    desc });
            })}};

        Opal.defn(self, '$id', function() {
          var self = this;

          return self["native"].gamepad.id;
        });

        Opal.defn(self, '$index', function() {
          var self = this;

          return self["native"].gamepad.index;
        });

        Opal.defn(self, '$at', function() {
          var self = this;

          return self["native"].gamepad.timestamp;
        });

        Opal.defn(self, '$axes', function() {
          var self = this;

          return self["native"].gamepad.axes;
        });

        return (Opal.defn(self, '$buttons', function() {
          var self = this;

          return self["native"].gamepad.buttons;
        }), nil) && 'buttons';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/hash_change"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $HashChange(){};
        var self = $HashChange = $klass($base, $super, 'HashChange', $HashChange);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.HashChange");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$old=', function(value) {
            var self = this;

            return self["native"].oldURL = value;
          });

          return (Opal.defn(self, '$new=', function(value) {
            var self = this;

            return self["native"].newURL = value;
          }), nil) && 'new=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new HashChangeEvent(name, desc);
            })}};

        self.$alias_native("old", "oldURL");

        return self.$alias_native("new", "newURL");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/progress"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Progress(){};
        var self = $Progress = $klass($base, $super, 'Progress', $Progress);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Progress");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$computable=', function(value) {
            var self = this;

            return self["native"].computableLength = value;
          });

          Opal.defn(self, '$loaded=', function(value) {
            var self = this;

            return self["native"].loaded = value;
          });

          return (Opal.defn(self, '$total=', function(value) {
            var self = this;

            return self["native"].total = value;
          }), nil) && 'total=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new ProgressEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("ProgressEvent");
            event.initProgressEvent(name, desc.bubbles, desc.cancelable,
              desc.computable, desc.loaded, desc.total);

        return event;
      
            })}};

        self.$alias_native("computable?", "computableLength");

        self.$alias_native("loaded");

        return self.$alias_native("total");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/page_transition"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $PageTransition(){};
        var self = $PageTransition = $klass($base, $super, 'PageTransition', $PageTransition);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.PageTransition");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          return (Opal.defn(self, '$persisted=', function(value) {
            var self = this;

            return self["native"].persisted = value;
          }), nil) && 'persisted='
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.PageTransition")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new PageTransitionEvent(name, desc);
            })}};

        return self.$alias_native("persisted?", "persisted");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/pop_state"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $PopState(){};
        var self = $PopState = $klass($base, $super, 'PopState', $PopState);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.PopState");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          return (Opal.defn(self, '$state=', function(value) {
            var self = this;

            return self["native"].state = value;
          }), nil) && 'state='
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new PopStateEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent('PopStateEvent');
            event.initPopStateEvent(name, desc.bubbles, desc.cancelable,
              desc.state);

        return event;
      
            })}};

        return self.$alias_native("state");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/storage"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Storage(){};
        var self = $Storage = $klass($base, $super, 'Storage', $Storage);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Storage");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$key=', function(value) {
            var self = this;

            return self["native"].key = value;
          });

          Opal.defn(self, '$new=', function(value) {
            var self = this;

            return self["native"].newValue = value;
          });

          Opal.defn(self, '$old=', function(value) {
            var self = this;

            return self["native"].oldValue = value;
          });

          Opal.defn(self, '$area=', function(value) {
            var self = this;

            return self["native"].storageArea = value;
          });

          return (Opal.defn(self, '$url=', function(value) {
            var self = this;

            return self["native"].url = value;
          }), nil) && 'url=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new StorageEvent(name, desc);
            })}};

        self.$alias_native("key");

        self.$alias_native("new", "newValue");

        self.$alias_native("old", "oldValue");

        self.$alias_native("area", "storageArea");

        return self.$alias_native("url");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/touch"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Touch(){};
        var self = $Touch = $klass($base, $super, 'Touch', $Touch);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Touch");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$alt!', function() {
            var self = this;

            return self["native"].altKey = true;
          });

          Opal.defn(self, '$ctrl!', function() {
            var self = this;

            return self["native"].ctrlKey = true;
          });

          Opal.defn(self, '$meta!', function() {
            var self = this;

            return self["native"].metaKey = true;
          });

          return (Opal.defn(self, '$shift!', function() {
            var self = this;

            return self["native"].shiftKey = true;
          }), nil) && 'shift!';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new TouchEvent(name, desc);
            })}};

        self.$alias_native("alt?", "altKey");

        self.$alias_native("ctrl?", "ctrlKey");

        self.$alias_native("meta?", "metaKey");

        self.$alias_native("shift?", "shiftKey");

        Opal.defn(self, '$cancel?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchcancel");
        });

        Opal.defn(self, '$end?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchend");
        });

        Opal.defn(self, '$leave?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchleave");
        });

        Opal.defn(self, '$move?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchmove");
        });

        return (Opal.defn(self, '$start?', function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchstart");
        }), nil) && 'start?';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/sensor"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Sensor(){};
        var self = $Sensor = $klass($base, $super, 'Sensor', $Sensor);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Sensor");
        });

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new SensorEvent(name, desc);
            }), nil) && 'construct'
            } else {
            return nil
          }
          } else {
          return nil
        };
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["ostruct"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$each_pair', '$[]=', '$new_ostruct_member', '$[]', '$to_sym', '$>', '$length', '$raise', '$new', '$end_with?', '$!=', '$enum_for', '$is_a?', '$==', '$instance_variable_get', '$===', '$eql?', '$dup', '$to_n', '$hash', '$attr_reader', '$__send__', '$singleton_class', '$delete', '$respond_to?', '$define_singleton_method', '$__id__', '$class', '$any?', '$+', '$join', '$map', '$inspect']);
  return (function($base, $super) {
    function $OpenStruct(){};
    var self = $OpenStruct = $klass($base, $super, 'OpenStruct', $OpenStruct);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    def.table = nil;
    Opal.defn(self, '$initialize', function(hash) {
      var $a, $b, TMP_1, self = this;

      if (hash == null) {
        hash = nil
      }
      self.table = $hash2([], {});
      if (hash !== false && hash !== nil) {
        return ($a = ($b = hash).$each_pair, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
          if (self.table == null) self.table = nil;
if (key == null) key = nil;if (value == null) value = nil;
        return self.table['$[]='](self.$new_ostruct_member(key), value)}, TMP_1.$$s = self, TMP_1), $a).call($b)
        } else {
        return nil
      };
    });

    Opal.defn(self, '$[]', function(name) {
      var self = this;

      return self.table['$[]'](name.$to_sym());
    });

    Opal.defn(self, '$[]=', function(name, value) {
      var self = this;

      return self.table['$[]='](self.$new_ostruct_member(name), value);
    });

    Opal.defn(self, '$method_missing', function(name) {
      var $a, self = this, $splat_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      if ((($a = $rb_gt(args.$length(), 2)) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NoMethodError').$new("undefined method `" + (name) + "' for #<OpenStruct>", name))};
      if ((($a = name['$end_with?']("=")) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = args.$length()['$!='](1)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError').$new("wrong number of arguments (0 for 1)"))};
        return self.table['$[]='](self.$new_ostruct_member(name['$[]']($range(0, -2, false))), args['$[]'](0));
        } else {
        return self.table['$[]'](name.$to_sym())
      };
    });

    Opal.defn(self, '$each_pair', TMP_2 = function() {
      var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

      TMP_2.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_pair")
      };
      return ($a = ($b = self.table).$each_pair, $a.$$p = (TMP_3 = function(pair){var self = TMP_3.$$s || this, $a;
if (pair == null) pair = nil;
      return $a = Opal.yield1($yield, pair), $a === $breaker ? $a : $a}, TMP_3.$$s = self, TMP_3), $a).call($b);
    });

    Opal.defn(self, '$==', function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$=='](other.$instance_variable_get("@table"));
    });

    Opal.defn(self, '$===', function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$==='](other.$instance_variable_get("@table"));
    });

    Opal.defn(self, '$eql?', function(other) {
      var $a, self = this;

      if ((($a = other['$is_a?']($scope.get('OpenStruct'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return self.table['$eql?'](other.$instance_variable_get("@table"));
    });

    Opal.defn(self, '$to_h', function() {
      var self = this;

      return self.table.$dup();
    });

    Opal.defn(self, '$to_n', function() {
      var self = this;

      return self.table.$to_n();
    });

    Opal.defn(self, '$hash', function() {
      var self = this;

      return self.table.$hash();
    });

    self.$attr_reader("table");

    Opal.defn(self, '$delete_field', function(name) {
      var self = this, sym = nil;

      sym = name.$to_sym();
      try {
      self.$singleton_class().$__send__("remove_method", sym, "" + (sym) + "=")
      } catch ($err) {if (Opal.rescue($err, [$scope.get('NameError')])) {
        try {
          nil
        } finally {
          Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
        }
        }else { throw $err; }
      };
      return self.table.$delete(sym);
    });

    Opal.defn(self, '$new_ostruct_member', function(name) {
      var $a, $b, TMP_4, $c, TMP_5, self = this;

      name = name.$to_sym();
      if ((($a = self['$respond_to?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;
          if (self.table == null) self.table = nil;

        return self.table['$[]'](name)}, TMP_4.$$s = self, TMP_4), $a).call($b, name);
        ($a = ($c = self).$define_singleton_method, $a.$$p = (TMP_5 = function(x){var self = TMP_5.$$s || this;
          if (self.table == null) self.table = nil;
if (x == null) x = nil;
        return self.table['$[]='](name, x)}, TMP_5.$$s = self, TMP_5), $a).call($c, "" + (name) + "=");
      };
      return name;
    });

    var ostruct_ids;

    Opal.defn(self, '$inspect', function() {
      var $a, $b, TMP_6, self = this, result = nil;

      
      var top = (ostruct_ids === undefined),
          ostruct_id = self.$__id__();
    ;
      try {
      result = "#<" + (self.$class());
      
        if (top) {
          ostruct_ids = {};
        }
        if (ostruct_ids.hasOwnProperty(ostruct_id)) {
          return result + ' ...>';
        }
        ostruct_ids[ostruct_id] = true;
      
      if ((($a = self.table['$any?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, " ")};
      result = $rb_plus(result, ($a = ($b = self.$each_pair()).$map, $a.$$p = (TMP_6 = function(name, value){var self = TMP_6.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_6.$$s = self, TMP_6), $a).call($b).$join(", "));
      result = $rb_plus(result, ">");
      return result;
      } finally {
      
        if (top) {
          ostruct_ids = undefined;
        }
      
      };
    });

    return Opal.alias(self, 'to_s', 'inspect');
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/custom"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$supports?', '$end_with?', '$[]', '$to_n', '$merge!', '$Native', '$new', '$has_key?']);
  self.$require("ostruct");
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Custom(){};
        var self = $Custom = $klass($base, $super, 'Custom', $Custom);

        var def = self.$$proto, $scope = self.$$scope, $a, TMP_1, TMP_2;

        def.detail = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Custom");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          return (Opal.defn(self, '$method_missing', function(name, value) {
            var $a, self = this;

            if ((($a = name['$end_with?']("=")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self["native"][name['$[]']($range(0, -2, false))] = value;
              } else {
              return nil
            };
          }), nil) && 'method_missing'
        })($scope.base, $scope.get('Definition'));

        if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defs(self, '$construct', function(name, desc) {
            var self = this;

            return new CustomEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc });
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defs(self, '$construct', function(name, desc) {
            var self = this;

            
        var event = document.createEvent("CustomEvent");
            event.initCustomEvent(name, desc.bubbles, desc.cancelable, desc);

        return event;
      
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.createObject")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defs(self, '$construct', function(name, desc) {
            var self = this;

            return self.$Native(document.createEventObject())['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n();
          })
          } else {
          Opal.defs(self, '$construct', function(name, desc) {
            var self = this;

            return self.$Native(desc)['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n();
          })
        };

        Opal.defn(self, '$initialize', TMP_1 = function(event, callback) {
          var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          if (callback == null) {
            callback = nil
          }
          TMP_1.$$p = null;
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [event, callback]);
          return self.detail = $scope.get('Hash').$new(event.detail);
        });

        return (Opal.defn(self, '$method_missing', TMP_2 = function(id) {
          var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

          TMP_2.$$p = null;
          $zuper = [];
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if ((($a = self.detail['$has_key?'](id)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.detail['$[]'](id)};
          return Opal.find_super_dispatcher(self, 'method_missing', TMP_2, $iter).apply(self, $zuper);
        }), nil) && 'method_missing';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["buffer/array"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$[]', '$name_for', '$include', '$attr_reader', '$==', '$for', '$to_n', '$enum_for']);
  return (function($base, $super) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $Array(){};
      var self = $Array = $klass($base, $super, 'Array', $Array);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def["native"] = nil;
      Opal.defs(self, '$for', function(bits, type) {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("" + ($scope.get('Buffer').$name_for(bits, type)) + "Array");
      });

      self.$include($scope.get('Enumerable'));

      self.$attr_reader("buffer", "type");

      Opal.defn(self, '$initialize', TMP_1 = function(buffer, bits, type) {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        if (bits == null) {
          bits = nil
        }
        if (type == null) {
          type = nil
        }
        TMP_1.$$p = null;
        if ($scope.get('Native')['$=='](buffer)) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [buffer])
          } else {
          
        var klass = $scope.get('Array').$for(bits, type);

        Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new klass(buffer.$to_n())])
      ;
        };
        self.buffer = buffer;
        return self.type = type;
      });

      Opal.defn(self, '$bits', function() {
        var self = this;

        return self["native"].BYTES_PER_ELEMENT * 8;
      });

      Opal.defn(self, '$[]', function(index, offset) {
        var self = this;

        if (offset == null) {
          offset = nil
        }
        if (offset !== false && offset !== nil) {
          return self["native"].subarray(index, offset);
          } else {
          return self["native"][index];
        };
      });

      Opal.defn(self, '$[]=', function(index, value) {
        var self = this;

        return self["native"][index] = value;
      });

      Opal.defn(self, '$bytesize', function() {
        var self = this;

        return self["native"].byteLength;
      });

      Opal.defn(self, '$each', TMP_2 = function() {
        var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil;

        TMP_2.$$p = null;
        if (($yield !== nil)) {
          } else {
          return self.$enum_for("each")
        };
        
      for (var i = 0, length = self["native"].length; i < length; i++) {
        ((($a = Opal.yield1($yield, self["native"][i])) === $breaker) ? $breaker.$v : $a)
      }
    ;
        return self;
      });

      Opal.defn(self, '$length', function() {
        var self = this;

        return self["native"].length;
      });

      Opal.defn(self, '$merge!', function(other, offset) {
        var self = this;

        return self["native"].set(other.$to_n(), offset);
      });

      return Opal.alias(self, 'size', 'length');
    })($scope.base, $scope.get('Native'))
  })($scope.base, $scope.get('Native'))
};

/* Generated by Opal 0.9.4 */
Opal.modules["buffer/view"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$include', '$!', '$nil?', '$[]', '$attr_reader', '$native?', '$to_n', '$name_for']);
  return (function($base, $super) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $scope = self.$$scope;

    return (function($base, $super) {
      function $View(){};
      var self = $View = $klass($base, $super, 'View', $View);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def["native"] = nil;
      self.$include($scope.get('Native'));

      Opal.defs(self, '$supported?', function() {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("DataView")['$nil?']()['$!']();
      });

      self.$attr_reader("buffer", "offset");

      Opal.defn(self, '$initialize', TMP_1 = function(buffer, offset, length) {
        var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        if (offset == null) {
          offset = nil
        }
        if (length == null) {
          length = nil
        }
        TMP_1.$$p = null;
        if ((($a = self['$native?'](buffer)) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [buffer])
        } else if ((($a = (($b = offset !== false && offset !== nil) ? length : offset)) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new DataView(buffer.$to_n(), offset.$to_n(), length.$to_n())])
        } else if (offset !== false && offset !== nil) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new DataView(buffer.$to_n(), offset.$to_n())])
          } else {
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new DataView(buffer.$to_n())])
        };
        self.buffer = buffer;
        return self.offset = offset;
      });

      Opal.defn(self, '$length', function() {
        var self = this;

        return self["native"].byteLength;
      });

      Opal.alias(self, 'size', 'length');

      Opal.defn(self, '$get', function(offset, bits, type, little) {
        var self = this;

        if (bits == null) {
          bits = 8
        }
        if (type == null) {
          type = "unsigned"
        }
        if (little == null) {
          little = false
        }
        return self["native"]["get" + $scope.get('Buffer').$name_for(bits, type)](offset, little);
      });

      Opal.alias(self, '[]', 'get');

      Opal.defn(self, '$set', function(offset, value, bits, type, little) {
        var self = this;

        if (bits == null) {
          bits = 8
        }
        if (type == null) {
          type = "unsigned"
        }
        if (little == null) {
          little = false
        }
        return self["native"]["set" + $scope.get('Buffer').$name_for(bits, type)](offset, value, little);
      });

      Opal.alias(self, '[]=', 'set');

      Opal.defn(self, '$get_int8', function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getInt8(offset, little);
      });

      Opal.defn(self, '$set_int8', function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setInt8(offset, value, little);
      });

      Opal.defn(self, '$get_uint8', function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getUint8(offset, little);
      });

      Opal.defn(self, '$set_uint8', function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setUint8(offset, value, little);
      });

      Opal.defn(self, '$get_int16', function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getInt16(offset, little);
      });

      Opal.defn(self, '$set_int16', function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setInt16(offset, value, little);
      });

      Opal.defn(self, '$get_uint16', function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getUint16(offset, little);
      });

      Opal.defn(self, '$set_uint16', function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setUint16(offset, value, little);
      });

      Opal.defn(self, '$get_int32', function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getInt32(offset, little);
      });

      Opal.defn(self, '$set_int32', function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setInt32(offset, value, little);
      });

      Opal.defn(self, '$get_uint32', function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getUint32(offset, little);
      });

      Opal.defn(self, '$set_uint32', function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setUint32(offset, value, little);
      });

      Opal.defn(self, '$get_float32', function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getFloat32(offset, little);
      });

      Opal.defn(self, '$set_float32', function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setFloat32(offset, value, little);
      });

      Opal.defn(self, '$get_float64', function(offset, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].getFloat64(offset, little);
      });

      return (Opal.defn(self, '$set_float64', function(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false
        }
        return self["native"].setFloat64(offset, value, little);
      }), nil) && 'set_float64';
    })($scope.base, null)
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["buffer"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$!', '$nil?', '$[]', '$===', '$native?', '$new']);
  self.$require("native");
  self.$require("buffer/array");
  self.$require("buffer/view");
  return (function($base, $super) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def["native"] = nil;
    self.$include($scope.get('Native'));

    Opal.defs(self, '$supported?', function() {
      var self = this;
      if ($gvars.$ == null) $gvars.$ = nil;

      return $gvars.$['$[]']("ArrayBuffer")['$nil?']()['$!']();
    });

    Opal.defs(self, '$name_for', function(bits, type) {
      var self = this, $case = nil;

      return "" + ((function() {$case = type;if ("unsigned"['$===']($case)) {return "Uint"}else if ("signed"['$===']($case)) {return "Int"}else if ("float"['$===']($case)) {return "Float"}else { return nil }})()) + (bits);
    });

    Opal.defn(self, '$initialize', TMP_1 = function(size, bits) {
      var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

      if (bits == null) {
        bits = 8
      }
      TMP_1.$$p = null;
      if ((($a = self['$native?'](size)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [size])
        } else {
        return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new ArrayBuffer(size * (bits / 8))])
      };
    });

    Opal.defn(self, '$length', function() {
      var self = this;

      return self["native"].byteLength;
    });

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$to_a', function(bits, type) {
      var self = this;

      if (bits == null) {
        bits = 8
      }
      if (type == null) {
        type = "unsigned"
      }
      return $scope.get('Array').$new(self, bits, type);
    });

    return (Opal.defn(self, '$view', function(offset, length) {
      var self = this;

      if (offset == null) {
        offset = nil
      }
      if (length == null) {
        length = nil
      }
      return $scope.get('View').$new(self, offset, length);
    }), nil) && 'view';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/message"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$supports?', '$convert', '$supported?', '$new', '$alias_native']);
  self.$require("buffer");
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Message(){};
        var self = $Message = $klass($base, $super, 'Message', $Message);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Message");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$data=', function(value) {
            var self = this;

            return self["native"].data = value;
          });

          Opal.defn(self, '$origin=', function(value) {
            var self = this;

            return self["native"].origin = value;
          });

          return (Opal.defn(self, '$source=', function(value) {
            var self = this;

            return self["native"].source = $scope.get('Native').$convert(value);
          }), nil) && 'source=';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new MessageEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("MessageEvent");
            event.initMessageEvent(name, desc.bubbles, desc.cancelable,
              desc.data, desc.origin, "", desc.source || window);

        return event;
      
            })}};

        Opal.defn(self, '$data', function() {
          var self = this;

          
      if (window.ArrayBuffer && self["native"].data instanceof ArrayBuffer) {
        return $scope.get('Buffer').$new(self["native"].data);
      }
      else if (window.Blob && self["native"].data instanceof Blob) {
        return $scope.get('Blob').$new(self["native"].data);
      }
      else {
        return self["native"].data;
      }
    ;
        });

        self.$alias_native("origin");

        return (Opal.defn(self, '$source', function() {
          var self = this;

          
      var source = self["native"].source;

      if (window.Window && source instanceof window.Window) {
        return $scope.get('Window').$new(source);
      }
      else {
        return nil;
      }
    ;
        }), nil) && 'source';
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event/close"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Close(){};
        var self = $Close = $klass($base, $super, 'Close', $Close);

        var def = self.$$proto, $scope = self.$$scope, $a;

        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("Event.Close");
        });

        (function($base, $super) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$code=', function(value) {
            var self = this;

            return self["native"].code = value;
          });

          Opal.defn(self, '$reason=', function(value) {
            var self = this;

            return self["native"].reason = value;
          });

          Opal.defn(self, '$clean!', function(value) {
            var self = this;

            return self["native"].wasClean = true;
          });

          return (Opal.defn(self, '$not_clean!', function(value) {
            var self = this;

            return self["native"].wasClean = false;
          }), nil) && 'not_clean!';
        })($scope.base, $scope.get('Definition'));

        if ((($a = self['$supported?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              return new CloseEvent(name, desc);
            })
          } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defs(self, '$construct', function(name, desc) {
              var self = this;

              
        var event = document.createEvent("CloseEvent");
            event.initCloseEvent(name, desc.bubbles, desc.cancelable,
              desc.wasClean, desc.code, desc.reason);

        return event;
      
            })}};

        self.$alias_native("code");

        self.$alias_native("reason");

        return self.$alias_native("clean?", "wasClean");
      })($scope.base, $scope.get('Event'))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/event"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$gsub', '$[]', '$aliases', '$name_for', '$===', '$class_for', '$new', '$construct', '$to_proc', '$const_get', '$arguments=', '$supports?', '$merge!', '$Native', '$to_n', '$==', '$name', '$attr_reader', '$attr_writer', '$convert', '$alias_native', '$off', '$prevent', '$stop']);
  self.$require("browser/event/base");
  self.$require("browser/event/ui");
  self.$require("browser/event/mouse");
  self.$require("browser/event/keyboard");
  self.$require("browser/event/focus");
  self.$require("browser/event/wheel");
  self.$require("browser/event/composition");
  self.$require("browser/event/animation");
  self.$require("browser/event/audio_processing");
  self.$require("browser/event/before_unload");
  self.$require("browser/event/composition");
  self.$require("browser/event/clipboard");
  self.$require("browser/event/device_light");
  self.$require("browser/event/device_motion");
  self.$require("browser/event/device_orientation");
  self.$require("browser/event/device_proximity");
  self.$require("browser/event/drag");
  self.$require("browser/event/gamepad");
  self.$require("browser/event/hash_change");
  self.$require("browser/event/progress");
  self.$require("browser/event/page_transition");
  self.$require("browser/event/pop_state");
  self.$require("browser/event/storage");
  self.$require("browser/event/touch");
  self.$require("browser/event/sensor");
  self.$require("browser/event/custom");
  self.$require("browser/event/message");
  self.$require("browser/event/close");
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2, TMP_3;

      def["native"] = def.on = def.callback = nil;
      Opal.defs(self, '$aliases', function() {
        var $a, self = this;
        if (self.aliases == null) self.aliases = nil;

        return ((($a = self.aliases) !== false && $a !== nil) ? $a : self.aliases = $hash2(["dom:load", "hover"], {"dom:load": "DOMContentLoaded", "hover": "mouse:over"}));
      });

      Opal.defs(self, '$name_for', function(name) {
        var $a, self = this;

        return (((($a = self.$aliases()['$[]'](name)) !== false && $a !== nil) ? $a : name)).$gsub(":", "");
      });

      Opal.defs(self, '$class_for', function(name) {
        var self = this, $case = nil;

        return (function() {$case = self.$name_for(name);if ("animationend"['$===']($case) || "animationiteration"['$===']($case) || "animationstart"['$===']($case)) {return $scope.get('Animation')}else if ("audioprocess"['$===']($case)) {return $scope.get('AudioProcessing')}else if ("beforeunload"['$===']($case)) {return $scope.get('BeforeUnload')}else if ("compositionend"['$===']($case) || "compositionstart"['$===']($case) || "compositionupdate"['$===']($case)) {return $scope.get('Composition')}else if ("copy"['$===']($case) || "cut"['$===']($case)) {return $scope.get('Clipboard')}else if ("devicelight"['$===']($case)) {return $scope.get('DeviceLight')}else if ("devicemotion"['$===']($case)) {return $scope.get('DeviceMotion')}else if ("deviceorientation"['$===']($case)) {return $scope.get('DeviceOrientation')}else if ("deviceproximity"['$===']($case)) {return $scope.get('DeviceProximity')}else if ("drag"['$===']($case) || "dragend"['$===']($case) || "dragleave"['$===']($case) || "dragover"['$===']($case) || "dragstart"['$===']($case) || "drop"['$===']($case)) {return $scope.get('Drag')}else if ("gamepadconnected"['$===']($case) || "gamepaddisconnected"['$===']($case)) {return $scope.get('Gamepad')}else if ("hashchange"['$===']($case)) {return $scope.get('HashChange')}else if ("load"['$===']($case) || "loadend"['$===']($case) || "loadstart"['$===']($case)) {return $scope.get('Progress')}else if ("pagehide"['$===']($case) || "pageshow"['$===']($case)) {return $scope.get('PageTransition')}else if ("popstate"['$===']($case)) {return $scope.get('PopState')}else if ("storage"['$===']($case)) {return $scope.get('Storage')}else if ("touchcancel"['$===']($case) || "touchend"['$===']($case) || "touchleave"['$===']($case) || "touchmove"['$===']($case) || "touchstart"['$===']($case)) {return $scope.get('Touch')}else if ("compassneedscalibration"['$===']($case) || "userproximity"['$===']($case)) {return $scope.get('Sensor')}else if ("message"['$===']($case)) {return $scope.get('Message')}else if ("close"['$===']($case)) {return $scope.get('Close')}else if ("click"['$===']($case) || "contextmenu"['$===']($case) || "dblclick"['$===']($case) || "mousedown"['$===']($case) || "mouseenter"['$===']($case) || "mouseleave"['$===']($case) || "mousemove"['$===']($case) || "mouseout"['$===']($case) || "mouseover"['$===']($case) || "mouseup"['$===']($case) || "show"['$===']($case)) {return $scope.get('Mouse')}else if ("keydown"['$===']($case) || "keypress"['$===']($case) || "keyup"['$===']($case)) {return $scope.get('Keyboard')}else if ("blur"['$===']($case) || "focus"['$===']($case) || "focusin"['$===']($case) || "focusout"['$===']($case)) {return $scope.get('Focus')}else if ("wheel"['$===']($case)) {return $scope.get('Wheel')}else if ("abort"['$===']($case) || "afterprint"['$===']($case) || "beforeprint"['$===']($case) || "cached"['$===']($case) || "canplay"['$===']($case) || "canplaythrough"['$===']($case) || "change"['$===']($case) || "chargingchange"['$===']($case) || "chargingtimechange"['$===']($case) || "checking"['$===']($case) || "close"['$===']($case) || "dischargingtimechange"['$===']($case) || "DOMContentLoaded"['$===']($case) || "downloading"['$===']($case) || "durationchange"['$===']($case) || "emptied"['$===']($case) || "ended"['$===']($case) || "error"['$===']($case) || "fullscreenchange"['$===']($case) || "fullscreenerror"['$===']($case) || "input"['$===']($case) || "invalid"['$===']($case) || "levelchange"['$===']($case) || "loadeddata"['$===']($case) || "loadedmetadata"['$===']($case) || "noupdate"['$===']($case) || "obsolete"['$===']($case) || "offline"['$===']($case) || "online"['$===']($case) || "open"['$===']($case) || "orientationchange"['$===']($case) || "pause"['$===']($case) || "pointerlockchange"['$===']($case) || "pointerlockerror"['$===']($case) || "play"['$===']($case) || "playing"['$===']($case) || "ratechange"['$===']($case) || "readystatechange"['$===']($case) || "reset"['$===']($case) || "seeked"['$===']($case) || "seeking"['$===']($case) || "stalled"['$===']($case) || "submit"['$===']($case) || "success"['$===']($case) || "suspend"['$===']($case) || "timeupdate"['$===']($case) || "updateready"['$===']($case) || "visibilitychange"['$===']($case) || "volumechange"['$===']($case) || "waiting"['$===']($case)) {return $scope.get('Event')}else {return $scope.get('Custom')}})();
      });

      Opal.defs(self, '$supported?', function() {
        var self = this;

        return true;
      });

      Opal.defs(self, '$create', TMP_1 = function(name) {
        var $a, $b, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil, klass = nil, event = nil, $splat_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        TMP_1.$$p = null;
        name = self.$name_for(name);
        klass = self.$class_for(name);
        event = klass.$new(klass.$construct(name, ($a = ($b = klass.$const_get("Definition")).$new, $a.$$p = block.$to_proc(), $a).call($b)));
        (($a = [args]), $c = event, $c['$arguments='].apply($c, $a), $a[$a.length-1]);
        return event;
      });

      if ((($a = $scope.get('Browser')['$supports?']("Event.constructor")) !== nil && (!$a.$$is_boolean || $a == true))) {
        Opal.defs(self, '$construct', function(name, desc) {
          var self = this;

          return new Event(name, desc);
        })
      } else if ((($a = $scope.get('Browser')['$supports?']("Event.create")) !== nil && (!$a.$$is_boolean || $a == true))) {
        Opal.defs(self, '$construct', function(name, desc) {try {

          var self = this;

          
        var event = document.createEvent("HTMLEvents");
            event.initEvent(name, desc.bubbles, desc.cancelable);

        Opal.ret(self.$Native(event)['$merge!'](desc));
      
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        })
      } else if ((($a = $scope.get('Browser')['$supports?']("Event.createObject")) !== nil && (!$a.$$is_boolean || $a == true))) {
        Opal.defs(self, '$construct', function(name, desc) {
          var self = this;

          return self.$Native(document.createEventObject())['$merge!'](desc)['$merge!']({ type: name }).$to_n();
        })
        } else {
        Opal.defs(self, '$construct', function(name, desc) {
          var self = this;

          return self.$Native(desc)['$merge!']({ type: name }).$to_n();
        })
      };

      Opal.defs(self, '$new', TMP_2 = function(value, callback) {
        var self = this, $iter = TMP_2.$$p, $yield = $iter || nil, klass = nil, $zuper = nil, $zuper_index = nil;

        if (callback == null) {
          callback = nil
        }
        TMP_2.$$p = null;
        $zuper = [];
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if (self['$==']($scope.get('Event'))) {
          } else {
          return Opal.find_super_dispatcher(self, 'new', TMP_2, $iter, $Event).apply(self, $zuper)
        };
        klass = self.$class_for((function() {if (callback !== false && callback !== nil) {
          return callback.$name()
          } else {
          return value.type;
        }; return nil; })());
        if (klass['$==']($scope.get('Event'))) {
          return Opal.find_super_dispatcher(self, 'new', TMP_2, $iter, $Event).apply(self, $zuper)
          } else {
          return klass.$new(value, callback)
        };
      });

      self.$attr_reader("callback");

      self.$attr_writer("on");

      Opal.defn(self, '$initialize', TMP_3 = function(event, callback) {
        var self = this, $iter = TMP_3.$$p, $yield = $iter || nil;

        if (callback == null) {
          callback = nil
        }
        TMP_3.$$p = null;
        Opal.find_super_dispatcher(self, 'initialize', TMP_3, null).apply(self, [event]);
        return self.callback = callback;
      });

      Opal.defn(self, '$name', function() {
        var self = this;

        return self["native"].type;
      });

      Opal.defn(self, '$on', function() {
        var $a, self = this;

        return ((($a = self.on) !== false && $a !== nil) ? $a : $scope.get('Target').$convert(self["native"].currentTarget));
      });

      Opal.defn(self, '$target', function() {
        var self = this;

        return $scope.get('Target').$convert(self["native"].srcElement || self["native"].target);
      });

      Opal.defn(self, '$arguments', function() {
        var self = this;

        return self["native"].arguments || [];
      });

      Opal.defn(self, '$arguments=', function(args) {
        var self = this;

        return self["native"].arguments = args;
      });

      self.$alias_native("bubbles?", "bubbles");

      self.$alias_native("cancelable?", "cancelable");

      self.$alias_native("data");

      self.$alias_native("phase", "eventPhase");

      self.$alias_native("at", "timeStamp");

      Opal.defn(self, '$off', function() {
        var $a, self = this;

        if ((($a = self.callback) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.callback.$off()
          } else {
          return nil
        };
      });

      Opal.defn(self, '$stopped?', function() {
        var self = this;

        return !!self["native"].stopped;
      });

      Opal.defn(self, '$stop', function() {
        var $a, self = this;

        if ((($a = (typeof(self["native"].stopPropagation) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
          self["native"].stopPropagation();};
        return self["native"].stopped = true;
      });

      Opal.defn(self, '$prevent', function() {
        var $a, self = this;

        if ((($a = (typeof(self["native"].preventDefault) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
          self["native"].preventDefault();};
        return self["native"].prevented = true;
      });

      Opal.defn(self, '$prevented?', function() {
        var self = this;

        return !!self["native"].prevented;
      });

      return (Opal.defn(self, '$stop!', function() {
        var self = this;

        self.$prevent();
        return self.$stop();
      }), nil) && 'stop!';
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/window/view"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$to_n', '$supports?', '$raise']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $View(){};
        var self = $View = $klass($base, $super, 'View', $View);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defn(self, '$initialize', function(window) {
          var self = this;

          self.window = window;
          return self["native"] = window.$to_n();
        });

        if ((($a = $scope.get('Browser')['$supports?']("Window.innerSize")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$width', function() {
            var self = this;

            return self["native"].innerWidth;
          });

          return (Opal.defn(self, '$height', function() {
            var self = this;

            return self["native"].innerHeight;
          }), nil) && 'height';
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.clientSize")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$height', function() {
            var self = this;

            return self["native"].document.documentElement.clientHeight;
          });

          return (Opal.defn(self, '$width', function() {
            var self = this;

            return self["native"].document.documentElement.clientWidth;
          }), nil) && 'width';
          } else {
          Opal.defn(self, '$width', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window size unsupported");
          });

          return (Opal.defn(self, '$height', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window size unsupported");
          }), nil) && 'height';
        };
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/window/size"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$to_n', '$===', '$first', '$values_at', '$width', '$height', '$supports?', '$raise', '$set']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Size(){};
        var self = $Size = $klass($base, $super, 'Size', $Size);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defn(self, '$initialize', function(window) {
          var self = this;

          self.window = window;
          return self["native"] = window.$to_n();
        });

        Opal.defn(self, '$set', function() {
          var $a, $b, self = this, width = nil, height = nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          if ((($a = $scope.get('Hash')['$==='](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
            $b = args.$first().$values_at("width", "height"), $a = Opal.to_ary($b), width = ($a[0] == null ? nil : $a[0]), height = ($a[1] == null ? nil : $a[1]), $b
            } else {
            $b = args, $a = Opal.to_ary($b), width = ($a[0] == null ? nil : $a[0]), height = ($a[1] == null ? nil : $a[1]), $b
          };
          ((($a = width) !== false && $a !== nil) ? $a : width = self.$width());
          ((($a = height) !== false && $a !== nil) ? $a : height = self.$height());
          self["native"].resizeTo(width, height);
          return self;
        });

        if ((($a = $scope.get('Browser')['$supports?']("Window.outerSize")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$width', function() {
            var self = this;

            return self["native"].outerWidth;
          });

          Opal.defn(self, '$height', function() {
            var self = this;

            return self["native"].outerHeight;
          });
          } else {
          Opal.defn(self, '$width', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window outer size not supported");
          });

          Opal.defn(self, '$height', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window outer size not supported");
          });
        };

        Opal.defn(self, '$width=', function(value) {
          var self = this;

          return self.$set($hash2(["width"], {"width": value}));
        });

        return (Opal.defn(self, '$height=', function(value) {
          var self = this;

          return self.$set($hash2(["height"], {"height": value}));
        }), nil) && 'height=';
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/window/scroll"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$to_n', '$supports?', '$new', '$raise', '$x', '$position', '$y', '$[]']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Scroll(){};
        var self = $Scroll = $klass($base, $super, 'Scroll', $Scroll);

        var def = self.$$proto, $scope = self.$$scope, $a;

        def["native"] = nil;
        Opal.defn(self, '$initialize', function(window) {
          var self = this;

          self.window = window;
          return self["native"] = window.$to_n();
        });

        if ((($a = $scope.get('Browser')['$supports?']("Window.scroll")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$position', function() {
            var self = this;

            
        var doc  = self["native"].document,
            root = doc.documentElement,
            body = doc.body;

        var x = root.scrollLeft || body.scrollLeft,
            y = root.scrollTop  || body.scrollTop;
      ;
            return $scope.get('Position').$new(x, y);
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Window.pageOffset")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$position', function() {
            var self = this;

            return $scope.get('Position').$new(self["native"].pageXOffset, self["native"].pageYOffset);
          })
          } else {
          Opal.defn(self, '$position', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window scroll unsupported");
          })
        };

        Opal.defn(self, '$x', function() {
          var self = this;

          return self.$position().$x();
        });

        Opal.defn(self, '$y', function() {
          var self = this;

          return self.$position().$y();
        });

        Opal.defn(self, '$to', function(what) {
          var $a, self = this, x = nil, y = nil;

          x = ((($a = what['$[]']("x")) !== false && $a !== nil) ? $a : self.$x());
          y = ((($a = what['$[]']("y")) !== false && $a !== nil) ? $a : self.$y());
          self["native"].scrollTo(x, y);
          return self;
        });

        return (Opal.defn(self, '$by', function(what) {
          var $a, self = this, x = nil, y = nil;

          x = ((($a = what['$[]']("x")) !== false && $a !== nil) ? $a : 0);
          y = ((($a = what['$[]']("y")) !== false && $a !== nil) ? $a : 0);
          self["native"].scrollBy(x, y);
          return self;
        }), nil) && 'by';
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/window"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$delete', '$join', '$map', '$===', '$new', '$include', '$target', '$supports?', '$[]', '$raise', '$alert', '$prompt', '$confirm']);
  self.$require("browser/window/view");
  self.$require("browser/window/size");
  self.$require("browser/window/scroll");
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_2;

      def["native"] = nil;
      Opal.defs(self, '$open', function(url, options) {
        var $a, $b, TMP_1, self = this, name = nil, features = nil;

        name = options.$delete("name");
        features = ($a = ($b = options).$map, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this, $case = nil;
if (key == null) key = nil;if (value == null) value = nil;
        value = (function() {$case = value;if (true['$===']($case)) {return "yes"}else if (false['$===']($case)) {return "no"}else {return value}})();
          return "" + (key) + "=" + (value);}, TMP_1.$$s = self, TMP_1), $a).call($b).$join(",");
        
      var win = window.open(url, name, features);

      if (win == null) {
        return nil;
      }

      return self.$new(win);
    ;
      });

      self.$include($scope.get('Native'));

      self.$include((($scope.get('Event')).$$scope.get('Target')));

      ($a = ($b = self).$target, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this, $a;
        if ($gvars.window == null) $gvars.window = nil;
if (value == null) value = nil;
      if ((($a = value == window) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $gvars.window
          } else {
          return nil
        }}, TMP_2.$$s = self, TMP_2), $a).call($b);

      Opal.defn(self, '$alert', function(value) {
        var self = this;

        self["native"].alert(value);
        return value;
      });

      Opal.defn(self, '$prompt', function(value) {
        var self = this;

        return self["native"].prompt(value) || nil;
      });

      Opal.defn(self, '$confirm', function(value) {
        var self = this;

        return self["native"].confirm(value) || false;
      });

      Opal.defn(self, '$view', function() {
        var self = this;

        return $scope.get('View').$new(self);
      });

      Opal.defn(self, '$size', function() {
        var self = this;

        return $scope.get('Size').$new(self);
      });

      Opal.defn(self, '$scroll', function() {
        var self = this;

        return $scope.get('Scroll').$new(self);
      });

      if ((($a = $scope.get('Browser')['$supports?']("Window.send")) !== nil && (!$a.$$is_boolean || $a == true))) {
        Opal.defn(self, '$send', function(message, options) {
          var $a, self = this;

          if (options == null) {
            options = $hash2([], {})
          }
          return self["native"].postMessage(message, ((($a = options['$[]']("to")) !== false && $a !== nil) ? $a : "*"));
        })
        } else {
        Opal.defn(self, '$send', function(message, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {})
          }
          return self.$raise($scope.get('NotImplementedError'), "message sending unsupported");
        })
      };

      return (Opal.defn(self, '$close', function() {
        var self = this;

        
      return (window.open('', '_self', '') && window.close()) ||
             (window.opener = null && window.close()) ||
             (window.opener = '' && window.close());
    
      }), nil) && 'close';
    })($scope.base, null)
  })($scope.base);
  $gvars.window = (($scope.get('Browser')).$$scope.get('Window')).$new(window);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$alert', function(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$alert(value);
    });

    Opal.defn(self, '$prompt', function(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$prompt(value);
    });

    Opal.defn(self, '$confirm', function(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$confirm(value);
    });
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/node_set"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$uniq', '$map', '$DOM', '$convert', '$flatten', '$respond_to?', '$each', '$__send__', '$to_proc', '$===', '$at_css', '$at_xpath', '$[]', '$css', '$select', '$=~', '$search', '$xpath']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $NodeSet(){};
        var self = $NodeSet = $klass($base, $super, 'NodeSet', $NodeSet);

        var def = self.$$proto, $scope = self.$$scope, TMP_2;

        def.literal = nil;
        Opal.defs(self, '$[]', function() {
          var $a, $b, TMP_1, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var nodes = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            nodes[$splat_index] = arguments[$splat_index + 0];
          }
          return self.$new(($a = ($b = nodes.$flatten()).$map, $a.$$p = (TMP_1 = function(x){var self = TMP_1.$$s || this;
if (x == null) x = nil;
          return self.$DOM($scope.get('Native').$convert(x))}, TMP_1.$$s = self, TMP_1), $a).call($b).$uniq());
        });

        Opal.defn(self, '$initialize', function(literal) {
          var self = this;

          return self.literal = literal;
        });

        Opal.defn(self, '$method_missing', TMP_2 = function(name) {
          var $a, $b, TMP_3, $c, self = this, $iter = TMP_2.$$p, block = $iter || nil, result = nil, $splat_index = nil;

          var array_size = arguments.length - 1;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 1];
          }
          TMP_2.$$p = null;
          if ((($a = self.literal['$respond_to?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            ($a = ($b = self).$each, $a.$$p = (TMP_3 = function(el){var self = TMP_3.$$s || this, $a, $b;
if (el == null) el = nil;
            return ($a = ($b = el).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [name].concat(Opal.to_a(args)))}, TMP_3.$$s = self, TMP_3), $a).call($b);
            return self;
          };
          result = ($a = ($c = self.literal).$__send__, $a.$$p = block.$to_proc(), $a).apply($c, [name].concat(Opal.to_a(args)));
          if ((($a = result === self.literal) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self
          } else if ((($a = $scope.get('Array')['$==='](result)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('NodeSet').$new(result)
            } else {
            return result
          };
        });

        Opal.defn(self, '$at_css', function() {try {

          var $a, $b, TMP_4, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var rules = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            rules[$splat_index] = arguments[$splat_index + 0];
          }
          ($a = ($b = self).$each, $a.$$p = (TMP_4 = function(node){var self = TMP_4.$$s || this, $a, $b;
if (node == null) node = nil;
          if ((($a = node = ($b = node).$at_css.apply($b, Opal.to_a(rules))) !== nil && (!$a.$$is_boolean || $a == true))) {
              Opal.ret(node)
              } else {
              return nil
            }}, TMP_4.$$s = self, TMP_4), $a).call($b);
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        });

        Opal.defn(self, '$at_xpath', function() {try {

          var $a, $b, TMP_5, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var paths = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            paths[$splat_index] = arguments[$splat_index + 0];
          }
          ($a = ($b = self).$each, $a.$$p = (TMP_5 = function(node){var self = TMP_5.$$s || this, $a, $b;
if (node == null) node = nil;
          if ((($a = node = ($b = node).$at_xpath.apply($b, Opal.to_a(paths))) !== nil && (!$a.$$is_boolean || $a == true))) {
              Opal.ret(node)
              } else {
              return nil
            }}, TMP_5.$$s = self, TMP_5), $a).call($b);
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        });

        Opal.defn(self, '$css', function(path) {
          var $a, $b, TMP_6, self = this;

          return $scope.get('NodeSet')['$[]'](($a = ($b = self.literal).$map, $a.$$p = (TMP_6 = function(node){var self = TMP_6.$$s || this;
if (node == null) node = nil;
          return node.$css(path)}, TMP_6.$$s = self, TMP_6), $a).call($b));
        });

        Opal.defn(self, '$filter', function(expression) {
          var $a, $b, TMP_7, self = this;

          return ($a = ($b = self.literal).$select, $a.$$p = (TMP_7 = function(node){var self = TMP_7.$$s || this;
if (node == null) node = nil;
          return node['$=~'](expression)}, TMP_7.$$s = self, TMP_7), $a).call($b);
        });

        Opal.defn(self, '$search', function() {
          var $a, $b, TMP_8, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var what = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            what[$splat_index] = arguments[$splat_index + 0];
          }
          return $scope.get('NodeSet')['$[]'](($a = ($b = self.literal).$map, $a.$$p = (TMP_8 = function(node){var self = TMP_8.$$s || this, $a;
if (node == null) node = nil;
          return ($a = node).$search.apply($a, Opal.to_a(what))}, TMP_8.$$s = self, TMP_8), $a).call($b));
        });

        Opal.defn(self, '$xpath', function(path) {
          var $a, $b, TMP_9, self = this;

          return $scope.get('NodeSet')['$[]'](($a = ($b = self.literal).$map, $a.$$p = (TMP_9 = function(node){var self = TMP_9.$$s || this;
if (node == null) node = nil;
          return node.$xpath(path)}, TMP_9.$$s = self, TMP_9), $a).call($b));
        });

        return (Opal.defn(self, '$to_ary', function() {
          var self = this;

          return self.literal;
        }), nil) && 'to_ary';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/node"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$==', '$[]', '$new', '$raise', '$convert', '$respond_to?', '$each', '$<<', '$native?', '$===', '$>>', '$DOM', '$to_proc', '$parent', '$last', '$pop', '$select!', '$=~', '$remove_child', '$remove', '$children', '$supports?', '$node_type', '$first', '$select', '$element_children', '$to_s', '$next', '$!', '$element?', '$previous', '$try_convert', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Node(){};
        var self = $Node = $klass($base, $super, 'Node', $Node);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5, TMP_6, $a, TMP_8;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.cdecl($scope, 'ELEMENT_NODE', 1);

        Opal.cdecl($scope, 'ATTRIBUTE_NODE', 2);

        Opal.cdecl($scope, 'TEXT_NODE', 3);

        Opal.cdecl($scope, 'CDATA_SECTION_NODE', 4);

        Opal.cdecl($scope, 'ENTITY_REFERENCE_NOCE', 5);

        Opal.cdecl($scope, 'ENTITY_NODE', 6);

        Opal.cdecl($scope, 'PROCESSING_INSTRUCTION_NODE', 7);

        Opal.cdecl($scope, 'COMMENT_NODE', 8);

        Opal.cdecl($scope, 'DOCUMENT_NODE', 9);

        Opal.cdecl($scope, 'DOCUMENT_TYPE_NODE', 10);

        Opal.cdecl($scope, 'DOCUMENT_FRAGMENT_NODE', 11);

        Opal.cdecl($scope, 'NOTATION_NODE', 12);

        Opal.defs(self, '$new', TMP_1 = function(value) {
          var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, klass = nil, $zuper = nil, $zuper_index = nil;
          if (self.classes == null) self.classes = nil;

          TMP_1.$$p = null;
          $zuper = [];
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if (self['$==']($scope.get('Node'))) {
            ((($a = self.classes) !== false && $a !== nil) ? $a : self.classes = [nil, $scope.get('Element'), $scope.get('Attribute'), $scope.get('Text'), $scope.get('CDATA'), nil, nil, nil, $scope.get('Comment'), $scope.get('Document'), nil, $scope.get('DocumentFragment')]);
            if ((($a = klass = self.classes['$[]'](value.nodeType)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return klass.$new(value)
              } else {
              return self.$raise($scope.get('ArgumentError'), "cannot instantiate a non derived Node object")
            };
            } else {
            return Opal.find_super_dispatcher(self, 'new', TMP_1, $iter, $Node).apply(self, $zuper)
          };
        });

        Opal.defn(self, '$==', function(other) {
          var self = this;

          return self["native"] === $scope.get('Native').$convert(other);
        });

        Opal.defn(self, '$<<', function(node) {
          var $a, $b, TMP_2, self = this;

          if ((($a = $scope.get('Opal')['$respond_to?'](node, "each")) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = node).$each, $a.$$p = (TMP_2 = function(n){var self = TMP_2.$$s || this;
if (n == null) n = nil;
            return self['$<<'](n)}, TMP_2.$$s = self, TMP_2), $a).call($b);
            return self;};
          if ((($a = self['$native?'](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          self["native"].appendChild(node);
          return self;
        });

        Opal.defn(self, '$>>', function(node) {
          var $a, $b, TMP_3, self = this;

          if ((($a = $scope.get('Opal')['$respond_to?'](node, "each")) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = node).$each, $a.$$p = (TMP_3 = function(n){var self = TMP_3.$$s || this;
if (n == null) n = nil;
            return self['$>>'](n)}, TMP_3.$$s = self, TMP_3), $a).call($b);
            return self;};
          if ((($a = self['$native?'](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          if ((($a = self["native"].firstChild == null) !== nil && (!$a.$$is_boolean || $a == true))) {
            self["native"].appendChild(node);
            } else {
            self["native"].insertBefore(node, self["native"].firstChild);
          };
          return self;
        });

        Opal.defn(self, '$add_child', TMP_4 = function(node) {
          var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

          if (node == null) {
            node = nil
          }
          TMP_4.$$p = null;
          if (node !== false && node !== nil) {
            } else {
            node = ($a = ($b = self).$DOM, $a.$$p = block.$to_proc(), $a).call($b)
          };
          return self['$<<'](node);
        });

        Opal.defn(self, '$add_next_sibling', TMP_5 = function(node) {
          var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

          if (node == null) {
            node = nil
          }
          TMP_5.$$p = null;
          if (node !== false && node !== nil) {
            } else {
            node = ($a = ($b = self).$DOM, $a.$$p = block.$to_proc(), $a).call($b)
          };
          if ((($a = self['$native?'](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          return self["native"].parentNode.insertBefore(node, self["native"].nextSibling);
        });

        Opal.defn(self, '$add_previous_sibling', TMP_6 = function(node) {
          var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil;

          if (node == null) {
            node = nil
          }
          TMP_6.$$p = null;
          if (node !== false && node !== nil) {
            } else {
            node = ($a = ($b = self).$DOM, $a.$$p = block.$to_proc(), $a).call($b)
          };
          if ((($a = self['$native?'](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          return self["native"].parentNode.insertBefore(node, self["native"]);
        });

        Opal.alias(self, 'after', 'add_next_sibling');

        Opal.defn(self, '$append_to', function(node) {
          var self = this;

          return node['$<<'](self);
        });

        Opal.defn(self, '$ancestors', function(expression) {
          var $a, $b, TMP_7, self = this, parents = nil, parent = nil;

          if (expression == null) {
            expression = nil
          }
          if ((($a = self.$parent()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return $scope.get('NodeSet')['$[]']()
          };
          parents = [self.$parent()];
          while ((($b = parent = parents.$last().$parent()) !== nil && (!$b.$$is_boolean || $b == true))) {
          parents['$<<'](parent)};
          if ((($a = $scope.get('Document')['$==='](parents.$last())) !== nil && (!$a.$$is_boolean || $a == true))) {
            parents.$pop()};
          if (expression !== false && expression !== nil) {
            ($a = ($b = parents)['$select!'], $a.$$p = (TMP_7 = function(p){var self = TMP_7.$$s || this;
if (p == null) p = nil;
            return p['$=~'](expression)}, TMP_7.$$s = self, TMP_7), $a).call($b)};
          return $scope.get('NodeSet').$new(parents);
        });

        Opal.alias(self, 'before', 'add_previous_sibling');

        Opal.defn(self, '$remove', function() {
          var $a, self = this;

          if ((($a = self.$parent()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$parent().$remove_child(self)
            } else {
            return nil
          };
        });

        Opal.defn(self, '$clear', function() {
          var self = this;

          return self.$children().$remove();
        });

        if ((($a = $scope.get('Browser')['$supports?']("Element.textContent")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$content', function() {
            var self = this;

            return self["native"].textContent;
          });

          Opal.defn(self, '$content=', function(value) {
            var self = this;

            return self["native"].textContent = value;
          });
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.innerText")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$content', function() {
            var self = this;

            return self["native"].innerText;
          });

          Opal.defn(self, '$content=', function(value) {
            var self = this;

            return self["native"].innerText = value;
          });
          } else {
          Opal.defn(self, '$content', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "node text content unsupported");
          });

          Opal.defn(self, '$content=', function(value) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "node text content unsupported");
          });
        };

        Opal.defn(self, '$blank?', function() {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        });

        Opal.defn(self, '$cdata?', function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('CDATA_SECTION_NODE'));
        });

        Opal.defn(self, '$child', function() {
          var self = this;

          return self.$children().$first();
        });

        Opal.defn(self, '$children', function() {
          var self = this;

          return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].childNodes));
        });

        Opal.defn(self, '$children=', function(node) {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        });

        Opal.defn(self, '$comment?', function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('COMMENT_NODE'));
        });

        Opal.defn(self, '$document', function() {
          var $a, self = this;

          if ((($a = (typeof(self["native"].ownerDocument) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].ownerDocument)
            } else {
            return nil
          };
        });

        Opal.defn(self, '$document?', function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('DOCUMENT_NODE'));
        });

        Opal.defn(self, '$elem?', function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('ELEMENT_NODE'));
        });

        Opal.alias(self, 'element?', 'elem?');

        Opal.defn(self, '$element_children', function() {
          var $a, $b, self = this;

          return ($a = ($b = self.$children()).$select, $a.$$p = "element?".$to_proc(), $a).call($b);
        });

        Opal.alias(self, 'elements', 'element_children');

        Opal.defn(self, '$first_element_child', function() {
          var self = this;

          return self.$element_children().$first();
        });

        Opal.defn(self, '$fragment?', function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('DOCUMENT_FRAGMENT_NODE'));
        });

        Opal.defn(self, '$inner_html', function() {
          var self = this;

          return self["native"].innerHTML;
        });

        Opal.defn(self, '$inner_html=', function(value) {
          var self = this;

          return self["native"].innerHTML = value;
        });

        Opal.alias(self, 'inner_text', 'content');

        Opal.alias(self, 'inner_text=', 'content=');

        Opal.defn(self, '$last_element_child', function() {
          var self = this;

          return self.$element_children().$last();
        });

        Opal.defn(self, '$name', function() {
          var self = this;

          return self["native"].nodeName || nil;
        });

        Opal.defn(self, '$name=', function(value) {
          var self = this;

          return self["native"].nodeName = value.$to_s();
        });

        Opal.defn(self, '$namespace', function() {
          var self = this;

          return self["native"].namespaceURI || nil;
        });

        Opal.defn(self, '$next', function() {
          var $a, self = this;

          if ((($a = self["native"].nextSibling != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].nextSibling)
            } else {
            return nil
          };
        });

        Opal.alias(self, 'next=', 'add_next_sibling');

        Opal.defn(self, '$next_element', function() {
          var $a, $b, $c, self = this, current = nil;

          current = self.$next();
          while ((($b = (($c = current !== false && current !== nil) ? current['$element?']()['$!']() : current)) !== nil && (!$b.$$is_boolean || $b == true))) {
          current = current.$next()};
          return current;
        });

        Opal.alias(self, 'next_sibling', 'next');

        Opal.alias(self, 'node_name', 'name');

        Opal.alias(self, 'node_name=', 'name=');

        Opal.defn(self, '$node_type', function() {
          var self = this;

          return self["native"].nodeType;
        });

        Opal.defn(self, '$parent', function() {
          var $a, self = this;

          if ((($a = self["native"].parentNode != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].parentNode)
            } else {
            return nil
          };
        });

        Opal.defn(self, '$parent=', function(node) {
          var self = this;

          return self["native"].parentNode = $scope.get('Native').$convert(node);
        });

        Opal.defn(self, '$parse', function(text, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {})
          }
          return self.$raise($scope.get('NotImplementedError'));
        });

        Opal.defn(self, '$path', function() {
          var self = this;

          return self.$raise($scope.get('NotImplementedError'));
        });

        Opal.defn(self, '$prepend_to', function(node) {
          var self = this;

          return node['$>>'](self);
        });

        Opal.defn(self, '$previous', function() {
          var $a, self = this;

          if ((($a = self["native"].previousSibling != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].previousSibling)
            } else {
            return nil
          };
        });

        Opal.alias(self, 'previous=', 'add_previous_sibling');

        Opal.defn(self, '$previous_element', function() {
          var $a, $b, $c, self = this, current = nil;

          current = self.$previous();
          while ((($b = (($c = current !== false && current !== nil) ? current['$element?']()['$!']() : current)) !== nil && (!$b.$$is_boolean || $b == true))) {
          current = current.$previous()};
          return current;
        });

        Opal.alias(self, 'previous_sibling', 'previous');

        Opal.defn(self, '$remove_child', function(node) {
          var self = this;

          return self["native"].removeChild($scope.get('Native').$try_convert(node));
        });

        Opal.defn(self, '$replace', function(node) {
          var $a, self = this;

          if ((($a = self['$native?'](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = $scope.get('String')['$==='](node)) !== nil && (!$a.$$is_boolean || $a == true))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = $scope.get('Native').$convert(node)
          };
          self["native"].parentNode.replaceChild(node, self["native"]);
          return node;
        });

        Opal.alias(self, 'replace_with', 'replace');

        Opal.alias(self, 'text', 'content');

        Opal.alias(self, 'text=', 'content=');

        Opal.defn(self, '$text?', function() {
          var self = this;

          return self.$node_type()['$==']($scope.get('TEXT_NODE'));
        });

        Opal.defn(self, '$traverse', TMP_8 = function() {
          var self = this, $iter = TMP_8.$$p, block = $iter || nil;

          TMP_8.$$p = null;
          return self.$raise($scope.get('NotImplementedError'));
        });

        Opal.alias(self, 'type', 'node_type');

        Opal.defn(self, '$value', function() {
          var self = this;

          return self["native"].nodeValue || nil;
        });

        Opal.defn(self, '$value=', function(value) {
          var self = this;

          return self["native"].nodeValue = value;
        });

        return (Opal.defn(self, '$inspect', function() {
          var self = this;

          return "#<DOM::Node: " + (self.$name()) + ">";
        }), nil) && 'inspect';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/attribute"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native', '$supports?', '$==', '$name']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Attribute(){};
        var self = $Attribute = $klass($base, $super, 'Attribute', $Attribute);

        var def = self.$$proto, $scope = self.$$scope, $a;

        self.$include($scope.get('Native'));

        self.$alias_native("name");

        self.$alias_native("value");

        self.$alias_native("value=");

        if ((($a = $scope.get('Browser')['$supports?']("Attr.isId")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$alias_native("id?", "isId")
          } else {
          return (Opal.defn(self, '$id?', function() {
            var self = this;

            return self.$name()['$==']("id");
          }), nil) && 'id?'
        };
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/character_data"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CharacterData(){};
        var self = $CharacterData = $klass($base, $super, 'CharacterData', $CharacterData);

        var def = self.$$proto, $scope = self.$$scope;

        def["native"] = nil;
        Opal.defn(self, '$append', function(string) {
          var self = this;

          self["native"].appendData(string);
          return self;
        });

        Opal.defn(self, '$data', function() {
          var self = this;

          return self["native"].data;
        });

        Opal.defn(self, '$delete', function(count, offset) {
          var self = this;

          if (offset == null) {
            offset = 0
          }
          self["native"].deleteData(offset, count);
          return self;
        });

        Opal.defn(self, '$insert', function(string, offset) {
          var self = this;

          if (offset == null) {
            offset = 0
          }
          self["native"].insertData(offset, string);
          return self;
        });

        self.$alias_native("length");

        Opal.defn(self, '$replace', function(string, offset, count) {
          var self = this;

          if (offset == null) {
            offset = 0
          }
          if (count == null) {
            count = self["native"].length
          }
          self["native"].replaceData(offset, count, string);
          return self;
        });

        return (Opal.defn(self, '$substring', function(count, offset) {
          var self = this;

          if (offset == null) {
            offset = 0
          }
          return self["native"].substringData(offset, count);
        }), nil) && 'substring';
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/text"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$create_text', '$DOM', '$data']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Text(){};
        var self = $Text = $klass($base, $super, 'Text', $Text);

        var def = self.$$proto, $scope = self.$$scope;

        def["native"] = nil;
        Opal.defs(self, '$create', function() {
          var $a, self = this, $splat_index = nil;
          if ($gvars.document == null) $gvars.document = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          return ($a = $gvars.document).$create_text.apply($a, Opal.to_a(args));
        });

        Opal.defn(self, '$whole', function() {
          var self = this;

          return self["native"].wholeText;
        });

        Opal.defn(self, '$split', function(offset) {
          var self = this;

          return self.$DOM(self["native"].splitText(offset));
        });

        return (Opal.defn(self, '$inspect', function() {
          var self = this;

          return "#<DOM::Text: " + (self.$data()) + ">";
        }), nil) && 'inspect';
      })($scope.base, $scope.get('CharacterData'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/cdata"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$value']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $CDATA(){};
        var self = $CDATA = $klass($base, $super, 'CDATA', $CDATA);

        var def = self.$$proto, $scope = self.$$scope;

        return (Opal.defn(self, '$inspect', function() {
          var self = this;

          return "#<DOM::CDATA: " + (self.$value()) + ">";
        }), nil) && 'inspect'
      })($scope.base, $scope.get('Text'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/comment"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$value']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Comment(){};
        var self = $Comment = $klass($base, $super, 'Comment', $Comment);

        var def = self.$$proto, $scope = self.$$scope;

        return (Opal.defn(self, '$inspect', function() {
          var self = this;

          return "#<DOM::Comment: " + (self.$value()) + ">";
        }), nil) && 'inspect'
      })($scope.base, $scope.get('CharacterData'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/element/attributes"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$to_n', '$[]', '$supports?', '$==', '$to_s', '$include', '$enum_for', '$each', '$name', '$value', '$attribute_nodes', '$!', '$[]=']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Attributes(){};
          var self = $Attributes = $klass($base, $super, 'Attributes', $Attributes);

          var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

          def.namespace = def["native"] = def.element = nil;
          self.$attr_reader("namespace");

          Opal.defn(self, '$initialize', function(element, options) {
            var self = this;

            self.element = element;
            self["native"] = element.$to_n();
            return self.namespace = options['$[]']("namespace");
          });

          if ((($a = ((($b = $scope.get('Browser')['$supports?']("Element.className")) !== false && $b !== nil) ? $b : $scope.get('Browser')['$supports?']("Element.htmlFor"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$[]', function(name, options) {
              var $a, $b, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {})
              }
              if ((($a = (($b = name['$==']("class")) ? $scope.get('Browser')['$supports?']("Element.className") : name['$==']("class"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                name = "className"
              } else if ((($a = (($b = name['$==']("for")) ? $scope.get('Browser')['$supports?']("Element.htmlFor") : name['$==']("for"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                name = "htmlFor"};
              if ((($a = namespace = ((($b = options['$[]']("namespace")) !== false && $b !== nil) ? $b : self.namespace)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil;
                } else {
                return self["native"].getAttribute(name.$to_s()) || nil;
              };
            });

            Opal.defn(self, '$[]=', function(name, value, options) {
              var $a, $b, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {})
              }
              if ((($a = (($b = name['$==']("class")) ? $scope.get('Browser')['$supports?']("Element.className") : name['$==']("class"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                name = "className"
              } else if ((($a = (($b = name['$==']("for")) ? $scope.get('Browser')['$supports?']("Element.htmlFor") : name['$==']("for"))) !== nil && (!$a.$$is_boolean || $a == true))) {
                name = "htmlFor"};
              if ((($a = namespace = ((($b = options['$[]']("namespace")) !== false && $b !== nil) ? $b : self.namespace)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value);
                } else {
                return self["native"].setAttribute(name.$to_s(), value.$to_s());
              };
            });
            } else {
            Opal.defn(self, '$[]', function(name, options) {
              var $a, $b, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {})
              }
              if ((($a = namespace = ((($b = options['$[]']("namespace")) !== false && $b !== nil) ? $b : self.namespace)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil;
                } else {
                return self["native"].getAttribute(name.$to_s()) || nil;
              };
            });

            Opal.defn(self, '$[]=', function(name, value, options) {
              var $a, $b, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {})
              }
              if ((($a = namespace = ((($b = options['$[]']("namespace")) !== false && $b !== nil) ? $b : self.namespace)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value);
                } else {
                return self["native"].setAttribute(name.$to_s(), value.$to_s());
              };
            });
          };

          self.$include($scope.get('Enumerable'));

          Opal.defn(self, '$each', TMP_1 = function() {
            var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

            TMP_1.$$p = null;
            if ((block !== nil)) {
              } else {
              return self.$enum_for("each")
            };
            ($a = ($b = self.element.$attribute_nodes()).$each, $a.$$p = (TMP_2 = function(attr){var self = TMP_2.$$s || this, $a;
if (attr == null) attr = nil;
            return $a = Opal.yieldX(block, [attr.$name(), attr.$value()]), $a === $breaker ? $a : $a}, TMP_2.$$s = self, TMP_2), $a).call($b);
            return self;
          });

          Opal.alias(self, 'get', '[]');

          Opal.defn(self, '$has_key?', function(name) {
            var self = this;

            return self['$[]'](name)['$!']()['$!']();
          });

          Opal.defn(self, '$merge!', function(hash) {
            var $a, $b, TMP_3, self = this;

            ($a = ($b = hash).$each, $a.$$p = (TMP_3 = function(name, value){var self = TMP_3.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            return self['$[]='](name, value)}, TMP_3.$$s = self, TMP_3), $a).call($b);
            return self;
          });

          return Opal.alias(self, 'set', '[]=');
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/element/data"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$to_n', '$include', '$enum_for', '$call', '$each', '$=~', '$attributes', '$[]']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Data(){};
          var self = $Data = $klass($base, $super, 'Data', $Data);

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          def["native"] = def.element = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', function(element) {
            var $a, self = this;

            self.element = element;
            self["native"] = element.$to_n();
            if ((($a = (typeof(self["native"].$data) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              return self["native"].$data = {};
            };
          });

          self.$include($scope.get('Enumerable'));

          Opal.defn(self, '$each', TMP_1 = function() {
            var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

            TMP_1.$$p = null;
            if (block !== false && block !== nil) {
              } else {
              return self.$enum_for("each")
            };
            
      var data = self["native"].$data;

      for (var key in data) {
        block.$call(key, data[key]);
      }
    ;
            ($a = ($b = self.element.$attributes()).$each, $a.$$p = (TMP_2 = function(name, value){var self = TMP_2.$$s || this, $a;
if (name == null) name = nil;if (value == null) value = nil;
            if ((($a = name['$=~'](/^data-(.*)$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return block.$call((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), value)
                } else {
                return nil
              }}, TMP_2.$$s = self, TMP_2), $a).call($b);
            return self;
          });

          Opal.defn(self, '$assign', function(data) {
            var $a, $b, TMP_3, self = this;

            ($a = ($b = data).$each, $a.$$p = (TMP_3 = function(name, value){var self = TMP_3.$$s || this;
              if (self["native"] == null) self["native"] = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return self["native"].$data[name] = value;}, TMP_3.$$s = self, TMP_3), $a).call($b);
            return self;
          });

          Opal.defn(self, '$[]', function(name) {
            var $a, self = this, data = nil;

            if ((($a = data = self.element['$[]']("data-" + (name))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return data};
            
      var value = self["native"].$data[name];

      if (value === undefined) {
        return nil;
      }
      else {
        return value;
      }
    ;
          });

          return (Opal.defn(self, '$[]=', function(name, value) {
            var self = this;

            return self["native"].$data[name] = value;
          }), nil) && '[]=';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/element/position"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_n', '$offset', '$get', '$parent', '$new', '$==', '$[]', '$style', '$=~', '$x=', '$+', '$x', '$to_i', '$y=', '$y', '$-']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Position(){};
          var self = $Position = $klass($base, $super, 'Position', $Position);

          var def = self.$$proto, $scope = self.$$scope;

          def.element = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', function(element) {
            var self = this;

            self.element = element;
            return self["native"] = element.$to_n();
          });

          Opal.defn(self, '$get', function() {
            var $a, self = this, offset = nil, position = nil, parent = nil, parent_offset = nil;

            offset = self.element.$offset();
            position = offset.$get();
            parent = offset.$parent();
            parent_offset = (($scope.get('Browser')).$$scope.get('Position')).$new(0, 0);
            if (self.element.$style()['$[]']("position")['$==']("fixed")) {
              if ((($a = parent['$=~']("html")) !== nil && (!$a.$$is_boolean || $a == true))) {
                } else {
                parent_offset = parent.$offset()
              };
              ($a = parent_offset, $a['$x=']($rb_plus($a.$x(), parent.$style()['$[]']("border-top-width").$to_i())));
              ($a = parent_offset, $a['$y=']($rb_plus($a.$y(), parent.$style()['$[]']("border-left-width").$to_i())));};
            return (($scope.get('Browser')).$$scope.get('Position')).$new($rb_minus($rb_minus(position.$x(), parent_offset.$x()), self.element.$style()['$[]']("margin-left").$to_i()), $rb_minus($rb_minus(position.$y(), parent_offset.$y()), self.element.$style()['$[]']("margin-top").$to_i()));
          });

          Opal.defn(self, '$x', function() {
            var self = this;

            return self.$get().$x();
          });

          return (Opal.defn(self, '$y', function() {
            var self = this;

            return self.$get().$y();
          }), nil) && 'y';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/element/offset"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_n', '$DOM', '$root', '$document', '$x', '$get', '$set', '$y', '$supports?', '$window', '$new', '$[]', '$style!', '$==', '$[]=', '$style', '$to_u', '$===', '$first', '$+', '$-', '$px']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Offset(){};
          var self = $Offset = $klass($base, $super, 'Offset', $Offset);

          var def = self.$$proto, $scope = self.$$scope, $a;

          def["native"] = def.element = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', function(element) {
            var self = this;

            self.element = element;
            return self["native"] = element.$to_n();
          });

          Opal.defn(self, '$parent', function() {
            var self = this;

            return self.$DOM(self["native"].offsetParent || self.element.$document().$root().$to_n());
          });

          Opal.defn(self, '$x', function() {
            var self = this;

            return self.$get().$x();
          });

          Opal.defn(self, '$x=', function(value) {
            var self = this;

            return self.$set(value, nil);
          });

          Opal.defn(self, '$y', function() {
            var self = this;

            return self.$get().$y();
          });

          Opal.defn(self, '$y=', function(value) {
            var self = this;

            return self.$set(nil, value);
          });

          if ((($a = $scope.get('Browser')['$supports?']("Element.getBoundingClientRect")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$get', function() {
              var self = this, doc = nil, root = nil, win = nil;

              doc = self.element.$document();
              root = doc.$root().$to_n();
              win = doc.$window().$to_n();
              
        var box = self["native"].getBoundingClientRect(),
            y   = box.top + (win.pageYOffset || root.scrollTop) - (root.clientTop || 0),
            x   = box.left + (win.pageXOffset || root.scrollLeft) - (root.clientLeft || 0);
      ;
              return (($scope.get('Browser')).$$scope.get('Position')).$new(x, y);
            })
            } else {
            Opal.defn(self, '$get', function() {
              var self = this, doc = nil, root = nil, win = nil;

              doc = self.$document();
              root = doc.$root().$to_n();
              win = doc.$window().$to_n();
              
        var y = (win.pageYOffset || root.scrollTop) - (root.clientTop || 0),
            x = (win.pageXOffset || root.scrollLeft) - (root.clientLeft || 0);
      ;
              return (($scope.get('Browser')).$$scope.get('Position')).$new(x, y);
            })
          };

          return (Opal.defn(self, '$set', function() {
            var $a, $b, self = this, position = nil, offset = nil, top = nil, left = nil, x = nil, y = nil, $splat_index = nil;

            var array_size = arguments.length - 0;
            if(array_size < 0) array_size = 0;
            var value = new Array(array_size);
            for($splat_index = 0; $splat_index < array_size; $splat_index++) {
              value[$splat_index] = arguments[$splat_index + 0];
            }
            position = self.element['$style!']()['$[]']("position");
            if (position['$==']("static")) {
              self.element.$style()['$[]=']("position", "relative")};
            offset = self.$get();
            top = self.element['$style!']()['$[]']("top").$to_u();
            left = self.element['$style!']()['$[]']("left").$to_u();
            if ((($a = (($scope.get('Browser')).$$scope.get('Position'))['$==='](value.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
              $a = [value.$first().$x(), value.$first().$y()], x = $a[0], y = $a[1], $a
            } else if ((($a = $scope.get('Hash')['$==='](value.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
              $a = [value.$first()['$[]']("x"), value.$first()['$[]']("y")], x = $a[0], y = $a[1], $a
              } else {
              $b = value, $a = Opal.to_ary($b), x = ($a[0] == null ? nil : $a[0]), y = ($a[1] == null ? nil : $a[1]), $b
            };
            if (x !== false && x !== nil) {
              self.element.$style()['$[]=']("left", $rb_plus(($rb_minus(x.$px(), offset.$x())), left))};
            if (y !== false && y !== nil) {
              return self.element.$style()['$[]=']("top", $rb_plus(($rb_minus(y.$px(), offset.$y())), top))
              } else {
              return nil
            };
          }), nil) && 'set';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/element/scroll"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_n', '$supports?', '$===', '$first', '$[]', '$x', '$y', '$new', '$raise', '$position']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Scroll(){};
          var self = $Scroll = $klass($base, $super, 'Scroll', $Scroll);

          var def = self.$$proto, $scope = self.$$scope, $a;

          def["native"] = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', function(element) {
            var self = this;

            self.element = element;
            return self["native"] = element.$to_n();
          });

          if ((($a = $scope.get('Browser')['$supports?']("Element.scroll")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$to', function() {
              var $a, $b, self = this, x = nil, y = nil, $splat_index = nil;

              var array_size = arguments.length - 0;
              if(array_size < 0) array_size = 0;
              var args = new Array(array_size);
              for($splat_index = 0; $splat_index < array_size; $splat_index++) {
                args[$splat_index] = arguments[$splat_index + 0];
              }
              if ((($a = $scope.get('Hash')['$==='](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
                x = ((($a = args.$first()['$[]']("x")) !== false && $a !== nil) ? $a : self.$x());
                y = ((($a = args.$first()['$[]']("y")) !== false && $a !== nil) ? $a : self.$y());
                } else {
                $b = args, $a = Opal.to_ary($b), x = ($a[0] == null ? nil : $a[0]), y = ($a[1] == null ? nil : $a[1]), $b
              };
              self["native"].scrollTop  = y;
              return self["native"].scrollLeft = x;
            });

            Opal.defn(self, '$position', function() {
              var self = this;

              return (($scope.get('Browser')).$$scope.get('Position')).$new(self["native"].scrollLeft, self["native"].scrollTop);
            });
          } else if ((($a = $scope.get('Browser')['$supports?']("Element.pageOffset")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$to', function() {
              var $a, $b, self = this, x = nil, y = nil, $splat_index = nil;

              var array_size = arguments.length - 0;
              if(array_size < 0) array_size = 0;
              var args = new Array(array_size);
              for($splat_index = 0; $splat_index < array_size; $splat_index++) {
                args[$splat_index] = arguments[$splat_index + 0];
              }
              if ((($a = $scope.get('Hash')['$==='](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
                x = ((($a = args.$first()['$[]']("x")) !== false && $a !== nil) ? $a : self.$x());
                y = ((($a = args.$first()['$[]']("y")) !== false && $a !== nil) ? $a : self.$y());
                } else {
                $b = args, $a = Opal.to_ary($b), x = ($a[0] == null ? nil : $a[0]), y = ($a[1] == null ? nil : $a[1]), $b
              };
              self["native"].pageYOffset = y;
              return self["native"].pageXOffset = x;
            });

            Opal.defn(self, '$position', function() {
              var self = this;

              return $scope.get('Position').$new(self["native"].pageXOffset, self["native"].pageYOffset);
            });
            } else {
            Opal.defn(self, '$to', function() {
              var self = this, $splat_index = nil;

              var array_size = arguments.length - 0;
              if(array_size < 0) array_size = 0;
              var args = new Array(array_size);
              for($splat_index = 0; $splat_index < array_size; $splat_index++) {
                args[$splat_index] = arguments[$splat_index + 0];
              }
              return self.$raise($scope.get('NotImplementedError'), "scroll on element unsupported");
            });

            Opal.defn(self, '$position', function() {
              var self = this;

              return self.$raise($scope.get('NotImplementedError'), "scroll on element unsupported");
            });
          };

          Opal.defn(self, '$x', function() {
            var self = this;

            return self.$position().$x();
          });

          Opal.defn(self, '$y', function() {
            var self = this;

            return self.$position().$y();
          });

          Opal.defn(self, '$height', function() {
            var self = this;

            return self["native"].scrollHeight;
          });

          Opal.defn(self, '$width', function() {
            var self = this;

            return self["native"].scrollWidth;
          });

          Opal.defn(self, '$by', function() {
            var $a, $b, self = this, x = nil, y = nil, $splat_index = nil;

            var array_size = arguments.length - 0;
            if(array_size < 0) array_size = 0;
            var args = new Array(array_size);
            for($splat_index = 0; $splat_index < array_size; $splat_index++) {
              args[$splat_index] = arguments[$splat_index + 0];
            }
            if ((($a = $scope.get('Hash')['$==='](args.$first())) !== nil && (!$a.$$is_boolean || $a == true))) {
              x = ((($a = args.$first()['$[]']("x")) !== false && $a !== nil) ? $a : 0);
              y = ((($a = args.$first()['$[]']("y")) !== false && $a !== nil) ? $a : 0);
              } else {
              $b = args, $a = Opal.to_ary($b), x = ($a[0] == null ? nil : $a[0]), y = ($a[1] == null ? nil : $a[1]), $b
            };
            self["native"].scrollBy(x, y);
            return self;
          });

          if ((($a = $scope.get('Browser')['$supports?']("Element.scrollIntoViewIfNeeded")) !== nil && (!$a.$$is_boolean || $a == true))) {
            Opal.defn(self, '$to', function(align) {
              var self = this;

              if (align == null) {
                align = true
              }
              return self["native"].scrollIntoViewIfNeeded(align);
            })
            } else {
            Opal.defn(self, '$to', function(align) {
              var self = this;

              if (align == null) {
                align = true
              }
              return self.$raise($scope.get('NotImplementedError'));
            })
          };

          return (Opal.defn(self, '$to!', function(align) {
            var self = this;

            if (align == null) {
              align = true
            }
            return self["native"].scrollIntoView(align);
          }), nil) && 'to!';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/element/size"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$to_n', '$[]=', '$style']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Size(){};
          var self = $Size = $klass($base, $super, 'Size', $Size);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = def.element = nil;
          self.$attr_reader("element");

          Opal.defn(self, '$initialize', function(element) {
            var self = this, $splat_index = nil;

            var array_size = arguments.length - 1;
            if(array_size < 0) array_size = 0;
            var inc = new Array(array_size);
            for($splat_index = 0; $splat_index < array_size; $splat_index++) {
              inc[$splat_index] = arguments[$splat_index + 1];
            }
            self.element = element;
            self["native"] = element.$to_n();
            return self.include = inc;
          });

          Opal.defn(self, '$width', function() {
            var self = this;

            return self["native"].offsetWidth;
          });

          Opal.defn(self, '$width=', function(value) {
            var self = this;

            return self.element.$style()['$[]=']("width", value);
          });

          Opal.defn(self, '$height', function() {
            var self = this;

            return self["native"].offsetHeight;
          });

          return (Opal.defn(self, '$height=', function(value) {
            var self = this;

            return self.element.$style()['$[]=']("height", value);
          }), nil) && 'height=';
        })($scope.base, null)
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/element/input"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Input(){};
          var self = $Input = $klass($base, $super, 'Input', $Input);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$value', function() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    ;
          });

          Opal.defn(self, '$value=', function(value) {
            var self = this;

            return self["native"].value = value;
          });

          Opal.defn(self, '$checked?', function() {
            var self = this;

            return self["native"].checked;
          });

          return (Opal.defn(self, '$clear', function() {
            var self = this;

            return self["native"].value = '';
          }), nil) && 'clear';
        })($scope.base, $scope.get('Element'))
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/element/select"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$[]', '$new', '$DOM', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Select(){};
          var self = $Select = $klass($base, $super, 'Select', $Select);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$value', function() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    ;
          });

          Opal.defn(self, '$labels', function() {
            var self = this;

            return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].labels));
          });

          Opal.defn(self, '$options', function() {
            var self = this;

            return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].options));
          });

          Opal.defn(self, '$option', function() {
            var self = this;

            return self.$DOM(self["native"].options[self["native"].selectedIndex]);
          });

          Opal.defn(self, '$index', function() {
            var self = this;

            return self["native"].selectedIndex;
          });

          self.$alias_native("multiple?", "multiple");

          self.$alias_native("required?", "required");

          return self.$alias_native("length");
        })($scope.base, $scope.get('Element'))
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/element/image"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        (function($base, $super) {
          function $Image(){};
          var self = $Image = $klass($base, $super, 'Image', $Image);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$complete?', function() {
            var self = this;

            return self["native"].complete;
          });

          Opal.defn(self, '$cross?', function() {
            var self = this;

            return self["native"].crossOrigin;
          });

          Opal.defn(self, '$height', function() {
            var self = this;

            return self["native"].naturalHeight;
          });

          return (Opal.defn(self, '$width', function() {
            var self = this;

            return self["native"].naturalWidth;
          }), nil) && 'width';
        })($scope.base, $scope.get('Element'));

        return Opal.cdecl($scope, 'Img', $scope.get('Image'));
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/element/template"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$DOM']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Template(){};
          var self = $Template = $klass($base, $super, 'Template', $Template);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          return (Opal.defn(self, '$content', function() {
            var self = this;

            return self.$DOM(self["native"].content);
          }), nil) && 'content'
        })($scope.base, $scope.get('Element'))
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/element/textarea"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Textarea(){};
          var self = $Textarea = $klass($base, $super, 'Textarea', $Textarea);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          Opal.defn(self, '$value', function() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    ;
          });

          Opal.defn(self, '$value=', function(value) {
            var self = this;

            return self["native"].value = value;
          });

          return (Opal.defn(self, '$clear', function() {
            var self = this;

            return self["native"].value = '';
          }), nil) && 'clear';
        })($scope.base, $scope.get('Element'))
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/element"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$create_element', '$==', '$capitalize', '$include?', '$constants', '$new', '$const_get', '$include', '$target', '$DOM', '$supports?', '$loaded?', '$raise', '$[]', '$map', '$xpath', '$get', '$attributes', '$set', '$+', '$class_names', '$empty?', '$join', '$uniq', '$first', '$css', '$each', '$alias_native', '$reject', '$to_proc', '$split', '$===', '$assign', '$height', '$size', '$height=', '$to_s', '$clear', '$document', '$<<', '$to_a', '$downcase', '$name', '$id', '$offset', '$flatten', '$concat', '$replace', '$apply', '$to_n', '$window', '$-', '$width', '$width=']);
  self.$require("browser/dom/element/attributes");
  self.$require("browser/dom/element/data");
  self.$require("browser/dom/element/position");
  self.$require("browser/dom/element/offset");
  self.$require("browser/dom/element/scroll");
  self.$require("browser/dom/element/size");
  self.$require("browser/dom/element/input");
  self.$require("browser/dom/element/select");
  self.$require("browser/dom/element/image");
  self.$require("browser/dom/element/template");
  self.$require("browser/dom/element/textarea");
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_2, TMP_6, TMP_8, $c;

        def["native"] = nil;
        Opal.defs(self, '$create', function() {
          var $a, self = this, $splat_index = nil;
          if ($gvars.document == null) $gvars.document = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          return ($a = $gvars.document).$create_element.apply($a, Opal.to_a(args));
        });

        Opal.defs(self, '$new', TMP_1 = function(node) {
          var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, name = nil, $zuper = nil, $zuper_index = nil;

          TMP_1.$$p = null;
          $zuper = [];
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          if (self['$==']($scope.get('Element'))) {
            name = (node.nodeName).$capitalize();
            if ((($a = $scope.get('Element').$constants()['$include?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return $scope.get('Element').$const_get(name).$new(node)
              } else {
              return Opal.find_super_dispatcher(self, 'new', TMP_1, $iter, $Element).apply(self, $zuper)
            };
            } else {
            return Opal.find_super_dispatcher(self, 'new', TMP_1, $iter, $Element).apply(self, $zuper)
          };
        });

        self.$include((($scope.get('Event')).$$scope.get('Target')));

        ($a = ($b = self).$target, $a.$$p = (TMP_2 = function(value){var self = TMP_2.$$s || this;
if (value == null) value = nil;
        try {return self.$DOM(value) } catch ($err) { return nil }}, TMP_2.$$s = self, TMP_2), $a).call($b);

        if ((($a = $scope.get('Browser')['$supports?']("Element.matches")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', function(selector) {
            var self = this;

            return self["native"].matches(selector);
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.matches (Opera)")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', function(selector) {
            var self = this;

            return self["native"].oMatchesSelector(selector);
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.matches (Internet Explorer)")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', function(selector) {
            var self = this;

            return self["native"].msMatchesSelector(selector);
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.matches (Firefox)")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', function(selector) {
            var self = this;

            return self["native"].mozMatchesSelector(selector);
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Element.matches (Chrome)")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', function(selector) {
            var self = this;

            return self["native"].webkitMatchesSelector(selector);
          })
        } else if ((($a = $scope.get('Browser')['$loaded?']("Sizzle")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$=~', function(selector) {
            var self = this;

            return Sizzle.matchesSelector(self["native"], selector);
          })
          } else {
          Opal.defn(self, '$=~', function(selector) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "selector matching unsupported");
          })
        };

        Opal.defn(self, '$/', function() {
          var $a, $b, TMP_3, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var paths = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            paths[$splat_index] = arguments[$splat_index + 0];
          }
          return $scope.get('NodeSet')['$[]'](($a = ($b = paths).$map, $a.$$p = (TMP_3 = function(path){var self = TMP_3.$$s || this;
if (path == null) path = nil;
          return self.$xpath(path)}, TMP_3.$$s = self, TMP_3), $a).call($b));
        });

        Opal.defn(self, '$[]', function(name, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {})
          }
          return self.$attributes().$get(name, options);
        });

        Opal.defn(self, '$[]=', function(name, value, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {})
          }
          return self.$attributes().$set(name, value, options);
        });

        Opal.defn(self, '$add_class', function() {
          var $a, self = this, classes = nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var names = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            names[$splat_index] = arguments[$splat_index + 0];
          }
          classes = $rb_plus(self.$class_names(), names);
          if ((($a = classes['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self["native"].className = classes.$uniq().$join(" ");
          };
          return self;
        });

        Opal.defn(self, '$at', function(path_or_selector) {
          var $a, self = this;

          return ((($a = self.$xpath(path_or_selector).$first()) !== false && $a !== nil) ? $a : self.$css(path_or_selector).$first());
        });

        Opal.defn(self, '$at_css', function() {
          var $a, $b, TMP_4, self = this, result = nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var rules = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            rules[$splat_index] = arguments[$splat_index + 0];
          }
          result = nil;
          ($a = ($b = rules).$each, $a.$$p = (TMP_4 = function(rule){var self = TMP_4.$$s || this, $a;
if (rule == null) rule = nil;
          if ((($a = result = self.$css(rule).$first()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ($breaker.$v = nil, $breaker)
              } else {
              return nil
            }}, TMP_4.$$s = self, TMP_4), $a).call($b);
          return result;
        });

        Opal.defn(self, '$at_xpath', function() {
          var $a, $b, TMP_5, self = this, result = nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var paths = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            paths[$splat_index] = arguments[$splat_index + 0];
          }
          result = nil;
          ($a = ($b = paths).$each, $a.$$p = (TMP_5 = function(path){var self = TMP_5.$$s || this, $a;
if (path == null) path = nil;
          if ((($a = result = self.$xpath(path).$first()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ($breaker.$v = nil, $breaker)
              } else {
              return nil
            }}, TMP_5.$$s = self, TMP_5), $a).call($b);
          return result;
        });

        Opal.alias(self, 'attr', '[]');

        Opal.alias(self, 'attribute', '[]');

        Opal.defn(self, '$attributes', function(options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {})
          }
          return $scope.get('Attributes').$new(self, options);
        });

        Opal.defn(self, '$attribute_nodes', function() {
          var self = this;

          return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].attributes, $hash2(["get"], {"get": "item"})));
        });

        self.$alias_native("class_name", "className");

        Opal.defn(self, '$class_names', function() {
          var $a, $b, self = this;

          return ($a = ($b = (self["native"].className).$split(/\s+/)).$reject, $a.$$p = "empty?".$to_proc(), $a).call($b);
        });

        if ((($a = $scope.get('Browser')['$supports?']("Query.css")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$css', function(path) {
            var self = this;

            try {
            return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new(self["native"].querySelectorAll(path)))
            } catch ($err) {if (true) {
              try {
                return $scope.get('NodeSet')['$[]']()
              } finally {
                Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
              }
              }else { throw $err; }
            };
          })
        } else if ((($a = $scope.get('Browser')['$loaded?']("Sizzle")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$css', function(path) {
            var self = this;

            try {
            return $scope.get('NodeSet')['$[]'](Sizzle(path, self["native"]))
            } catch ($err) {if (true) {
              try {
                return $scope.get('NodeSet')['$[]']()
              } finally {
                Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
              }
              }else { throw $err; }
            };
          })
          } else {
          Opal.defn(self, '$css', function(selector) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "query by CSS selector unsupported");
          })
        };

        Opal.defn(self, '$data', function(value) {
          var $a, self = this, data = nil;

          if (value == null) {
            value = nil
          }
          data = $scope.get('Data').$new(self);
          if (value !== false && value !== nil) {
            } else {
            return data
          };
          if ((($a = $scope.get('Hash')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
            data.$assign(value)
            } else {
            self.$raise($scope.get('ArgumentError'), "unknown data type")
          };
          return self;
        });

        Opal.alias(self, 'get_attribute', '[]');

        Opal.alias(self, 'get', '[]');

        Opal.defn(self, '$height', function() {
          var self = this;

          return self.$size().$height();
        });

        Opal.defn(self, '$height=', function(value) {
          var $a, $b, self = this;

          return (($a = [value]), $b = self.$size(), $b['$height='].apply($b, $a), $a[$a.length-1]);
        });

        Opal.defn(self, '$id', function() {
          var self = this;

          
      var id = self["native"].id;

      if (id === "") {
        return nil;
      }
      else {
        return id;
      }
    ;
        });

        Opal.defn(self, '$id=', function(value) {
          var self = this;

          return self["native"].id = value.$to_s();
        });

        Opal.defn(self, '$inner_dom', TMP_6 = function() {
          var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil, doc = nil;

          TMP_6.$$p = null;
          self.$clear();
          doc = self.$document();
          return self['$<<'](($a = ($b = $scope.get('Builder')).$new, $a.$$p = block.$to_proc(), $a).call($b, doc, self).$to_a());
        });

        Opal.defn(self, '$inner_dom=', function(node) {
          var self = this;

          self.$clear();
          return self['$<<'](node);
        });

        Opal.defn(self, '$inspect', function() {
          var $a, self = this, inspect = nil;

          inspect = self.$name().$downcase();
          if ((($a = self.$id()) !== nil && (!$a.$$is_boolean || $a == true))) {
            inspect = $rb_plus(inspect, $rb_plus($rb_plus(".", self.$id()), "!"))};
          if ((($a = self.$class_names()['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            inspect = $rb_plus(inspect, $rb_plus(".", self.$class_names().$join(".")))
          };
          return "#<DOM::Element: " + (inspect) + ">";
        });

        Opal.defn(self, '$offset', function() {
          var $a, self = this, off = nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var values = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            values[$splat_index] = arguments[$splat_index + 0];
          }
          off = $scope.get('Offset').$new(self);
          if ((($a = values['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            ($a = off).$set.apply($a, Opal.to_a(values))
          };
          return off;
        });

        Opal.defn(self, '$offset=', function(value) {
          var $a, self = this;

          return ($a = self.$offset()).$set.apply($a, Opal.to_a(value));
        });

        Opal.defn(self, '$position', function() {
          var self = this;

          return $scope.get('Position').$new(self);
        });

        Opal.defn(self, '$scroll', function() {
          var self = this;

          return $scope.get('Scroll').$new(self);
        });

        Opal.defn(self, '$search', function() {
          var $a, $b, TMP_7, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var selectors = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            selectors[$splat_index] = arguments[$splat_index + 0];
          }
          return $scope.get('NodeSet').$new(($a = ($b = selectors).$map, $a.$$p = (TMP_7 = function(selector){var self = TMP_7.$$s || this;
if (selector == null) selector = nil;
          return self.$xpath(selector).$to_a().$concat(self.$css(selector).$to_a())}, TMP_7.$$s = self, TMP_7), $a).call($b).$flatten().$uniq());
        });

        Opal.alias(self, 'set', '[]=');

        Opal.alias(self, 'set_attribute', '[]=');

        Opal.defn(self, '$style', TMP_8 = function(data) {
          var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil, style = nil;

          if (data == null) {
            data = nil
          }
          TMP_8.$$p = null;
          style = (($scope.get('CSS')).$$scope.get('Declaration')).$new(self["native"].style);
          if ((($a = ((($b = data) !== false && $b !== nil) ? $b : block)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return style
          };
          if ((($a = $scope.get('String')['$==='](data)) !== nil && (!$a.$$is_boolean || $a == true))) {
            style.$replace(data)
          } else if ((($a = $scope.get('Hash')['$==='](data)) !== nil && (!$a.$$is_boolean || $a == true))) {
            style.$assign(data)
          } else if (block !== false && block !== nil) {
            ($a = ($b = style).$apply, $a.$$p = block.$to_proc(), $a).call($b)
            } else {
            self.$raise($scope.get('ArgumentError'), "unknown data type")
          };
          return self;
        });

        if ((($a = $scope.get('Browser')['$supports?']("CSS.computed")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$style!', function() {
            var self = this;

            return (($scope.get('CSS')).$$scope.get('Declaration')).$new(self.$window().$to_n().getComputedStyle(self["native"], null));
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("CSS.current")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$style!', function() {
            var self = this;

            return (($scope.get('CSS')).$$scope.get('Declaration')).$new(self["native"].currentStyle);
          })
          } else {
          Opal.defn(self, '$style!', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "computed style unsupported");
          })
        };

        Opal.defn(self, '$remove_attribute', function(name) {
          var self = this;

          return self["native"].removeAttribute(name);
        });

        Opal.defn(self, '$remove_class', function() {
          var $a, self = this, classes = nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var names = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            names[$splat_index] = arguments[$splat_index + 0];
          }
          classes = $rb_minus(self.$class_names(), names);
          if ((($a = classes['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self["native"].removeAttribute('class');
            } else {
            self["native"].className = classes.$join(" ");
          };
          return self;
        });

        Opal.defn(self, '$size', function() {
          var $a, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var inc = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            inc[$splat_index] = arguments[$splat_index + 0];
          }
          return ($a = $scope.get('Size')).$new.apply($a, [self].concat(Opal.to_a(inc)));
        });

        Opal.defn(self, '$width', function() {
          var self = this;

          return self.$size().$width();
        });

        Opal.defn(self, '$width=', function(value) {
          var $a, $b, self = this;

          return (($a = [value]), $b = self.$size(), $b['$width='].apply($b, $a), $a[$a.length-1]);
        });

        Opal.defn(self, '$window', function() {
          var self = this;

          return self.$document().$window();
        });

        if ((($a = ((($c = $scope.get('Browser')['$supports?']("Query.xpath")) !== false && $c !== nil) ? $c : $scope.get('Browser')['$loaded?']("wicked-good-xpath"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $scope.get('Browser')['$loaded?']("wicked-good-xpath")) !== nil && (!$a.$$is_boolean || $a == true))) {
            wgxpath.install();};

          return (Opal.defn(self, '$xpath', function(path) {
            var self = this;

            try {
            return $scope.get('NodeSet')['$[]']((($scope.get('Native')).$$scope.get('Array')).$new((self["native"].ownerDocument || self["native"]).evaluate(path,
           self["native"], null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null), $hash2(["get", "length"], {"get": "snapshotItem", "length": "snapshotLength"})))
            } catch ($err) {if (true) {
              try {
                return $scope.get('NodeSet')['$[]']()
              } finally {
                Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
              }
              }else { throw $err; }
            };
          }), nil) && 'xpath';
          } else {
          return (Opal.defn(self, '$xpath', function(path) {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "query by XPath unsupported");
          }), nil) && 'xpath'
        };
      })($scope.base, $scope.get('Node'))
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/document"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$DOM', '$first', '$css', '$xpath', '$[]', '$supports?', '$raise', '$ready?', '$call', '$on', '$off', '$convert', '$new']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Document(){};
        var self = $Document = $klass($base, $super, 'Document', $Document);

        var def = self.$$proto, $scope = self.$$scope, $a, TMP_1, TMP_3, TMP_5;

        def["native"] = nil;
        Opal.defn(self, '$[]', function(what) {
          var $a, self = this;

          
      var result = self["native"].getElementById(what);

      if (result) {
        return self.$DOM(result);
      }
    ;
          return ((($a = self.$css(what).$first()) !== false && $a !== nil) ? $a : self.$xpath(what).$first());
        });

        Opal.alias(self, 'at', '[]');

        Opal.defn(self, '$body', function() {
          var self = this;

          return self.$DOM(self["native"].body);
        });

        Opal.defn(self, '$create_element', function(name, options) {
          var $a, self = this, ns = nil;

          if (options == null) {
            options = $hash2([], {})
          }
          if ((($a = ns = options['$[]']("namespace")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$DOM(self["native"].createElementNS(ns, name))
            } else {
            return self.$DOM(self["native"].createElement(name))
          };
        });

        Opal.defn(self, '$create_text', function(content) {
          var self = this;

          return self.$DOM(self["native"].createTextNode(content));
        });

        Opal.defn(self, '$document', function() {
          var self = this;

          return self;
        });

        Opal.defn(self, '$head', function() {
          var self = this;

          return self.$DOM(self["native"].getElementsByTagName("head")[0]);
        });

        Opal.defn(self, '$inspect', function() {
          var self = this;

          return "#<DOM::Document>";
        });

        if ((($a = $scope.get('Browser')['$supports?']("Event.addListener")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$ready', TMP_1 = function() {
            var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

            TMP_1.$$p = null;
            if (block !== false && block !== nil) {
              } else {
              self.$raise($scope.get('ArgumentError'), "no block given")
            };
            if ((($a = self['$ready?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return block.$call()};
            return ($a = ($b = self).$on, $a.$$p = (TMP_2 = function(e){var self = TMP_2.$$s || this;
if (e == null) e = nil;
            e.$off();
              return block.$call();}, TMP_2.$$s = self, TMP_2), $a).call($b, "dom:load");
          })
        } else if ((($a = $scope.get('Browser')['$supports?']("Event.attach")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.defn(self, '$ready', TMP_3 = function() {
            var $a, $b, TMP_4, self = this, $iter = TMP_3.$$p, block = $iter || nil;

            TMP_3.$$p = null;
            if (block !== false && block !== nil) {
              } else {
              self.$raise($scope.get('ArgumentError'), "no block given")
            };
            if ((($a = self['$ready?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return block.$call()};
            return ($a = ($b = self).$on, $a.$$p = (TMP_4 = function(e){var self = TMP_4.$$s || this, $a;
if (e == null) e = nil;
            if ((($a = self['$ready?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
                e.$off();
                return block.$call();
                } else {
                return nil
              }}, TMP_4.$$s = self, TMP_4), $a).call($b, "ready:state:change");
          })
          } else {
          Opal.defn(self, '$ready', TMP_5 = function() {
            var self = this, $iter = TMP_5.$$p, block = $iter || nil;

            TMP_5.$$p = null;
            return self.$raise($scope.get('NotImplementedError'), "document ready unsupported");
          })
        };

        Opal.defn(self, '$ready?', function() {
          var self = this;

          return self["native"].readyState === "complete";
        });

        Opal.defn(self, '$root', function() {
          var self = this;

          return self.$DOM(self["native"].documentElement);
        });

        Opal.defn(self, '$root=', function(element) {
          var self = this;

          return self["native"].documentElement = $scope.get('Native').$convert(element);
        });

        Opal.defn(self, '$style_sheets', function() {
          var $a, $b, TMP_6, self = this;

          return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = (TMP_6 = function(e){var self = TMP_6.$$s || this;
if (e == null) e = nil;
          return (($scope.get('CSS')).$$scope.get('StyleSheet')).$new(e)}, TMP_6.$$s = self, TMP_6), $a).call($b, self["native"].styleSheets);
        });

        Opal.defn(self, '$title', function() {
          var self = this;

          return self["native"].title;
        });

        Opal.defn(self, '$title=', function(value) {
          var self = this;

          return self["native"].title = value;
        });

        if ((($a = $scope.get('Browser')['$supports?']("Document.view")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (Opal.defn(self, '$window', function() {
            var self = this;

            return $scope.get('Window').$new(self["native"].defaultView);
          }), nil) && 'window'
        } else if ((($a = $scope.get('Browser')['$supports?']("Document.window")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (Opal.defn(self, '$window', function() {
            var self = this;

            return $scope.get('Window').$new(self["native"].parentWindow);
          }), nil) && 'window'
          } else {
          return (Opal.defn(self, '$window', function() {
            var self = this;

            return self.$raise($scope.get('NotImplementedError'), "window from document unsupported");
          }), nil) && 'window'
        };
      })($scope.base, $scope.get('Element'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/document_fragment"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $DocumentFragment(){};
        var self = $DocumentFragment = $klass($base, $super, 'DocumentFragment', $DocumentFragment);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, $scope.get('Element'))
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/builder"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$<<', '$[]=', '$to_h', '$[]', '$each', '$===', '$call', '$raise', '$attr_reader', '$new', '$to_proc', '$map', '$build', '$for', '$create_text', '$document', '$create_element', '$merge!', '$attributes', '$add_class', '$on', '$inner_html=']);
  (function($base) {
    var $Utils, self = $Utils = $module($base, 'Utils');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defs(self, '$heredoc', function(string) {
      var self = this;

      return string;
    })
  })($scope.get('Paggio'));
  (function($base, $super) {
    function $Element(){};
    var self = $Element = $klass($base, $super, 'Element', $Element);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.on = nil;
    return (Opal.defn(self, '$on', TMP_1 = function() {
      var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_1.$$p = null;
      return (((($a = self.on) !== false && $a !== nil) ? $a : self.on = []))['$<<']([args, block]);
    }), nil) && 'on'
  })((($scope.get('Paggio')).$$scope.get('HTML')), $scope.get('BasicObject'));
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_6, $c, TMP_7, $d, TMP_11;

      (function($base, $super) {
        function $Builder(){};
        var self = $Builder = $klass($base, $super, 'Builder', $Builder);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_4;

        def.builder = def.roots = nil;
        Opal.defs(self, '$to_h', function() {
          var $a, self = this;
          if (self.builders == null) self.builders = nil;

          return ((($a = self.builders) !== false && $a !== nil) ? $a : self.builders = $hash2([], {}));
        });

        Opal.defs(self, '$for', TMP_2 = function(klass) {
          var self = this, $iter = TMP_2.$$p, block = $iter || nil;

          TMP_2.$$p = null;
          if (block !== false && block !== nil) {
            return self.$to_h()['$[]='](klass, block)
            } else {
            return self.$to_h()['$[]'](klass)
          };
        });

        Opal.defs(self, '$build', function(builder, item) {try {

          var $a, $b, TMP_3, self = this;

          ($a = ($b = self.$to_h()).$each, $a.$$p = (TMP_3 = function(klass, block){var self = TMP_3.$$s || this, $a;
if (klass == null) klass = nil;if (block == null) block = nil;
          if ((($a = klass['$==='](item)) !== nil && (!$a.$$is_boolean || $a == true))) {
              Opal.ret(block.$call(builder, item))
              } else {
              return nil
            }}, TMP_3.$$s = self, TMP_3), $a).call($b);
          return self.$raise($scope.get('ArgumentError'), "cannot build unknown item " + (item));
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        });

        self.$attr_reader("document", "element");

        Opal.defn(self, '$initialize', TMP_4 = function(document) {
          var $a, $b, $c, TMP_5, self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          self.document = document;
          self.builder = ($a = ($b = (($scope.get('Paggio')).$$scope.get('HTML'))).$new, $a.$$p = block.$to_proc(), $a).call($b);
          return self.roots = ($a = ($c = self.builder.$each()).$map, $a.$$p = (TMP_5 = function(e){var self = TMP_5.$$s || this;
if (e == null) e = nil;
          return $scope.get('Builder').$build(self, e)}, TMP_5.$$s = self, TMP_5), $a).call($c);
        });

        return (Opal.defn(self, '$to_a', function() {
          var self = this;

          return self.roots;
        }), nil) && 'to_a';
      })($scope.base, null);

      ($a = ($b = $scope.get('Builder')).$for, $a.$$p = (TMP_6 = function(b, item){var self = TMP_6.$$s || this;
if (b == null) b = nil;if (item == null) item = nil;
      return b.$document().$create_text(item)}, TMP_6.$$s = self, TMP_6), $a).call($b, $scope.get('String'));

      ($a = ($c = $scope.get('Builder')).$for, $a.$$p = (TMP_7 = function(b, item){var self = TMP_7.$$s || this, $a, $b, TMP_8, $c, TMP_9, $d, TMP_10, dom = nil, on = nil, inner = nil;
if (b == null) b = nil;if (item == null) item = nil;
      dom = b.$document().$create_element(item.name);
        if ((($a = $scope.get('Hash')['$==='](item.attributes)) !== nil && (!$a.$$is_boolean || $a == true))) {
          dom.$attributes()['$merge!'](item.attributes)};
        ($a = ($b = (item.class_names)).$each, $a.$$p = (TMP_8 = function(value){var self = TMP_8.$$s || this;
if (value == null) value = nil;
        return dom.$add_class(value)}, TMP_8.$$s = self, TMP_8), $a).call($b);
        if ((($a = on = item.on || nil) !== nil && (!$a.$$is_boolean || $a == true))) {
          ($a = ($c = on).$each, $a.$$p = (TMP_9 = function(args, block){var self = TMP_9.$$s || this, $a, $b;
if (args == null) args = nil;if (block == null) block = nil;
          return ($a = ($b = dom).$on, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args))}, TMP_9.$$s = self, TMP_9), $a).call($c)};
        if ((($a = inner = item.inner_html || nil) !== nil && (!$a.$$is_boolean || $a == true))) {
          (($a = [inner]), $d = dom, $d['$inner_html='].apply($d, $a), $a[$a.length-1])
          } else {
          ($a = ($d = item).$each, $a.$$p = (TMP_10 = function(child){var self = TMP_10.$$s || this;
if (child == null) child = nil;
          return dom['$<<']($scope.get('Builder').$build(b, child))}, TMP_10.$$s = self, TMP_10), $a).call($d)
        };
        return dom;}, TMP_7.$$s = self, TMP_7), $a).call($c, (((($scope.get('Paggio')).$$scope.get('HTML'))).$$scope.get('Element')));

      ($a = ($d = $scope.get('Builder')).$for, $a.$$p = (TMP_11 = function(b, item){var self = TMP_11.$$s || this;
if (b == null) b = nil;if (item == null) item = nil;
      return item}, TMP_11.$$s = self, TMP_11), $a).call($d, (($scope.get('DOM')).$$scope.get('Node')));
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom/mutation_observer"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$supports?', '$include', '$===', '$==', '$type', '$new', '$[]', '$DOM', '$alias_native', '$call', '$map', '$convert', '$private', '$Native', '$[]=', '$to_n']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $MutationObserver(){};
        var self = $MutationObserver = $klass($base, $super, 'MutationObserver', $MutationObserver);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def["native"] = nil;
        Opal.defs(self, '$supported?', function() {
          var self = this;

          return $scope.get('Browser')['$supports?']("MutationObserver");
        });

        self.$include($scope.get('Native'));

        (function($base, $super) {
          function $Record(){};
          var self = $Record = $klass($base, $super, 'Record', $Record);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          self.$include($scope.get('Native'));

          Opal.defn(self, '$type', function() {
            var self = this, $case = nil;

            return (function() {$case = self["native"].type;if ("attributes"['$===']($case)) {return "attribute"}else if ("childList"['$===']($case)) {return "tree"}else if ("characterData"['$===']($case)) {return "cdata"}else { return nil }})();
          });

          Opal.defn(self, '$attribute?', function() {
            var self = this;

            return self.$type()['$==']("attribute");
          });

          Opal.defn(self, '$tree?', function() {
            var self = this;

            return self.$type()['$==']("tree");
          });

          Opal.defn(self, '$cdata?', function() {
            var self = this;

            return self.$type()['$==']("cdata");
          });

          Opal.defn(self, '$added', function() {
            var $a, self = this, array = nil;

            array = (function() {if ((($a = self["native"].addedNodes != null) !== nil && (!$a.$$is_boolean || $a == true))) {
              return (($scope.get('Native')).$$scope.get('Array')).$new(self["native"].addedNodes)
              } else {
              return []
            }; return nil; })();
            return $scope.get('NodeSet')['$[]'](array);
          });

          Opal.defn(self, '$removed', function() {
            var $a, self = this, array = nil;

            array = (function() {if ((($a = self["native"].removedNodes != null) !== nil && (!$a.$$is_boolean || $a == true))) {
              return (($scope.get('Native')).$$scope.get('Array')).$new(self["native"].removedNodes)
              } else {
              return []
            }; return nil; })();
            return $scope.get('NodeSet')['$[]'](array);
          });

          Opal.defn(self, '$target', function() {
            var self = this;

            return self.$DOM(self["native"].target);
          });

          self.$alias_native("old", "oldValue");

          self.$alias_native("name", "attributeName");

          return self.$alias_native("namespace", "attributeNamespace");
        })($scope.base, null);

        Opal.defn(self, '$initialize', TMP_1 = function() {
          var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          TMP_1.$$p = null;
          
      var func = function(records) {
        return block.$call(($a = ($b = (records)).$map, $a.$$p = (TMP_2 = function(r){var self = TMP_2.$$s || this;
if (r == null) r = nil;
          return (((((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('MutationObserver'))).$$scope.get('Record')).$new(r)}, TMP_2.$$s = self, TMP_2), $a).call($b));
      }
    ;
          return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new window.MutationObserver(func)]);
        });

        Opal.defn(self, '$observe', function(target, options) {
          var self = this;

          if (options == null) {
            options = nil
          }
          if (options !== false && options !== nil) {
            } else {
            options = $hash2(["children", "tree", "attributes", "cdata"], {"children": true, "tree": true, "attributes": "old", "cdata": "old"})
          };
          self["native"].observe($scope.get('Native').$convert(target), self.$convert(options));
          return self;
        });

        Opal.defn(self, '$take', function() {
          var $a, $b, TMP_3, self = this;

          return ($a = ($b = (self["native"].takeRecords())).$map, $a.$$p = (TMP_3 = function(r){var self = TMP_3.$$s || this;
if (r == null) r = nil;
          return $scope.get('Record').$new(r)}, TMP_3.$$s = self, TMP_3), $a).call($b);
        });

        Opal.defn(self, '$disconnect', function() {
          var self = this;

          return self["native"].disconnect();
        });

        self.$private();

        return (Opal.defn(self, '$convert', function(hash) {
          var $a, self = this, options = nil, attrs = nil, filter = nil, cdata = nil;

          options = self.$Native({});
          if ((($a = hash['$[]']("children")) !== nil && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("childList", true)};
          if ((($a = hash['$[]']("tree")) !== nil && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("subtree", true)};
          if ((($a = attrs = hash['$[]']("attributes")) !== nil && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("attributes", true);
            if (attrs['$==']("old")) {
              options['$[]=']("attributeOldValue", true)};};
          if ((($a = filter = hash['$[]']("filter")) !== nil && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("attributeFilter", filter)};
          if ((($a = cdata = hash['$[]']("cdata")) !== nil && (!$a.$$is_boolean || $a == true))) {
            options['$[]=']("characterData", true);
            if (cdata['$==']("old")) {
              options['$[]=']("characterDataOldValue", true)};};
          return options.$to_n();
        }), nil) && 'convert';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/dom"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars, $klass = Opal.klass;
  if ($gvars.window == null) $gvars.window = nil;

  Opal.add_stubs(['$require', '$DOM', '$shift', '$to_a', '$new', '$to_proc', '$==', '$length', '$first', '$native?', '$===', '$try_convert', '$raise', '$document']);
  self.$require("browser/dom/node_set");
  self.$require("browser/dom/node");
  self.$require("browser/dom/attribute");
  self.$require("browser/dom/character_data");
  self.$require("browser/dom/text");
  self.$require("browser/dom/cdata");
  self.$require("browser/dom/comment");
  self.$require("browser/dom/element");
  self.$require("browser/dom/document");
  self.$require("browser/dom/document_fragment");
  self.$require("browser/dom/builder");
  self.$require("browser/dom/mutation_observer");
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$XML', function(what) {
      var self = this;

      
      var doc;

      if (window.DOMParser) {
        doc = new DOMParser().parseFromString(what, 'text/xml');
      }
      else {
        doc       = new ActiveXObject('Microsoft.XMLDOM');
        doc.async = 'false';
        doc.loadXML(what);
      }
    
      return self.$DOM(doc);
    });

    Opal.defn(self, '$DOM', TMP_1 = function() {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, document = nil, roots = nil, what = nil, $splat_index = nil;
      if ($gvars.document == null) $gvars.document = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_1.$$p = null;
      if (block !== false && block !== nil) {
        document = ((($a = args.$shift()) !== false && $a !== nil) ? $a : $gvars.document);
        roots = ($a = ($b = (((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('Builder'))).$new, $a.$$p = block.$to_proc(), $a).call($b, document).$to_a();
        if (roots.$length()['$=='](1)) {
          return roots.$first()
          } else {
          return (((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('NodeSet')).$new(roots)
        };
        } else {
        what = args.$shift();
        document = ((($a = args.$shift()) !== false && $a !== nil) ? $a : $gvars.document);
        if ((($a = self['$native?'](what)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('Node')).$new(what)
        } else if ((($a = (((($scope.get('Browser')).$$scope.get('DOM'))).$$scope.get('Node'))['$==='](what)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return what
        } else if ((($a = $scope.get('String')['$==='](what)) !== nil && (!$a.$$is_boolean || $a == true))) {
          
          var doc = $scope.get('Native').$try_convert(document).createElement('div');
          doc.innerHTML = what;

          return self.$DOM(doc.childNodes.length == 1 ? doc.childNodes[0] : doc);
        ;
          } else {
          return self.$raise($scope.get('ArgumentError'), "argument not DOM convertible")
        };
      };
    });
  })($scope.base);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope;

      def["native"] = nil;
      return (Opal.defn(self, '$document', function() {
        var self = this;

        return self.$DOM(self["native"].document);
      }), nil) && 'document'
    })($scope.base, null)
  })($scope.base);
  return $gvars.document = $gvars.window.$document();
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/css/declaration"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$include', '$new', '$each', '$[]=', '$important', '$name', '$value', '$to_proc', '$to_s', '$enum_for', '$[]', '$alias_native', '$end_with?']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Declaration(){};
        var self = $Declaration = $klass($base, $super, 'Declaration', $Declaration);

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_4;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        self.$include($scope.get('Enumerable'));

        Opal.defn(self, '$rule', function() {
          var $a, self = this;

          if ((($a = (typeof(self["native"].parentRule) !== "undefined")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Rule').$new(self["native"].parentRule)
            } else {
            return nil
          };
        });

        Opal.defn(self, '$assign', function(data) {
          var $a, $b, TMP_1, self = this;

          ($a = ($b = data).$each, $a.$$p = (TMP_1 = function(name, value){var self = TMP_1.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          return self['$[]='](name, value)}, TMP_1.$$s = self, TMP_1), $a).call($b);
          return self;
        });

        Opal.defn(self, '$replace', function(string) {
          var self = this;

          return self["native"].cssText = string;
        });

        Opal.defn(self, '$apply', TMP_2 = function() {
          var $a, $b, TMP_3, $c, $d, self = this, $iter = TMP_2.$$p, block = $iter || nil;

          TMP_2.$$p = null;
          return ($a = ($b = ($c = ($d = (((($scope.get('Paggio')).$$scope.get('CSS'))).$$scope.get('Definition'))).$new, $c.$$p = block.$to_proc(), $c).call($d)).$each, $a.$$p = (TMP_3 = function(style){var self = TMP_3.$$s || this, $a;
            if (self["native"] == null) self["native"] = nil;
if (style == null) style = nil;
          if ((($a = style.$important()) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self["native"].setProperty(style.$name(), style.$value(), "important");
              } else {
              return self["native"].setProperty(style.$name(), style.$value(), "");
            }}, TMP_3.$$s = self, TMP_3), $a).call($b);
        });

        Opal.defn(self, '$delete', function(name) {
          var self = this;

          return self["native"].removeProperty(name);
        });

        Opal.defn(self, '$[]', function(name) {
          var self = this;

          
      var result = self["native"].getPropertyValue(name);

      if (result == null || result === "") {
        return nil;
      }

      return result;
    ;
        });

        Opal.defn(self, '$[]=', function(name, value) {
          var self = this;

          return self["native"].setProperty(name, value.$to_s(), "");
        });

        Opal.defn(self, '$important?', function(name) {
          var self = this;

          return self["native"].getPropertyPriority(name) == "important";
        });

        Opal.defn(self, '$each', TMP_4 = function() {
          var $a, self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          if ((block !== nil)) {
            } else {
            return self.$enum_for("each")
          };
          
      for (var i = 0, length = self["native"].length; i < length; i++) {
        var name  = self["native"].item(i);

        ((($a = Opal.yieldX(block, [name, self['$[]'](name)])) === $breaker) ? $breaker.$v : $a)
      }
    ;
          return self;
        });

        self.$alias_native("length");

        self.$alias_native("to_s", "cssText");

        return (Opal.defn(self, '$method_missing', function(name, value) {
          var $a, self = this;

          if (value == null) {
            value = nil
          }
          if ((($a = name['$end_with?']("=")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self['$[]='](name['$[]']($range(0, -2, false)), value)
            } else {
            return self['$[]'](name)
          };
        }), nil) && 'method_missing';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/css/style_sheet"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$is_a?', '$to_n', '$alias_native', '$new', '$DOM', '$===', '$join', '$map', '$insert', '$length', '$find', '$log', '$==', '$id', '$rules', '$__send__', '$to_proc']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $StyleSheet(){};
        var self = $StyleSheet = $klass($base, $super, 'StyleSheet', $StyleSheet);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.defn(self, '$initialize', TMP_1 = function(what) {
          var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

          TMP_1.$$p = null;
          if ((($a = what['$is_a?']((($scope.get('DOM')).$$scope.get('Element')))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [what.$to_n().sheet])
            } else {
            return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [what])
          };
        });

        self.$alias_native("disabled?", "disabled");

        self.$alias_native("href");

        self.$alias_native("title");

        self.$alias_native("type");

        Opal.defn(self, '$media', function() {
          var $a, self = this;

          if ((($a = self["native"].media != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Media').$new(self["native"].media)
            } else {
            return nil
          };
        });

        Opal.defn(self, '$owner', function() {
          var self = this;

          return self.$DOM(self["native"].ownerNode);
        });

        Opal.defn(self, '$parent', function() {
          var $a, self = this;

          if ((($a = self["native"].parentStyleSheet != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Sheet').$new(self["native"].parentStyleSheet)
            } else {
            return nil
          };
        });

        Opal.defn(self, '$rules', function() {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = (TMP_2 = function(e){var self = TMP_2.$$s || this;
if (e == null) e = nil;
          return $scope.get('Rule').$new(e)}, TMP_2.$$s = self, TMP_2), $a).call($b, self["native"].cssRules);
        });

        Opal.defn(self, '$delete', function(index) {
          var self = this;

          return self["native"].deleteRule(index);
        });

        Opal.defn(self, '$insert', function(index, rule) {
          var self = this;

          return self["native"].insertRule(rule, index);
        });

        Opal.defn(self, '$rule', function(selector, body) {
          var $a, $b, TMP_3, self = this;

          if ((($a = $scope.get('String')['$==='](selector)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            selector = selector.$join(", ")
          };
          if ((($a = $scope.get('String')['$==='](body)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            body = ($a = ($b = body).$map, $a.$$p = (TMP_3 = function(name, value){var self = TMP_3.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            return "" + (name) + ": " + (value) + ";"}, TMP_3.$$s = self, TMP_3), $a).call($b).$join("\n")
          };
          return self.$insert(self.$length(), "" + (selector) + " { " + (body) + " }");
        });

        Opal.defn(self, '$[]', function(id) {
          var $a, $b, TMP_4, self = this;

          return ($a = ($b = self.$rules()).$find, $a.$$p = (TMP_4 = function(r){var self = TMP_4.$$s || this;
if (r == null) r = nil;
          self.$log(r);
            return r.$id()['$=='](id);}, TMP_4.$$s = self, TMP_4), $a).call($b);
        });

        Opal.defn(self, '$method_missing', TMP_5 = function() {
          var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          TMP_5.$$p = null;
          return ($a = ($b = self.$rules()).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
        });

        return (function($base, $super) {
          function $Media(){};
          var self = $Media = $klass($base, $super, 'Media', $Media);

          var def = self.$$proto, $scope = self.$$scope;

          def["native"] = nil;
          self.$alias_native("text", "mediaText");

          self.$alias_native("to_s", "mediaText");

          Opal.defn(self, '$push', function(medium) {
            var self = this;

            self["native"].appendMedium(medium);
            return self;
          });

          return (Opal.defn(self, '$delete', function(medium) {
            var self = this;

            return self["native"].deleteMedium(medium);
          }), nil) && 'delete';
        })($scope.base, (($scope.get('Native')).$$scope.get('Array')));
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/css/rule"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$==', '$[]', '$new', '$raise', '$alias_native']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.cdecl($scope, 'STYLE_RULE', 1);

        Opal.cdecl($scope, 'CHARSET_RULE', 2);

        Opal.cdecl($scope, 'IMPORT_RULE', 3);

        Opal.cdecl($scope, 'MEDIA_RULE', 4);

        Opal.cdecl($scope, 'FONT_FACE_RULE', 5);

        Opal.cdecl($scope, 'PAGE_RULE', 6);

        Opal.cdecl($scope, 'KEYFRAMES_RULE', 7);

        Opal.cdecl($scope, 'KEYFRAME_RULE', 8);

        Opal.cdecl($scope, 'NAMESPACE_RULE', 10);

        Opal.cdecl($scope, 'COUNTER_STYLE_RULE', 11);

        Opal.cdecl($scope, 'SUPPORTS_RULE', 12);

        Opal.cdecl($scope, 'DOCUMENT_RULE', 13);

        Opal.cdecl($scope, 'FONT_FEATURE_VALUES_RULE', 14);

        Opal.cdecl($scope, 'VIEWPORT_RULE', 15);

        Opal.cdecl($scope, 'REGION_STYLE_RULE', 16);

        Opal.defs(self, '$new', TMP_1 = function(rule) {
          var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, klass = nil;
          if (self.classes == null) self.classes = nil;

          TMP_1.$$p = null;
          if (self['$==']($scope.get('Rule'))) {
            ((($a = self.classes) !== false && $a !== nil) ? $a : self.classes = [nil, $scope.get('Style')]);
            if ((($a = klass = self.classes['$[]'](rule.type)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return klass.$new(rule)
              } else {
              return self.$raise($scope.get('ArgumentError'), "cannot instantiate a non derived Rule object")
            };
            } else {
            return Opal.find_super_dispatcher(self, 'new', TMP_1, null, $Rule).apply(self, [rule])
          };
        });

        self.$alias_native("text", "cssText");

        self.$alias_native("to_s", "cssText");

        Opal.defn(self, '$parent', function() {
          var $a, self = this;

          if ((($a = self["native"].parentRule != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Rule').$new(self["native"].parentRule)
            } else {
            return nil
          };
        });

        return (Opal.defn(self, '$style_sheet', function() {
          var $a, self = this;

          if ((($a = self["native"].parentStyleSheet != null) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('StyleSheet').$new(self["native"].parentStyleSheet)
            } else {
            return nil
          };
        }), nil) && 'style_sheet';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/css/rule/style"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$alias_native', '$new', '$__send__', '$to_proc', '$declaration']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $scope = self.$$scope;

        return (function($base, $super) {
          function $Style(){};
          var self = $Style = $klass($base, $super, 'Style', $Style);

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          def["native"] = nil;
          self.$alias_native("selector", "selectorText");

          self.$alias_native("id", "selectorText");

          Opal.defn(self, '$declaration', function() {
            var self = this;

            return $scope.get('Declaration').$new(self["native"].style);
          });

          return (Opal.defn(self, '$method_missing', TMP_1 = function() {
            var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

            var array_size = arguments.length - 0;
            if(array_size < 0) array_size = 0;
            var args = new Array(array_size);
            for($splat_index = 0; $splat_index < array_size; $splat_index++) {
              args[$splat_index] = arguments[$splat_index + 0];
            }
            TMP_1.$$p = null;
            return ($a = ($b = self.$declaration()).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
          }), nil) && 'method_missing';
        })($scope.base, $scope.get('Rule'))
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/css"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$create_element', '$[]=', '$inner_text=', '$css', '$to_proc']);
  self.$require("browser/css/declaration");
  self.$require("browser/css/style_sheet");
  self.$require("browser/css/rule");
  self.$require("browser/css/rule/style");
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$CSS', TMP_1 = function(text) {
      var $a, $b, $c, $d, self = this, $iter = TMP_1.$$p, block = $iter || nil, style = nil;
      if ($gvars.document == null) $gvars.document = nil;

      if (text == null) {
        text = nil
      }
      TMP_1.$$p = null;
      style = $gvars.document.$create_element("style");
      style['$[]=']("type", "text/css");
      if (block !== false && block !== nil) {
        (($a = [($c = ($d = $scope.get('Paggio')).$css, $c.$$p = block.$to_proc(), $c).call($d)]), $b = style, $b['$inner_text='].apply($b, $a), $a[$a.length-1])
        } else {
        (($a = [text]), $b = style, $b['$inner_text='].apply($b, $a), $a[$a.length-1])
      };
      return style;
    })
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("native");
  self.$require("paggio");
  self.$require("browser/version");
  self.$require("browser/utils");
  self.$require("browser/support");
  self.$require("browser/event");
  self.$require("browser/window");
  self.$require("browser/dom");
  return self.$require("browser/css");
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/socket"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$supports?', '$include', '$target', '$is_a?', '$new', '$native?', '$to_s', '$to_n', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$alias_native', '$split', '$state']);
  return (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Socket(){};
      var self = $Socket = $klass($base, $super, 'Socket', $Socket);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_2;

      def["native"] = nil;
      Opal.defs(self, '$supported?', function() {
        var self = this;

        return $scope.get('Browser')['$supports?']("WebSocket");
      });

      self.$include($scope.get('Native'));

      self.$include((($scope.get('IO')).$$scope.get('Writable')));

      self.$include((($scope.get('Event')).$$scope.get('Target')));

      ($a = ($b = self).$target, $a.$$p = (TMP_1 = function(value){var self = TMP_1.$$s || this, $a;
if (value == null) value = nil;
      if ((($a = $scope.get('Native')['$is_a?'](value, window.WebSocket)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('Socket').$new(value)
          } else {
          return nil
        }}, TMP_1.$$s = self, TMP_1), $a).call($b);

      Opal.defn(self, '$initialize', TMP_2 = function(url, protocol) {
        var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        if (protocol == null) {
          protocol = nil
        }
        TMP_2.$$p = null;
        if ((($a = self['$native?'](url)) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_2, null).apply(self, [url])
        } else if (protocol !== false && protocol !== nil) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_2, null).apply(self, [new window.WebSocket(url.$to_s(), protocol.$to_n())])
          } else {
          Opal.find_super_dispatcher(self, 'initialize', TMP_2, null).apply(self, [new window.WebSocket(url.$to_s())])
        };
        if (block !== false && block !== nil) {
          if (block.$arity()['$=='](0)) {
            return ($a = ($b = self).$instance_exec, $a.$$p = block.$to_proc(), $a).call($b)
            } else {
            return block.$call(self)
          }
          } else {
          return nil
        };
      });

      self.$alias_native("protocol");

      self.$alias_native("url");

      self.$alias_native("buffered", "bufferedAmount");

      Opal.defn(self, '$type', function() {
        var self = this;

        
      switch (self["native"].binaryType) {
        case "blob":
          return "blob";

        case "arraybuffer":
          return "buffer";

        default:
          return "string";
      }
    ;
      });

      Opal.defn(self, '$state', function() {
        var self = this;

        
      switch (self["native"].readyState) {
        case window.WebSocket.CONNECTING:
          return "connecting";

        case window.WebSocket.OPEN:
          return "open";

        case window.WebSocket.CLOSING:
          return "closing";

        case window.WebSocket.CLOSED:
          return "closed";
      }
    ;
      });

      Opal.defn(self, '$extensions', function() {
        var self = this;

        return (self["native"].extensions).$split(/\s*,\s*/);
      });

      Opal.defn(self, '$alive?', function() {
        var self = this;

        return self.$state()['$==']("open");
      });

      Opal.defn(self, '$write', function(data) {
        var self = this;

        return self["native"].send(data.$to_n());
      });

      Opal.alias(self, '<<', 'write');

      Opal.alias(self, 'send', 'write');

      return (Opal.defn(self, '$close', function(code, reason) {
        var self = this;

        if (code == null) {
          code = nil
        }
        if (reason == null) {
          reason = nil
        }
        return self["native"].close(code.$to_n(), reason.$to_n());
      }), nil) && 'close';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/interval"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$convert', '$nil?', '$stopped?', '$aborted?', '$raise', '$call', '$tap', '$to_proc', '$new', '$every', '$every!']);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Interval(){};
      var self = $Interval = $klass($base, $super, 'Interval', $Interval);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def.id = def.aborted = def.window = def.block = def.every = nil;
      self.$attr_reader("every");

      Opal.defn(self, '$initialize', TMP_1 = function(window, time) {
        var self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        self.window = $scope.get('Native').$convert(window);
        self.every = time;
        self.block = block;
        return self.aborted = false;
      });

      Opal.defn(self, '$stopped?', function() {
        var self = this;

        return self.id['$nil?']();
      });

      Opal.defn(self, '$aborted?', function() {
        var self = this;

        return self.aborted;
      });

      Opal.defn(self, '$abort', function() {
        var self = this;

        self.window.clearInterval(self.id);
        self.aborted = true;
        return self.id = nil;
      });

      Opal.defn(self, '$stop', function() {
        var $a, self = this;

        if ((($a = self['$stopped?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        self.window.clearInterval(self.id);
        self.stopped = true;
        return self.id = nil;
      });

      Opal.defn(self, '$start', function() {
        var $a, self = this;

        if ((($a = self['$aborted?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise("the interval has been aborted")};
        if ((($a = self['$stopped?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        return self.id = self.window.setInterval(self.block, self.every * 1000);
      });

      return (Opal.defn(self, '$call', function() {
        var self = this;

        return self.block.$call();
      }), nil) && 'call';
    })($scope.base, null);

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

      def["native"] = nil;
      Opal.defn(self, '$every', TMP_2 = function(time) {
        var $a, $b, $c, $d, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        return ($a = ($b = ($c = ($d = $scope.get('Interval')).$new, $c.$$p = block.$to_proc(), $c).call($d, self["native"], time)).$tap, $a.$$p = "start".$to_proc(), $a).call($b);
      });

      return (Opal.defn(self, '$every!', TMP_3 = function(time) {
        var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        TMP_3.$$p = null;
        return ($a = ($b = $scope.get('Interval')).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], time);
      }), nil) && 'every!';
    })($scope.base, null);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5;

    Opal.defn(self, '$every', TMP_4 = function(time) {
      var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_4.$$p = null;
      return ($a = ($b = $gvars.window).$every, $a.$$p = block.$to_proc(), $a).call($b, time);
    });

    Opal.defn(self, '$every!', TMP_5 = function(time) {
      var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_5.$$p = null;
      return ($a = ($b = $gvars.window)['$every!'], $a.$$p = block.$to_proc(), $a).call($b, time);
    });
  })($scope.base);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$every', function(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window).$every, $a.$$p = self.$to_proc(), $a).call($b, time);
    });

    return (Opal.defn(self, '$every!', function(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window)['$every!'], $a.$$p = self.$to_proc(), $a).call($b, time);
    }), nil) && 'every!';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["browser/delay"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$convert', '$to_n', '$tap', '$to_proc', '$new', '$after', '$after!']);
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Delay(){};
      var self = $Delay = $klass($base, $super, 'Delay', $Delay);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      def.window = def.id = def.block = def.after = nil;
      self.$attr_reader("after");

      Opal.defn(self, '$initialize', TMP_1 = function(window, time) {
        var self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        self.window = $scope.get('Native').$convert(window);
        self.after = time;
        return self.block = block;
      });

      Opal.defn(self, '$abort', function() {
        var self = this;

        return self.window.clearTimeout(self.id);
      });

      return (Opal.defn(self, '$start', function() {
        var self = this;

        return self.id = self.window.setTimeout(self.block.$to_n(), self.after * 1000);
      }), nil) && 'start';
    })($scope.base, null);

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3;

      def["native"] = nil;
      Opal.defn(self, '$after', TMP_2 = function(time) {
        var $a, $b, $c, $d, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        return ($a = ($b = ($c = ($d = $scope.get('Delay')).$new, $c.$$p = block.$to_proc(), $c).call($d, self["native"], time)).$tap, $a.$$p = "start".$to_proc(), $a).call($b);
      });

      return (Opal.defn(self, '$after!', TMP_3 = function(time) {
        var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        TMP_3.$$p = null;
        return ($a = ($b = $scope.get('Delay')).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], time);
      }), nil) && 'after!';
    })($scope.base, null);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5;

    Opal.defn(self, '$after', TMP_4 = function(time) {
      var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_4.$$p = null;
      return ($a = ($b = $gvars.window).$after, $a.$$p = block.$to_proc(), $a).call($b, time);
    });

    Opal.defn(self, '$after!', TMP_5 = function(time) {
      var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      TMP_5.$$p = null;
      return ($a = ($b = $gvars.window)['$after!'], $a.$$p = block.$to_proc(), $a).call($b, time);
    });
  })($scope.base);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$after', function(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window).$after, $a.$$p = self.$to_proc(), $a).call($b, time);
    });

    return (Opal.defn(self, '$after!', function(time) {
      var $a, $b, self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return ($a = ($b = $gvars.window)['$after!'], $a.$$p = self.$to_proc(), $a).call($b, time);
    }), nil) && 'after!';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/jquery/constants"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$raise']);
  self.$require("native");
  if ((($a = ($scope.JQUERY_CLASS != null)) !== nil && (!$a.$$is_boolean || $a == true))) {
    return nil
    } else {
    return (function() {if ((($a = !!Opal.global.jQuery) !== nil && (!$a.$$is_boolean || $a == true))) {return Opal.cdecl($scope, 'JQUERY_CLASS', Opal.cdecl($scope, 'JQUERY_SELECTOR', Opal.global.jQuery))}else if ((($a = !!Opal.global.Zepto) !== nil && (!$a.$$is_boolean || $a == true))) {Opal.cdecl($scope, 'JQUERY_SELECTOR', Opal.global.Zepto);
    return Opal.cdecl($scope, 'JQUERY_CLASS', Opal.global.Zepto.zepto.Z);}else {return self.$raise($scope.get('NameError'), "Can't find jQuery or Zepto. jQuery must be included before opal-jquery")}})()
  };
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/jquery/element"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$to_n', '$include', '$each', '$alias_native', '$attr_reader', '$nil?', '$[]', '$[]=', '$raise', '$is_a?', '$has_key?', '$delete', '$call', '$gsub', '$upcase', '$compact', '$map', '$respond_to?', '$<<', '$Native', '$new']);
  self.$require("native");
  self.$require("opal/jquery/constants");
  return (function($base, $super) {
    function $Element(){};
    var self = $Element = $klass($base, $super, 'Element', $Element);

    var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_6, TMP_7, TMP_8;

    var $ = $scope.get('JQUERY_SELECTOR').$to_n();

    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$find', function(selector) {
      var self = this;

      return $(selector);
    });

    Opal.defs(self, '$[]', function(selector) {
      var self = this;

      return $(selector);
    });

    Opal.defs(self, '$id', function(id) {
      var self = this;

      
      var el = document.getElementById(id);

      if (!el) {
        return nil;
      }

      return $(el);
    
    });

    Opal.defs(self, '$new', function(tag) {
      var self = this;

      if (tag == null) {
        tag = "div"
      }
      return $(document.createElement(tag));
    });

    Opal.defs(self, '$parse', function(str) {
      var self = this;

      return $.parseHTML ? $($.parseHTML(str)) : $(str);
    });

    Opal.defs(self, '$expose', function() {
      var $a, $b, TMP_1, self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var methods = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        methods[$splat_index] = arguments[$splat_index + 0];
      }
      return ($a = ($b = methods).$each, $a.$$p = (TMP_1 = function(method){var self = TMP_1.$$s || this;
if (method == null) method = nil;
      return self.$alias_native(method)}, TMP_1.$$s = self, TMP_1), $a).call($b);
    });

    self.$attr_reader("selector");

    self.$alias_native("after");

    self.$alias_native("before");

    self.$alias_native("parent");

    self.$alias_native("parents");

    self.$alias_native("prev");

    self.$alias_native("remove");

    self.$alias_native("hide");

    self.$alias_native("show");

    self.$alias_native("toggle");

    self.$alias_native("children");

    self.$alias_native("blur");

    self.$alias_native("closest");

    self.$alias_native("detach");

    self.$alias_native("focus");

    self.$alias_native("find");

    self.$alias_native("next");

    self.$alias_native("siblings");

    self.$alias_native("text");

    self.$alias_native("trigger");

    self.$alias_native("append");

    self.$alias_native("prepend");

    self.$alias_native("serialize");

    self.$alias_native("is");

    self.$alias_native("filter");

    self.$alias_native("last");

    self.$alias_native("wrap");

    self.$alias_native("stop");

    self.$alias_native("clone");

    self.$alias_native("empty");

    self.$alias_native("get");

    self.$alias_native("prop");

    Opal.alias(self, 'succ', 'next');

    Opal.alias(self, '<<', 'append');

    self.$alias_native("add_class", "addClass");

    self.$alias_native("append_to", "appendTo");

    self.$alias_native("has_class?", "hasClass");

    self.$alias_native("html=", "html");

    self.$alias_native("index");

    self.$alias_native("is?", "is");

    self.$alias_native("remove_attr", "removeAttr");

    self.$alias_native("remove_class", "removeClass");

    self.$alias_native("submit");

    self.$alias_native("text=", "text");

    self.$alias_native("toggle_class", "toggleClass");

    self.$alias_native("value=", "val");

    self.$alias_native("scroll_top=", "scrollTop");

    self.$alias_native("scroll_top", "scrollTop");

    self.$alias_native("scroll_left=", "scrollLeft");

    self.$alias_native("scroll_left", "scrollLeft");

    self.$alias_native("remove_attribute", "removeAttr");

    self.$alias_native("slide_down", "slideDown");

    self.$alias_native("slide_up", "slideUp");

    self.$alias_native("slide_toggle", "slideToggle");

    self.$alias_native("fade_toggle", "fadeToggle");

    self.$alias_native("height=", "height");

    self.$alias_native("width=", "width");

    self.$alias_native("outer_width", "outerWidth");

    self.$alias_native("outer_height", "outerHeight");

    Opal.defn(self, '$to_n', function() {
      var self = this;

      return self;
    });

    Opal.defn(self, '$[]', function(name) {
      var self = this;

      
      var value = self.attr(name);
      if(value === undefined) return nil;
      return value;
    
    });

    Opal.defn(self, '$[]=', function(name, value) {
      var $a, self = this;

      if ((($a = value['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.removeAttr(name);};
      return self.attr(name, value);
    });

    Opal.defn(self, '$attr', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      
      var size = args.length;
      switch (size) {
      case 1:
        return self['$[]'](args[0]);
        break;
      case 2:
        return self['$[]='](args[0], args[1]);
        break;
      default:
        self.$raise($scope.get('ArgumentError'), "#attr only accepts 1 or 2 arguments")
      }
    ;
    });

    Opal.defn(self, '$has_attribute?', function(name) {
      var self = this;

      return self.attr(name) !== undefined;
    });

    Opal.defn(self, '$append_to_body', function() {
      var self = this;

      return self.appendTo(document.body);
    });

    Opal.defn(self, '$append_to_head', function() {
      var self = this;

      return self.appendTo(document.head);
    });

    Opal.defn(self, '$at', function(index) {
      var self = this;

      
      var length = self.length;

      if (index < 0) {
        index += length;
      }

      if (index < 0 || index >= length) {
        return nil;
      }

      return $(self[index]);
    
    });

    Opal.defn(self, '$class_name', function() {
      var self = this;

      
      var first = self[0];
      return (first && first.className) || "";
    
    });

    Opal.defn(self, '$class_name=', function(name) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        self[i].className = name;
      }
    
      return self;
    });

    Opal.defn(self, '$css', function(name, value) {
      var $a, $b, self = this;

      if (value == null) {
        value = nil
      }
      if ((($a = ($b = value['$nil?'](), $b !== false && $b !== nil ?name['$is_a?']($scope.get('String')) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.css(name)
      } else if ((($a = name['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.css(name.$to_n());
        } else {
        self.css(name, value);
      };
      return self;
    });

    Opal.defn(self, '$animate', TMP_2 = function(params) {
      var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil, speed = nil;

      TMP_2.$$p = null;
      speed = (function() {if ((($a = params['$has_key?']("speed")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return params.$delete("speed")
        } else {
        return 400
      }; return nil; })();
      
      self.animate(params.$to_n(), speed, function() {
        (function() {if ((block !== nil)) {
        return block.$call()
        } else {
        return nil
      }; return nil; })()
      })
    ;
    });

    Opal.defn(self, '$data', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      
      var result = self.data.apply(self, args);
      return result == null ? nil : result;
    
    });

    Opal.defn(self, '$effect', TMP_3 = function(name) {
      var $a, $b, TMP_4, $c, TMP_5, self = this, $iter = TMP_3.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 1;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 1];
      }
      TMP_3.$$p = null;
      name = ($a = ($b = name).$gsub, $a.$$p = (TMP_4 = function(match){var self = TMP_4.$$s || this;
if (match == null) match = nil;
      return match['$[]'](1).$upcase()}, TMP_4.$$s = self, TMP_4), $a).call($b, /_\w/);
      args = ($a = ($c = args).$map, $a.$$p = (TMP_5 = function(a){var self = TMP_5.$$s || this, $a;
if (a == null) a = nil;
      if ((($a = a['$respond_to?']("to_n")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return a.$to_n()
          } else {
          return nil
        }}, TMP_5.$$s = self, TMP_5), $a).call($c).$compact();
      args['$<<'](function() { (function() {if ((block !== nil)) {
        return block.$call()
        } else {
        return nil
      }; return nil; })() });
      return self[name].apply(self, args);
    });

    Opal.defn(self, '$visible?', function() {
      var self = this;

      return self.is(':visible');
    });

    Opal.defn(self, '$offset', function() {
      var self = this;

      return self.$Native(self.offset());
    });

    Opal.defn(self, '$each', TMP_6 = function() {
      var self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

      TMP_6.$$p = null;
      for (var i = 0, length = self.length; i < length; i++) {
      if (Opal.yield1($yield, $(self[i])) === $breaker) return $breaker.$v;
      };
      return self;
    });

    Opal.defn(self, '$first', function() {
      var self = this;

      return self.length ? self.first() : nil;
    });

    Opal.defn(self, '$html', function(content) {
      var self = this;

      
      if (content != null) {
        return self.html(content);
      }

      return self.html() || '';
    
    });

    Opal.defn(self, '$id', function() {
      var self = this;

      
      var first = self[0];
      return (first && first.id) || "";
    
    });

    Opal.defn(self, '$id=', function(id) {
      var self = this;

      
      var first = self[0];

      if (first) {
        first.id = id;
      }

      return self;
    
    });

    Opal.defn(self, '$tag_name', function() {
      var self = this;

      return self.length > 0 ? self[0].tagName.toLowerCase() : nil;
    });

    Opal.defn(self, '$inspect', function() {
      var self = this;

      
      if      (self[0] === document) return '#<Element [document]>'
      else if (self[0] === window  ) return '#<Element [window]>'

      var val, el, str, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];
        if (!el.tagName) { return '#<Element ['+el.toString()+']'; }

        str = "<" + el.tagName.toLowerCase();

        if (val = el.id) str += (' id="' + val + '"');
        if (val = el.className) str += (' class="' + val + '"');

        result.push(str + '>');
      }

      return '#<Element [' + result.join(', ') + ']>';
    
    });

    Opal.defn(self, '$to_s', function() {
      var self = this;

      
      var val, el, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];

        result.push(el.outerHTML)
      }

      return result.join(', ');
    
    });

    Opal.defn(self, '$length', function() {
      var self = this;

      return self.length;
    });

    Opal.defn(self, '$any?', function() {
      var self = this;

      return self.length > 0;
    });

    Opal.defn(self, '$empty?', function() {
      var self = this;

      return self.length === 0;
    });

    Opal.alias(self, 'empty?', 'none?');

    Opal.defn(self, '$on', TMP_7 = function(name, sel) {
      var self = this, $iter = TMP_7.$$p, block = $iter || nil;

      if (sel == null) {
        sel = nil
      }
      TMP_7.$$p = null;
      
      var wrapper = function(evt) {
        if (evt.preventDefault) {
          evt = $scope.get('Event').$new(evt);
        }

        return block.apply(null, arguments);
      };

      block._jq_wrap = wrapper;

      if (sel == nil) {
        self.on(name, wrapper);
      }
      else {
        self.on(name, sel, wrapper);
      }
    ;
      return block;
    });

    Opal.defn(self, '$one', TMP_8 = function(name, sel) {
      var self = this, $iter = TMP_8.$$p, block = $iter || nil;

      if (sel == null) {
        sel = nil
      }
      TMP_8.$$p = null;
      
      var wrapper = function(evt) {
        if (evt.preventDefault) {
          evt = $scope.get('Event').$new(evt);
        }

        return block.apply(null, arguments);
      };

      block._jq_wrap = wrapper;

      if (sel == nil) {
        self.one(name, wrapper);
      }
      else {
        self.one(name, sel, wrapper);
      }
    ;
      return block;
    });

    Opal.defn(self, '$off', function(name, sel, block) {
      var self = this;

      if (block == null) {
        block = nil
      }
      
      if (sel == null) {
        return self.off(name);
      }
      else if (block === nil) {
        return self.off(name, sel._jq_wrap);
      }
      else {
        return self.off(name, sel, block._jq_wrap);
      }
    
    });

    Opal.defn(self, '$serialize_array', function() {
      var $a, $b, TMP_9, self = this;

      return ($a = ($b = (self.serializeArray())).$map, $a.$$p = (TMP_9 = function(e){var self = TMP_9.$$s || this;
if (e == null) e = nil;
      return $scope.get('Hash').$new(e)}, TMP_9.$$s = self, TMP_9), $a).call($b);
    });

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$value', function() {
      var self = this;

      return self.val() || "";
    });

    Opal.defn(self, '$height', function() {
      var self = this;

      return self.height() || nil;
    });

    Opal.defn(self, '$width', function() {
      var self = this;

      return self.width() || nil;
    });

    return (Opal.defn(self, '$position', function() {
      var self = this;

      return self.$Native(self.position());
    }), nil) && 'position';
  })($scope.base, $scope.get('JQUERY_CLASS').$to_n());
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/jquery/window"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$find', '$on', '$to_proc', '$element', '$off', '$trigger', '$new']);
  self.$require("opal/jquery/element");
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def.element = nil;
      self.$include($scope.get('Native'));

      Opal.defn(self, '$element', function() {
        var $a, self = this;

        return ((($a = self.element) !== false && $a !== nil) ? $a : self.element = $scope.get('Element').$find(window));
      });

      Opal.defn(self, '$on', TMP_1 = function() {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 0];
        }
        TMP_1.$$p = null;
        return ($a = ($b = self.$element()).$on, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
      });

      Opal.defn(self, '$off', TMP_2 = function() {
        var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 0];
        }
        TMP_2.$$p = null;
        return ($a = ($b = self.$element()).$off, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
      });

      return (Opal.defn(self, '$trigger', function() {
        var $a, self = this, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 0];
        }
        return ($a = self.$element()).$trigger.apply($a, Opal.to_a(args));
      }), nil) && 'trigger';
    })($scope.base, null)
  })($scope.base);
  Opal.cdecl($scope, 'Window', (($scope.get('Browser')).$$scope.get('Window')).$new(window));
  return $gvars.window = $scope.get('Window');
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/jquery/document"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$to_n', '$call', '$new', '$ready?', '$resolve', '$module_function', '$find', '$extend']);
  self.$require("opal/jquery/constants");
  self.$require("opal/jquery/element");
  (function($base) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DocumentMethods, self = $DocumentMethods = $module($base, 'DocumentMethods');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_3;

      var $ = $scope.get('JQUERY_SELECTOR').$to_n();

      Opal.defn(self, '$ready?', TMP_1 = function() {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        if ((block !== nil)) {
          if ((($a = (($b = Opal.cvars['@@__isReady']) == null ? nil : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return block.$call()
            } else {
            return $(block);
          }
          } else {
          return nil
        };
      });

      Opal.defn(self, '$ready', function() {
        var $a, $b, TMP_2, self = this, promise = nil;

        promise = $scope.get('Promise').$new();
        ($a = ($b = $scope.get('Document'))['$ready?'], $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return promise.$resolve()}, TMP_2.$$s = self, TMP_2), $a).call($b);
        return promise;
      });

      self.$module_function("ready?");

      ($a = ($b = self)['$ready?'], $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

      return (Opal.cvars['@@__isReady'] = true)}, TMP_3.$$s = self, TMP_3), $a).call($b);

      Opal.defn(self, '$title', function() {
        var self = this;

        return document.title;
      });

      Opal.defn(self, '$title=', function(title) {
        var self = this;

        return document.title = title;
      });

      Opal.defn(self, '$head', function() {
        var self = this;

        return $scope.get('Element').$find(document.head);
      });

      Opal.defn(self, '$body', function() {
        var self = this;

        return $scope.get('Element').$find(document.body);
      });
    })($scope.base)
  })($scope.base);
  Opal.cdecl($scope, 'Document', $scope.get('Element').$find(document));
  $scope.get('Document').$extend((($scope.get('Browser')).$$scope.get('DocumentMethods')));
  return $gvars.document = $scope.get('Document');
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/jquery/event"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$to_n', '$stop', '$prevent']);
  self.$require("opal/jquery/constants");
  return (function($base, $super) {
    function $Event(){};
    var self = $Event = $klass($base, $super, 'Event', $Event);

    var def = self.$$proto, $scope = self.$$scope;

    def["native"] = nil;
    var $ = $scope.get('JQUERY_SELECTOR').$to_n();

    Opal.defn(self, '$initialize', function(native$) {
      var self = this;

      return self["native"] = native$;
    });

    Opal.defn(self, '$to_n', function() {
      var self = this;

      return self["native"];
    });

    Opal.defn(self, '$[]', function(name) {
      var self = this;

      return self["native"][name];
    });

    Opal.defn(self, '$type', function() {
      var self = this;

      return self["native"].type;
    });

    Opal.defn(self, '$element', function() {
      var self = this;

      return $(self["native"].currentTarget);
    });

    Opal.alias(self, 'current_target', 'element');

    Opal.defn(self, '$target', function() {
      var self = this;

      return $(self["native"].target);
    });

    Opal.defn(self, '$prevented?', function() {
      var self = this;

      return self["native"].isDefaultPrevented();
    });

    Opal.defn(self, '$prevent', function() {
      var self = this;

      return self["native"].preventDefault();
    });

    Opal.defn(self, '$stopped?', function() {
      var self = this;

      return self["native"].isPropagationStopped();
    });

    Opal.defn(self, '$stop', function() {
      var self = this;

      return self["native"].stopPropagation();
    });

    Opal.defn(self, '$stop_immediate', function() {
      var self = this;

      return self["native"].stopImmediatePropagation();
    });

    Opal.defn(self, '$kill', function() {
      var self = this;

      self.$stop();
      return self.$prevent();
    });

    Opal.defn(self, '$page_x', function() {
      var self = this;

      return self["native"].pageX;
    });

    Opal.defn(self, '$page_y', function() {
      var self = this;

      return self["native"].pageY;
    });

    Opal.defn(self, '$touch_x', function() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageX;
    });

    Opal.defn(self, '$touch_y', function() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageY;
    });

    Opal.defn(self, '$ctrl_key', function() {
      var self = this;

      return self["native"].ctrlKey;
    });

    Opal.defn(self, '$meta_key', function() {
      var self = this;

      return self["native"].metaKey;
    });

    Opal.defn(self, '$alt_key', function() {
      var self = this;

      return self["native"].altKey;
    });

    Opal.defn(self, '$shift_key', function() {
      var self = this;

      return self["native"].shiftKey;
    });

    Opal.defn(self, '$key_code', function() {
      var self = this;

      return self["native"].keyCode;
    });

    Opal.defn(self, '$which', function() {
      var self = this;

      return self["native"].which;
    });

    Opal.alias(self, 'default_prevented?', 'prevented?');

    Opal.alias(self, 'prevent_default', 'prevent');

    Opal.alias(self, 'propagation_stopped?', 'stopped?');

    Opal.alias(self, 'stop_propagation', 'stop');

    return Opal.alias(self, 'stop_immediate_propagation', 'stop_immediate');
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["json"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$push', '$[]=', '$[]', '$create_id', '$json_create', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  (function($base) {
    var $JSON, self = $JSON = $module($base, 'JSON');

    var def = self.$$proto, $scope = self.$$scope, $a, $b;

    
    var $parse  = JSON.parse,
        $hasOwn = Opal.hasOwnProperty;

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (hash)['$[]='](k, to_opal(value[k], options));
              }
            }

            if (!options.parse && (klass = (hash)['$[]']($scope.get('JSON').$create_id())) != nil) {
              klass = Opal.get(klass);
              return (klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self));

    (($a = ["json_class"]), $b = self, $b['$create_id='].apply($b, $a), $a[$a.length-1]);

    Opal.defs(self, '$[]', function(value, options) {
      var $a, self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      if ((($a = $scope.get('String')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$parse(value, options)
        } else {
        return self.$generate(value, options)
      };
    });

    Opal.defs(self, '$parse', function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})));
    });

    Opal.defs(self, '$parse!', function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      return self.$parse(source, options);
    });

    Opal.defs(self, '$load', function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      return self.$from_object($parse(source), options);
    });

    Opal.defs(self, '$from_object', function(js_object, options) {
      var $a, $b, $c, self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      ($a = "object_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $scope.get('Hash'))));
      ($a = "array_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, $scope.get('Array'))));
      return to_opal(js_object, options.$$smap);
    });

    Opal.defs(self, '$generate', function(obj, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {})
      }
      return obj.$to_json(options);
    });

    Opal.defs(self, '$dump', function(obj, io, limit) {
      var $a, self = this, string = nil;

      if (io == null) {
        io = nil
      }
      if (limit == null) {
        limit = nil
      }
      string = self.$generate(obj);
      if (io !== false && io !== nil) {
        if ((($a = io['$responds_to?']("to_io")) !== nil && (!$a.$$is_boolean || $a == true))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
        } else {
        return string
      };
    });
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_json', function() {
      var self = this;

      return self.$to_s().$to_json();
    }), nil) && 'to_json'
  })($scope.base, null);
  (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$to_json', function() {
      var self = this;

      return self.$to_a().$to_json();
    })
  })($scope.base);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_json', function() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_json', function() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_json', function() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(', ') + '}';
    ;
    }), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_json', function() {
      var self = this;

      return "null";
    }), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_json', function() {
      var self = this;

      return self.toString();
    }), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return Opal.alias(self, 'to_json', 'inspect')
  })($scope.base, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$to_json', function() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json();
    }), nil) && 'to_json'
  })($scope.base, null);
  return (function($base, $super) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$to_json', function() {
      var self = this;

      return self.$to_s().$to_json();
    });

    return (Opal.defn(self, '$as_json', function() {
      var self = this;

      return self.$to_s();
    }), nil) && 'as_json';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["promise"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$resolve', '$new', '$reject', '$attr_reader', '$===', '$value', '$has_key?', '$keys', '$!', '$==', '$<<', '$>>', '$exception?', '$[]', '$resolved?', '$rejected?', '$error', '$include?', '$action', '$realized?', '$raise', '$^', '$call', '$resolve!', '$exception!', '$reject!', '$class', '$object_id', '$+', '$inspect', '$act?', '$nil?', '$prev', '$push', '$concat', '$it', '$lambda', '$reverse', '$pop', '$<=', '$length', '$shift', '$-', '$each', '$wait', '$then', '$to_proc', '$map', '$reduce', '$always', '$try', '$tap', '$all?', '$find']);
  return (function($base, $super) {
    function $Promise(){};
    var self = $Promise = $klass($base, $super, 'Promise', $Promise);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    def.value = def.action = def.exception = def.realized = def.delayed = def.error = def.prev = def.next = nil;
    Opal.defs(self, '$value', function(value) {
      var self = this;

      return self.$new().$resolve(value);
    });

    Opal.defs(self, '$error', function(value) {
      var self = this;

      return self.$new().$reject(value);
    });

    Opal.defs(self, '$when', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var promises = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        promises[$splat_index] = arguments[$splat_index + 0];
      }
      return $scope.get('When').$new(promises);
    });

    self.$attr_reader("error", "prev", "next");

    Opal.defn(self, '$initialize', function(action) {
      var self = this;

      if (action == null) {
        action = $hash2([], {})
      }
      self.action = action;
      self.realized = false;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = false;
      self.prev = nil;
      return self.next = nil;
    });

    Opal.defn(self, '$value', function() {
      var $a, self = this;

      if ((($a = $scope.get('Promise')['$==='](self.value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.value.$value()
        } else {
        return self.value
      };
    });

    Opal.defn(self, '$act?', function() {
      var $a, self = this;

      return ((($a = self.action['$has_key?']("success")) !== false && $a !== nil) ? $a : self.action['$has_key?']("always"));
    });

    Opal.defn(self, '$action', function() {
      var self = this;

      return self.action.$keys();
    });

    Opal.defn(self, '$exception?', function() {
      var self = this;

      return self.exception;
    });

    Opal.defn(self, '$realized?', function() {
      var self = this;

      return self.realized['$!']()['$!']();
    });

    Opal.defn(self, '$resolved?', function() {
      var self = this;

      return self.realized['$==']("resolve");
    });

    Opal.defn(self, '$rejected?', function() {
      var self = this;

      return self.realized['$==']("reject");
    });

    Opal.defn(self, '$^', function(promise) {
      var self = this;

      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    });

    Opal.defn(self, '$<<', function(promise) {
      var self = this;

      self.prev = promise;
      return self;
    });

    Opal.defn(self, '$>>', function(promise) {
      var $a, $b, $c, self = this;

      self.next = promise;
      if ((($a = self['$exception?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        promise.$reject(self.delayed['$[]'](0))
      } else if ((($a = self['$resolved?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        promise.$resolve((function() {if ((($a = self.delayed) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.$value()
        }; return nil; })())
      } else if ((($a = self['$rejected?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = self.action['$has_key?']("failure")['$!']()) !== false && $b !== nil) ? $b : $scope.get('Promise')['$==='](((function() {if ((($c = self.delayed) !== nil && (!$c.$$is_boolean || $c == true))) {
          return self.delayed['$[]'](0)
          } else {
          return self.error
        }; return nil; })())))) !== nil && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())
        } else if ((($a = promise.$action()['$include?']("always")) !== nil && (!$a.$$is_boolean || $a == true))) {
          promise.$reject((function() {if ((($a = self.delayed) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())}};
      return self;
    });

    Opal.defn(self, '$resolve', function(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil
      }
      if ((($a = self['$realized?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
      if ((($a = block = ((($b = self.action['$[]']("success")) !== false && $b !== nil) ? $b : self.action['$[]']("always"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        self['$resolve!'](value);
      } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
        try {
          self['$exception!'](e)
        } finally {
          Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
        }
        }else { throw $err; }
      };
      return self;
    });

    Opal.defn(self, '$resolve!', function(value) {
      var $a, self = this;

      self.realized = "resolve";
      self.value = value;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.next.$resolve(value)
        } else {
        return self.delayed = [value]
      };
    });

    Opal.defn(self, '$reject', function(value) {
      var $a, $b, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil
      }
      if ((($a = self['$realized?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "the promise has already been realized")};
      if ((($a = $scope.get('Promise')['$==='](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (value['$<<'](self.prev))['$^'](self)};
      try {
      if ((($a = block = ((($b = self.action['$[]']("failure")) !== false && $b !== nil) ? $b : self.action['$[]']("always"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          value = block.$call(value)};
        if ((($a = self.action['$has_key?']("always")) !== nil && (!$a.$$is_boolean || $a == true))) {
          self['$resolve!'](value)
          } else {
          self['$reject!'](value)
        };
      } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
        try {
          self['$exception!'](e)
        } finally {
          Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
        }
        }else { throw $err; }
      };
      return self;
    });

    Opal.defn(self, '$reject!', function(value) {
      var $a, self = this;

      self.realized = "reject";
      self.error = value;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.next.$reject(value)
        } else {
        return self.delayed = [value]
      };
    });

    Opal.defn(self, '$exception!', function(error) {
      var self = this;

      self.exception = true;
      return self['$reject!'](error);
    });

    Opal.defn(self, '$then', TMP_1 = function() {
      var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "a promise has already been chained")};
      return self['$^']($scope.get('Promise').$new($hash2(["success"], {"success": block})));
    });

    Opal.alias(self, 'do', 'then');

    Opal.defn(self, '$fail', TMP_2 = function() {
      var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "a promise has already been chained")};
      return self['$^']($scope.get('Promise').$new($hash2(["failure"], {"failure": block})));
    });

    Opal.alias(self, 'rescue', 'fail');

    Opal.alias(self, 'catch', 'fail');

    Opal.defn(self, '$always', TMP_3 = function() {
      var $a, self = this, $iter = TMP_3.$$p, block = $iter || nil;

      TMP_3.$$p = null;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "a promise has already been chained")};
      return self['$^']($scope.get('Promise').$new($hash2(["always"], {"always": block})));
    });

    Opal.alias(self, 'finally', 'always');

    Opal.alias(self, 'ensure', 'always');

    Opal.defn(self, '$trace', TMP_4 = function(depth) {
      var $a, self = this, $iter = TMP_4.$$p, block = $iter || nil;

      if (depth == null) {
        depth = nil
      }
      TMP_4.$$p = null;
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "a promise has already been chained")};
      return self['$^']($scope.get('Trace').$new(depth, block));
    });

    Opal.defn(self, '$inspect', function() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, " >> " + (self.next.$inspect()))};
      if ((($a = self['$realized?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, ": " + ((((($a = self.value) !== false && $a !== nil) ? $a : self.error)).$inspect()) + ">")
        } else {
        result = $rb_plus(result, ">")
      };
      return result;
    });

    (function($base, $super) {
      function $Trace(){};
      var self = $Trace = $klass($base, $super, 'Trace', $Trace);

      var def = self.$$proto, $scope = self.$$scope, TMP_6;

      Opal.defs(self, '$it', function(promise) {
        var $a, $b, self = this, current = nil, prev = nil;

        current = [];
        if ((($a = ((($b = promise['$act?']()) !== false && $b !== nil) ? $b : promise.$prev()['$nil?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
          current.$push(promise.$value())};
        if ((($a = prev = promise.$prev()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return current.$concat(self.$it(prev))
          } else {
          return current
        };
      });

      return (Opal.defn(self, '$initialize', TMP_6 = function(depth, block) {
        var $a, $b, TMP_5, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

        TMP_6.$$p = null;
        self.depth = depth;
        return Opal.find_super_dispatcher(self, 'initialize', TMP_6, null).apply(self, [$hash2(["success"], {"success": ($a = ($b = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a, $b, trace = nil;

        trace = $scope.get('Trace').$it(self).$reverse();
          trace.$pop();
          if ((($a = (($b = depth !== false && depth !== nil) ? $rb_le(depth, trace.$length()) : depth)) !== nil && (!$a.$$is_boolean || $a == true))) {
            trace.$shift($rb_minus(trace.$length(), depth))};
          return ($a = block).$call.apply($a, Opal.to_a(trace));}, TMP_5.$$s = self, TMP_5), $a).call($b)})]);
      }), nil) && 'initialize';
    })($scope.base, self);

    return (function($base, $super) {
      function $When(){};
      var self = $When = $klass($base, $super, 'When', $When);

      var def = self.$$proto, $scope = self.$$scope, TMP_7, TMP_9, TMP_11, TMP_13, TMP_17;

      def.wait = nil;
      Opal.defn(self, '$initialize', TMP_7 = function(promises) {
        var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, $yield = $iter || nil;

        if (promises == null) {
          promises = []
        }
        TMP_7.$$p = null;
        Opal.find_super_dispatcher(self, 'initialize', TMP_7, null).apply(self, []);
        self.wait = [];
        return ($a = ($b = promises).$each, $a.$$p = (TMP_8 = function(promise){var self = TMP_8.$$s || this;
if (promise == null) promise = nil;
        return self.$wait(promise)}, TMP_8.$$s = self, TMP_8), $a).call($b);
      });

      Opal.defn(self, '$each', TMP_9 = function() {
        var $a, $b, TMP_10, self = this, $iter = TMP_9.$$p, block = $iter || nil;

        TMP_9.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_10 = function(values){var self = TMP_10.$$s || this, $a, $b;
if (values == null) values = nil;
        return ($a = ($b = values).$each, $a.$$p = block.$to_proc(), $a).call($b)}, TMP_10.$$s = self, TMP_10), $a).call($b);
      });

      Opal.defn(self, '$collect', TMP_11 = function() {
        var $a, $b, TMP_12, self = this, $iter = TMP_11.$$p, block = $iter || nil;

        TMP_11.$$p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.get('ArgumentError'), "no block given")
        };
        return ($a = ($b = self).$then, $a.$$p = (TMP_12 = function(values){var self = TMP_12.$$s || this, $a, $b;
if (values == null) values = nil;
        return $scope.get('When').$new(($a = ($b = values).$map, $a.$$p = block.$to_proc(), $a).call($b))}, TMP_12.$$s = self, TMP_12), $a).call($b);
      });

      Opal.defn(self, '$inject', TMP_13 = function() {
        var $a, $b, TMP_14, self = this, $iter = TMP_13.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 0];
        }
        TMP_13.$$p = null;
        return ($a = ($b = self).$then, $a.$$p = (TMP_14 = function(values){var self = TMP_14.$$s || this, $a, $b;
if (values == null) values = nil;
        return ($a = ($b = values).$reduce, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args))}, TMP_14.$$s = self, TMP_14), $a).call($b);
      });

      Opal.alias(self, 'map', 'collect');

      Opal.alias(self, 'reduce', 'inject');

      Opal.defn(self, '$wait', function(promise) {
        var $a, $b, TMP_15, self = this;

        if ((($a = $scope.get('Promise')['$==='](promise)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          promise = $scope.get('Promise').$value(promise)
        };
        if ((($a = promise['$act?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          promise = promise.$then()};
        self.wait['$<<'](promise);
        ($a = ($b = promise).$always, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this, $a;
          if (self.next == null) self.next = nil;

        if ((($a = self.next) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$try()
            } else {
            return nil
          }}, TMP_15.$$s = self, TMP_15), $a).call($b);
        return self;
      });

      Opal.alias(self, 'and', 'wait');

      Opal.defn(self, '$>>', TMP_17 = function() {
        var $a, $b, TMP_16, self = this, $iter = TMP_17.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

        TMP_17.$$p = null;
        $zuper = [];
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return ($a = ($b = Opal.find_super_dispatcher(self, '>>', TMP_17, $iter).apply(self, $zuper)).$tap, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;

        return self.$try()}, TMP_16.$$s = self, TMP_16), $a).call($b);
      });

      return (Opal.defn(self, '$try', function() {
        var $a, $b, $c, $d, self = this, promise = nil;

        if ((($a = ($b = ($c = self.wait)['$all?'], $b.$$p = "realized?".$to_proc(), $b).call($c)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = promise = ($b = ($d = self.wait).$find, $b.$$p = "rejected?".$to_proc(), $b).call($d)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$reject(promise.$error())
            } else {
            return self.$resolve(($a = ($b = self.wait).$map, $a.$$p = "value".$to_proc(), $a).call($b))
          }
          } else {
          return nil
        };
      }), nil) && 'try';
    })($scope.base, self);
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/jquery/http"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$to_n', '$each', '$define_singleton_method', '$send', '$new', '$define_method', '$attr_reader', '$delete', '$update', '$upcase', '$succeed', '$fail', '$promise', '$parse', '$private', '$tap', '$proc', '$ok?', '$resolve', '$reject', '$from_object', '$call']);
  self.$require("json");
  self.$require("native");
  self.$require("promise");
  self.$require("opal/jquery/constants");
  return (function($base, $super) {
    function $HTTP(){};
    var self = $HTTP = $klass($base, $super, 'HTTP', $HTTP);

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

    def.settings = def.payload = def.url = def.method = def.handler = def.json = def.body = def.ok = def.xhr = def.promise = def.status_code = nil;
    var $ = $scope.get('JQUERY_SELECTOR').$to_n();

    Opal.cdecl($scope, 'ACTIONS', ["get", "post", "put", "delete", "patch", "head"]);

    ($a = ($b = $scope.get('ACTIONS')).$each, $a.$$p = (TMP_1 = function(action){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3;
if (action == null) action = nil;
    ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_2 = function(url, options){var self = TMP_2.$$s || this, block;
if (url == null) url = nil;if (options == null) options = $hash2([], {});
        block = TMP_2.$$p || nil, TMP_2.$$p = null;
      return self.$new().$send(action, url, options, block)}, TMP_2.$$s = self, TMP_2), $a).call($b, action);
      return ($a = ($c = self).$define_method, $a.$$p = (TMP_3 = function(url, options){var self = TMP_3.$$s || this, block;
if (url == null) url = nil;if (options == null) options = $hash2([], {});
        block = TMP_3.$$p || nil, TMP_3.$$p = null;
      return self.$send(action, url, options, block)}, TMP_3.$$s = self, TMP_3), $a).call($c, action);}, TMP_1.$$s = self, TMP_1), $a).call($b);

    Opal.defs(self, '$setup', function() {
      var self = this;

      return $scope.get('Hash').$new($.ajaxSetup());
    });

    Opal.defs(self, '$setup=', function(settings) {
      var self = this;

      return $.ajaxSetup(settings.$to_n());
    });

    self.$attr_reader("body", "error_message", "method", "status_code", "url", "xhr");

    Opal.defn(self, '$initialize', function() {
      var self = this;

      self.settings = $hash2([], {});
      return self.ok = true;
    });

    Opal.defn(self, '$send', function(method, url, options, block) {
      var $a, self = this, settings = nil, payload = nil;

      self.method = method;
      self.url = url;
      self.payload = options.$delete("payload");
      self.handler = block;
      self.settings.$update(options);
      $a = [self.settings.$to_n(), self.payload], settings = $a[0], payload = $a[1], $a;
      
      if (typeof(payload) === 'string') {
        settings.data = payload;
      }
      else if (payload != nil) {
        settings.data = payload.$to_json();
        settings.contentType = 'application/json';
      }

      settings.url  = self.url;
      settings.type = self.method.$upcase();

      settings.success = function(data, status, xhr) {
        return self.$succeed(data, status, xhr);
      };

      settings.error = function(xhr, status, error) {
        return self.$fail(xhr, status, error);
      };

      $.ajax(settings);
    ;
      if ((($a = self.handler) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return self.$promise()
      };
    });

    Opal.defn(self, '$json', function() {
      var $a, self = this;

      return ((($a = self.json) !== false && $a !== nil) ? $a : self.json = $scope.get('JSON').$parse(self.body));
    });

    Opal.defn(self, '$ok?', function() {
      var self = this;

      return self.ok;
    });

    Opal.defn(self, '$get_header', function(key) {
      var self = this;

      return self.xhr.getResponseHeader(key);;
    });

    self.$private();

    Opal.defn(self, '$promise', function() {
      var $a, $b, TMP_4, self = this;

      if ((($a = self.promise) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.promise};
      return self.promise = ($a = ($b = $scope.get('Promise').$new()).$tap, $a.$$p = (TMP_4 = function(promise){var self = TMP_4.$$s || this, $a, $b, TMP_5;
if (promise == null) promise = nil;
      return self.handler = ($a = ($b = self).$proc, $a.$$p = (TMP_5 = function(res){var self = TMP_5.$$s || this, $a;
if (res == null) res = nil;
        if ((($a = res['$ok?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return promise.$resolve(res)
            } else {
            return promise.$reject(res)
          }}, TMP_5.$$s = self, TMP_5), $a).call($b)}, TMP_4.$$s = self, TMP_4), $a).call($b);
    });

    Opal.defn(self, '$succeed', function(data, status, xhr) {
      var $a, self = this;

      
      self.body = data;
      self.xhr  = xhr;
      self.status_code = xhr.status;

      if (typeof(data) === 'object') {
        self.json = $scope.get('JSON').$from_object(data);
      }
    ;
      if ((($a = self.handler) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.handler.$call(self)
        } else {
        return nil
      };
    });

    return (Opal.defn(self, '$fail', function(xhr, status, error) {
      var $a, self = this;

      
      self.body = xhr.responseText;
      self.xhr = xhr;
      self.status_code = xhr.status;
    ;
      self.ok = false;
      if ((($a = self.handler) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.handler.$call(self)
        } else {
        return nil
      };
    }), nil) && 'fail';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/jquery/kernel"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$alert', function(msg) {
      var self = this;

      alert(msg);
      return nil;
    })
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal/jquery"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("opal/jquery/window");
    self.$require("opal/jquery/document");
    self.$require("opal/jquery/element");
    self.$require("opal/jquery/event");
    self.$require("opal/jquery/http");
    return self.$require("opal/jquery/kernel");}
};

/* Generated by Opal 0.9.4 */
Opal.modules["opal-jquery"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("opal/jquery")
};

/**
 * React (with addons) v15.0.1
 */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.React = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule AutoFocusUtils
*/

'use strict';

var ReactDOMComponentTree = _dereq_(42);

var focusNode = _dereq_(165);

var AutoFocusUtils = {
 focusDOMComponent: function () {
   focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
 }
};

module.exports = AutoFocusUtils;
},{"165":165,"42":42}],2:[function(_dereq_,module,exports){
/**
* Copyright 2013-present Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule BeforeInputEventPlugin
*/

'use strict';

var EventConstants = _dereq_(15);
var EventPropagators = _dereq_(19);
var ExecutionEnvironment = _dereq_(157);
var FallbackCompositionState = _dereq_(20);
var SyntheticCompositionEvent = _dereq_(111);
var SyntheticInputEvent = _dereq_(115);

var keyOf = _dereq_(175);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
 documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
* Opera <= 12 includes TextEvent in window, but does not fire
* text input events. Rely on keypress instead.
*/
function isPresto() {
 var opera = window.opera;
 return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
 beforeInput: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onBeforeInput: null }),
     captured: keyOf({ onBeforeInputCapture: null })
   },
   dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
 },
 compositionEnd: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onCompositionEnd: null }),
     captured: keyOf({ onCompositionEndCapture: null })
   },
   dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
 },
 compositionStart: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onCompositionStart: null }),
     captured: keyOf({ onCompositionStartCapture: null })
   },
   dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
 },
 compositionUpdate: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onCompositionUpdate: null }),
     captured: keyOf({ onCompositionUpdateCapture: null })
   },
   dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
 }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
* Return whether a native keypress event is assumed to be a command.
* This is required because Firefox fires `keypress` events for key commands
* (cut, copy, select-all, etc.) even though no character is inserted.
*/
function isKeypressCommand(nativeEvent) {
 return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
 // ctrlKey && altKey is equivalent to AltGr, and is not a command.
 !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
* Translate native top level events into event types.
*
* @param {string} topLevelType
* @return {object}
*/
function getCompositionEventType(topLevelType) {
 switch (topLevelType) {
   case topLevelTypes.topCompositionStart:
     return eventTypes.compositionStart;
   case topLevelTypes.topCompositionEnd:
     return eventTypes.compositionEnd;
   case topLevelTypes.topCompositionUpdate:
     return eventTypes.compositionUpdate;
 }
}

/**
* Does our fallback best-guess model think this event signifies that
* composition has begun?
*
* @param {string} topLevelType
* @param {object} nativeEvent
* @return {boolean}
*/
function isFallbackCompositionStart(topLevelType, nativeEvent) {
 return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
}

/**
* Does our fallback mode think that this event is the end of composition?
*
* @param {string} topLevelType
* @param {object} nativeEvent
* @return {boolean}
*/
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
 switch (topLevelType) {
   case topLevelTypes.topKeyUp:
     // Command keys insert or clear IME input.
     return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
   case topLevelTypes.topKeyDown:
     // Expect IME keyCode on each keydown. If we get any other
     // code we must have exited earlier.
     return nativeEvent.keyCode !== START_KEYCODE;
   case topLevelTypes.topKeyPress:
   case topLevelTypes.topMouseDown:
   case topLevelTypes.topBlur:
     // Events are not possible without cancelling IME.
     return true;
   default:
     return false;
 }
}

/**
* Google Input Tools provides composition data via a CustomEvent,
* with the `data` property populated in the `detail` object. If this
* is available on the event object, use it. If not, this is a plain
* composition event and we have nothing special to extract.
*
* @param {object} nativeEvent
* @return {?string}
*/
function getDataFromCustomEvent(nativeEvent) {
 var detail = nativeEvent.detail;
 if (typeof detail === 'object' && 'data' in detail) {
   return detail.data;
 }
 return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
* @return {?object} A SyntheticCompositionEvent.
*/
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
 var eventType;
 var fallbackData;

 if (canUseCompositionEvent) {
   eventType = getCompositionEventType(topLevelType);
 } else if (!currentComposition) {
   if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
     eventType = eventTypes.compositionStart;
   }
 } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
   eventType = eventTypes.compositionEnd;
 }

 if (!eventType) {
   return null;
 }

 if (useFallbackCompositionData) {
   // The current composition is stored statically and must not be
   // overwritten while composition continues.
   if (!currentComposition && eventType === eventTypes.compositionStart) {
     currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
   } else if (eventType === eventTypes.compositionEnd) {
     if (currentComposition) {
       fallbackData = currentComposition.getData();
     }
   }
 }

 var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

 if (fallbackData) {
   // Inject data generated from fallback path into the synthetic event.
   // This matches the property of native CompositionEventInterface.
   event.data = fallbackData;
 } else {
   var customData = getDataFromCustomEvent(nativeEvent);
   if (customData !== null) {
     event.data = customData;
   }
 }

 EventPropagators.accumulateTwoPhaseDispatches(event);
 return event;
}

/**
* @param {string} topLevelType Record from `EventConstants`.
* @param {object} nativeEvent Native browser event.
* @return {?string} The string corresponding to this `beforeInput` event.
*/
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
 switch (topLevelType) {
   case topLevelTypes.topCompositionEnd:
     return getDataFromCustomEvent(nativeEvent);
   case topLevelTypes.topKeyPress:
     /**
      * If native `textInput` events are available, our goal is to make
      * use of them. However, there is a special case: the spacebar key.
      * In Webkit, preventing default on a spacebar `textInput` event
      * cancels character insertion, but it *also* causes the browser
      * to fall back to its default spacebar behavior of scrolling the
      * page.
      *
      * Tracking at:
      * https://code.google.com/p/chromium/issues/detail?id=355103
      *
      * To avoid this issue, use the keypress event as if no `textInput`
      * event is available.
      */
     var which = nativeEvent.which;
     if (which !== SPACEBAR_CODE) {
       return null;
     }

     hasSpaceKeypress = true;
     return SPACEBAR_CHAR;

   case topLevelTypes.topTextInput:
     // Record the characters to be added to the DOM.
     var chars = nativeEvent.data;

     // If it's a spacebar character, assume that we have already handled
     // it at the keypress level and bail immediately. Android Chrome
     // doesn't give us keycodes, so we need to blacklist it.
     if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
       return null;
     }

     return chars;

   default:
     // For other native event types, do nothing.
     return null;
 }
}

/**
* For browsers that do not provide the `textInput` event, extract the
* appropriate string to use for SyntheticInputEvent.
*
* @param {string} topLevelType Record from `EventConstants`.
* @param {object} nativeEvent Native browser event.
* @return {?string} The fallback string for this `beforeInput` event.
*/
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
 // If we are currently composing (IME) and using a fallback to do so,
 // try to extract the composed characters from the fallback object.
 if (currentComposition) {
   if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
     var chars = currentComposition.getData();
     FallbackCompositionState.release(currentComposition);
     currentComposition = null;
     return chars;
   }
   return null;
 }

 switch (topLevelType) {
   case topLevelTypes.topPaste:
     // If a paste event occurs after a keypress, throw out the input
     // chars. Paste events should not lead to BeforeInput events.
     return null;
   case topLevelTypes.topKeyPress:
     /**
      * As of v27, Firefox may fire keypress events even when no character
      * will be inserted. A few possibilities:
      *
      * - `which` is `0`. Arrow keys, Esc key, etc.
      *
      * - `which` is the pressed key code, but no char is available.
      *   Ex: 'AltGr + d` in Polish. There is no modified character for
      *   this key combination and no character is inserted into the
      *   document, but FF fires the keypress for char code `100` anyway.
      *   No `input` event will occur.
      *
      * - `which` is the pressed key code, but a command combination is
      *   being used. Ex: `Cmd+C`. No character is inserted, and no
      *   `input` event will occur.
      */
     if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
       return String.fromCharCode(nativeEvent.which);
     }
     return null;
   case topLevelTypes.topCompositionEnd:
     return useFallbackCompositionData ? null : nativeEvent.data;
   default:
     return null;
 }
}

/**
* Extract a SyntheticInputEvent for `beforeInput`, based on either native
* `textInput` or fallback behavior.
*
* @return {?object} A SyntheticInputEvent.
*/
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
 var chars;

 if (canUseTextInputEvent) {
   chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
 } else {
   chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
 }

 // If no characters are being inserted, no BeforeInput event should
 // be fired.
 if (!chars) {
   return null;
 }

 var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

 event.data = chars;
 EventPropagators.accumulateTwoPhaseDispatches(event);
 return event;
}

/**
* Create an `onBeforeInput` event to match
* http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
*
* This event plugin is based on the native `textInput` event
* available in Chrome, Safari, Opera, and IE. This event fires after
* `onKeyPress` and `onCompositionEnd`, but before `onInput`.
*
* `beforeInput` is spec'd but not implemented in any browsers, and
* the `input` event does not provide any useful information about what has
* actually been added, contrary to the spec. Thus, `textInput` is the best
* available event to identify the characters that have actually been inserted
* into the target node.
*
* This plugin is also responsible for emitting `composition` events, thus
* allowing us to share composition fallback code for both `beforeInput` and
* `composition` event types.
*/
var BeforeInputEventPlugin = {

 eventTypes: eventTypes,

 extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
   return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
 }
};

module.exports = BeforeInputEventPlugin;
},{"111":111,"115":115,"15":15,"157":157,"175":175,"19":19,"20":20}],3:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule CSSProperty
*/

'use strict';

/**
* CSS properties which accept numbers but are not in units of "px".
*/

var isUnitlessNumber = {
 animationIterationCount: true,
 borderImageOutset: true,
 borderImageSlice: true,
 borderImageWidth: true,
 boxFlex: true,
 boxFlexGroup: true,
 boxOrdinalGroup: true,
 columnCount: true,
 flex: true,
 flexGrow: true,
 flexPositive: true,
 flexShrink: true,
 flexNegative: true,
 flexOrder: true,
 gridRow: true,
 gridColumn: true,
 fontWeight: true,
 lineClamp: true,
 lineHeight: true,
 opacity: true,
 order: true,
 orphans: true,
 tabSize: true,
 widows: true,
 zIndex: true,
 zoom: true,

 // SVG-related properties
 fillOpacity: true,
 floodOpacity: true,
 stopOpacity: true,
 strokeDasharray: true,
 strokeDashoffset: true,
 strokeMiterlimit: true,
 strokeOpacity: true,
 strokeWidth: true
};

/**
* @param {string} prefix vendor-specific prefix, eg: Webkit
* @param {string} key style name, eg: transitionDuration
* @return {string} style name prefixed with `prefix`, properly camelCased, eg:
* WebkitTransitionDuration
*/
function prefixKey(prefix, key) {
 return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
* Support style names that may come passed in prefixed by adding permutations
* of vendor prefixes.
*/
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
 prefixes.forEach(function (prefix) {
   isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
 });
});

/**
* Most style properties can be unset by doing .style[prop] = '' but IE8
* doesn't like doing that with shorthand properties so for the properties that
* IE8 breaks on, which are listed here, we instead unset each of the
* individual properties. See http://bugs.jquery.com/ticket/12385.
* The 4-value 'clock' properties like margin, padding, border-width seem to
* behave without any problems. Curiously, list-style works too without any
* special prodding.
*/
var shorthandPropertyExpansions = {
 background: {
   backgroundAttachment: true,
   backgroundColor: true,
   backgroundImage: true,
   backgroundPositionX: true,
   backgroundPositionY: true,
   backgroundRepeat: true
 },
 backgroundPosition: {
   backgroundPositionX: true,
   backgroundPositionY: true
 },
 border: {
   borderWidth: true,
   borderStyle: true,
   borderColor: true
 },
 borderBottom: {
   borderBottomWidth: true,
   borderBottomStyle: true,
   borderBottomColor: true
 },
 borderLeft: {
   borderLeftWidth: true,
   borderLeftStyle: true,
   borderLeftColor: true
 },
 borderRight: {
   borderRightWidth: true,
   borderRightStyle: true,
   borderRightColor: true
 },
 borderTop: {
   borderTopWidth: true,
   borderTopStyle: true,
   borderTopColor: true
 },
 font: {
   fontStyle: true,
   fontVariant: true,
   fontWeight: true,
   fontSize: true,
   lineHeight: true,
   fontFamily: true
 },
 outline: {
   outlineWidth: true,
   outlineStyle: true,
   outlineColor: true
 }
};

var CSSProperty = {
 isUnitlessNumber: isUnitlessNumber,
 shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],4:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule CSSPropertyOperations
*/

'use strict';

var CSSProperty = _dereq_(3);
var ExecutionEnvironment = _dereq_(157);
var ReactPerf = _dereq_(86);

var camelizeStyleName = _dereq_(159);
var dangerousStyleValue = _dereq_(128);
var hyphenateStyleName = _dereq_(170);
var memoizeStringOnly = _dereq_(177);
var warning = _dereq_(181);

var processStyleName = memoizeStringOnly(function (styleName) {
 return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
 var tempStyle = document.createElement('div').style;
 try {
   // IE8 throws "Invalid argument." if resetting shorthand style properties.
   tempStyle.font = '';
 } catch (e) {
   hasShorthandPropertyBug = true;
 }
 // IE8 only supports accessing cssFloat (standard) as styleFloat
 if (document.documentElement.style.cssFloat === undefined) {
   styleFloatAccessor = 'styleFloat';
 }
}

if ("development" !== 'production') {
 // 'msTransform' is correct, but the other prefixes should be capitalized
 var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

 // style values shouldn't contain a semicolon
 var badStyleValueWithSemicolonPattern = /;\s*$/;

 var warnedStyleNames = {};
 var warnedStyleValues = {};
 var warnedForNaNValue = false;

 var warnHyphenatedStyleName = function (name, owner) {
   if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
     return;
   }

   warnedStyleNames[name] = true;
   "development" !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
 };

 var warnBadVendoredStyleName = function (name, owner) {
   if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
     return;
   }

   warnedStyleNames[name] = true;
   "development" !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
 };

 var warnStyleValueWithSemicolon = function (name, value, owner) {
   if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
     return;
   }

   warnedStyleValues[value] = true;
   "development" !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
 };

 var warnStyleValueIsNaN = function (name, value, owner) {
   if (warnedForNaNValue) {
     return;
   }

   warnedForNaNValue = true;
   "development" !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
 };

 var checkRenderMessage = function (owner) {
   if (owner) {
     var name = owner.getName();
     if (name) {
       return ' Check the render method of `' + name + '`.';
     }
   }
   return '';
 };

 /**
  * @param {string} name
  * @param {*} value
  * @param {ReactDOMComponent} component
  */
 var warnValidStyle = function (name, value, component) {
   var owner;
   if (component) {
     owner = component._currentElement._owner;
   }
   if (name.indexOf('-') > -1) {
     warnHyphenatedStyleName(name, owner);
   } else if (badVendoredStyleNamePattern.test(name)) {
     warnBadVendoredStyleName(name, owner);
   } else if (badStyleValueWithSemicolonPattern.test(value)) {
     warnStyleValueWithSemicolon(name, value, owner);
   }

   if (typeof value === 'number' && isNaN(value)) {
     warnStyleValueIsNaN(name, value, owner);
   }
 };
}

/**
* Operations for dealing with CSS properties.
*/
var CSSPropertyOperations = {

 /**
  * Serializes a mapping of style properties for use as inline styles:
  *
  *   > createMarkupForStyles({width: '200px', height: 0})
  *   "width:200px;height:0;"
  *
  * Undefined values are ignored so that declarative programming is easier.
  * The result should be HTML-escaped before insertion into the DOM.
  *
  * @param {object} styles
  * @param {ReactDOMComponent} component
  * @return {?string}
  */
 createMarkupForStyles: function (styles, component) {
   var serialized = '';
   for (var styleName in styles) {
     if (!styles.hasOwnProperty(styleName)) {
       continue;
     }
     var styleValue = styles[styleName];
     if ("development" !== 'production') {
       warnValidStyle(styleName, styleValue, component);
     }
     if (styleValue != null) {
       serialized += processStyleName(styleName) + ':';
       serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
     }
   }
   return serialized || null;
 },

 /**
  * Sets the value for multiple styles on a node.  If a value is specified as
  * '' (empty string), the corresponding style property will be unset.
  *
  * @param {DOMElement} node
  * @param {object} styles
  * @param {ReactDOMComponent} component
  */
 setValueForStyles: function (node, styles, component) {
   var style = node.style;
   for (var styleName in styles) {
     if (!styles.hasOwnProperty(styleName)) {
       continue;
     }
     if ("development" !== 'production') {
       warnValidStyle(styleName, styles[styleName], component);
     }
     var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
     if (styleName === 'float' || styleName === 'cssFloat') {
       styleName = styleFloatAccessor;
     }
     if (styleValue) {
       style[styleName] = styleValue;
     } else {
       var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
       if (expansion) {
         // Shorthand property that IE8 won't like unsetting, so unset each
         // component to placate it
         for (var individualStyleName in expansion) {
           style[individualStyleName] = '';
         }
       } else {
         style[styleName] = '';
       }
     }
   }
 }

};

ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
 setValueForStyles: 'setValueForStyles'
});

module.exports = CSSPropertyOperations;
},{"128":128,"157":157,"159":159,"170":170,"177":177,"181":181,"3":3,"86":86}],5:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule CallbackQueue
*/

'use strict';

var _assign = _dereq_(182);

var PooledClass = _dereq_(24);

var invariant = _dereq_(171);

/**
* A specialized pseudo-event module to help keep track of components waiting to
* be notified when their DOM representations are available for use.
*
* This implements `PooledClass`, so you should never need to instantiate this.
* Instead, use `CallbackQueue.getPooled()`.
*
* @class ReactMountReady
* @implements PooledClass
* @internal
*/
function CallbackQueue() {
 this._callbacks = null;
 this._contexts = null;
}

_assign(CallbackQueue.prototype, {

 /**
  * Enqueues a callback to be invoked when `notifyAll` is invoked.
  *
  * @param {function} callback Invoked when `notifyAll` is invoked.
  * @param {?object} context Context to call `callback` with.
  * @internal
  */
 enqueue: function (callback, context) {
   this._callbacks = this._callbacks || [];
   this._contexts = this._contexts || [];
   this._callbacks.push(callback);
   this._contexts.push(context);
 },

 /**
  * Invokes all enqueued callbacks and clears the queue. This is invoked after
  * the DOM representation of a component has been created or updated.
  *
  * @internal
  */
 notifyAll: function () {
   var callbacks = this._callbacks;
   var contexts = this._contexts;
   if (callbacks) {
     !(callbacks.length === contexts.length) ? "development" !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : void 0;
     this._callbacks = null;
     this._contexts = null;
     for (var i = 0; i < callbacks.length; i++) {
       callbacks[i].call(contexts[i]);
     }
     callbacks.length = 0;
     contexts.length = 0;
   }
 },

 checkpoint: function () {
   return this._callbacks ? this._callbacks.length : 0;
 },

 rollback: function (len) {
   if (this._callbacks) {
     this._callbacks.length = len;
     this._contexts.length = len;
   }
 },

 /**
  * Resets the internal queue.
  *
  * @internal
  */
 reset: function () {
   this._callbacks = null;
   this._contexts = null;
 },

 /**
  * `PooledClass` looks for this.
  */
 destructor: function () {
   this.reset();
 }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;
},{"171":171,"182":182,"24":24}],6:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ChangeEventPlugin
*/

'use strict';

var EventConstants = _dereq_(15);
var EventPluginHub = _dereq_(16);
var EventPropagators = _dereq_(19);
var ExecutionEnvironment = _dereq_(157);
var ReactDOMComponentTree = _dereq_(42);
var ReactUpdates = _dereq_(102);
var SyntheticEvent = _dereq_(113);

var getEventTarget = _dereq_(136);
var isEventSupported = _dereq_(143);
var isTextInputElement = _dereq_(144);
var keyOf = _dereq_(175);

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
 change: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onChange: null }),
     captured: keyOf({ onChangeCapture: null })
   },
   dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
 }
};

/**
* For IE shims
*/
var activeElement = null;
var activeElementInst = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
* SECTION: handle `change` event
*/
function shouldUseChangeEvent(elem) {
 var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
 return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
 // See `handleChange` comment below
 doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
 var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
 EventPropagators.accumulateTwoPhaseDispatches(event);

 // If change and propertychange bubbled, we'd just bind to it like all the
 // other events and have it go through ReactBrowserEventEmitter. Since it
 // doesn't, we manually listen for the events and so we have to enqueue and
 // process the abstract event manually.
 //
 // Batching is necessary here in order to ensure that all event handlers run
 // before the next rerender (including event handlers attached to ancestor
 // elements instead of directly on the input). Without this, controlled
 // components don't work properly in conjunction with event bubbling because
 // the component is rerendered and the value reverted before all the event
 // handlers can run. See https://github.com/facebook/react/issues/708.
 ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
 EventPluginHub.enqueueEvents(event);
 EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
 activeElement = target;
 activeElementInst = targetInst;
 activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
 if (!activeElement) {
   return;
 }
 activeElement.detachEvent('onchange', manualDispatchChangeEvent);
 activeElement = null;
 activeElementInst = null;
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
 if (topLevelType === topLevelTypes.topChange) {
   return targetInst;
 }
}
function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
 if (topLevelType === topLevelTypes.topFocus) {
   // stopWatching() should be a noop here but we call it just in case we
   // missed a blur event somehow.
   stopWatchingForChangeEventIE8();
   startWatchingForChangeEventIE8(target, targetInst);
 } else if (topLevelType === topLevelTypes.topBlur) {
   stopWatchingForChangeEventIE8();
 }
}

/**
* SECTION: handle `input` event
*/
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
 // IE9 claims to support the input event but fails to trigger it when
 // deleting text, so we ignore its input events.
 // IE10+ fire input events to often, such when a placeholder
 // changes or when an input with a placeholder is focused.
 isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 11);
}

/**
* (For IE <=11) Replacement getter/setter for the `value` property that gets
* set on the active element.
*/
var newValueProp = {
 get: function () {
   return activeElementValueProp.get.call(this);
 },
 set: function (val) {
   // Cast to a string so we can do equality checks.
   activeElementValue = '' + val;
   activeElementValueProp.set.call(this, val);
 }
};

/**
* (For IE <=11) Starts tracking propertychange events on the passed-in element
* and override the value property so that we can distinguish user events from
* value changes in JS.
*/
function startWatchingForValueChange(target, targetInst) {
 activeElement = target;
 activeElementInst = targetInst;
 activeElementValue = target.value;
 activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

 // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
 // on DOM elements
 Object.defineProperty(activeElement, 'value', newValueProp);
 if (activeElement.attachEvent) {
   activeElement.attachEvent('onpropertychange', handlePropertyChange);
 } else {
   activeElement.addEventListener('propertychange', handlePropertyChange, false);
 }
}

/**
* (For IE <=11) Removes the event listeners from the currently-tracked element,
* if any exists.
*/
function stopWatchingForValueChange() {
 if (!activeElement) {
   return;
 }

 // delete restores the original property definition
 delete activeElement.value;

 if (activeElement.detachEvent) {
   activeElement.detachEvent('onpropertychange', handlePropertyChange);
 } else {
   activeElement.removeEventListener('propertychange', handlePropertyChange, false);
 }

 activeElement = null;
 activeElementInst = null;
 activeElementValue = null;
 activeElementValueProp = null;
}

/**
* (For IE <=11) Handles a propertychange event, sending a `change` event if
* the value of the active element has changed.
*/
function handlePropertyChange(nativeEvent) {
 if (nativeEvent.propertyName !== 'value') {
   return;
 }
 var value = nativeEvent.srcElement.value;
 if (value === activeElementValue) {
   return;
 }
 activeElementValue = value;

 manualDispatchChangeEvent(nativeEvent);
}

/**
* If a `change` event should be fired, returns the target's ID.
*/
function getTargetInstForInputEvent(topLevelType, targetInst) {
 if (topLevelType === topLevelTypes.topInput) {
   // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
   // what we want so fall through here and trigger an abstract event
   return targetInst;
 }
}

function handleEventsForInputEventIE(topLevelType, target, targetInst) {
 if (topLevelType === topLevelTypes.topFocus) {
   // In IE8, we can capture almost all .value changes by adding a
   // propertychange handler and looking for events with propertyName
   // equal to 'value'
   // In IE9-11, propertychange fires for most input events but is buggy and
   // doesn't fire when text is deleted, but conveniently, selectionchange
   // appears to fire in all of the remaining cases so we catch those and
   // forward the event if the value has changed
   // In either case, we don't want to call the event handler if the value
   // is changed from JS so we redefine a setter for `.value` that updates
   // our activeElementValue variable, allowing us to ignore those changes
   //
   // stopWatching() should be a noop here but we call it just in case we
   // missed a blur event somehow.
   stopWatchingForValueChange();
   startWatchingForValueChange(target, targetInst);
 } else if (topLevelType === topLevelTypes.topBlur) {
   stopWatchingForValueChange();
 }
}

// For IE8 and IE9.
function getTargetInstForInputEventIE(topLevelType, targetInst) {
 if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
   // On the selectionchange event, the target is just document which isn't
   // helpful for us so just check activeElement instead.
   //
   // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
   // propertychange on the first input event after setting `value` from a
   // script and fires only keydown, keypress, keyup. Catching keyup usually
   // gets it and catching keydown lets us fire an event for the first
   // keystroke if user does a key repeat (it'll be a little delayed: right
   // before the second keystroke). Other input methods (e.g., paste) seem to
   // fire selectionchange normally.
   if (activeElement && activeElement.value !== activeElementValue) {
     activeElementValue = activeElement.value;
     return activeElementInst;
   }
 }
}

/**
* SECTION: handle `click` event
*/
function shouldUseClickEvent(elem) {
 // Use the `click` event to detect changes to checkbox and radio inputs.
 // This approach works across all browsers, whereas `change` does not fire
 // until `blur` in IE8.
 return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
 if (topLevelType === topLevelTypes.topClick) {
   return targetInst;
 }
}

/**
* This plugin creates an `onChange` event that normalizes change events
* across form elements. This event fires at a time when it's possible to
* change the element's value without seeing a flicker.
*
* Supported elements are:
* - input (see `isTextInputElement`)
* - textarea
* - select
*/
var ChangeEventPlugin = {

 eventTypes: eventTypes,

 extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
   var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

   var getTargetInstFunc, handleEventFunc;
   if (shouldUseChangeEvent(targetNode)) {
     if (doesChangeEventBubble) {
       getTargetInstFunc = getTargetInstForChangeEvent;
     } else {
       handleEventFunc = handleEventsForChangeEventIE8;
     }
   } else if (isTextInputElement(targetNode)) {
     if (isInputEventSupported) {
       getTargetInstFunc = getTargetInstForInputEvent;
     } else {
       getTargetInstFunc = getTargetInstForInputEventIE;
       handleEventFunc = handleEventsForInputEventIE;
     }
   } else if (shouldUseClickEvent(targetNode)) {
     getTargetInstFunc = getTargetInstForClickEvent;
   }

   if (getTargetInstFunc) {
     var inst = getTargetInstFunc(topLevelType, targetInst);
     if (inst) {
       var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
       event.type = 'change';
       EventPropagators.accumulateTwoPhaseDispatches(event);
       return event;
     }
   }

   if (handleEventFunc) {
     handleEventFunc(topLevelType, targetNode, targetInst);
   }
 }

};

module.exports = ChangeEventPlugin;
},{"102":102,"113":113,"136":136,"143":143,"144":144,"15":15,"157":157,"16":16,"175":175,"19":19,"42":42}],7:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule DOMChildrenOperations
*/

'use strict';

var DOMLazyTree = _dereq_(8);
var Danger = _dereq_(12);
var ReactMultiChildUpdateTypes = _dereq_(81);
var ReactPerf = _dereq_(86);

var createMicrosoftUnsafeLocalFunction = _dereq_(127);
var setInnerHTML = _dereq_(148);
var setTextContent = _dereq_(149);

function getNodeAfter(parentNode, node) {
 // Special case for text components, which return [open, close] comments
 // from getNativeNode.
 if (Array.isArray(node)) {
   node = node[1];
 }
 return node ? node.nextSibling : parentNode.firstChild;
}

/**
* Inserts `childNode` as a child of `parentNode` at the `index`.
*
* @param {DOMElement} parentNode Parent node in which to insert.
* @param {DOMElement} childNode Child node to insert.
* @param {number} index Index at which to insert the child.
* @internal
*/
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
 // We rely exclusively on `insertBefore(node, null)` instead of also using
 // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
 // we are careful to use `null`.)
 parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
 DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
 if (Array.isArray(childNode)) {
   moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
 } else {
   insertChildAt(parentNode, childNode, referenceNode);
 }
}

function removeChild(parentNode, childNode) {
 if (Array.isArray(childNode)) {
   var closingComment = childNode[1];
   childNode = childNode[0];
   removeDelimitedText(parentNode, childNode, closingComment);
   parentNode.removeChild(closingComment);
 }
 parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
 var node = openingComment;
 while (true) {
   var nextNode = node.nextSibling;
   insertChildAt(parentNode, node, referenceNode);
   if (node === closingComment) {
     break;
   }
   node = nextNode;
 }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
 while (true) {
   var node = startNode.nextSibling;
   if (node === closingComment) {
     // The closing comment is removed by ReactMultiChild.
     break;
   } else {
     parentNode.removeChild(node);
   }
 }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
 var parentNode = openingComment.parentNode;
 var nodeAfterComment = openingComment.nextSibling;
 if (nodeAfterComment === closingComment) {
   // There are no text nodes between the opening and closing comments; insert
   // a new one if stringText isn't empty.
   if (stringText) {
     insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
   }
 } else {
   if (stringText) {
     // Set the text content of the first node after the opening comment, and
     // remove all following nodes up until the closing comment.
     setTextContent(nodeAfterComment, stringText);
     removeDelimitedText(parentNode, nodeAfterComment, closingComment);
   } else {
     removeDelimitedText(parentNode, openingComment, closingComment);
   }
 }
}

/**
* Operations for updating with DOM children.
*/
var DOMChildrenOperations = {

 dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

 replaceDelimitedText: replaceDelimitedText,

 /**
  * Updates a component's children by processing a series of updates. The
  * update configurations are each expected to have a `parentNode` property.
  *
  * @param {array<object>} updates List of update configurations.
  * @internal
  */
 processUpdates: function (parentNode, updates) {
   for (var k = 0; k < updates.length; k++) {
     var update = updates[k];
     switch (update.type) {
       case ReactMultiChildUpdateTypes.INSERT_MARKUP:
         insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
         break;
       case ReactMultiChildUpdateTypes.MOVE_EXISTING:
         moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
         break;
       case ReactMultiChildUpdateTypes.SET_MARKUP:
         setInnerHTML(parentNode, update.content);
         break;
       case ReactMultiChildUpdateTypes.TEXT_CONTENT:
         setTextContent(parentNode, update.content);
         break;
       case ReactMultiChildUpdateTypes.REMOVE_NODE:
         removeChild(parentNode, update.fromNode);
         break;
     }
   }
 }

};

ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
 replaceDelimitedText: 'replaceDelimitedText'
});

module.exports = DOMChildrenOperations;
},{"12":12,"127":127,"148":148,"149":149,"8":8,"81":81,"86":86}],8:[function(_dereq_,module,exports){
/**
* Copyright 2015-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule DOMLazyTree
*/

'use strict';

var createMicrosoftUnsafeLocalFunction = _dereq_(127);
var setTextContent = _dereq_(149);

/**
* In IE (8-11) and Edge, appending nodes with no children is dramatically
* faster than appending a full subtree, so we essentially queue up the
* .appendChild calls here and apply them so each node is added to its parent
* before any children are added.
*
* In other browsers, doing so is slower or neutral compared to the other order
* (in Firefox, twice as slow) so we only do this inversion in IE.
*
* See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
*/
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
 if (!enableLazy) {
   return;
 }
 var node = tree.node;
 var children = tree.children;
 if (children.length) {
   for (var i = 0; i < children.length; i++) {
     insertTreeBefore(node, children[i], null);
   }
 } else if (tree.html != null) {
   node.innerHTML = tree.html;
 } else if (tree.text != null) {
   setTextContent(node, tree.text);
 }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
 // DocumentFragments aren't actually part of the DOM after insertion so
 // appending children won't update the DOM. We need to ensure the fragment
 // is properly populated first, breaking out of our lazy approach for just
 // this level.
 if (tree.node.nodeType === 11) {
   insertTreeChildren(tree);
   parentNode.insertBefore(tree.node, referenceNode);
 } else {
   parentNode.insertBefore(tree.node, referenceNode);
   insertTreeChildren(tree);
 }
});

function replaceChildWithTree(oldNode, newTree) {
 oldNode.parentNode.replaceChild(newTree.node, oldNode);
 insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
 if (enableLazy) {
   parentTree.children.push(childTree);
 } else {
   parentTree.node.appendChild(childTree.node);
 }
}

function queueHTML(tree, html) {
 if (enableLazy) {
   tree.html = html;
 } else {
   tree.node.innerHTML = html;
 }
}

function queueText(tree, text) {
 if (enableLazy) {
   tree.text = text;
 } else {
   setTextContent(tree.node, text);
 }
}

function DOMLazyTree(node) {
 return {
   node: node,
   children: [],
   html: null,
   text: null
 };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;
},{"127":127,"149":149}],9:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule DOMNamespaces
*/

'use strict';

var DOMNamespaces = {
 html: 'http://www.w3.org/1999/xhtml',
 mathml: 'http://www.w3.org/1998/Math/MathML',
 svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;
},{}],10:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule DOMProperty
*/

'use strict';

var invariant = _dereq_(171);

function checkMask(value, bitmask) {
 return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
 /**
  * Mapping from normalized, camelcased property names to a configuration that
  * specifies how the associated DOM property should be accessed or rendered.
  */
 MUST_USE_PROPERTY: 0x1,
 HAS_SIDE_EFFECTS: 0x2,
 HAS_BOOLEAN_VALUE: 0x4,
 HAS_NUMERIC_VALUE: 0x8,
 HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
 HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

 /**
  * Inject some specialized knowledge about the DOM. This takes a config object
  * with the following properties:
  *
  * isCustomAttribute: function that given an attribute name will return true
  * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
  * attributes where it's impossible to enumerate all of the possible
  * attribute names,
  *
  * Properties: object mapping DOM property name to one of the
  * DOMPropertyInjection constants or null. If your attribute isn't in here,
  * it won't get written to the DOM.
  *
  * DOMAttributeNames: object mapping React attribute name to the DOM
  * attribute name. Attribute names not specified use the **lowercase**
  * normalized name.
  *
  * DOMAttributeNamespaces: object mapping React attribute name to the DOM
  * attribute namespace URL. (Attribute names not specified use no namespace.)
  *
  * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
  * Property names not specified use the normalized name.
  *
  * DOMMutationMethods: Properties that require special mutation methods. If
  * `value` is undefined, the mutation method should unset the property.
  *
  * @param {object} domPropertyConfig the config as described above.
  */
 injectDOMPropertyConfig: function (domPropertyConfig) {
   var Injection = DOMPropertyInjection;
   var Properties = domPropertyConfig.Properties || {};
   var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
   var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
   var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
   var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

   if (domPropertyConfig.isCustomAttribute) {
     DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
   }

   for (var propName in Properties) {
     !!DOMProperty.properties.hasOwnProperty(propName) ? "development" !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : void 0;

     var lowerCased = propName.toLowerCase();
     var propConfig = Properties[propName];

     var propertyInfo = {
       attributeName: lowerCased,
       attributeNamespace: null,
       propertyName: propName,
       mutationMethod: null,

       mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
       hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
       hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
       hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
       hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
       hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
     };

     !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? "development" !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : void 0;
     !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? "development" !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : void 0;

     if ("development" !== 'production') {
       DOMProperty.getPossibleStandardName[lowerCased] = propName;
     }

     if (DOMAttributeNames.hasOwnProperty(propName)) {
       var attributeName = DOMAttributeNames[propName];
       propertyInfo.attributeName = attributeName;
       if ("development" !== 'production') {
         DOMProperty.getPossibleStandardName[attributeName] = propName;
       }
     }

     if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
       propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
     }

     if (DOMPropertyNames.hasOwnProperty(propName)) {
       propertyInfo.propertyName = DOMPropertyNames[propName];
     }

     if (DOMMutationMethods.hasOwnProperty(propName)) {
       propertyInfo.mutationMethod = DOMMutationMethods[propName];
     }

     DOMProperty.properties[propName] = propertyInfo;
   }
 }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
* DOMProperty exports lookup objects that can be used like functions:
*
*   > DOMProperty.isValid['id']
*   true
*   > DOMProperty.isValid['foobar']
*   undefined
*
* Although this may be confusing, it performs better in general.
*
* @see http://jsperf.com/key-exists
* @see http://jsperf.com/key-missing
*/
var DOMProperty = {

 ID_ATTRIBUTE_NAME: 'data-reactid',
 ROOT_ATTRIBUTE_NAME: 'data-reactroot',

 ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
 ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\uB7\\u0300-\\u036F\\u203F-\\u2040',

 /**
  * Map from property "standard name" to an object with info about how to set
  * the property in the DOM. Each object contains:
  *
  * attributeName:
  *   Used when rendering markup or with `*Attribute()`.
  * attributeNamespace
  * propertyName:
  *   Used on DOM node instances. (This includes properties that mutate due to
  *   external factors.)
  * mutationMethod:
  *   If non-null, used instead of the property or `setAttribute()` after
  *   initial render.
  * mustUseProperty:
  *   Whether the property must be accessed and mutated as an object property.
  * hasSideEffects:
  *   Whether or not setting a value causes side effects such as triggering
  *   resources to be loaded or text selection changes. If true, we read from
  *   the DOM before updating to ensure that the value is only set if it has
  *   changed.
  * hasBooleanValue:
  *   Whether the property should be removed when set to a falsey value.
  * hasNumericValue:
  *   Whether the property must be numeric or parse as a numeric and should be
  *   removed when set to a falsey value.
  * hasPositiveNumericValue:
  *   Whether the property must be positive numeric or parse as a positive
  *   numeric and should be removed when set to a falsey value.
  * hasOverloadedBooleanValue:
  *   Whether the property can be used as a flag as well as with a value.
  *   Removed when strictly equal to false; present without a value when
  *   strictly equal to true; present with a value otherwise.
  */
 properties: {},

 /**
  * Mapping from lowercase property names to the properly cased version, used
  * to warn in the case of missing properties. Available only in __DEV__.
  * @type {Object}
  */
 getPossibleStandardName: "development" !== 'production' ? {} : null,

 /**
  * All of the isCustomAttribute() functions that have been injected.
  */
 _isCustomAttributeFunctions: [],

 /**
  * Checks whether a property name is a custom attribute.
  * @method
  */
 isCustomAttribute: function (attributeName) {
   for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
     var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
     if (isCustomAttributeFn(attributeName)) {
       return true;
     }
   }
   return false;
 },

 injection: DOMPropertyInjection
};

module.exports = DOMProperty;
},{"171":171}],11:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule DOMPropertyOperations
*/

'use strict';

var DOMProperty = _dereq_(10);
var ReactDOMInstrumentation = _dereq_(50);
var ReactPerf = _dereq_(86);

var quoteAttributeValueForBrowser = _dereq_(146);
var warning = _dereq_(181);

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
 if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
   return true;
 }
 if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
   return false;
 }
 if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
   validatedAttributeNameCache[attributeName] = true;
   return true;
 }
 illegalAttributeNameCache[attributeName] = true;
 "development" !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
 return false;
}

function shouldIgnoreValue(propertyInfo, value) {
 return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
* Operations for dealing with DOM properties.
*/
var DOMPropertyOperations = {

 /**
  * Creates markup for the ID property.
  *
  * @param {string} id Unescaped ID.
  * @return {string} Markup string.
  */
 createMarkupForID: function (id) {
   return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
 },

 setAttributeForID: function (node, id) {
   node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
 },

 createMarkupForRoot: function () {
   return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
 },

 setAttributeForRoot: function (node) {
   node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
 },

 /**
  * Creates markup for a property.
  *
  * @param {string} name
  * @param {*} value
  * @return {?string} Markup string, or null if the property was invalid.
  */
 createMarkupForProperty: function (name, value) {
   if ("development" !== 'production') {
     ReactDOMInstrumentation.debugTool.onCreateMarkupForProperty(name, value);
   }
   var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
   if (propertyInfo) {
     if (shouldIgnoreValue(propertyInfo, value)) {
       return '';
     }
     var attributeName = propertyInfo.attributeName;
     if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
       return attributeName + '=""';
     }
     return attributeName + '=' + quoteAttributeValueForBrowser(value);
   } else if (DOMProperty.isCustomAttribute(name)) {
     if (value == null) {
       return '';
     }
     return name + '=' + quoteAttributeValueForBrowser(value);
   }
   return null;
 },

 /**
  * Creates markup for a custom property.
  *
  * @param {string} name
  * @param {*} value
  * @return {string} Markup string, or empty string if the property was invalid.
  */
 createMarkupForCustomAttribute: function (name, value) {
   if (!isAttributeNameSafe(name) || value == null) {
     return '';
   }
   return name + '=' + quoteAttributeValueForBrowser(value);
 },

 /**
  * Sets the value for a property on a node.
  *
  * @param {DOMElement} node
  * @param {string} name
  * @param {*} value
  */
 setValueForProperty: function (node, name, value) {
   if ("development" !== 'production') {
     ReactDOMInstrumentation.debugTool.onSetValueForProperty(node, name, value);
   }
   var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
   if (propertyInfo) {
     var mutationMethod = propertyInfo.mutationMethod;
     if (mutationMethod) {
       mutationMethod(node, value);
     } else if (shouldIgnoreValue(propertyInfo, value)) {
       this.deleteValueForProperty(node, name);
     } else if (propertyInfo.mustUseProperty) {
       var propName = propertyInfo.propertyName;
       // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
       // property type before comparing; only `value` does and is string.
       if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
         // Contrary to `setAttribute`, object properties are properly
         // `toString`ed by IE8/9.
         node[propName] = value;
       }
     } else {
       var attributeName = propertyInfo.attributeName;
       var namespace = propertyInfo.attributeNamespace;
       // `setAttribute` with objects becomes only `[object]` in IE8/9,
       // ('' + value) makes it output the correct toString()-value.
       if (namespace) {
         node.setAttributeNS(namespace, attributeName, '' + value);
       } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
         node.setAttribute(attributeName, '');
       } else {
         node.setAttribute(attributeName, '' + value);
       }
     }
   } else if (DOMProperty.isCustomAttribute(name)) {
     DOMPropertyOperations.setValueForAttribute(node, name, value);
   }
 },

 setValueForAttribute: function (node, name, value) {
   if (!isAttributeNameSafe(name)) {
     return;
   }
   if (value == null) {
     node.removeAttribute(name);
   } else {
     node.setAttribute(name, '' + value);
   }
 },

 /**
  * Deletes the value for a property on a node.
  *
  * @param {DOMElement} node
  * @param {string} name
  */
 deleteValueForProperty: function (node, name) {
   if ("development" !== 'production') {
     ReactDOMInstrumentation.debugTool.onDeleteValueForProperty(node, name);
   }
   var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
   if (propertyInfo) {
     var mutationMethod = propertyInfo.mutationMethod;
     if (mutationMethod) {
       mutationMethod(node, undefined);
     } else if (propertyInfo.mustUseProperty) {
       var propName = propertyInfo.propertyName;
       if (propertyInfo.hasBooleanValue) {
         // No HAS_SIDE_EFFECTS logic here, only `value` has it and is string.
         node[propName] = false;
       } else {
         if (!propertyInfo.hasSideEffects || '' + node[propName] !== '') {
           node[propName] = '';
         }
       }
     } else {
       node.removeAttribute(propertyInfo.attributeName);
     }
   } else if (DOMProperty.isCustomAttribute(name)) {
     node.removeAttribute(name);
   }
 }

};

ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
 setValueForProperty: 'setValueForProperty',
 setValueForAttribute: 'setValueForAttribute',
 deleteValueForProperty: 'deleteValueForProperty'
});

module.exports = DOMPropertyOperations;
},{"10":10,"146":146,"181":181,"50":50,"86":86}],12:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule Danger
*/

'use strict';

var DOMLazyTree = _dereq_(8);
var ExecutionEnvironment = _dereq_(157);

var createNodesFromMarkup = _dereq_(162);
var emptyFunction = _dereq_(163);
var getMarkupWrap = _dereq_(167);
var invariant = _dereq_(171);

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
* Extracts the `nodeName` from a string of markup.
*
* NOTE: Extracting the `nodeName` does not require a regular expression match
* because we make assumptions about React-generated markup (i.e. there are no
* spaces surrounding the opening tag and there is at least one attribute).
*
* @param {string} markup String of markup.
* @return {string} Node name of the supplied markup.
* @see http://jsperf.com/extract-nodename
*/
function getNodeName(markup) {
 return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

 /**
  * Renders markup into an array of nodes. The markup is expected to render
  * into a list of root nodes. Also, the length of `resultList` and
  * `markupList` should be the same.
  *
  * @param {array<string>} markupList List of markup strings to render.
  * @return {array<DOMElement>} List of rendered nodes.
  * @internal
  */
 dangerouslyRenderMarkup: function (markupList) {
   !ExecutionEnvironment.canUseDOM ? "development" !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : void 0;
   var nodeName;
   var markupByNodeName = {};
   // Group markup by `nodeName` if a wrap is necessary, else by '*'.
   for (var i = 0; i < markupList.length; i++) {
     !markupList[i] ? "development" !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : void 0;
     nodeName = getNodeName(markupList[i]);
     nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
     markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
     markupByNodeName[nodeName][i] = markupList[i];
   }
   var resultList = [];
   var resultListAssignmentCount = 0;
   for (nodeName in markupByNodeName) {
     if (!markupByNodeName.hasOwnProperty(nodeName)) {
       continue;
     }
     var markupListByNodeName = markupByNodeName[nodeName];

     // This for-in loop skips the holes of the sparse array. The order of
     // iteration should follow the order of assignment, which happens to match
     // numerical index order, but we don't rely on that.
     var resultIndex;
     for (resultIndex in markupListByNodeName) {
       if (markupListByNodeName.hasOwnProperty(resultIndex)) {
         var markup = markupListByNodeName[resultIndex];

         // Push the requested markup with an additional RESULT_INDEX_ATTR
         // attribute.  If the markup does not start with a < character, it
         // will be discarded below (with an appropriate console.error).
         markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
         // This index will be parsed back out below.
         '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
       }
     }

     // Render each group of markup with similar wrapping `nodeName`.
     var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
     );

     for (var j = 0; j < renderNodes.length; ++j) {
       var renderNode = renderNodes[j];
       if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

         resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
         renderNode.removeAttribute(RESULT_INDEX_ATTR);

         !!resultList.hasOwnProperty(resultIndex) ? "development" !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : void 0;

         resultList[resultIndex] = renderNode;

         // This should match resultList.length and markupList.length when
         // we're done.
         resultListAssignmentCount += 1;
       } else if ("development" !== 'production') {
         console.error('Danger: Discarding unexpected node:', renderNode);
       }
     }
   }

   // Although resultList was populated out of order, it should now be a dense
   // array.
   !(resultListAssignmentCount === resultList.length) ? "development" !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : void 0;

   !(resultList.length === markupList.length) ? "development" !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : void 0;

   return resultList;
 },

 /**
  * Replaces a node with a string of markup at its current position within its
  * parent. The markup must render into a single root node.
  *
  * @param {DOMElement} oldChild Child node to replace.
  * @param {string} markup Markup to render in place of the child node.
  * @internal
  */
 dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
   !ExecutionEnvironment.canUseDOM ? "development" !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : void 0;
   !markup ? "development" !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : void 0;
   !(oldChild.nodeName !== 'HTML') ? "development" !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : void 0;

   if (typeof markup === 'string') {
     var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
     oldChild.parentNode.replaceChild(newChild, oldChild);
   } else {
     DOMLazyTree.replaceChildWithTree(oldChild, markup);
   }
 }

};

module.exports = Danger;
},{"157":157,"162":162,"163":163,"167":167,"171":171,"8":8}],13:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule DefaultEventPluginOrder
*/

'use strict';

var keyOf = _dereq_(175);

/**
* Module that is injectable into `EventPluginHub`, that specifies a
* deterministic ordering of `EventPlugin`s. A convenient way to reason about
* plugins, without having to package every one of them. This is better than
* having plugins be ordered in the same order that they are injected because
* that ordering would be influenced by the packaging order.
* `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
* preventing default on events is convenient in `SimpleEventPlugin` handlers.
*/
var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

module.exports = DefaultEventPluginOrder;
},{"175":175}],14:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule EnterLeaveEventPlugin
*/

'use strict';

var EventConstants = _dereq_(15);
var EventPropagators = _dereq_(19);
var ReactDOMComponentTree = _dereq_(42);
var SyntheticMouseEvent = _dereq_(117);

var keyOf = _dereq_(175);

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
 mouseEnter: {
   registrationName: keyOf({ onMouseEnter: null }),
   dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
 },
 mouseLeave: {
   registrationName: keyOf({ onMouseLeave: null }),
   dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
 }
};

var EnterLeaveEventPlugin = {

 eventTypes: eventTypes,

 /**
  * For almost every interaction we care about, there will be both a top-level
  * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
  * we do not extract duplicate events. However, moving the mouse into the
  * browser from outside will not fire a `mouseout` event. In this case, we use
  * the `mouseover` top-level event.
  */
 extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
   if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
     return null;
   }
   if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
     // Must not be a mouse in or mouse out - ignoring.
     return null;
   }

   var win;
   if (nativeEventTarget.window === nativeEventTarget) {
     // `nativeEventTarget` is probably a window object.
     win = nativeEventTarget;
   } else {
     // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
     var doc = nativeEventTarget.ownerDocument;
     if (doc) {
       win = doc.defaultView || doc.parentWindow;
     } else {
       win = window;
     }
   }

   var from;
   var to;
   if (topLevelType === topLevelTypes.topMouseOut) {
     from = targetInst;
     var related = nativeEvent.relatedTarget || nativeEvent.toElement;
     to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
   } else {
     // Moving to a node from outside the window.
     from = null;
     to = targetInst;
   }

   if (from === to) {
     // Nothing pertains to our managed components.
     return null;
   }

   var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
   var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

   var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
   leave.type = 'mouseleave';
   leave.target = fromNode;
   leave.relatedTarget = toNode;

   var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
   enter.type = 'mouseenter';
   enter.target = toNode;
   enter.relatedTarget = fromNode;

   EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

   return [leave, enter];
 }

};

module.exports = EnterLeaveEventPlugin;
},{"117":117,"15":15,"175":175,"19":19,"42":42}],15:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule EventConstants
*/

'use strict';

var keyMirror = _dereq_(174);

var PropagationPhases = keyMirror({ bubbled: null, captured: null });

/**
* Types of raw signals from the browser caught at the top level.
*/
var topLevelTypes = keyMirror({
 topAbort: null,
 topAnimationEnd: null,
 topAnimationIteration: null,
 topAnimationStart: null,
 topBlur: null,
 topCanPlay: null,
 topCanPlayThrough: null,
 topChange: null,
 topClick: null,
 topCompositionEnd: null,
 topCompositionStart: null,
 topCompositionUpdate: null,
 topContextMenu: null,
 topCopy: null,
 topCut: null,
 topDoubleClick: null,
 topDrag: null,
 topDragEnd: null,
 topDragEnter: null,
 topDragExit: null,
 topDragLeave: null,
 topDragOver: null,
 topDragStart: null,
 topDrop: null,
 topDurationChange: null,
 topEmptied: null,
 topEncrypted: null,
 topEnded: null,
 topError: null,
 topFocus: null,
 topInput: null,
 topInvalid: null,
 topKeyDown: null,
 topKeyPress: null,
 topKeyUp: null,
 topLoad: null,
 topLoadedData: null,
 topLoadedMetadata: null,
 topLoadStart: null,
 topMouseDown: null,
 topMouseMove: null,
 topMouseOut: null,
 topMouseOver: null,
 topMouseUp: null,
 topPaste: null,
 topPause: null,
 topPlay: null,
 topPlaying: null,
 topProgress: null,
 topRateChange: null,
 topReset: null,
 topScroll: null,
 topSeeked: null,
 topSeeking: null,
 topSelectionChange: null,
 topStalled: null,
 topSubmit: null,
 topSuspend: null,
 topTextInput: null,
 topTimeUpdate: null,
 topTouchCancel: null,
 topTouchEnd: null,
 topTouchMove: null,
 topTouchStart: null,
 topTransitionEnd: null,
 topVolumeChange: null,
 topWaiting: null,
 topWheel: null
});

var EventConstants = {
 topLevelTypes: topLevelTypes,
 PropagationPhases: PropagationPhases
};

module.exports = EventConstants;
},{"174":174}],16:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule EventPluginHub
*/

'use strict';

var EventPluginRegistry = _dereq_(17);
var EventPluginUtils = _dereq_(18);
var ReactErrorUtils = _dereq_(67);

var accumulateInto = _dereq_(124);
var forEachAccumulated = _dereq_(132);
var invariant = _dereq_(171);

/**
* Internal store for event listeners
*/
var listenerBank = {};

/**
* Internal queue of events that have accumulated their dispatches and are
* waiting to have their dispatches executed.
*/
var eventQueue = null;

/**
* Dispatches an event and releases it back into the pool, unless persistent.
*
* @param {?object} event Synthetic event to be dispatched.
* @param {boolean} simulated If the event is simulated (changes exn behavior)
* @private
*/
var executeDispatchesAndRelease = function (event, simulated) {
 if (event) {
   EventPluginUtils.executeDispatchesInOrder(event, simulated);

   if (!event.isPersistent()) {
     event.constructor.release(event);
   }
 }
};
var executeDispatchesAndReleaseSimulated = function (e) {
 return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
 return executeDispatchesAndRelease(e, false);
};

/**
* This is a unified interface for event plugins to be installed and configured.
*
* Event plugins can implement the following properties:
*
*   `extractEvents` {function(string, DOMEventTarget, string, object): *}
*     Required. When a top-level event is fired, this method is expected to
*     extract synthetic events that will in turn be queued and dispatched.
*
*   `eventTypes` {object}
*     Optional, plugins that fire events must publish a mapping of registration
*     names that are used to register listeners. Values of this mapping must
*     be objects that contain `registrationName` or `phasedRegistrationNames`.
*
*   `executeDispatch` {function(object, function, string)}
*     Optional, allows plugins to override how an event gets dispatched. By
*     default, the listener is simply invoked.
*
* Each plugin that is injected into `EventsPluginHub` is immediately operable.
*
* @public
*/
var EventPluginHub = {

 /**
  * Methods for injecting dependencies.
  */
 injection: {

   /**
    * @param {array} InjectedEventPluginOrder
    * @public
    */
   injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

   /**
    * @param {object} injectedNamesToPlugins Map from names to plugin modules.
    */
   injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

 },

 /**
  * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
  *
  * @param {object} inst The instance, which is the source of events.
  * @param {string} registrationName Name of listener (e.g. `onClick`).
  * @param {function} listener The callback to store.
  */
 putListener: function (inst, registrationName, listener) {
   !(typeof listener === 'function') ? "development" !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : void 0;

   var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
   bankForRegistrationName[inst._rootNodeID] = listener;

   var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
   if (PluginModule && PluginModule.didPutListener) {
     PluginModule.didPutListener(inst, registrationName, listener);
   }
 },

 /**
  * @param {object} inst The instance, which is the source of events.
  * @param {string} registrationName Name of listener (e.g. `onClick`).
  * @return {?function} The stored callback.
  */
 getListener: function (inst, registrationName) {
   var bankForRegistrationName = listenerBank[registrationName];
   return bankForRegistrationName && bankForRegistrationName[inst._rootNodeID];
 },

 /**
  * Deletes a listener from the registration bank.
  *
  * @param {object} inst The instance, which is the source of events.
  * @param {string} registrationName Name of listener (e.g. `onClick`).
  */
 deleteListener: function (inst, registrationName) {
   var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
   if (PluginModule && PluginModule.willDeleteListener) {
     PluginModule.willDeleteListener(inst, registrationName);
   }

   var bankForRegistrationName = listenerBank[registrationName];
   // TODO: This should never be null -- when is it?
   if (bankForRegistrationName) {
     delete bankForRegistrationName[inst._rootNodeID];
   }
 },

 /**
  * Deletes all listeners for the DOM element with the supplied ID.
  *
  * @param {object} inst The instance, which is the source of events.
  */
 deleteAllListeners: function (inst) {
   for (var registrationName in listenerBank) {
     if (!listenerBank[registrationName][inst._rootNodeID]) {
       continue;
     }

     var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
     if (PluginModule && PluginModule.willDeleteListener) {
       PluginModule.willDeleteListener(inst, registrationName);
     }

     delete listenerBank[registrationName][inst._rootNodeID];
   }
 },

 /**
  * Allows registered plugins an opportunity to extract events from top-level
  * native browser events.
  *
  * @return {*} An accumulation of synthetic events.
  * @internal
  */
 extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
   var events;
   var plugins = EventPluginRegistry.plugins;
   for (var i = 0; i < plugins.length; i++) {
     // Not every plugin in the ordering may be loaded at runtime.
     var possiblePlugin = plugins[i];
     if (possiblePlugin) {
       var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
       if (extractedEvents) {
         events = accumulateInto(events, extractedEvents);
       }
     }
   }
   return events;
 },

 /**
  * Enqueues a synthetic event that should be dispatched when
  * `processEventQueue` is invoked.
  *
  * @param {*} events An accumulation of synthetic events.
  * @internal
  */
 enqueueEvents: function (events) {
   if (events) {
     eventQueue = accumulateInto(eventQueue, events);
   }
 },

 /**
  * Dispatches all synthetic events on the event queue.
  *
  * @internal
  */
 processEventQueue: function (simulated) {
   // Set `eventQueue` to null before processing it so that we can tell if more
   // events get enqueued while processing.
   var processingEventQueue = eventQueue;
   eventQueue = null;
   if (simulated) {
     forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
   } else {
     forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
   }
   !!eventQueue ? "development" !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : void 0;
   // This would be a good time to rethrow if any of the event handlers threw.
   ReactErrorUtils.rethrowCaughtError();
 },

 /**
  * These are needed for tests only. Do not use!
  */
 __purge: function () {
   listenerBank = {};
 },

 __getListenerBank: function () {
   return listenerBank;
 }

};

module.exports = EventPluginHub;
},{"124":124,"132":132,"17":17,"171":171,"18":18,"67":67}],17:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule EventPluginRegistry
*/

'use strict';

var invariant = _dereq_(171);

/**
* Injectable ordering of event plugins.
*/
var EventPluginOrder = null;

/**
* Injectable mapping from names to event plugin modules.
*/
var namesToPlugins = {};

/**
* Recomputes the plugin list using the injected plugins and plugin ordering.
*
* @private
*/
function recomputePluginOrdering() {
 if (!EventPluginOrder) {
   // Wait until an `EventPluginOrder` is injected.
   return;
 }
 for (var pluginName in namesToPlugins) {
   var PluginModule = namesToPlugins[pluginName];
   var pluginIndex = EventPluginOrder.indexOf(pluginName);
   !(pluginIndex > -1) ? "development" !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : void 0;
   if (EventPluginRegistry.plugins[pluginIndex]) {
     continue;
   }
   !PluginModule.extractEvents ? "development" !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : void 0;
   EventPluginRegistry.plugins[pluginIndex] = PluginModule;
   var publishedEvents = PluginModule.eventTypes;
   for (var eventName in publishedEvents) {
     !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? "development" !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : void 0;
   }
 }
}

/**
* Publishes an event so that it can be dispatched by the supplied plugin.
*
* @param {object} dispatchConfig Dispatch configuration for the event.
* @param {object} PluginModule Plugin publishing the event.
* @return {boolean} True if the event was successfully published.
* @private
*/
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
 !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? "development" !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : void 0;
 EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

 var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
 if (phasedRegistrationNames) {
   for (var phaseName in phasedRegistrationNames) {
     if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
       var phasedRegistrationName = phasedRegistrationNames[phaseName];
       publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
     }
   }
   return true;
 } else if (dispatchConfig.registrationName) {
   publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
   return true;
 }
 return false;
}

/**
* Publishes a registration name that is used to identify dispatched events and
* can be used with `EventPluginHub.putListener` to register listeners.
*
* @param {string} registrationName Registration name to add.
* @param {object} PluginModule Plugin publishing the event.
* @private
*/
function publishRegistrationName(registrationName, PluginModule, eventName) {
 !!EventPluginRegistry.registrationNameModules[registrationName] ? "development" !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : void 0;
 EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
 EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;

 if ("development" !== 'production') {
   var lowerCasedName = registrationName.toLowerCase();
   EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
 }
}

/**
* Registers plugins so that they can extract and dispatch events.
*
* @see {EventPluginHub}
*/
var EventPluginRegistry = {

 /**
  * Ordered list of injected plugins.
  */
 plugins: [],

 /**
  * Mapping from event name to dispatch config
  */
 eventNameDispatchConfigs: {},

 /**
  * Mapping from registration name to plugin module
  */
 registrationNameModules: {},

 /**
  * Mapping from registration name to event name
  */
 registrationNameDependencies: {},

 /**
  * Mapping from lowercase registration names to the properly cased version,
  * used to warn in the case of missing event handlers. Available
  * only in __DEV__.
  * @type {Object}
  */
 possibleRegistrationNames: "development" !== 'production' ? {} : null,

 /**
  * Injects an ordering of plugins (by plugin name). This allows the ordering
  * to be decoupled from injection of the actual plugins so that ordering is
  * always deterministic regardless of packaging, on-the-fly injection, etc.
  *
  * @param {array} InjectedEventPluginOrder
  * @internal
  * @see {EventPluginHub.injection.injectEventPluginOrder}
  */
 injectEventPluginOrder: function (InjectedEventPluginOrder) {
   !!EventPluginOrder ? "development" !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : void 0;
   // Clone the ordering so it cannot be dynamically mutated.
   EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
   recomputePluginOrdering();
 },

 /**
  * Injects plugins to be used by `EventPluginHub`. The plugin names must be
  * in the ordering injected by `injectEventPluginOrder`.
  *
  * Plugins can be injected as part of page initialization or on-the-fly.
  *
  * @param {object} injectedNamesToPlugins Map from names to plugin modules.
  * @internal
  * @see {EventPluginHub.injection.injectEventPluginsByName}
  */
 injectEventPluginsByName: function (injectedNamesToPlugins) {
   var isOrderingDirty = false;
   for (var pluginName in injectedNamesToPlugins) {
     if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
       continue;
     }
     var PluginModule = injectedNamesToPlugins[pluginName];
     if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
       !!namesToPlugins[pluginName] ? "development" !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : void 0;
       namesToPlugins[pluginName] = PluginModule;
       isOrderingDirty = true;
     }
   }
   if (isOrderingDirty) {
     recomputePluginOrdering();
   }
 },

 /**
  * Looks up the plugin for the supplied event.
  *
  * @param {object} event A synthetic event.
  * @return {?object} The plugin that created the supplied event.
  * @internal
  */
 getPluginModuleForEvent: function (event) {
   var dispatchConfig = event.dispatchConfig;
   if (dispatchConfig.registrationName) {
     return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
   }
   for (var phase in dispatchConfig.phasedRegistrationNames) {
     if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
       continue;
     }
     var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
     if (PluginModule) {
       return PluginModule;
     }
   }
   return null;
 },

 /**
  * Exposed for unit testing.
  * @private
  */
 _resetEventPlugins: function () {
   EventPluginOrder = null;
   for (var pluginName in namesToPlugins) {
     if (namesToPlugins.hasOwnProperty(pluginName)) {
       delete namesToPlugins[pluginName];
     }
   }
   EventPluginRegistry.plugins.length = 0;

   var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
   for (var eventName in eventNameDispatchConfigs) {
     if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
       delete eventNameDispatchConfigs[eventName];
     }
   }

   var registrationNameModules = EventPluginRegistry.registrationNameModules;
   for (var registrationName in registrationNameModules) {
     if (registrationNameModules.hasOwnProperty(registrationName)) {
       delete registrationNameModules[registrationName];
     }
   }

   if ("development" !== 'production') {
     var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
     for (var lowerCasedName in possibleRegistrationNames) {
       if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
         delete possibleRegistrationNames[lowerCasedName];
       }
     }
   }
 }

};

module.exports = EventPluginRegistry;
},{"171":171}],18:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule EventPluginUtils
*/

'use strict';

var EventConstants = _dereq_(15);
var ReactErrorUtils = _dereq_(67);

var invariant = _dereq_(171);
var warning = _dereq_(181);

/**
* Injected dependencies:
*/

/**
* - `ComponentTree`: [required] Module that can convert between React instances
*   and actual node references.
*/
var ComponentTree;
var TreeTraversal;
var injection = {
 injectComponentTree: function (Injected) {
   ComponentTree = Injected;
   if ("development" !== 'production') {
     "development" !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
   }
 },
 injectTreeTraversal: function (Injected) {
   TreeTraversal = Injected;
   if ("development" !== 'production') {
     "development" !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
   }
 }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
 return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
 return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
 return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
}

var validateEventDispatches;
if ("development" !== 'production') {
 validateEventDispatches = function (event) {
   var dispatchListeners = event._dispatchListeners;
   var dispatchInstances = event._dispatchInstances;

   var listenersIsArr = Array.isArray(dispatchListeners);
   var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

   var instancesIsArr = Array.isArray(dispatchInstances);
   var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

   "development" !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
 };
}

/**
* Dispatch the event to the listener.
* @param {SyntheticEvent} event SyntheticEvent to handle
* @param {boolean} simulated If the event is simulated (changes exn behavior)
* @param {function} listener Application-level callback
* @param {*} inst Internal component instance
*/
function executeDispatch(event, simulated, listener, inst) {
 var type = event.type || 'unknown-event';
 event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
 if (simulated) {
   ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
 } else {
   ReactErrorUtils.invokeGuardedCallback(type, listener, event);
 }
 event.currentTarget = null;
}

/**
* Standard/simple iteration through an event's collected dispatches.
*/
function executeDispatchesInOrder(event, simulated) {
 var dispatchListeners = event._dispatchListeners;
 var dispatchInstances = event._dispatchInstances;
 if ("development" !== 'production') {
   validateEventDispatches(event);
 }
 if (Array.isArray(dispatchListeners)) {
   for (var i = 0; i < dispatchListeners.length; i++) {
     if (event.isPropagationStopped()) {
       break;
     }
     // Listeners and Instances are two parallel arrays that are always in sync.
     executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
   }
 } else if (dispatchListeners) {
   executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
 }
 event._dispatchListeners = null;
 event._dispatchInstances = null;
}

/**
* Standard/simple iteration through an event's collected dispatches, but stops
* at the first dispatch execution returning true, and returns that id.
*
* @return {?string} id of the first dispatch execution who's listener returns
* true, or null if no listener returned true.
*/
function executeDispatchesInOrderStopAtTrueImpl(event) {
 var dispatchListeners = event._dispatchListeners;
 var dispatchInstances = event._dispatchInstances;
 if ("development" !== 'production') {
   validateEventDispatches(event);
 }
 if (Array.isArray(dispatchListeners)) {
   for (var i = 0; i < dispatchListeners.length; i++) {
     if (event.isPropagationStopped()) {
       break;
     }
     // Listeners and Instances are two parallel arrays that are always in sync.
     if (dispatchListeners[i](event, dispatchInstances[i])) {
       return dispatchInstances[i];
     }
   }
 } else if (dispatchListeners) {
   if (dispatchListeners(event, dispatchInstances)) {
     return dispatchInstances;
   }
 }
 return null;
}

/**
* @see executeDispatchesInOrderStopAtTrueImpl
*/
function executeDispatchesInOrderStopAtTrue(event) {
 var ret = executeDispatchesInOrderStopAtTrueImpl(event);
 event._dispatchInstances = null;
 event._dispatchListeners = null;
 return ret;
}

/**
* Execution of a "direct" dispatch - there must be at most one dispatch
* accumulated on the event or it is considered an error. It doesn't really make
* sense for an event with multiple dispatches (bubbled) to keep track of the
* return values at each dispatch execution, but it does tend to make sense when
* dealing with "direct" dispatches.
*
* @return {*} The return value of executing the single dispatch.
*/
function executeDirectDispatch(event) {
 if ("development" !== 'production') {
   validateEventDispatches(event);
 }
 var dispatchListener = event._dispatchListeners;
 var dispatchInstance = event._dispatchInstances;
 !!Array.isArray(dispatchListener) ? "development" !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : void 0;
 event.currentTarget = EventPluginUtils.getNodeFromInstance(dispatchInstance);
 var res = dispatchListener ? dispatchListener(event) : null;
 event.currentTarget = null;
 event._dispatchListeners = null;
 event._dispatchInstances = null;
 return res;
}

/**
* @param {SyntheticEvent} event
* @return {boolean} True iff number of dispatches accumulated is greater than 0.
*/
function hasDispatches(event) {
 return !!event._dispatchListeners;
}

/**
* General utilities that are useful in creating custom Event Plugins.
*/
var EventPluginUtils = {
 isEndish: isEndish,
 isMoveish: isMoveish,
 isStartish: isStartish,

 executeDirectDispatch: executeDirectDispatch,
 executeDispatchesInOrder: executeDispatchesInOrder,
 executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
 hasDispatches: hasDispatches,

 getInstanceFromNode: function (node) {
   return ComponentTree.getInstanceFromNode(node);
 },
 getNodeFromInstance: function (node) {
   return ComponentTree.getNodeFromInstance(node);
 },
 isAncestor: function (a, b) {
   return TreeTraversal.isAncestor(a, b);
 },
 getLowestCommonAncestor: function (a, b) {
   return TreeTraversal.getLowestCommonAncestor(a, b);
 },
 getParentInstance: function (inst) {
   return TreeTraversal.getParentInstance(inst);
 },
 traverseTwoPhase: function (target, fn, arg) {
   return TreeTraversal.traverseTwoPhase(target, fn, arg);
 },
 traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
   return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
 },

 injection: injection
};

module.exports = EventPluginUtils;
},{"15":15,"171":171,"181":181,"67":67}],19:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule EventPropagators
*/

'use strict';

var EventConstants = _dereq_(15);
var EventPluginHub = _dereq_(16);
var EventPluginUtils = _dereq_(18);

var accumulateInto = _dereq_(124);
var forEachAccumulated = _dereq_(132);
var warning = _dereq_(181);

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
* Some event types have a notion of different registration names for different
* "phases" of propagation. This finds listeners by a given phase.
*/
function listenerAtPhase(inst, event, propagationPhase) {
 var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
 return getListener(inst, registrationName);
}

/**
* Tags a `SyntheticEvent` with dispatched listeners. Creating this function
* here, allows us to not have to bind or create functions for each event.
* Mutating the event's members allows us to not have to create a wrapping
* "dispatch" object that pairs the event with the listener.
*/
function accumulateDirectionalDispatches(inst, upwards, event) {
 if ("development" !== 'production') {
   "development" !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
 }
 var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
 var listener = listenerAtPhase(inst, event, phase);
 if (listener) {
   event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
   event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
 }
}

/**
* Collect dispatches (must be entirely collected before dispatching - see unit
* tests). Lazily allocate the array to conserve memory.  We must loop through
* each event and perform the traversal for each one. We cannot perform a
* single traversal for the entire collection of events because each event may
* have a different target.
*/
function accumulateTwoPhaseDispatchesSingle(event) {
 if (event && event.dispatchConfig.phasedRegistrationNames) {
   EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
 }
}

/**
* Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
*/
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
 if (event && event.dispatchConfig.phasedRegistrationNames) {
   var targetInst = event._targetInst;
   var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
   EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
 }
}

/**
* Accumulates without regard to direction, does not look for phased
* registration names. Same as `accumulateDirectDispatchesSingle` but without
* requiring that the `dispatchMarker` be the same as the dispatched ID.
*/
function accumulateDispatches(inst, ignoredDirection, event) {
 if (event && event.dispatchConfig.registrationName) {
   var registrationName = event.dispatchConfig.registrationName;
   var listener = getListener(inst, registrationName);
   if (listener) {
     event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
     event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
   }
 }
}

/**
* Accumulates dispatches on an `SyntheticEvent`, but only for the
* `dispatchMarker`.
* @param {SyntheticEvent} event
*/
function accumulateDirectDispatchesSingle(event) {
 if (event && event.dispatchConfig.registrationName) {
   accumulateDispatches(event._targetInst, null, event);
 }
}

function accumulateTwoPhaseDispatches(events) {
 forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
 forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
 EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
 forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
* A small set of propagation patterns, each of which will accept a small amount
* of information, and generate a set of "dispatch ready event objects" - which
* are sets of events that have already been annotated with a set of dispatched
* listener functions/ids. The API is designed this way to discourage these
* propagation strategies from actually executing the dispatches, since we
* always want to collect the entire set of dispatches before executing event a
* single one.
*
* @constructor EventPropagators
*/
var EventPropagators = {
 accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
 accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
 accumulateDirectDispatches: accumulateDirectDispatches,
 accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
},{"124":124,"132":132,"15":15,"16":16,"18":18,"181":181}],20:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule FallbackCompositionState
*/

'use strict';

var _assign = _dereq_(182);

var PooledClass = _dereq_(24);

var getTextContentAccessor = _dereq_(140);

/**
* This helper class stores information about text content of a target node,
* allowing comparison of content before and after a given event.
*
* Identify the node where selection currently begins, then observe
* both its text content and its current position in the DOM. Since the
* browser may natively replace the target node during composition, we can
* use its position to find its replacement.
*
* @param {DOMEventTarget} root
*/
function FallbackCompositionState(root) {
 this._root = root;
 this._startText = this.getText();
 this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
 destructor: function () {
   this._root = null;
   this._startText = null;
   this._fallbackText = null;
 },

 /**
  * Get current text of input.
  *
  * @return {string}
  */
 getText: function () {
   if ('value' in this._root) {
     return this._root.value;
   }
   return this._root[getTextContentAccessor()];
 },

 /**
  * Determine the differing substring between the initially stored
  * text content and the current content.
  *
  * @return {string}
  */
 getData: function () {
   if (this._fallbackText) {
     return this._fallbackText;
   }

   var start;
   var startValue = this._startText;
   var startLength = startValue.length;
   var end;
   var endValue = this.getText();
   var endLength = endValue.length;

   for (start = 0; start < startLength; start++) {
     if (startValue[start] !== endValue[start]) {
       break;
     }
   }

   var minEnd = startLength - start;
   for (end = 1; end <= minEnd; end++) {
     if (startValue[startLength - end] !== endValue[endLength - end]) {
       break;
     }
   }

   var sliceTail = end > 1 ? 1 - end : undefined;
   this._fallbackText = endValue.slice(start, sliceTail);
   return this._fallbackText;
 }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"140":140,"182":182,"24":24}],21:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule HTMLDOMPropertyConfig
*/

'use strict';

var DOMProperty = _dereq_(10);

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
 isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
 Properties: {
   /**
    * Standard Properties
    */
   accept: 0,
   acceptCharset: 0,
   accessKey: 0,
   action: 0,
   allowFullScreen: HAS_BOOLEAN_VALUE,
   allowTransparency: 0,
   alt: 0,
   async: HAS_BOOLEAN_VALUE,
   autoComplete: 0,
   // autoFocus is polyfilled/normalized by AutoFocusUtils
   // autoFocus: HAS_BOOLEAN_VALUE,
   autoPlay: HAS_BOOLEAN_VALUE,
   capture: HAS_BOOLEAN_VALUE,
   cellPadding: 0,
   cellSpacing: 0,
   charSet: 0,
   challenge: 0,
   checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
   cite: 0,
   classID: 0,
   className: 0,
   cols: HAS_POSITIVE_NUMERIC_VALUE,
   colSpan: 0,
   content: 0,
   contentEditable: 0,
   contextMenu: 0,
   controls: HAS_BOOLEAN_VALUE,
   coords: 0,
   crossOrigin: 0,
   data: 0, // For `<object />` acts as `src`.
   dateTime: 0,
   'default': HAS_BOOLEAN_VALUE,
   defer: HAS_BOOLEAN_VALUE,
   dir: 0,
   disabled: HAS_BOOLEAN_VALUE,
   download: HAS_OVERLOADED_BOOLEAN_VALUE,
   draggable: 0,
   encType: 0,
   form: 0,
   formAction: 0,
   formEncType: 0,
   formMethod: 0,
   formNoValidate: HAS_BOOLEAN_VALUE,
   formTarget: 0,
   frameBorder: 0,
   headers: 0,
   height: 0,
   hidden: HAS_BOOLEAN_VALUE,
   high: 0,
   href: 0,
   hrefLang: 0,
   htmlFor: 0,
   httpEquiv: 0,
   icon: 0,
   id: 0,
   inputMode: 0,
   integrity: 0,
   is: 0,
   keyParams: 0,
   keyType: 0,
   kind: 0,
   label: 0,
   lang: 0,
   list: 0,
   loop: HAS_BOOLEAN_VALUE,
   low: 0,
   manifest: 0,
   marginHeight: 0,
   marginWidth: 0,
   max: 0,
   maxLength: 0,
   media: 0,
   mediaGroup: 0,
   method: 0,
   min: 0,
   minLength: 0,
   // Caution; `option.selected` is not updated if `select.multiple` is
   // disabled with `removeAttribute`.
   multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
   muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
   name: 0,
   nonce: 0,
   noValidate: HAS_BOOLEAN_VALUE,
   open: HAS_BOOLEAN_VALUE,
   optimum: 0,
   pattern: 0,
   placeholder: 0,
   poster: 0,
   preload: 0,
   profile: 0,
   radioGroup: 0,
   readOnly: HAS_BOOLEAN_VALUE,
   rel: 0,
   required: HAS_BOOLEAN_VALUE,
   reversed: HAS_BOOLEAN_VALUE,
   role: 0,
   rows: HAS_POSITIVE_NUMERIC_VALUE,
   rowSpan: HAS_NUMERIC_VALUE,
   sandbox: 0,
   scope: 0,
   scoped: HAS_BOOLEAN_VALUE,
   scrolling: 0,
   seamless: HAS_BOOLEAN_VALUE,
   selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
   shape: 0,
   size: HAS_POSITIVE_NUMERIC_VALUE,
   sizes: 0,
   span: HAS_POSITIVE_NUMERIC_VALUE,
   spellCheck: 0,
   src: 0,
   srcDoc: 0,
   srcLang: 0,
   srcSet: 0,
   start: HAS_NUMERIC_VALUE,
   step: 0,
   style: 0,
   summary: 0,
   tabIndex: 0,
   target: 0,
   title: 0,
   // Setting .type throws on non-<input> tags
   type: 0,
   useMap: 0,
   value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
   width: 0,
   wmode: 0,
   wrap: 0,

   /**
    * RDFa Properties
    */
   about: 0,
   datatype: 0,
   inlist: 0,
   prefix: 0,
   // property is also supported for OpenGraph in meta tags.
   property: 0,
   resource: 0,
   'typeof': 0,
   vocab: 0,

   /**
    * Non-standard Properties
    */
   // autoCapitalize and autoCorrect are supported in Mobile Safari for
   // keyboard hints.
   autoCapitalize: 0,
   autoCorrect: 0,
   // autoSave allows WebKit/Blink to persist values of input fields on page reloads
   autoSave: 0,
   // color is for Safari mask-icon link
   color: 0,
   // itemProp, itemScope, itemType are for
   // Microdata support. See http://schema.org/docs/gs.html
   itemProp: 0,
   itemScope: HAS_BOOLEAN_VALUE,
   itemType: 0,
   // itemID and itemRef are for Microdata support as well but
   // only specified in the WHATWG spec document. See
   // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
   itemID: 0,
   itemRef: 0,
   // results show looking glass icon and recent searches on input
   // search fields in WebKit/Blink
   results: 0,
   // IE-only attribute that specifies security restrictions on an iframe
   // as an alternative to the sandbox attribute on IE<10
   security: 0,
   // IE-only attribute that controls focus behavior
   unselectable: 0
 },
 DOMAttributeNames: {
   acceptCharset: 'accept-charset',
   className: 'class',
   htmlFor: 'for',
   httpEquiv: 'http-equiv'
 },
 DOMPropertyNames: {}
};

module.exports = HTMLDOMPropertyConfig;
},{"10":10}],22:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule LinkedStateMixin
*/

'use strict';

var ReactLink = _dereq_(77);
var ReactStateSetters = _dereq_(96);

/**
* A simple mixin around ReactLink.forState().
*/
var LinkedStateMixin = {
 /**
  * Create a ReactLink that's linked to part of this component's state. The
  * ReactLink will have the current value of this.state[key] and will call
  * setState() when a change is requested.
  *
  * @param {string} key state key to update. Note: you may want to use keyOf()
  * if you're using Google Closure Compiler advanced mode.
  * @return {ReactLink} ReactLink instance linking to the state.
  */
 linkState: function (key) {
   return new ReactLink(this.state[key], ReactStateSetters.createStateKeySetter(this, key));
 }
};

module.exports = LinkedStateMixin;
},{"77":77,"96":96}],23:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule LinkedValueUtils
*/

'use strict';

var ReactPropTypes = _dereq_(89);
var ReactPropTypeLocations = _dereq_(88);

var invariant = _dereq_(171);
var warning = _dereq_(181);

var hasReadOnlyValue = {
 'button': true,
 'checkbox': true,
 'image': true,
 'hidden': true,
 'radio': true,
 'reset': true,
 'submit': true
};

function _assertSingleLink(inputProps) {
 !(inputProps.checkedLink == null || inputProps.valueLink == null) ? "development" !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : void 0;
}
function _assertValueLink(inputProps) {
 _assertSingleLink(inputProps);
 !(inputProps.value == null && inputProps.onChange == null) ? "development" !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : void 0;
}

function _assertCheckedLink(inputProps) {
 _assertSingleLink(inputProps);
 !(inputProps.checked == null && inputProps.onChange == null) ? "development" !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : void 0;
}

var propTypes = {
 value: function (props, propName, componentName) {
   if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
     return null;
   }
   return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
 },
 checked: function (props, propName, componentName) {
   if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
     return null;
   }
   return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
 },
 onChange: ReactPropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
 if (owner) {
   var name = owner.getName();
   if (name) {
     return ' Check the render method of `' + name + '`.';
   }
 }
 return '';
}

/**
* Provide a linked `value` attribute for controlled forms. You should not use
* this outside of the ReactDOM controlled form components.
*/
var LinkedValueUtils = {
 checkPropTypes: function (tagName, props, owner) {
   for (var propName in propTypes) {
     if (propTypes.hasOwnProperty(propName)) {
       var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
     }
     if (error instanceof Error && !(error.message in loggedTypeFailures)) {
       // Only monitor this failure once because there tends to be a lot of the
       // same error.
       loggedTypeFailures[error.message] = true;

       var addendum = getDeclarationErrorAddendum(owner);
       "development" !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
     }
   }
 },

 /**
  * @param {object} inputProps Props for form component
  * @return {*} current value of the input either from value prop or link.
  */
 getValue: function (inputProps) {
   if (inputProps.valueLink) {
     _assertValueLink(inputProps);
     return inputProps.valueLink.value;
   }
   return inputProps.value;
 },

 /**
  * @param {object} inputProps Props for form component
  * @return {*} current checked status of the input either from checked prop
  *             or link.
  */
 getChecked: function (inputProps) {
   if (inputProps.checkedLink) {
     _assertCheckedLink(inputProps);
     return inputProps.checkedLink.value;
   }
   return inputProps.checked;
 },

 /**
  * @param {object} inputProps Props for form component
  * @param {SyntheticEvent} event change event to handle
  */
 executeOnChange: function (inputProps, event) {
   if (inputProps.valueLink) {
     _assertValueLink(inputProps);
     return inputProps.valueLink.requestChange(event.target.value);
   } else if (inputProps.checkedLink) {
     _assertCheckedLink(inputProps);
     return inputProps.checkedLink.requestChange(event.target.checked);
   } else if (inputProps.onChange) {
     return inputProps.onChange.call(undefined, event);
   }
 }
};

module.exports = LinkedValueUtils;
},{"171":171,"181":181,"88":88,"89":89}],24:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule PooledClass
*/

'use strict';

var invariant = _dereq_(171);

/**
* Static poolers. Several custom versions for each potential number of
* arguments. A completely generic pooler is easy to implement, but would
* require accessing the `arguments` object. In each of these, `this` refers to
* the Class itself, not an instance. If any others are needed, simply add them
* here, or in their own files.
*/
var oneArgumentPooler = function (copyFieldsFrom) {
 var Klass = this;
 if (Klass.instancePool.length) {
   var instance = Klass.instancePool.pop();
   Klass.call(instance, copyFieldsFrom);
   return instance;
 } else {
   return new Klass(copyFieldsFrom);
 }
};

var twoArgumentPooler = function (a1, a2) {
 var Klass = this;
 if (Klass.instancePool.length) {
   var instance = Klass.instancePool.pop();
   Klass.call(instance, a1, a2);
   return instance;
 } else {
   return new Klass(a1, a2);
 }
};

var threeArgumentPooler = function (a1, a2, a3) {
 var Klass = this;
 if (Klass.instancePool.length) {
   var instance = Klass.instancePool.pop();
   Klass.call(instance, a1, a2, a3);
   return instance;
 } else {
   return new Klass(a1, a2, a3);
 }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
 var Klass = this;
 if (Klass.instancePool.length) {
   var instance = Klass.instancePool.pop();
   Klass.call(instance, a1, a2, a3, a4);
   return instance;
 } else {
   return new Klass(a1, a2, a3, a4);
 }
};

var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
 var Klass = this;
 if (Klass.instancePool.length) {
   var instance = Klass.instancePool.pop();
   Klass.call(instance, a1, a2, a3, a4, a5);
   return instance;
 } else {
   return new Klass(a1, a2, a3, a4, a5);
 }
};

var standardReleaser = function (instance) {
 var Klass = this;
 !(instance instanceof Klass) ? "development" !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : void 0;
 instance.destructor();
 if (Klass.instancePool.length < Klass.poolSize) {
   Klass.instancePool.push(instance);
 }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
* Augments `CopyConstructor` to be a poolable class, augmenting only the class
* itself (statically) not adding any prototypical fields. Any CopyConstructor
* you give this may have a `poolSize` property, and will look for a
* prototypical `destructor` on instances (optional).
*
* @param {Function} CopyConstructor Constructor that can be used to reset.
* @param {Function} pooler Customizable pooler.
*/
var addPoolingTo = function (CopyConstructor, pooler) {
 var NewKlass = CopyConstructor;
 NewKlass.instancePool = [];
 NewKlass.getPooled = pooler || DEFAULT_POOLER;
 if (!NewKlass.poolSize) {
   NewKlass.poolSize = DEFAULT_POOL_SIZE;
 }
 NewKlass.release = standardReleaser;
 return NewKlass;
};

var PooledClass = {
 addPoolingTo: addPoolingTo,
 oneArgumentPooler: oneArgumentPooler,
 twoArgumentPooler: twoArgumentPooler,
 threeArgumentPooler: threeArgumentPooler,
 fourArgumentPooler: fourArgumentPooler,
 fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;
},{"171":171}],25:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule React
*/

'use strict';

var _assign = _dereq_(182);

var ReactChildren = _dereq_(30);
var ReactComponent = _dereq_(32);
var ReactClass = _dereq_(31);
var ReactDOMFactories = _dereq_(46);
var ReactElement = _dereq_(64);
var ReactElementValidator = _dereq_(65);
var ReactPropTypes = _dereq_(89);
var ReactVersion = _dereq_(103);

var onlyChild = _dereq_(145);
var warning = _dereq_(181);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if ("development" !== 'production') {
 createElement = ReactElementValidator.createElement;
 createFactory = ReactElementValidator.createFactory;
 cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;

if ("development" !== 'production') {
 var warned = false;
 __spread = function () {
   "development" !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
   warned = true;
   return _assign.apply(null, arguments);
 };
}

var React = {

 // Modern

 Children: {
   map: ReactChildren.map,
   forEach: ReactChildren.forEach,
   count: ReactChildren.count,
   toArray: ReactChildren.toArray,
   only: onlyChild
 },

 Component: ReactComponent,

 createElement: createElement,
 cloneElement: cloneElement,
 isValidElement: ReactElement.isValidElement,

 // Classic

 PropTypes: ReactPropTypes,
 createClass: ReactClass.createClass,
 createFactory: createFactory,
 createMixin: function (mixin) {
   // Currently a noop. Will be used to validate and trace mixins.
   return mixin;
 },

 // This looks DOM specific but these are actually isomorphic helpers
 // since they are just generating DOM strings.
 DOM: ReactDOMFactories,

 version: ReactVersion,

 // Deprecated hook for JSX spread, don't use this for anything.
 __spread: __spread
};

module.exports = React;
},{"103":103,"145":145,"181":181,"182":182,"30":30,"31":31,"32":32,"46":46,"64":64,"65":65,"89":89}],26:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactBrowserEventEmitter
*/

'use strict';

var _assign = _dereq_(182);

var EventConstants = _dereq_(15);
var EventPluginRegistry = _dereq_(17);
var ReactEventEmitterMixin = _dereq_(68);
var ViewportMetrics = _dereq_(123);

var getVendorPrefixedEventName = _dereq_(141);
var isEventSupported = _dereq_(143);

/**
* Summary of `ReactBrowserEventEmitter` event handling:
*
*  - Top-level delegation is used to trap most native browser events. This
*    may only occur in the main thread and is the responsibility of
*    ReactEventListener, which is injected and can therefore support pluggable
*    event sources. This is the only work that occurs in the main thread.
*
*  - We normalize and de-duplicate events to account for browser quirks. This
*    may be done in the worker thread.
*
*  - Forward these native events (with the associated top-level type used to
*    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
*    to extract any synthetic events.
*
*  - The `EventPluginHub` will then process each event by annotating them with
*    "dispatches", a sequence of listeners and IDs that care about that event.
*
*  - The `EventPluginHub` then dispatches the events.
*
* Overview of React and the event system:
*
* +------------+    .
* |    DOM     |    .
* +------------+    .
*       |           .
*       v           .
* +------------+    .
* | ReactEvent |    .
* |  Listener  |    .
* +------------+    .                         +-----------+
*       |           .               +--------+|SimpleEvent|
*       |           .               |         |Plugin     |
* +-----|------+    .               v         +-----------+
* |     |      |    .    +--------------+                    +------------+
* |     +-----------.--->|EventPluginHub|                    |    Event   |
* |            |    .    |              |     +-----------+  | Propagators|
* | ReactEvent |    .    |              |     |TapEvent   |  |------------|
* |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
* |            |    .    |              |     +-----------+  |  utilities |
* |     +-----------.--->|              |                    +------------+
* |     |      |    .    +--------------+
* +-----|------+    .                ^        +-----------+
*       |           .                |        |Enter/Leave|
*       +           .                +-------+|Plugin     |
* +-------------+   .                         +-----------+
* | application |   .
* |-------------|   .
* |             |   .
* |             |   .
* +-------------+   .
*                   .
*    React Core     .  General Purpose Event Plugin System
*/

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
 topAbort: 'abort',
 topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
 topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
 topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
 topBlur: 'blur',
 topCanPlay: 'canplay',
 topCanPlayThrough: 'canplaythrough',
 topChange: 'change',
 topClick: 'click',
 topCompositionEnd: 'compositionend',
 topCompositionStart: 'compositionstart',
 topCompositionUpdate: 'compositionupdate',
 topContextMenu: 'contextmenu',
 topCopy: 'copy',
 topCut: 'cut',
 topDoubleClick: 'dblclick',
 topDrag: 'drag',
 topDragEnd: 'dragend',
 topDragEnter: 'dragenter',
 topDragExit: 'dragexit',
 topDragLeave: 'dragleave',
 topDragOver: 'dragover',
 topDragStart: 'dragstart',
 topDrop: 'drop',
 topDurationChange: 'durationchange',
 topEmptied: 'emptied',
 topEncrypted: 'encrypted',
 topEnded: 'ended',
 topError: 'error',
 topFocus: 'focus',
 topInput: 'input',
 topKeyDown: 'keydown',
 topKeyPress: 'keypress',
 topKeyUp: 'keyup',
 topLoadedData: 'loadeddata',
 topLoadedMetadata: 'loadedmetadata',
 topLoadStart: 'loadstart',
 topMouseDown: 'mousedown',
 topMouseMove: 'mousemove',
 topMouseOut: 'mouseout',
 topMouseOver: 'mouseover',
 topMouseUp: 'mouseup',
 topPaste: 'paste',
 topPause: 'pause',
 topPlay: 'play',
 topPlaying: 'playing',
 topProgress: 'progress',
 topRateChange: 'ratechange',
 topScroll: 'scroll',
 topSeeked: 'seeked',
 topSeeking: 'seeking',
 topSelectionChange: 'selectionchange',
 topStalled: 'stalled',
 topSuspend: 'suspend',
 topTextInput: 'textInput',
 topTimeUpdate: 'timeupdate',
 topTouchCancel: 'touchcancel',
 topTouchEnd: 'touchend',
 topTouchMove: 'touchmove',
 topTouchStart: 'touchstart',
 topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
 topVolumeChange: 'volumechange',
 topWaiting: 'waiting',
 topWheel: 'wheel'
};

/**
* To ensure no conflicts with other potential React instances on the page
*/
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
 // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
 // directly.
 if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
   mountAt[topListenersIDKey] = reactTopListenersCounter++;
   alreadyListeningTo[mountAt[topListenersIDKey]] = {};
 }
 return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
* `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
* example:
*
*   EventPluginHub.putListener('myID', 'onClick', myFunction);
*
* This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
*
* @internal
*/
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

 /**
  * Injectable event backend
  */
 ReactEventListener: null,

 injection: {
   /**
    * @param {object} ReactEventListener
    */
   injectReactEventListener: function (ReactEventListener) {
     ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
     ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
   }
 },

 /**
  * Sets whether or not any created callbacks should be enabled.
  *
  * @param {boolean} enabled True if callbacks should be enabled.
  */
 setEnabled: function (enabled) {
   if (ReactBrowserEventEmitter.ReactEventListener) {
     ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
   }
 },

 /**
  * @return {boolean} True if callbacks are enabled.
  */
 isEnabled: function () {
   return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
 },

 /**
  * We listen for bubbled touch events on the document object.
  *
  * Firefox v8.01 (and possibly others) exhibited strange behavior when
  * mounting `onmousemove` events at some node that was not the document
  * element. The symptoms were that if your mouse is not moving over something
  * contained within that mount point (for example on the background) the
  * top-level listeners for `onmousemove` won't be called. However, if you
  * register the `mousemove` on the document object, then it will of course
  * catch all `mousemove`s. This along with iOS quirks, justifies restricting
  * top-level listeners to the document object only, at least for these
  * movement types of events and possibly all events.
  *
  * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  *
  * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
  * they bubble to document.
  *
  * @param {string} registrationName Name of listener (e.g. `onClick`).
  * @param {object} contentDocumentHandle Document which owns the container
  */
 listenTo: function (registrationName, contentDocumentHandle) {
   var mountAt = contentDocumentHandle;
   var isListening = getListeningForDocument(mountAt);
   var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

   var topLevelTypes = EventConstants.topLevelTypes;
   for (var i = 0; i < dependencies.length; i++) {
     var dependency = dependencies[i];
     if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
       if (dependency === topLevelTypes.topWheel) {
         if (isEventSupported('wheel')) {
           ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
         } else if (isEventSupported('mousewheel')) {
           ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
         } else {
           // Firefox needs to capture a different mouse scroll event.
           // @see http://www.quirksmode.org/dom/events/tests/scroll.html
           ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
         }
       } else if (dependency === topLevelTypes.topScroll) {

         if (isEventSupported('scroll', true)) {
           ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
         } else {
           ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
         }
       } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

         if (isEventSupported('focus', true)) {
           ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
           ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
         } else if (isEventSupported('focusin')) {
           // IE has `focusin` and `focusout` events which bubble.
           // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
           ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
           ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
         }

         // to make sure blur and focus event listeners are only attached once
         isListening[topLevelTypes.topBlur] = true;
         isListening[topLevelTypes.topFocus] = true;
       } else if (topEventMapping.hasOwnProperty(dependency)) {
         ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
       }

       isListening[dependency] = true;
     }
   }
 },

 trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
   return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
 },

 trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
   return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
 },

 /**
  * Listens to window scroll and resize events. We cache scroll values so that
  * application code can access them without triggering reflows.
  *
  * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
  * pageX/pageY isn't supported (legacy browsers).
  *
  * NOTE: Scroll events do not bubble.
  *
  * @see http://www.quirksmode.org/dom/events/scroll.html
  */
 ensureScrollValueMonitoring: function () {
   if (hasEventPageXY === undefined) {
     hasEventPageXY = document.createEvent && 'pageX' in document.createEvent('MouseEvent');
   }
   if (!hasEventPageXY && !isMonitoringScrollValue) {
     var refresh = ViewportMetrics.refreshScrollValues;
     ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
     isMonitoringScrollValue = true;
   }
 }

});

module.exports = ReactBrowserEventEmitter;
},{"123":123,"141":141,"143":143,"15":15,"17":17,"182":182,"68":68}],27:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactCSSTransitionGroup
*/

'use strict';

var _assign = _dereq_(182);

var React = _dereq_(25);

var ReactTransitionGroup = _dereq_(100);
var ReactCSSTransitionGroupChild = _dereq_(28);

function createTransitionTimeoutPropValidator(transitionType) {
 var timeoutPropName = 'transition' + transitionType + 'Timeout';
 var enabledPropName = 'transition' + transitionType;

 return function (props) {
   // If the transition is enabled
   if (props[enabledPropName]) {
     // If no timeout duration is provided
     if (props[timeoutPropName] == null) {
       return new Error(timeoutPropName + ' wasn\'t supplied to ReactCSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.');

       // If the duration isn't a number
     } else if (typeof props[timeoutPropName] !== 'number') {
         return new Error(timeoutPropName + ' must be a number (in milliseconds)');
       }
   }
 };
}

var ReactCSSTransitionGroup = React.createClass({
 displayName: 'ReactCSSTransitionGroup',

 propTypes: {
   transitionName: ReactCSSTransitionGroupChild.propTypes.name,

   transitionAppear: React.PropTypes.bool,
   transitionEnter: React.PropTypes.bool,
   transitionLeave: React.PropTypes.bool,
   transitionAppearTimeout: createTransitionTimeoutPropValidator('Appear'),
   transitionEnterTimeout: createTransitionTimeoutPropValidator('Enter'),
   transitionLeaveTimeout: createTransitionTimeoutPropValidator('Leave')
 },

 getDefaultProps: function () {
   return {
     transitionAppear: false,
     transitionEnter: true,
     transitionLeave: true
   };
 },

 _wrapChild: function (child) {
   // We need to provide this childFactory so that
   // ReactCSSTransitionGroupChild can receive updates to name, enter, and
   // leave while it is leaving.
   return React.createElement(ReactCSSTransitionGroupChild, {
     name: this.props.transitionName,
     appear: this.props.transitionAppear,
     enter: this.props.transitionEnter,
     leave: this.props.transitionLeave,
     appearTimeout: this.props.transitionAppearTimeout,
     enterTimeout: this.props.transitionEnterTimeout,
     leaveTimeout: this.props.transitionLeaveTimeout
   }, child);
 },

 render: function () {
   return React.createElement(ReactTransitionGroup, _assign({}, this.props, { childFactory: this._wrapChild }));
 }
});

module.exports = ReactCSSTransitionGroup;
},{"100":100,"182":182,"25":25,"28":28}],28:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactCSSTransitionGroupChild
*/

'use strict';

var React = _dereq_(25);
var ReactDOM = _dereq_(38);

var CSSCore = _dereq_(155);
var ReactTransitionEvents = _dereq_(99);

var onlyChild = _dereq_(145);

var TICK = 17;

var ReactCSSTransitionGroupChild = React.createClass({
 displayName: 'ReactCSSTransitionGroupChild',

 propTypes: {
   name: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.shape({
     enter: React.PropTypes.string,
     leave: React.PropTypes.string,
     active: React.PropTypes.string
   }), React.PropTypes.shape({
     enter: React.PropTypes.string,
     enterActive: React.PropTypes.string,
     leave: React.PropTypes.string,
     leaveActive: React.PropTypes.string,
     appear: React.PropTypes.string,
     appearActive: React.PropTypes.string
   })]).isRequired,

   // Once we require timeouts to be specified, we can remove the
   // boolean flags (appear etc.) and just accept a number
   // or a bool for the timeout flags (appearTimeout etc.)
   appear: React.PropTypes.bool,
   enter: React.PropTypes.bool,
   leave: React.PropTypes.bool,
   appearTimeout: React.PropTypes.number,
   enterTimeout: React.PropTypes.number,
   leaveTimeout: React.PropTypes.number
 },

 transition: function (animationType, finishCallback, userSpecifiedDelay) {
   var node = ReactDOM.findDOMNode(this);

   if (!node) {
     if (finishCallback) {
       finishCallback();
     }
     return;
   }

   var className = this.props.name[animationType] || this.props.name + '-' + animationType;
   var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';
   var timeout = null;

   var endListener = function (e) {
     if (e && e.target !== node) {
       return;
     }

     clearTimeout(timeout);

     CSSCore.removeClass(node, className);
     CSSCore.removeClass(node, activeClassName);

     ReactTransitionEvents.removeEndEventListener(node, endListener);

     // Usually this optional callback is used for informing an owner of
     // a leave animation and telling it to remove the child.
     if (finishCallback) {
       finishCallback();
     }
   };

   CSSCore.addClass(node, className);

   // Need to do this to actually trigger a transition.
   this.queueClass(activeClassName);

   // If the user specified a timeout delay.
   if (userSpecifiedDelay) {
     // Clean-up the animation after the specified delay
     timeout = setTimeout(endListener, userSpecifiedDelay);
     this.transitionTimeouts.push(timeout);
   } else {
     // DEPRECATED: this listener will be removed in a future version of react
     ReactTransitionEvents.addEndEventListener(node, endListener);
   }
 },

 queueClass: function (className) {
   this.classNameQueue.push(className);

   if (!this.timeout) {
     this.timeout = setTimeout(this.flushClassNameQueue, TICK);
   }
 },

 flushClassNameQueue: function () {
   if (this.isMounted()) {
     this.classNameQueue.forEach(CSSCore.addClass.bind(CSSCore, ReactDOM.findDOMNode(this)));
   }
   this.classNameQueue.length = 0;
   this.timeout = null;
 },

 componentWillMount: function () {
   this.classNameQueue = [];
   this.transitionTimeouts = [];
 },

 componentWillUnmount: function () {
   if (this.timeout) {
     clearTimeout(this.timeout);
   }
   this.transitionTimeouts.forEach(function (timeout) {
     clearTimeout(timeout);
   });
 },

 componentWillAppear: function (done) {
   if (this.props.appear) {
     this.transition('appear', done, this.props.appearTimeout);
   } else {
     done();
   }
 },

 componentWillEnter: function (done) {
   if (this.props.enter) {
     this.transition('enter', done, this.props.enterTimeout);
   } else {
     done();
   }
 },

 componentWillLeave: function (done) {
   if (this.props.leave) {
     this.transition('leave', done, this.props.leaveTimeout);
   } else {
     done();
   }
 },

 render: function () {
   return onlyChild(this.props.children);
 }
});

module.exports = ReactCSSTransitionGroupChild;
},{"145":145,"155":155,"25":25,"38":38,"99":99}],29:[function(_dereq_,module,exports){
/**
* Copyright 2014-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactChildReconciler
*/

'use strict';

var ReactReconciler = _dereq_(91);

var instantiateReactComponent = _dereq_(142);
var shouldUpdateReactComponent = _dereq_(151);
var traverseAllChildren = _dereq_(152);
var warning = _dereq_(181);

function instantiateChild(childInstances, child, name) {
 // We found a component instance.
 var keyUnique = childInstances[name] === undefined;
 if ("development" !== 'production') {
   "development" !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : void 0;
 }
 if (child != null && keyUnique) {
   childInstances[name] = instantiateReactComponent(child);
 }
}

/**
* ReactChildReconciler provides helpers for initializing or updating a set of
* children. Its output is suitable for passing it onto ReactMultiChild which
* does diffed reordering and insertion.
*/
var ReactChildReconciler = {
 /**
  * Generates a "mount image" for each of the supplied children. In the case
  * of `ReactDOMComponent`, a mount image is a string of markup.
  *
  * @param {?object} nestedChildNodes Nested child maps.
  * @return {?object} A set of child instances.
  * @internal
  */
 instantiateChildren: function (nestedChildNodes, transaction, context) {
   if (nestedChildNodes == null) {
     return null;
   }
   var childInstances = {};
   traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
   return childInstances;
 },

 /**
  * Updates the rendered children and returns a new set of children.
  *
  * @param {?object} prevChildren Previously initialized set of children.
  * @param {?object} nextChildren Flat child element maps.
  * @param {ReactReconcileTransaction} transaction
  * @param {object} context
  * @return {?object} A new set of child instances.
  * @internal
  */
 updateChildren: function (prevChildren, nextChildren, removedNodes, transaction, context) {
   // We currently don't have a way to track moves here but if we use iterators
   // instead of for..in we can zip the iterators and check if an item has
   // moved.
   // TODO: If nothing has changed, return the prevChildren object so that we
   // can quickly bailout if nothing has changed.
   if (!nextChildren && !prevChildren) {
     return;
   }
   var name;
   var prevChild;
   for (name in nextChildren) {
     if (!nextChildren.hasOwnProperty(name)) {
       continue;
     }
     prevChild = prevChildren && prevChildren[name];
     var prevElement = prevChild && prevChild._currentElement;
     var nextElement = nextChildren[name];
     if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
       ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
       nextChildren[name] = prevChild;
     } else {
       if (prevChild) {
         removedNodes[name] = ReactReconciler.getNativeNode(prevChild);
         ReactReconciler.unmountComponent(prevChild, false);
       }
       // The child must be instantiated before it's mounted.
       var nextChildInstance = instantiateReactComponent(nextElement);
       nextChildren[name] = nextChildInstance;
     }
   }
   // Unmount children that are no longer present.
   for (name in prevChildren) {
     if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
       prevChild = prevChildren[name];
       removedNodes[name] = ReactReconciler.getNativeNode(prevChild);
       ReactReconciler.unmountComponent(prevChild, false);
     }
   }
 },

 /**
  * Unmounts all rendered children. This should be used to clean up children
  * when this component is unmounted.
  *
  * @param {?object} renderedChildren Previously initialized set of children.
  * @internal
  */
 unmountChildren: function (renderedChildren, safely) {
   for (var name in renderedChildren) {
     if (renderedChildren.hasOwnProperty(name)) {
       var renderedChild = renderedChildren[name];
       ReactReconciler.unmountComponent(renderedChild, safely);
     }
   }
 }

};

module.exports = ReactChildReconciler;
},{"142":142,"151":151,"152":152,"181":181,"91":91}],30:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactChildren
*/

'use strict';

var PooledClass = _dereq_(24);
var ReactElement = _dereq_(64);

var emptyFunction = _dereq_(163);
var traverseAllChildren = _dereq_(152);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
 return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
* PooledClass representing the bookkeeping associated with performing a child
* traversal. Allows avoiding binding callbacks.
*
* @constructor ForEachBookKeeping
* @param {!function} forEachFunction Function to perform traversal with.
* @param {?*} forEachContext Context to perform context with.
*/
function ForEachBookKeeping(forEachFunction, forEachContext) {
 this.func = forEachFunction;
 this.context = forEachContext;
 this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
 this.func = null;
 this.context = null;
 this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
 var func = bookKeeping.func;
 var context = bookKeeping.context;

 func.call(context, child, bookKeeping.count++);
}

/**
* Iterates through children that are typically specified as `props.children`.
*
* The provided forEachFunc(child, index) will be called for each
* leaf child.
*
* @param {?*} children Children tree container.
* @param {function(*, int)} forEachFunc
* @param {*} forEachContext Context for forEachContext.
*/
function forEachChildren(children, forEachFunc, forEachContext) {
 if (children == null) {
   return children;
 }
 var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
 traverseAllChildren(children, forEachSingleChild, traverseContext);
 ForEachBookKeeping.release(traverseContext);
}

/**
* PooledClass representing the bookkeeping associated with performing a child
* mapping. Allows avoiding binding callbacks.
*
* @constructor MapBookKeeping
* @param {!*} mapResult Object containing the ordered map of results.
* @param {!function} mapFunction Function to perform mapping with.
* @param {?*} mapContext Context to perform mapping with.
*/
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
 this.result = mapResult;
 this.keyPrefix = keyPrefix;
 this.func = mapFunction;
 this.context = mapContext;
 this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
 this.result = null;
 this.keyPrefix = null;
 this.func = null;
 this.context = null;
 this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
 var result = bookKeeping.result;
 var keyPrefix = bookKeeping.keyPrefix;
 var func = bookKeeping.func;
 var context = bookKeeping.context;


 var mappedChild = func.call(context, child, bookKeeping.count++);
 if (Array.isArray(mappedChild)) {
   mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
 } else if (mappedChild != null) {
   if (ReactElement.isValidElement(mappedChild)) {
     mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
     // Keep both the (mapped) and old keys if they differ, just as
     // traverseAllChildren used to do for objects as children
     keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
   }
   result.push(mappedChild);
 }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
 var escapedPrefix = '';
 if (prefix != null) {
   escapedPrefix = escapeUserProvidedKey(prefix) + '/';
 }
 var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
 traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
 MapBookKeeping.release(traverseContext);
}

/**
* Maps children that are typically specified as `props.children`.
*
* The provided mapFunction(child, key, index) will be called for each
* leaf child.
*
* @param {?*} children Children tree container.
* @param {function(*, int)} func The map function.
* @param {*} context Context for mapFunction.
* @return {object} Object containing the ordered map of results.
*/
function mapChildren(children, func, context) {
 if (children == null) {
   return children;
 }
 var result = [];
 mapIntoWithKeyPrefixInternal(children, result, null, func, context);
 return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
 return null;
}

/**
* Count the number of children that are typically specified as
* `props.children`.
*
* @param {?*} children Children tree container.
* @return {number} The number of children.
*/
function countChildren(children, context) {
 return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
* Flatten a children object (typically specified as `props.children`) and
* return an array with appropriately re-keyed children.
*/
function toArray(children) {
 var result = [];
 mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
 return result;
}

var ReactChildren = {
 forEach: forEachChildren,
 map: mapChildren,
 mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
 count: countChildren,
 toArray: toArray
};

module.exports = ReactChildren;
},{"152":152,"163":163,"24":24,"64":64}],31:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactClass
*/

'use strict';

var _assign = _dereq_(182);

var ReactComponent = _dereq_(32);
var ReactElement = _dereq_(64);
var ReactPropTypeLocations = _dereq_(88);
var ReactPropTypeLocationNames = _dereq_(87);
var ReactNoopUpdateQueue = _dereq_(84);

var emptyObject = _dereq_(164);
var invariant = _dereq_(171);
var keyMirror = _dereq_(174);
var keyOf = _dereq_(175);
var warning = _dereq_(181);

var MIXINS_KEY = keyOf({ mixins: null });

/**
* Policies that describe methods in `ReactClassInterface`.
*/
var SpecPolicy = keyMirror({
 /**
  * These methods may be defined only once by the class specification or mixin.
  */
 DEFINE_ONCE: null,
 /**
  * These methods may be defined by both the class specification and mixins.
  * Subsequent definitions will be chained. These methods must return void.
  */
 DEFINE_MANY: null,
 /**
  * These methods are overriding the base class.
  */
 OVERRIDE_BASE: null,
 /**
  * These methods are similar to DEFINE_MANY, except we assume they return
  * objects. We try to merge the keys of the return values of all the mixed in
  * functions. If there is a key conflict we throw.
  */
 DEFINE_MANY_MERGED: null
});

var injectedMixins = [];

/**
* Composite components are higher-level components that compose other composite
* or native components.
*
* To create a new type of `ReactClass`, pass a specification of
* your new class to `React.createClass`. The only requirement of your class
* specification is that you implement a `render` method.
*
*   var MyComponent = React.createClass({
*     render: function() {
*       return <div>Hello World</div>;
*     }
*   });
*
* The class specification supports a specific protocol of methods that have
* special meaning (e.g. `render`). See `ReactClassInterface` for
* more the comprehensive protocol. Any other properties and methods in the
* class specification will be available on the prototype.
*
* @interface ReactClassInterface
* @internal
*/
var ReactClassInterface = {

 /**
  * An array of Mixin objects to include when defining your component.
  *
  * @type {array}
  * @optional
  */
 mixins: SpecPolicy.DEFINE_MANY,

 /**
  * An object containing properties and methods that should be defined on
  * the component's constructor instead of its prototype (static methods).
  *
  * @type {object}
  * @optional
  */
 statics: SpecPolicy.DEFINE_MANY,

 /**
  * Definition of prop types for this component.
  *
  * @type {object}
  * @optional
  */
 propTypes: SpecPolicy.DEFINE_MANY,

 /**
  * Definition of context types for this component.
  *
  * @type {object}
  * @optional
  */
 contextTypes: SpecPolicy.DEFINE_MANY,

 /**
  * Definition of context types this component sets for its children.
  *
  * @type {object}
  * @optional
  */
 childContextTypes: SpecPolicy.DEFINE_MANY,

 // ==== Definition methods ====

 /**
  * Invoked when the component is mounted. Values in the mapping will be set on
  * `this.props` if that prop is not specified (i.e. using an `in` check).
  *
  * This method is invoked before `getInitialState` and therefore cannot rely
  * on `this.state` or use `this.setState`.
  *
  * @return {object}
  * @optional
  */
 getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

 /**
  * Invoked once before the component is mounted. The return value will be used
  * as the initial value of `this.state`.
  *
  *   getInitialState: function() {
  *     return {
  *       isOn: false,
  *       fooBaz: new BazFoo()
  *     }
  *   }
  *
  * @return {object}
  * @optional
  */
 getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

 /**
  * @return {object}
  * @optional
  */
 getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

 /**
  * Uses props from `this.props` and state from `this.state` to render the
  * structure of the component.
  *
  * No guarantees are made about when or how often this method is invoked, so
  * it must not have side effects.
  *
  *   render: function() {
  *     var name = this.props.name;
  *     return <div>Hello, {name}!</div>;
  *   }
  *
  * @return {ReactComponent}
  * @nosideeffects
  * @required
  */
 render: SpecPolicy.DEFINE_ONCE,

 // ==== Delegate methods ====

 /**
  * Invoked when the component is initially created and about to be mounted.
  * This may have side effects, but any external subscriptions or data created
  * by this method must be cleaned up in `componentWillUnmount`.
  *
  * @optional
  */
 componentWillMount: SpecPolicy.DEFINE_MANY,

 /**
  * Invoked when the component has been mounted and has a DOM representation.
  * However, there is no guarantee that the DOM node is in the document.
  *
  * Use this as an opportunity to operate on the DOM when the component has
  * been mounted (initialized and rendered) for the first time.
  *
  * @param {DOMElement} rootNode DOM element representing the component.
  * @optional
  */
 componentDidMount: SpecPolicy.DEFINE_MANY,

 /**
  * Invoked before the component receives new props.
  *
  * Use this as an opportunity to react to a prop transition by updating the
  * state using `this.setState`. Current props are accessed via `this.props`.
  *
  *   componentWillReceiveProps: function(nextProps, nextContext) {
  *     this.setState({
  *       likesIncreasing: nextProps.likeCount > this.props.likeCount
  *     });
  *   }
  *
  * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
  * transition may cause a state change, but the opposite is not true. If you
  * need it, you are probably looking for `componentWillUpdate`.
  *
  * @param {object} nextProps
  * @optional
  */
 componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

 /**
  * Invoked while deciding if the component should be updated as a result of
  * receiving new props, state and/or context.
  *
  * Use this as an opportunity to `return false` when you're certain that the
  * transition to the new props/state/context will not require a component
  * update.
  *
  *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
  *     return !equal(nextProps, this.props) ||
  *       !equal(nextState, this.state) ||
  *       !equal(nextContext, this.context);
  *   }
  *
  * @param {object} nextProps
  * @param {?object} nextState
  * @param {?object} nextContext
  * @return {boolean} True if the component should update.
  * @optional
  */
 shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

 /**
  * Invoked when the component is about to update due to a transition from
  * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
  * and `nextContext`.
  *
  * Use this as an opportunity to perform preparation before an update occurs.
  *
  * NOTE: You **cannot** use `this.setState()` in this method.
  *
  * @param {object} nextProps
  * @param {?object} nextState
  * @param {?object} nextContext
  * @param {ReactReconcileTransaction} transaction
  * @optional
  */
 componentWillUpdate: SpecPolicy.DEFINE_MANY,

 /**
  * Invoked when the component's DOM representation has been updated.
  *
  * Use this as an opportunity to operate on the DOM when the component has
  * been updated.
  *
  * @param {object} prevProps
  * @param {?object} prevState
  * @param {?object} prevContext
  * @param {DOMElement} rootNode DOM element representing the component.
  * @optional
  */
 componentDidUpdate: SpecPolicy.DEFINE_MANY,

 /**
  * Invoked when the component is about to be removed from its parent and have
  * its DOM representation destroyed.
  *
  * Use this as an opportunity to deallocate any external resources.
  *
  * NOTE: There is no `componentDidUnmount` since your component will have been
  * destroyed by that point.
  *
  * @optional
  */
 componentWillUnmount: SpecPolicy.DEFINE_MANY,

 // ==== Advanced methods ====

 /**
  * Updates the component's currently mounted DOM representation.
  *
  * By default, this implements React's rendering and reconciliation algorithm.
  * Sophisticated clients may wish to override this.
  *
  * @param {ReactReconcileTransaction} transaction
  * @internal
  * @overridable
  */
 updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
* Mapping from class specification keys to special processing functions.
*
* Although these are declared like instance properties in the specification
* when defining classes using `React.createClass`, they are actually static
* and are accessible on the constructor instead of the prototype. Despite
* being static, they must be defined outside of the "statics" key under
* which all other static methods are defined.
*/
var RESERVED_SPEC_KEYS = {
 displayName: function (Constructor, displayName) {
   Constructor.displayName = displayName;
 },
 mixins: function (Constructor, mixins) {
   if (mixins) {
     for (var i = 0; i < mixins.length; i++) {
       mixSpecIntoComponent(Constructor, mixins[i]);
     }
   }
 },
 childContextTypes: function (Constructor, childContextTypes) {
   if ("development" !== 'production') {
     validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
   }
   Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
 },
 contextTypes: function (Constructor, contextTypes) {
   if ("development" !== 'production') {
     validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
   }
   Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
 },
 /**
  * Special case getDefaultProps which should move into statics but requires
  * automatic merging.
  */
 getDefaultProps: function (Constructor, getDefaultProps) {
   if (Constructor.getDefaultProps) {
     Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
   } else {
     Constructor.getDefaultProps = getDefaultProps;
   }
 },
 propTypes: function (Constructor, propTypes) {
   if ("development" !== 'production') {
     validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
   }
   Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
 },
 statics: function (Constructor, statics) {
   mixStaticSpecIntoComponent(Constructor, statics);
 },
 autobind: function () {} };

// noop
function validateTypeDef(Constructor, typeDef, location) {
 for (var propName in typeDef) {
   if (typeDef.hasOwnProperty(propName)) {
     // use a warning instead of an invariant so components
     // don't show up in prod but only in __DEV__
     "development" !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
   }
 }
}

function validateMethodOverride(isAlreadyDefined, name) {
 var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

 // Disallow overriding of base class methods unless explicitly allowed.
 if (ReactClassMixin.hasOwnProperty(name)) {
   !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? "development" !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : void 0;
 }

 // Disallow defining methods more than once unless explicitly allowed.
 if (isAlreadyDefined) {
   !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? "development" !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : void 0;
 }
}

/**
* Mixin helper which handles policy validation and reserved
* specification keys when building React classes.
*/
function mixSpecIntoComponent(Constructor, spec) {
 if (!spec) {
   return;
 }

 !(typeof spec !== 'function') ? "development" !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.') : invariant(false) : void 0;
 !!ReactElement.isValidElement(spec) ? "development" !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : void 0;

 var proto = Constructor.prototype;
 var autoBindPairs = proto.__reactAutoBindPairs;

 // By handling mixins before any other properties, we ensure the same
 // chaining order is applied to methods with DEFINE_MANY policy, whether
 // mixins are listed before or after these methods in the spec.
 if (spec.hasOwnProperty(MIXINS_KEY)) {
   RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
 }

 for (var name in spec) {
   if (!spec.hasOwnProperty(name)) {
     continue;
   }

   if (name === MIXINS_KEY) {
     // We have already handled mixins in a special case above.
     continue;
   }

   var property = spec[name];
   var isAlreadyDefined = proto.hasOwnProperty(name);
   validateMethodOverride(isAlreadyDefined, name);

   if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
     RESERVED_SPEC_KEYS[name](Constructor, property);
   } else {
     // Setup methods on prototype:
     // The following member methods should not be automatically bound:
     // 1. Expected ReactClass methods (in the "interface").
     // 2. Overridden methods (that were mixed in).
     var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
     var isFunction = typeof property === 'function';
     var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

     if (shouldAutoBind) {
       autoBindPairs.push(name, property);
       proto[name] = property;
     } else {
       if (isAlreadyDefined) {
         var specPolicy = ReactClassInterface[name];

         // These cases should already be caught by validateMethodOverride.
         !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? "development" !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : void 0;

         // For methods which are defined more than once, call the existing
         // methods before calling the new property, merging if appropriate.
         if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
           proto[name] = createMergedResultFunction(proto[name], property);
         } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
           proto[name] = createChainedFunction(proto[name], property);
         }
       } else {
         proto[name] = property;
         if ("development" !== 'production') {
           // Add verbose displayName to the function, which helps when looking
           // at profiling tools.
           if (typeof property === 'function' && spec.displayName) {
             proto[name].displayName = spec.displayName + '_' + name;
           }
         }
       }
     }
   }
 }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
 if (!statics) {
   return;
 }
 for (var name in statics) {
   var property = statics[name];
   if (!statics.hasOwnProperty(name)) {
     continue;
   }

   var isReserved = name in RESERVED_SPEC_KEYS;
   !!isReserved ? "development" !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : void 0;

   var isInherited = name in Constructor;
   !!isInherited ? "development" !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : void 0;
   Constructor[name] = property;
 }
}

/**
* Merge two objects, but throw if both contain the same key.
*
* @param {object} one The first object, which is mutated.
* @param {object} two The second object
* @return {object} one after it has been mutated to contain everything in two.
*/
function mergeIntoWithNoDuplicateKeys(one, two) {
 !(one && two && typeof one === 'object' && typeof two === 'object') ? "development" !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : void 0;

 for (var key in two) {
   if (two.hasOwnProperty(key)) {
     !(one[key] === undefined) ? "development" !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : void 0;
     one[key] = two[key];
   }
 }
 return one;
}

/**
* Creates a function that invokes two functions and merges their return values.
*
* @param {function} one Function to invoke first.
* @param {function} two Function to invoke second.
* @return {function} Function that invokes the two argument functions.
* @private
*/
function createMergedResultFunction(one, two) {
 return function mergedResult() {
   var a = one.apply(this, arguments);
   var b = two.apply(this, arguments);
   if (a == null) {
     return b;
   } else if (b == null) {
     return a;
   }
   var c = {};
   mergeIntoWithNoDuplicateKeys(c, a);
   mergeIntoWithNoDuplicateKeys(c, b);
   return c;
 };
}

/**
* Creates a function that invokes two functions and ignores their return vales.
*
* @param {function} one Function to invoke first.
* @param {function} two Function to invoke second.
* @return {function} Function that invokes the two argument functions.
* @private
*/
function createChainedFunction(one, two) {
 return function chainedFunction() {
   one.apply(this, arguments);
   two.apply(this, arguments);
 };
}

/**
* Binds a method to the component.
*
* @param {object} component Component whose method is going to be bound.
* @param {function} method Method to be bound.
* @return {function} The bound method.
*/
function bindAutoBindMethod(component, method) {
 var boundMethod = method.bind(component);
 if ("development" !== 'production') {
   boundMethod.__reactBoundContext = component;
   boundMethod.__reactBoundMethod = method;
   boundMethod.__reactBoundArguments = null;
   var componentName = component.constructor.displayName;
   var _bind = boundMethod.bind;
   boundMethod.bind = function (newThis) {
     for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
       args[_key - 1] = arguments[_key];
     }

     // User is trying to bind() an autobound method; we effectively will
     // ignore the value of "this" that the user is trying to use, so
     // let's warn.
     if (newThis !== component && newThis !== null) {
       "development" !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
     } else if (!args.length) {
       "development" !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
       return boundMethod;
     }
     var reboundMethod = _bind.apply(boundMethod, arguments);
     reboundMethod.__reactBoundContext = component;
     reboundMethod.__reactBoundMethod = method;
     reboundMethod.__reactBoundArguments = args;
     return reboundMethod;
   };
 }
 return boundMethod;
}

/**
* Binds all auto-bound methods in a component.
*
* @param {object} component Component whose method is going to be bound.
*/
function bindAutoBindMethods(component) {
 var pairs = component.__reactAutoBindPairs;
 for (var i = 0; i < pairs.length; i += 2) {
   var autoBindKey = pairs[i];
   var method = pairs[i + 1];
   component[autoBindKey] = bindAutoBindMethod(component, method);
 }
}

/**
* Add more to the ReactClass base class. These are all legacy features and
* therefore not already part of the modern ReactComponent.
*/
var ReactClassMixin = {

 /**
  * TODO: This will be deprecated because state should always keep a consistent
  * type signature and the only use case for this, is to avoid that.
  */
 replaceState: function (newState, callback) {
   this.updater.enqueueReplaceState(this, newState);
   if (callback) {
     this.updater.enqueueCallback(this, callback, 'replaceState');
   }
 },

 /**
  * Checks whether or not this composite component is mounted.
  * @return {boolean} True if mounted, false otherwise.
  * @protected
  * @final
  */
 isMounted: function () {
   return this.updater.isMounted(this);
 }
};

var ReactClassComponent = function () {};
_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
* Module for creating composite components.
*
* @class ReactClass
*/
var ReactClass = {

 /**
  * Creates a composite component class given a class specification.
  *
  * @param {object} spec Class specification (which must define `render`).
  * @return {function} Component constructor function.
  * @public
  */
 createClass: function (spec) {
   var Constructor = function (props, context, updater) {
     // This constructor gets overridden by mocks. The argument is used
     // by mocks to assert on what gets mounted.

     if ("development" !== 'production') {
       "development" !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
     }

     // Wire up auto-binding
     if (this.__reactAutoBindPairs.length) {
       bindAutoBindMethods(this);
     }

     this.props = props;
     this.context = context;
     this.refs = emptyObject;
     this.updater = updater || ReactNoopUpdateQueue;

     this.state = null;

     // ReactClasses doesn't have constructors. Instead, they use the
     // getInitialState and componentWillMount methods for initialization.

     var initialState = this.getInitialState ? this.getInitialState() : null;
     if ("development" !== 'production') {
       // We allow auto-mocks to proceed as if they're returning null.
       if (initialState === undefined && this.getInitialState._isMockFunction) {
         // This is probably bad practice. Consider warning here and
         // deprecating this convenience.
         initialState = null;
       }
     }
     !(typeof initialState === 'object' && !Array.isArray(initialState)) ? "development" !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : void 0;

     this.state = initialState;
   };
   Constructor.prototype = new ReactClassComponent();
   Constructor.prototype.constructor = Constructor;
   Constructor.prototype.__reactAutoBindPairs = [];

   injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

   mixSpecIntoComponent(Constructor, spec);

   // Initialize the defaultProps property after all mixins have been merged.
   if (Constructor.getDefaultProps) {
     Constructor.defaultProps = Constructor.getDefaultProps();
   }

   if ("development" !== 'production') {
     // This is a tag to indicate that the use of these method names is ok,
     // since it's used with createClass. If it's not, then it's likely a
     // mistake so we'll warn you to use the static property, property
     // initializer or constructor respectively.
     if (Constructor.getDefaultProps) {
       Constructor.getDefaultProps.isReactClassApproved = {};
     }
     if (Constructor.prototype.getInitialState) {
       Constructor.prototype.getInitialState.isReactClassApproved = {};
     }
   }

   !Constructor.prototype.render ? "development" !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : void 0;

   if ("development" !== 'production') {
     "development" !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
     "development" !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
   }

   // Reduce time spent doing lookups by setting these on the prototype.
   for (var methodName in ReactClassInterface) {
     if (!Constructor.prototype[methodName]) {
       Constructor.prototype[methodName] = null;
     }
   }

   return Constructor;
 },

 injection: {
   injectMixin: function (mixin) {
     injectedMixins.push(mixin);
   }
 }

};

module.exports = ReactClass;
},{"164":164,"171":171,"174":174,"175":175,"181":181,"182":182,"32":32,"64":64,"84":84,"87":87,"88":88}],32:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactComponent
*/

'use strict';

var ReactNoopUpdateQueue = _dereq_(84);
var ReactInstrumentation = _dereq_(75);

var canDefineProperty = _dereq_(126);
var emptyObject = _dereq_(164);
var invariant = _dereq_(171);
var warning = _dereq_(181);

/**
* Base class helpers for the updating state of a component.
*/
function ReactComponent(props, context, updater) {
 this.props = props;
 this.context = context;
 this.refs = emptyObject;
 // We initialize the default updater but the real one gets injected by the
 // renderer.
 this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
* Sets a subset of the state. Always use this to mutate
* state. You should treat `this.state` as immutable.
*
* There is no guarantee that `this.state` will be immediately updated, so
* accessing `this.state` after calling this method may return the old value.
*
* There is no guarantee that calls to `setState` will run synchronously,
* as they may eventually be batched together.  You can provide an optional
* callback that will be executed when the call to setState is actually
* completed.
*
* When a function is provided to setState, it will be called at some point in
* the future (not synchronously). It will be called with the up to date
* component arguments (state, props, context). These values can be different
* from this.* because your function may be called after receiveProps but before
* shouldComponentUpdate, and this new state, props, and context will not yet be
* assigned to this.
*
* @param {object|function} partialState Next partial state or function to
*        produce next partial state to be merged with current state.
* @param {?function} callback Called after state is updated.
* @final
* @protected
*/
ReactComponent.prototype.setState = function (partialState, callback) {
 !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? "development" !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : void 0;
 if ("development" !== 'production') {
   ReactInstrumentation.debugTool.onSetState();
   "development" !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
 }
 this.updater.enqueueSetState(this, partialState);
 if (callback) {
   this.updater.enqueueCallback(this, callback, 'setState');
 }
};

/**
* Forces an update. This should only be invoked when it is known with
* certainty that we are **not** in a DOM transaction.
*
* You may want to call this when you know that some deeper aspect of the
* component's state has changed but `setState` was not called.
*
* This will not invoke `shouldComponentUpdate`, but it will invoke
* `componentWillUpdate` and `componentDidUpdate`.
*
* @param {?function} callback Called after update is complete.
* @final
* @protected
*/
ReactComponent.prototype.forceUpdate = function (callback) {
 this.updater.enqueueForceUpdate(this);
 if (callback) {
   this.updater.enqueueCallback(this, callback, 'forceUpdate');
 }
};

/**
* Deprecated APIs. These APIs used to exist on classic React classes but since
* we would like to deprecate them, we're not going to move them over to this
* modern base class. Instead, we define a getter that warns if it's accessed.
*/
if ("development" !== 'production') {
 var deprecatedAPIs = {
   isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
   replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
 };
 var defineDeprecationWarning = function (methodName, info) {
   if (canDefineProperty) {
     Object.defineProperty(ReactComponent.prototype, methodName, {
       get: function () {
         "development" !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
         return undefined;
       }
     });
   }
 };
 for (var fnName in deprecatedAPIs) {
   if (deprecatedAPIs.hasOwnProperty(fnName)) {
     defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
   }
 }
}

module.exports = ReactComponent;
},{"126":126,"164":164,"171":171,"181":181,"75":75,"84":84}],33:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactComponentBrowserEnvironment
*/

'use strict';

var DOMChildrenOperations = _dereq_(7);
var ReactDOMIDOperations = _dereq_(48);
var ReactPerf = _dereq_(86);

/**
* Abstracts away all functionality of the reconciler that requires knowledge of
* the browser context. TODO: These callers should be refactored to avoid the
* need for this injection.
*/
var ReactComponentBrowserEnvironment = {

 processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

 replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup,

 /**
  * If a particular environment requires that some resources be cleaned up,
  * specify this in the injected Mixin. In the DOM, we would likely want to
  * purge any cached node ID lookups.
  *
  * @private
  */
 unmountIDFromEnvironment: function (rootNodeID) {}

};

ReactPerf.measureMethods(ReactComponentBrowserEnvironment, 'ReactComponentBrowserEnvironment', {
 replaceNodeWithMarkup: 'replaceNodeWithMarkup'
});

module.exports = ReactComponentBrowserEnvironment;
},{"48":48,"7":7,"86":86}],34:[function(_dereq_,module,exports){
/**
* Copyright 2014-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactComponentEnvironment
*/

'use strict';

var invariant = _dereq_(171);

var injected = false;

var ReactComponentEnvironment = {

 /**
  * Optionally injectable environment dependent cleanup hook. (server vs.
  * browser etc). Example: A browser system caches DOM nodes based on component
  * ID and must remove that cache entry when this instance is unmounted.
  */
 unmountIDFromEnvironment: null,

 /**
  * Optionally injectable hook for swapping out mount images in the middle of
  * the tree.
  */
 replaceNodeWithMarkup: null,

 /**
  * Optionally injectable hook for processing a queue of child updates. Will
  * later move into MultiChildComponents.
  */
 processChildrenUpdates: null,

 injection: {
   injectEnvironment: function (environment) {
     !!injected ? "development" !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : void 0;
     ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
     ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
     ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
     injected = true;
   }
 }

};

module.exports = ReactComponentEnvironment;
},{"171":171}],35:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactComponentWithPureRenderMixin
*/

'use strict';

var shallowCompare = _dereq_(150);

/**
* If your React component's render function is "pure", e.g. it will render the
* same result given the same props and state, provide this mixin for a
* considerable performance boost.
*
* Most React components have pure render functions.
*
* Example:
*
*   var ReactComponentWithPureRenderMixin =
*     require('ReactComponentWithPureRenderMixin');
*   React.createClass({
*     mixins: [ReactComponentWithPureRenderMixin],
*
*     render: function() {
*       return <div className={this.props.className}>foo</div>;
*     }
*   });
*
* Note: This only checks shallow equality for props and state. If these contain
* complex data structures this mixin may have false-negatives for deeper
* differences. Only mixin to components which have simple props and state, or
* use `forceUpdate()` when you know deep data structures have changed.
*/
var ReactComponentWithPureRenderMixin = {
 shouldComponentUpdate: function (nextProps, nextState) {
   return shallowCompare(this, nextProps, nextState);
 }
};

module.exports = ReactComponentWithPureRenderMixin;
},{"150":150}],36:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactCompositeComponent
*/

'use strict';

var _assign = _dereq_(182);

var ReactComponentEnvironment = _dereq_(34);
var ReactCurrentOwner = _dereq_(37);
var ReactElement = _dereq_(64);
var ReactErrorUtils = _dereq_(67);
var ReactInstanceMap = _dereq_(74);
var ReactInstrumentation = _dereq_(75);
var ReactNodeTypes = _dereq_(83);
var ReactPerf = _dereq_(86);
var ReactPropTypeLocations = _dereq_(88);
var ReactPropTypeLocationNames = _dereq_(87);
var ReactReconciler = _dereq_(91);
var ReactUpdateQueue = _dereq_(101);

var emptyObject = _dereq_(164);
var invariant = _dereq_(171);
var shouldUpdateReactComponent = _dereq_(151);
var warning = _dereq_(181);

function getDeclarationErrorAddendum(component) {
 var owner = component._currentElement._owner || null;
 if (owner) {
   var name = owner.getName();
   if (name) {
     return ' Check the render method of `' + name + '`.';
   }
 }
 return '';
}

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
 var Component = ReactInstanceMap.get(this)._currentElement.type;
 var element = Component(this.props, this.context, this.updater);
 warnIfInvalidElement(Component, element);
 return element;
};

function warnIfInvalidElement(Component, element) {
 if ("development" !== 'production') {
   "development" !== 'production' ? warning(element === null || element === false || ReactElement.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
 }
}

/**
* ------------------ The Life-Cycle of a Composite Component ------------------
*
* - constructor: Initialization of state. The instance is now retained.
*   - componentWillMount
*   - render
*   - [children's constructors]
*     - [children's componentWillMount and render]
*     - [children's componentDidMount]
*     - componentDidMount
*
*       Update Phases:
*       - componentWillReceiveProps (only called if parent updated)
*       - shouldComponentUpdate
*         - componentWillUpdate
*           - render
*           - [children's constructors or receive props phases]
*         - componentDidUpdate
*
*     - componentWillUnmount
*     - [children's componentWillUnmount]
*   - [children destroyed]
* - (destroyed): The instance is now blank, released by React and ready for GC.
*
* -----------------------------------------------------------------------------
*/

/**
* An incrementing ID assigned to each component when it is mounted. This is
* used to enforce the order in which `ReactUpdates` updates dirty components.
*
* @private
*/
var nextMountID = 1;

/**
* @lends {ReactCompositeComponent.prototype}
*/
var ReactCompositeComponentMixin = {

 /**
  * Base constructor for all composite component.
  *
  * @param {ReactElement} element
  * @final
  * @internal
  */
 construct: function (element) {
   this._currentElement = element;
   this._rootNodeID = null;
   this._instance = null;
   this._nativeParent = null;
   this._nativeContainerInfo = null;

   // See ReactUpdateQueue
   this._pendingElement = null;
   this._pendingStateQueue = null;
   this._pendingReplaceState = false;
   this._pendingForceUpdate = false;

   this._renderedNodeType = null;
   this._renderedComponent = null;
   this._context = null;
   this._mountOrder = 0;
   this._topLevelWrapper = null;

   // See ReactUpdates and ReactUpdateQueue.
   this._pendingCallbacks = null;
 },

 /**
  * Initializes the component, renders markup, and registers event listeners.
  *
  * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
  * @param {?object} nativeParent
  * @param {?object} nativeContainerInfo
  * @param {?object} context
  * @return {?string} Rendered markup to be inserted into the DOM.
  * @final
  * @internal
  */
 mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
   this._context = context;
   this._mountOrder = nextMountID++;
   this._nativeParent = nativeParent;
   this._nativeContainerInfo = nativeContainerInfo;

   var publicProps = this._processProps(this._currentElement.props);
   var publicContext = this._processContext(context);

   var Component = this._currentElement.type;

   // Initialize the public class
   var inst;
   var renderedElement;

   if (Component.prototype && Component.prototype.isReactComponent) {
     if ("development" !== 'production') {
       ReactCurrentOwner.current = this;
       try {
         inst = new Component(publicProps, publicContext, ReactUpdateQueue);
       } finally {
         ReactCurrentOwner.current = null;
       }
     } else {
       inst = new Component(publicProps, publicContext, ReactUpdateQueue);
     }
   } else {
     if ("development" !== 'production') {
       ReactCurrentOwner.current = this;
       try {
         inst = Component(publicProps, publicContext, ReactUpdateQueue);
       } finally {
         ReactCurrentOwner.current = null;
       }
     } else {
       inst = Component(publicProps, publicContext, ReactUpdateQueue);
     }
     if (inst == null || inst.render == null) {
       renderedElement = inst;
       warnIfInvalidElement(Component, renderedElement);
       !(inst === null || inst === false || ReactElement.isValidElement(inst)) ? "development" !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : invariant(false) : void 0;
       inst = new StatelessComponent(Component);
     }
   }

   if ("development" !== 'production') {
     // This will throw later in _renderValidatedComponent, but add an early
     // warning now to help debugging
     if (inst.render == null) {
       "development" !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
     }

     var propsMutated = inst.props !== publicProps;
     var componentName = Component.displayName || Component.name || 'Component';

     "development" !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
   }

   // These should be set up in the constructor, but as a convenience for
   // simpler class abstractions, we set them up after the fact.
   inst.props = publicProps;
   inst.context = publicContext;
   inst.refs = emptyObject;
   inst.updater = ReactUpdateQueue;

   this._instance = inst;

   // Store a reference from the instance back to the internal representation
   ReactInstanceMap.set(inst, this);

   if ("development" !== 'production') {
     // Since plain JS classes are defined without any special initialization
     // logic, we can not catch common errors early. Therefore, we have to
     // catch them here, at initialization time, instead.
     "development" !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
     "development" !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
     "development" !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
     "development" !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
     "development" !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
     "development" !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
     "development" !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
   }

   var initialState = inst.state;
   if (initialState === undefined) {
     inst.state = initialState = null;
   }
   !(typeof initialState === 'object' && !Array.isArray(initialState)) ? "development" !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : void 0;

   this._pendingStateQueue = null;
   this._pendingReplaceState = false;
   this._pendingForceUpdate = false;

   var markup;
   if (inst.unstable_handleError) {
     markup = this.performInitialMountWithErrorHandling(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
   } else {
     markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
   }

   if (inst.componentDidMount) {
     transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
   }

   return markup;
 },

 performInitialMountWithErrorHandling: function (renderedElement, nativeParent, nativeContainerInfo, transaction, context) {
   var markup;
   var checkpoint = transaction.checkpoint();
   try {
     markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
   } catch (e) {
     // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
     transaction.rollback(checkpoint);
     this._instance.unstable_handleError(e);
     if (this._pendingStateQueue) {
       this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
     }
     checkpoint = transaction.checkpoint();

     this._renderedComponent.unmountComponent(true);
     transaction.rollback(checkpoint);

     // Try again - we've informed the component about the error, so they can render an error message this time.
     // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
     markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
   }
   return markup;
 },

 performInitialMount: function (renderedElement, nativeParent, nativeContainerInfo, transaction, context) {
   var inst = this._instance;
   if (inst.componentWillMount) {
     inst.componentWillMount();
     // When mounting, calls to `setState` by `componentWillMount` will set
     // `this._pendingStateQueue` without triggering a re-render.
     if (this._pendingStateQueue) {
       inst.state = this._processPendingState(inst.props, inst.context);
     }
   }

   // If not a stateless component, we now render
   if (renderedElement === undefined) {
     renderedElement = this._renderValidatedComponent();
   }

   this._renderedNodeType = ReactNodeTypes.getType(renderedElement);
   this._renderedComponent = this._instantiateReactComponent(renderedElement);

   var markup = ReactReconciler.mountComponent(this._renderedComponent, transaction, nativeParent, nativeContainerInfo, this._processChildContext(context));

   return markup;
 },

 getNativeNode: function () {
   return ReactReconciler.getNativeNode(this._renderedComponent);
 },

 /**
  * Releases any resources allocated by `mountComponent`.
  *
  * @final
  * @internal
  */
 unmountComponent: function (safely) {
   if (!this._renderedComponent) {
     return;
   }
   var inst = this._instance;

   if (inst.componentWillUnmount) {
     if (safely) {
       var name = this.getName() + '.componentWillUnmount()';
       ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
     } else {
       inst.componentWillUnmount();
     }
   }

   if (this._renderedComponent) {
     ReactReconciler.unmountComponent(this._renderedComponent, safely);
     this._renderedNodeType = null;
     this._renderedComponent = null;
     this._instance = null;
   }

   // Reset pending fields
   // Even if this component is scheduled for another update in ReactUpdates,
   // it would still be ignored because these fields are reset.
   this._pendingStateQueue = null;
   this._pendingReplaceState = false;
   this._pendingForceUpdate = false;
   this._pendingCallbacks = null;
   this._pendingElement = null;

   // These fields do not really need to be reset since this object is no
   // longer accessible.
   this._context = null;
   this._rootNodeID = null;
   this._topLevelWrapper = null;

   // Delete the reference from the instance to this internal representation
   // which allow the internals to be properly cleaned up even if the user
   // leaks a reference to the public instance.
   ReactInstanceMap.remove(inst);

   // Some existing components rely on inst.props even after they've been
   // destroyed (in event handlers).
   // TODO: inst.props = null;
   // TODO: inst.state = null;
   // TODO: inst.context = null;
 },

 /**
  * Filters the context object to only contain keys specified in
  * `contextTypes`
  *
  * @param {object} context
  * @return {?object}
  * @private
  */
 _maskContext: function (context) {
   var Component = this._currentElement.type;
   var contextTypes = Component.contextTypes;
   if (!contextTypes) {
     return emptyObject;
   }
   var maskedContext = {};
   for (var contextName in contextTypes) {
     maskedContext[contextName] = context[contextName];
   }
   return maskedContext;
 },

 /**
  * Filters the context object to only contain keys specified in
  * `contextTypes`, and asserts that they are valid.
  *
  * @param {object} context
  * @return {?object}
  * @private
  */
 _processContext: function (context) {
   var maskedContext = this._maskContext(context);
   if ("development" !== 'production') {
     var Component = this._currentElement.type;
     if (Component.contextTypes) {
       this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
     }
   }
   return maskedContext;
 },

 /**
  * @param {object} currentContext
  * @return {object}
  * @private
  */
 _processChildContext: function (currentContext) {
   var Component = this._currentElement.type;
   var inst = this._instance;
   if ("development" !== 'production') {
     ReactInstrumentation.debugTool.onBeginProcessingChildContext();
   }
   var childContext = inst.getChildContext && inst.getChildContext();
   if ("development" !== 'production') {
     ReactInstrumentation.debugTool.onEndProcessingChildContext();
   }
   if (childContext) {
     !(typeof Component.childContextTypes === 'object') ? "development" !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : void 0;
     if ("development" !== 'production') {
       this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
     }
     for (var name in childContext) {
       !(name in Component.childContextTypes) ? "development" !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : void 0;
     }
     return _assign({}, currentContext, childContext);
   }
   return currentContext;
 },

 /**
  * Processes props by setting default values for unspecified props and
  * asserting that the props are valid. Does not mutate its argument; returns
  * a new props object with defaults merged in.
  *
  * @param {object} newProps
  * @return {object}
  * @private
  */
 _processProps: function (newProps) {
   if ("development" !== 'production') {
     var Component = this._currentElement.type;
     if (Component.propTypes) {
       this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
     }
   }
   return newProps;
 },

 /**
  * Assert that the props are valid
  *
  * @param {object} propTypes Map of prop name to a ReactPropType
  * @param {object} props
  * @param {string} location e.g. "prop", "context", "child context"
  * @private
  */
 _checkPropTypes: function (propTypes, props, location) {
   // TODO: Stop validating prop types here and only use the element
   // validation.
   var componentName = this.getName();
   for (var propName in propTypes) {
     if (propTypes.hasOwnProperty(propName)) {
       var error;
       try {
         // This is intentionally an invariant that gets caught. It's the same
         // behavior as without this statement except with a better message.
         !(typeof propTypes[propName] === 'function') ? "development" !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : void 0;
         error = propTypes[propName](props, propName, componentName, location);
       } catch (ex) {
         error = ex;
       }
       if (error instanceof Error) {
         // We may want to extend this logic for similar errors in
         // top-level render calls, so I'm abstracting it away into
         // a function to minimize refactoring in the future
         var addendum = getDeclarationErrorAddendum(this);

         if (location === ReactPropTypeLocations.prop) {
           // Preface gives us something to blacklist in warning module
           "development" !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : void 0;
         } else {
           "development" !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : void 0;
         }
       }
     }
   }
 },

 receiveComponent: function (nextElement, transaction, nextContext) {
   var prevElement = this._currentElement;
   var prevContext = this._context;

   this._pendingElement = null;

   this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
 },

 /**
  * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
  * is set, update the component.
  *
  * @param {ReactReconcileTransaction} transaction
  * @internal
  */
 performUpdateIfNecessary: function (transaction) {
   if (this._pendingElement != null) {
     ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
   }

   if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
     this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
   }
 },

 /**
  * Perform an update to a mounted component. The componentWillReceiveProps and
  * shouldComponentUpdate methods are called, then (assuming the update isn't
  * skipped) the remaining update lifecycle methods are called and the DOM
  * representation is updated.
  *
  * By default, this implements React's rendering and reconciliation algorithm.
  * Sophisticated clients may wish to override this.
  *
  * @param {ReactReconcileTransaction} transaction
  * @param {ReactElement} prevParentElement
  * @param {ReactElement} nextParentElement
  * @internal
  * @overridable
  */
 updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
   var inst = this._instance;
   var willReceive = false;
   var nextContext;
   var nextProps;

   // Determine if the context has changed or not
   if (this._context === nextUnmaskedContext) {
     nextContext = inst.context;
   } else {
     nextContext = this._processContext(nextUnmaskedContext);
     willReceive = true;
   }

   // Distinguish between a props update versus a simple state update
   if (prevParentElement === nextParentElement) {
     // Skip checking prop types again -- we don't read inst.props to avoid
     // warning for DOM component props in this upgrade
     nextProps = nextParentElement.props;
   } else {
     nextProps = this._processProps(nextParentElement.props);
     willReceive = true;
   }

   // An update here will schedule an update but immediately set
   // _pendingStateQueue which will ensure that any state updates gets
   // immediately reconciled instead of waiting for the next batch.
   if (willReceive && inst.componentWillReceiveProps) {
     inst.componentWillReceiveProps(nextProps, nextContext);
   }

   var nextState = this._processPendingState(nextProps, nextContext);

   var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

   if ("development" !== 'production') {
     "development" !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
   }

   if (shouldUpdate) {
     this._pendingForceUpdate = false;
     // Will set `this.props`, `this.state` and `this.context`.
     this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
   } else {
     // If it's determined that a component should not update, we still want
     // to set props and state but we shortcut the rest of the update.
     this._currentElement = nextParentElement;
     this._context = nextUnmaskedContext;
     inst.props = nextProps;
     inst.state = nextState;
     inst.context = nextContext;
   }
 },

 _processPendingState: function (props, context) {
   var inst = this._instance;
   var queue = this._pendingStateQueue;
   var replace = this._pendingReplaceState;
   this._pendingReplaceState = false;
   this._pendingStateQueue = null;

   if (!queue) {
     return inst.state;
   }

   if (replace && queue.length === 1) {
     return queue[0];
   }

   var nextState = _assign({}, replace ? queue[0] : inst.state);
   for (var i = replace ? 1 : 0; i < queue.length; i++) {
     var partial = queue[i];
     _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
   }

   return nextState;
 },

 /**
  * Merges new props and state, notifies delegate methods of update and
  * performs update.
  *
  * @param {ReactElement} nextElement Next element
  * @param {object} nextProps Next public object to set as properties.
  * @param {?object} nextState Next object to set as state.
  * @param {?object} nextContext Next public object to set as context.
  * @param {ReactReconcileTransaction} transaction
  * @param {?object} unmaskedContext
  * @private
  */
 _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
   var inst = this._instance;

   var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
   var prevProps;
   var prevState;
   var prevContext;
   if (hasComponentDidUpdate) {
     prevProps = inst.props;
     prevState = inst.state;
     prevContext = inst.context;
   }

   if (inst.componentWillUpdate) {
     inst.componentWillUpdate(nextProps, nextState, nextContext);
   }

   this._currentElement = nextElement;
   this._context = unmaskedContext;
   inst.props = nextProps;
   inst.state = nextState;
   inst.context = nextContext;

   this._updateRenderedComponent(transaction, unmaskedContext);

   if (hasComponentDidUpdate) {
     transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
   }
 },

 /**
  * Call the component's `render` method and update the DOM accordingly.
  *
  * @param {ReactReconcileTransaction} transaction
  * @internal
  */
 _updateRenderedComponent: function (transaction, context) {
   var prevComponentInstance = this._renderedComponent;
   var prevRenderedElement = prevComponentInstance._currentElement;
   var nextRenderedElement = this._renderValidatedComponent();
   if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
     ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
   } else {
     var oldNativeNode = ReactReconciler.getNativeNode(prevComponentInstance);
     ReactReconciler.unmountComponent(prevComponentInstance, false);

     this._renderedNodeType = ReactNodeTypes.getType(nextRenderedElement);
     this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
     var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, transaction, this._nativeParent, this._nativeContainerInfo, this._processChildContext(context));
     this._replaceNodeWithMarkup(oldNativeNode, nextMarkup);
   }
 },

 /**
  * Overridden in shallow rendering.
  *
  * @protected
  */
 _replaceNodeWithMarkup: function (oldNativeNode, nextMarkup) {
   ReactComponentEnvironment.replaceNodeWithMarkup(oldNativeNode, nextMarkup);
 },

 /**
  * @protected
  */
 _renderValidatedComponentWithoutOwnerOrContext: function () {
   var inst = this._instance;
   var renderedComponent = inst.render();
   if ("development" !== 'production') {
     // We allow auto-mocks to proceed as if they're returning null.
     if (renderedComponent === undefined && inst.render._isMockFunction) {
       // This is probably bad practice. Consider warning here and
       // deprecating this convenience.
       renderedComponent = null;
     }
   }

   return renderedComponent;
 },

 /**
  * @private
  */
 _renderValidatedComponent: function () {
   var renderedComponent;
   ReactCurrentOwner.current = this;
   try {
     renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
   } finally {
     ReactCurrentOwner.current = null;
   }
   !(
   // TODO: An `isValidNode` function would probably be more appropriate
   renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? "development" !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : void 0;
   return renderedComponent;
 },

 /**
  * Lazily allocates the refs object and stores `component` as `ref`.
  *
  * @param {string} ref Reference name.
  * @param {component} component Component to store as `ref`.
  * @final
  * @private
  */
 attachRef: function (ref, component) {
   var inst = this.getPublicInstance();
   !(inst != null) ? "development" !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : void 0;
   var publicComponentInstance = component.getPublicInstance();
   if ("development" !== 'production') {
     var componentName = component && component.getName ? component.getName() : 'a component';
     "development" !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
   }
   var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
   refs[ref] = publicComponentInstance;
 },

 /**
  * Detaches a reference name.
  *
  * @param {string} ref Name to dereference.
  * @final
  * @private
  */
 detachRef: function (ref) {
   var refs = this.getPublicInstance().refs;
   delete refs[ref];
 },

 /**
  * Get a text description of the component that can be used to identify it
  * in error messages.
  * @return {string} The name or null.
  * @internal
  */
 getName: function () {
   var type = this._currentElement.type;
   var constructor = this._instance && this._instance.constructor;
   return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
 },

 /**
  * Get the publicly accessible representation of this component - i.e. what
  * is exposed by refs and returned by render. Can be null for stateless
  * components.
  *
  * @return {ReactComponent} the public component instance.
  * @internal
  */
 getPublicInstance: function () {
   var inst = this._instance;
   if (inst instanceof StatelessComponent) {
     return null;
   }
   return inst;
 },

 // Stub
 _instantiateReactComponent: null

};

ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
 mountComponent: 'mountComponent',
 updateComponent: 'updateComponent',
 _renderValidatedComponent: '_renderValidatedComponent'
});

var ReactCompositeComponent = {

 Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;
},{"101":101,"151":151,"164":164,"171":171,"181":181,"182":182,"34":34,"37":37,"64":64,"67":67,"74":74,"75":75,"83":83,"86":86,"87":87,"88":88,"91":91}],37:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactCurrentOwner
*/

'use strict';

/**
* Keeps track of the current owner.
*
* The current owner is the component who should own any components that are
* currently being constructed.
*/

var ReactCurrentOwner = {

 /**
  * @internal
  * @type {ReactComponent}
  */
 current: null

};

module.exports = ReactCurrentOwner;
},{}],38:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOM
*/

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactDOMComponentTree = _dereq_(42);
var ReactDefaultInjection = _dereq_(61);
var ReactMount = _dereq_(79);
var ReactPerf = _dereq_(86);
var ReactReconciler = _dereq_(91);
var ReactUpdates = _dereq_(102);
var ReactVersion = _dereq_(103);

var findDOMNode = _dereq_(130);
var getNativeComponentFromComposite = _dereq_(138);
var renderSubtreeIntoContainer = _dereq_(147);
var warning = _dereq_(181);

ReactDefaultInjection.inject();

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
 findDOMNode: findDOMNode,
 render: render,
 unmountComponentAtNode: ReactMount.unmountComponentAtNode,
 version: ReactVersion,

 /* eslint-disable camelcase */
 unstable_batchedUpdates: ReactUpdates.batchedUpdates,
 unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
/* eslint-enable camelcase */
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
 __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
   ComponentTree: {
     getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
     getNodeFromInstance: function (inst) {
       // inst is an internal instance (but could be a composite)
       if (inst._renderedComponent) {
         inst = getNativeComponentFromComposite(inst);
       }
       if (inst) {
         return ReactDOMComponentTree.getNodeFromInstance(inst);
       } else {
         return null;
       }
     }
   },
   Mount: ReactMount,
   Reconciler: ReactReconciler
 });
}

if ("development" !== 'production') {
 var ExecutionEnvironment = _dereq_(157);
 if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

   // First check if devtools is not installed
   if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
     // If we're in Chrome or Firefox, provide a download link if not installed.
     if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
       // Firefox does not have the issue with devtools loaded over file://
       var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
       console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
     }
   }

   var testFunc = function testFn() {};
   "development" !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

   // If we're in IE8, check to see if we are in compatibility mode and provide
   // information on preventing compatibility mode
   var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

   "development" !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

   var expectedFeatures = [
   // shims
   Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim];

   for (var i = 0; i < expectedFeatures.length; i++) {
     if (!expectedFeatures[i]) {
       "development" !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
       break;
     }
   }
 }
}

module.exports = React;
},{"102":102,"103":103,"130":130,"138":138,"147":147,"157":157,"181":181,"42":42,"61":61,"79":79,"86":86,"91":91}],39:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMButton
*/

'use strict';

var mouseListenerNames = {
 onClick: true,
 onDoubleClick: true,
 onMouseDown: true,
 onMouseMove: true,
 onMouseUp: true,

 onClickCapture: true,
 onDoubleClickCapture: true,
 onMouseDownCapture: true,
 onMouseMoveCapture: true,
 onMouseUpCapture: true
};

/**
* Implements a <button> native component that does not receive mouse events
* when `disabled` is set.
*/
var ReactDOMButton = {
 getNativeProps: function (inst, props) {
   if (!props.disabled) {
     return props;
   }

   // Copy the props, except the mouse listeners
   var nativeProps = {};
   for (var key in props) {
     if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
       nativeProps[key] = props[key];
     }
   }

   return nativeProps;
 }
};

module.exports = ReactDOMButton;
},{}],40:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMComponent
*/

/* global hasOwnProperty:true */

'use strict';

var _assign = _dereq_(182);

var AutoFocusUtils = _dereq_(1);
var CSSPropertyOperations = _dereq_(4);
var DOMLazyTree = _dereq_(8);
var DOMNamespaces = _dereq_(9);
var DOMProperty = _dereq_(10);
var DOMPropertyOperations = _dereq_(11);
var EventConstants = _dereq_(15);
var EventPluginHub = _dereq_(16);
var EventPluginRegistry = _dereq_(17);
var ReactBrowserEventEmitter = _dereq_(26);
var ReactComponentBrowserEnvironment = _dereq_(33);
var ReactDOMButton = _dereq_(39);
var ReactDOMComponentFlags = _dereq_(41);
var ReactDOMComponentTree = _dereq_(42);
var ReactDOMInput = _dereq_(49);
var ReactDOMOption = _dereq_(51);
var ReactDOMSelect = _dereq_(52);
var ReactDOMTextarea = _dereq_(56);
var ReactMultiChild = _dereq_(80);
var ReactPerf = _dereq_(86);

var escapeTextContentForBrowser = _dereq_(129);
var invariant = _dereq_(171);
var isEventSupported = _dereq_(143);
var keyOf = _dereq_(175);
var shallowEqual = _dereq_(180);
var validateDOMNesting = _dereq_(154);
var warning = _dereq_(181);

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var STYLE = keyOf({ style: null });
var HTML = keyOf({ __html: null });
var RESERVED_PROPS = {
 children: null,
 dangerouslySetInnerHTML: null,
 suppressContentEditableWarning: null
};

function getDeclarationErrorAddendum(internalInstance) {
 if (internalInstance) {
   var owner = internalInstance._currentElement._owner || null;
   if (owner) {
     var name = owner.getName();
     if (name) {
       return ' This DOM node was rendered by `' + name + '`.';
     }
   }
 }
 return '';
}

function friendlyStringify(obj) {
 if (typeof obj === 'object') {
   if (Array.isArray(obj)) {
     return '[' + obj.map(friendlyStringify).join(', ') + ']';
   } else {
     var pairs = [];
     for (var key in obj) {
       if (Object.prototype.hasOwnProperty.call(obj, key)) {
         var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
         pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
       }
     }
     return '{' + pairs.join(', ') + '}';
   }
 } else if (typeof obj === 'string') {
   return JSON.stringify(obj);
 } else if (typeof obj === 'function') {
   return '[function object]';
 }
 // Differs from JSON.stringify in that undefined because undefined and that
 // inf and nan don't become null
 return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
 if (style1 == null || style2 == null) {
   return;
 }
 if (shallowEqual(style1, style2)) {
   return;
 }

 var componentName = component._tag;
 var owner = component._currentElement._owner;
 var ownerName;
 if (owner) {
   ownerName = owner.getName();
 }

 var hash = ownerName + '|' + componentName;

 if (styleMutationWarning.hasOwnProperty(hash)) {
   return;
 }

 styleMutationWarning[hash] = true;

 "development" !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
* @param {object} component
* @param {?object} props
*/
function assertValidProps(component, props) {
 if (!props) {
   return;
 }
 // Note the use of `==` which checks for null or undefined.
 if (voidElementTags[component._tag]) {
   !(props.children == null && props.dangerouslySetInnerHTML == null) ? "development" !== 'production' ? invariant(false, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : invariant(false) : void 0;
 }
 if (props.dangerouslySetInnerHTML != null) {
   !(props.children == null) ? "development" !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : void 0;
   !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? "development" !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : void 0;
 }
 if ("development" !== 'production') {
   "development" !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
   "development" !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
   "development" !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
 }
 !(props.style == null || typeof props.style === 'object') ? "development" !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
 if ("development" !== 'production') {
   // IE8 has no API for event capturing and the `onScroll` event doesn't
   // bubble.
   "development" !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
 }
 var containerInfo = inst._nativeContainerInfo;
 var doc = containerInfo._ownerDocument;
 if (!doc) {
   // Server rendering.
   return;
 }
 listenTo(registrationName, doc);
 transaction.getReactMountReady().enqueue(putListener, {
   inst: inst,
   registrationName: registrationName,
   listener: listener
 });
}

function putListener() {
 var listenerToPut = this;
 EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function optionPostMount() {
 var inst = this;
 ReactDOMOption.postMountWrapper(inst);
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
 topAbort: 'abort',
 topCanPlay: 'canplay',
 topCanPlayThrough: 'canplaythrough',
 topDurationChange: 'durationchange',
 topEmptied: 'emptied',
 topEncrypted: 'encrypted',
 topEnded: 'ended',
 topError: 'error',
 topLoadedData: 'loadeddata',
 topLoadedMetadata: 'loadedmetadata',
 topLoadStart: 'loadstart',
 topPause: 'pause',
 topPlay: 'play',
 topPlaying: 'playing',
 topProgress: 'progress',
 topRateChange: 'ratechange',
 topSeeked: 'seeked',
 topSeeking: 'seeking',
 topStalled: 'stalled',
 topSuspend: 'suspend',
 topTimeUpdate: 'timeupdate',
 topVolumeChange: 'volumechange',
 topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
 var inst = this;
 // If a component renders to null or if another component fatals and causes
 // the state of the tree to be corrupted, `node` here can be null.
 !inst._rootNodeID ? "development" !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : void 0;
 var node = getNode(inst);
 !node ? "development" !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : void 0;

 switch (inst._tag) {
   case 'iframe':
   case 'object':
     inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
     break;
   case 'video':
   case 'audio':

     inst._wrapperState.listeners = [];
     // Create listener for each media event
     for (var event in mediaEvents) {
       if (mediaEvents.hasOwnProperty(event)) {
         inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
       }
     }

     break;
   case 'img':
     inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
     break;
   case 'form':
     inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
     break;
   case 'input':
   case 'select':
   case 'textarea':
     inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topInvalid, 'invalid', node)];
     break;
 }
}

function postUpdateSelectWrapper() {
 ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
 'area': true,
 'base': true,
 'br': true,
 'col': true,
 'embed': true,
 'hr': true,
 'img': true,
 'input': true,
 'keygen': true,
 'link': true,
 'meta': true,
 'param': true,
 'source': true,
 'track': true,
 'wbr': true
};

// NOTE: menuitem's close tag should be omitted, but that causes problems.
var newlineEatingTags = {
 'listing': true,
 'pre': true,
 'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
 'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
 if (!hasOwnProperty.call(validatedTagCache, tag)) {
   !VALID_TAG_REGEX.test(tag) ? "development" !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : void 0;
   validatedTagCache[tag] = true;
 }
}

function isCustomComponent(tagName, props) {
 return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
* Creates a new React class that is idempotent and capable of containing other
* React components. It accepts event listeners and DOM properties that are
* valid according to `DOMProperty`.
*
*  - Event listeners: `onClick`, `onMouseDown`, etc.
*  - DOM properties: `className`, `name`, `title`, etc.
*
* The `style` property functions differently from the DOM API. It accepts an
* object mapping of style properties to values.
*
* @constructor ReactDOMComponent
* @extends ReactMultiChild
*/
function ReactDOMComponent(element) {
 var tag = element.type;
 validateDangerousTag(tag);
 this._currentElement = element;
 this._tag = tag.toLowerCase();
 this._namespaceURI = null;
 this._renderedChildren = null;
 this._previousStyle = null;
 this._previousStyleCopy = null;
 this._nativeNode = null;
 this._nativeParent = null;
 this._rootNodeID = null;
 this._domID = null;
 this._nativeContainerInfo = null;
 this._wrapperState = null;
 this._topLevelWrapper = null;
 this._flags = 0;
 if ("development" !== 'production') {
   this._ancestorInfo = null;
 }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

 /**
  * Generates root tag markup then recurses. This method has side effects and
  * is not idempotent.
  *
  * @internal
  * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
  * @param {?ReactDOMComponent} the containing DOM component instance
  * @param {?object} info about the native container
  * @param {object} context
  * @return {string} The computed markup.
  */
 mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
   this._rootNodeID = globalIdCounter++;
   this._domID = nativeContainerInfo._idCounter++;
   this._nativeParent = nativeParent;
   this._nativeContainerInfo = nativeContainerInfo;

   var props = this._currentElement.props;

   switch (this._tag) {
     case 'iframe':
     case 'object':
     case 'img':
     case 'form':
     case 'video':
     case 'audio':
       this._wrapperState = {
         listeners: null
       };
       transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
       break;
     case 'button':
       props = ReactDOMButton.getNativeProps(this, props, nativeParent);
       break;
     case 'input':
       ReactDOMInput.mountWrapper(this, props, nativeParent);
       props = ReactDOMInput.getNativeProps(this, props);
       transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
       break;
     case 'option':
       ReactDOMOption.mountWrapper(this, props, nativeParent);
       props = ReactDOMOption.getNativeProps(this, props);
       break;
     case 'select':
       ReactDOMSelect.mountWrapper(this, props, nativeParent);
       props = ReactDOMSelect.getNativeProps(this, props);
       transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
       break;
     case 'textarea':
       ReactDOMTextarea.mountWrapper(this, props, nativeParent);
       props = ReactDOMTextarea.getNativeProps(this, props);
       transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
       break;
   }

   assertValidProps(this, props);

   // We create tags in the namespace of their parent container, except HTML
   // tags get no namespace.
   var namespaceURI;
   var parentTag;
   if (nativeParent != null) {
     namespaceURI = nativeParent._namespaceURI;
     parentTag = nativeParent._tag;
   } else if (nativeContainerInfo._tag) {
     namespaceURI = nativeContainerInfo._namespaceURI;
     parentTag = nativeContainerInfo._tag;
   }
   if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
     namespaceURI = DOMNamespaces.html;
   }
   if (namespaceURI === DOMNamespaces.html) {
     if (this._tag === 'svg') {
       namespaceURI = DOMNamespaces.svg;
     } else if (this._tag === 'math') {
       namespaceURI = DOMNamespaces.mathml;
     }
   }
   this._namespaceURI = namespaceURI;

   if ("development" !== 'production') {
     var parentInfo;
     if (nativeParent != null) {
       parentInfo = nativeParent._ancestorInfo;
     } else if (nativeContainerInfo._tag) {
       parentInfo = nativeContainerInfo._ancestorInfo;
     }
     if (parentInfo) {
       // parentInfo should always be present except for the top-level
       // component when server rendering
       validateDOMNesting(this._tag, this, parentInfo);
     }
     this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
   }

   var mountImage;
   if (transaction.useCreateElement) {
     var ownerDocument = nativeContainerInfo._ownerDocument;
     var el;
     if (namespaceURI === DOMNamespaces.html) {
       if (this._tag === 'script') {
         // Create the script via .innerHTML so its "parser-inserted" flag is
         // set to true and it does not execute
         var div = ownerDocument.createElement('div');
         var type = this._currentElement.type;
         div.innerHTML = '<' + type + '></' + type + '>';
         el = div.removeChild(div.firstChild);
       } else {
         el = ownerDocument.createElement(this._currentElement.type);
       }
     } else {
       el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
     }
     ReactDOMComponentTree.precacheNode(this, el);
     this._flags |= Flags.hasCachedChildNodes;
     if (!this._nativeParent) {
       DOMPropertyOperations.setAttributeForRoot(el);
     }
     this._updateDOMProperties(null, props, transaction);
     var lazyTree = DOMLazyTree(el);
     this._createInitialChildren(transaction, props, context, lazyTree);
     mountImage = lazyTree;
   } else {
     var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
     var tagContent = this._createContentMarkup(transaction, props, context);
     if (!tagContent && omittedCloseTags[this._tag]) {
       mountImage = tagOpen + '/>';
     } else {
       mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
     }
   }

   switch (this._tag) {
     case 'button':
     case 'input':
     case 'select':
     case 'textarea':
       if (props.autoFocus) {
         transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
       }
       break;
     case 'option':
       transaction.getReactMountReady().enqueue(optionPostMount, this);
   }

   return mountImage;
 },

 /**
  * Creates markup for the open tag and all attributes.
  *
  * This method has side effects because events get registered.
  *
  * Iterating over object properties is faster than iterating over arrays.
  * @see http://jsperf.com/obj-vs-arr-iteration
  *
  * @private
  * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
  * @param {object} props
  * @return {string} Markup of opening tag.
  */
 _createOpenTagMarkupAndPutListeners: function (transaction, props) {
   var ret = '<' + this._currentElement.type;

   for (var propKey in props) {
     if (!props.hasOwnProperty(propKey)) {
       continue;
     }
     var propValue = props[propKey];
     if (propValue == null) {
       continue;
     }
     if (registrationNameModules.hasOwnProperty(propKey)) {
       if (propValue) {
         enqueuePutListener(this, propKey, propValue, transaction);
       }
     } else {
       if (propKey === STYLE) {
         if (propValue) {
           if ("development" !== 'production') {
             // See `_updateDOMProperties`. style block
             this._previousStyle = propValue;
           }
           propValue = this._previousStyleCopy = _assign({}, props.style);
         }
         propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
       }
       var markup = null;
       if (this._tag != null && isCustomComponent(this._tag, props)) {
         if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
           markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
         }
       } else {
         markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
       }
       if (markup) {
         ret += ' ' + markup;
       }
     }
   }

   // For static pages, no need to put React ID and checksum. Saves lots of
   // bytes.
   if (transaction.renderToStaticMarkup) {
     return ret;
   }

   if (!this._nativeParent) {
     ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
   }
   ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
   return ret;
 },

 /**
  * Creates markup for the content between the tags.
  *
  * @private
  * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
  * @param {object} props
  * @param {object} context
  * @return {string} Content markup.
  */
 _createContentMarkup: function (transaction, props, context) {
   var ret = '';

   // Intentional use of != to avoid catching zero/false.
   var innerHTML = props.dangerouslySetInnerHTML;
   if (innerHTML != null) {
     if (innerHTML.__html != null) {
       ret = innerHTML.__html;
     }
   } else {
     var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
     var childrenToUse = contentToUse != null ? null : props.children;
     if (contentToUse != null) {
       // TODO: Validate that text is allowed as a child of this node
       ret = escapeTextContentForBrowser(contentToUse);
     } else if (childrenToUse != null) {
       var mountImages = this.mountChildren(childrenToUse, transaction, context);
       ret = mountImages.join('');
     }
   }
   if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
     // text/html ignores the first character in these tags if it's a newline
     // Prefer to break application/xml over text/html (for now) by adding
     // a newline specifically to get eaten by the parser. (Alternately for
     // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
     // \r is normalized out by HTMLTextAreaElement#value.)
     // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
     // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
     // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
     // See: Parsing of "textarea" "listing" and "pre" elements
     //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
     return '\n' + ret;
   } else {
     return ret;
   }
 },

 _createInitialChildren: function (transaction, props, context, lazyTree) {
   // Intentional use of != to avoid catching zero/false.
   var innerHTML = props.dangerouslySetInnerHTML;
   if (innerHTML != null) {
     if (innerHTML.__html != null) {
       DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
     }
   } else {
     var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
     var childrenToUse = contentToUse != null ? null : props.children;
     if (contentToUse != null) {
       // TODO: Validate that text is allowed as a child of this node
       DOMLazyTree.queueText(lazyTree, contentToUse);
     } else if (childrenToUse != null) {
       var mountImages = this.mountChildren(childrenToUse, transaction, context);
       for (var i = 0; i < mountImages.length; i++) {
         DOMLazyTree.queueChild(lazyTree, mountImages[i]);
       }
     }
   }
 },

 /**
  * Receives a next element and updates the component.
  *
  * @internal
  * @param {ReactElement} nextElement
  * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
  * @param {object} context
  */
 receiveComponent: function (nextElement, transaction, context) {
   var prevElement = this._currentElement;
   this._currentElement = nextElement;
   this.updateComponent(transaction, prevElement, nextElement, context);
 },

 /**
  * Updates a native DOM component after it has already been allocated and
  * attached to the DOM. Reconciles the root DOM node, then recurses.
  *
  * @param {ReactReconcileTransaction} transaction
  * @param {ReactElement} prevElement
  * @param {ReactElement} nextElement
  * @internal
  * @overridable
  */
 updateComponent: function (transaction, prevElement, nextElement, context) {
   var lastProps = prevElement.props;
   var nextProps = this._currentElement.props;

   switch (this._tag) {
     case 'button':
       lastProps = ReactDOMButton.getNativeProps(this, lastProps);
       nextProps = ReactDOMButton.getNativeProps(this, nextProps);
       break;
     case 'input':
       ReactDOMInput.updateWrapper(this);
       lastProps = ReactDOMInput.getNativeProps(this, lastProps);
       nextProps = ReactDOMInput.getNativeProps(this, nextProps);
       break;
     case 'option':
       lastProps = ReactDOMOption.getNativeProps(this, lastProps);
       nextProps = ReactDOMOption.getNativeProps(this, nextProps);
       break;
     case 'select':
       lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
       nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
       break;
     case 'textarea':
       ReactDOMTextarea.updateWrapper(this);
       lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
       nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
       break;
   }

   assertValidProps(this, nextProps);
   this._updateDOMProperties(lastProps, nextProps, transaction);
   this._updateDOMChildren(lastProps, nextProps, transaction, context);

   if (this._tag === 'select') {
     // <select> value update needs to occur after <option> children
     // reconciliation
     transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
   }
 },

 /**
  * Reconciles the properties by detecting differences in property values and
  * updating the DOM as necessary. This function is probably the single most
  * critical path for performance optimization.
  *
  * TODO: Benchmark whether checking for changed values in memory actually
  *       improves performance (especially statically positioned elements).
  * TODO: Benchmark the effects of putting this at the top since 99% of props
  *       do not change for a given reconciliation.
  * TODO: Benchmark areas that can be improved with caching.
  *
  * @private
  * @param {object} lastProps
  * @param {object} nextProps
  * @param {?DOMElement} node
  */
 _updateDOMProperties: function (lastProps, nextProps, transaction) {
   var propKey;
   var styleName;
   var styleUpdates;
   for (propKey in lastProps) {
     if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
       continue;
     }
     if (propKey === STYLE) {
       var lastStyle = this._previousStyleCopy;
       for (styleName in lastStyle) {
         if (lastStyle.hasOwnProperty(styleName)) {
           styleUpdates = styleUpdates || {};
           styleUpdates[styleName] = '';
         }
       }
       this._previousStyleCopy = null;
     } else if (registrationNameModules.hasOwnProperty(propKey)) {
       if (lastProps[propKey]) {
         // Only call deleteListener if there was a listener previously or
         // else willDeleteListener gets called when there wasn't actually a
         // listener (e.g., onClick={null})
         deleteListener(this, propKey);
       }
     } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
       DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
     }
   }
   for (propKey in nextProps) {
     var nextProp = nextProps[propKey];
     var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
     if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
       continue;
     }
     if (propKey === STYLE) {
       if (nextProp) {
         if ("development" !== 'production') {
           checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
           this._previousStyle = nextProp;
         }
         nextProp = this._previousStyleCopy = _assign({}, nextProp);
       } else {
         this._previousStyleCopy = null;
       }
       if (lastProp) {
         // Unset styles on `lastProp` but not on `nextProp`.
         for (styleName in lastProp) {
           if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
             styleUpdates = styleUpdates || {};
             styleUpdates[styleName] = '';
           }
         }
         // Update styles that changed since `lastProp`.
         for (styleName in nextProp) {
           if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
             styleUpdates = styleUpdates || {};
             styleUpdates[styleName] = nextProp[styleName];
           }
         }
       } else {
         // Relies on `updateStylesByID` not mutating `styleUpdates`.
         styleUpdates = nextProp;
       }
     } else if (registrationNameModules.hasOwnProperty(propKey)) {
       if (nextProp) {
         enqueuePutListener(this, propKey, nextProp, transaction);
       } else if (lastProp) {
         deleteListener(this, propKey);
       }
     } else if (isCustomComponent(this._tag, nextProps)) {
       if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
         DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
       }
     } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
       var node = getNode(this);
       // If we're updating to null or undefined, we should remove the property
       // from the DOM node instead of inadvertently setting to a string. This
       // brings us in line with the same behavior we have on initial render.
       if (nextProp != null) {
         DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
       } else {
         DOMPropertyOperations.deleteValueForProperty(node, propKey);
       }
     }
   }
   if (styleUpdates) {
     CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
   }
 },

 /**
  * Reconciles the children with the various properties that affect the
  * children content.
  *
  * @param {object} lastProps
  * @param {object} nextProps
  * @param {ReactReconcileTransaction} transaction
  * @param {object} context
  */
 _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
   var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
   var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

   var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
   var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

   // Note the use of `!=` which checks for null or undefined.
   var lastChildren = lastContent != null ? null : lastProps.children;
   var nextChildren = nextContent != null ? null : nextProps.children;

   // If we're switching from children to content/html or vice versa, remove
   // the old content
   var lastHasContentOrHtml = lastContent != null || lastHtml != null;
   var nextHasContentOrHtml = nextContent != null || nextHtml != null;
   if (lastChildren != null && nextChildren == null) {
     this.updateChildren(null, transaction, context);
   } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
     this.updateTextContent('');
   }

   if (nextContent != null) {
     if (lastContent !== nextContent) {
       this.updateTextContent('' + nextContent);
     }
   } else if (nextHtml != null) {
     if (lastHtml !== nextHtml) {
       this.updateMarkup('' + nextHtml);
     }
   } else if (nextChildren != null) {
     this.updateChildren(nextChildren, transaction, context);
   }
 },

 getNativeNode: function () {
   return getNode(this);
 },

 /**
  * Destroys all event registrations for this instance. Does not remove from
  * the DOM. That must be done by the parent.
  *
  * @internal
  */
 unmountComponent: function (safely) {
   switch (this._tag) {
     case 'iframe':
     case 'object':
     case 'img':
     case 'form':
     case 'video':
     case 'audio':
       var listeners = this._wrapperState.listeners;
       if (listeners) {
         for (var i = 0; i < listeners.length; i++) {
           listeners[i].remove();
         }
       }
       break;
     case 'html':
     case 'head':
     case 'body':
       /**
        * Components like <html> <head> and <body> can't be removed or added
        * easily in a cross-browser way, however it's valuable to be able to
        * take advantage of React's reconciliation for styling and <title>
        * management. So we just document it and throw in dangerous cases.
        */
       !false ? "development" !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : void 0;
       break;
   }

   this.unmountChildren(safely);
   ReactDOMComponentTree.uncacheNode(this);
   EventPluginHub.deleteAllListeners(this);
   ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
   this._rootNodeID = null;
   this._domID = null;
   this._wrapperState = null;
 },

 getPublicInstance: function () {
   return getNode(this);
 }

};

ReactPerf.measureMethods(ReactDOMComponent.Mixin, 'ReactDOMComponent', {
 mountComponent: 'mountComponent',
 receiveComponent: 'receiveComponent'
});

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
},{"1":1,"10":10,"11":11,"129":129,"143":143,"15":15,"154":154,"16":16,"17":17,"171":171,"175":175,"180":180,"181":181,"182":182,"26":26,"33":33,"39":39,"4":4,"41":41,"42":42,"49":49,"51":51,"52":52,"56":56,"8":8,"80":80,"86":86,"9":9}],41:[function(_dereq_,module,exports){
/**
* Copyright 2015-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMComponentFlags
*/

'use strict';

var ReactDOMComponentFlags = {
 hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;
},{}],42:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMComponentTree
*/

'use strict';

var DOMProperty = _dereq_(10);
var ReactDOMComponentFlags = _dereq_(41);

var invariant = _dereq_(171);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
* Drill down (through composites and empty components) until we get a native or
* native text component.
*
* This is pretty polymorphic but unavoidable with the current structure we have
* for `_renderedChildren`.
*/
function getRenderedNativeOrTextFromComponent(component) {
 var rendered;
 while (rendered = component._renderedComponent) {
   component = rendered;
 }
 return component;
}

/**
* Populate `_nativeNode` on the rendered native/text component with the given
* DOM node. The passed `inst` can be a composite.
*/
function precacheNode(inst, node) {
 var nativeInst = getRenderedNativeOrTextFromComponent(inst);
 nativeInst._nativeNode = node;
 node[internalInstanceKey] = nativeInst;
}

function uncacheNode(inst) {
 var node = inst._nativeNode;
 if (node) {
   delete node[internalInstanceKey];
   inst._nativeNode = null;
 }
}

/**
* Populate `_nativeNode` on each child of `inst`, assuming that the children
* match up with the DOM (element) children of `node`.
*
* We cache entire levels at once to avoid an n^2 problem where we access the
* children of a node sequentially and have to walk from the start to our target
* node every time.
*
* Since we update `_renderedChildren` and the actual DOM at (slightly)
* different times, we could race here and see a newer `_renderedChildren` than
* the DOM nodes we see. To avoid this, ReactMultiChild calls
* `prepareToManageChildren` before we change `_renderedChildren`, at which
* time the container's child nodes are always cached (until it unmounts).
*/
function precacheChildNodes(inst, node) {
 if (inst._flags & Flags.hasCachedChildNodes) {
   return;
 }
 var children = inst._renderedChildren;
 var childNode = node.firstChild;
 outer: for (var name in children) {
   if (!children.hasOwnProperty(name)) {
     continue;
   }
   var childInst = children[name];
   var childID = getRenderedNativeOrTextFromComponent(childInst)._domID;
   if (childID == null) {
     // We're currently unmounting this child in ReactMultiChild; skip it.
     continue;
   }
   // We assume the child nodes are in the same order as the child instances.
   for (; childNode !== null; childNode = childNode.nextSibling) {
     if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
       precacheNode(childInst, childNode);
       continue outer;
     }
   }
   // We reached the end of the DOM children without finding an ID match.
   !false ? "development" !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : invariant(false) : void 0;
 }
 inst._flags |= Flags.hasCachedChildNodes;
}

/**
* Given a DOM node, return the closest ReactDOMComponent or
* ReactDOMTextComponent instance ancestor.
*/
function getClosestInstanceFromNode(node) {
 if (node[internalInstanceKey]) {
   return node[internalInstanceKey];
 }

 // Walk up the tree until we find an ancestor whose instance we have cached.
 var parents = [];
 while (!node[internalInstanceKey]) {
   parents.push(node);
   if (node.parentNode) {
     node = node.parentNode;
   } else {
     // Top of the tree. This node must not be part of a React tree (or is
     // unmounted, potentially).
     return null;
   }
 }

 var closest;
 var inst;
 for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
   closest = inst;
   if (parents.length) {
     precacheChildNodes(inst, node);
   }
 }

 return closest;
}

/**
* Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
* instance, or null if the node was not rendered by this React.
*/
function getInstanceFromNode(node) {
 var inst = getClosestInstanceFromNode(node);
 if (inst != null && inst._nativeNode === node) {
   return inst;
 } else {
   return null;
 }
}

/**
* Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
* DOM node.
*/
function getNodeFromInstance(inst) {
 // Without this first invariant, passing a non-DOM-component triggers the next
 // invariant for a missing parent, which is super confusing.
 !(inst._nativeNode !== undefined) ? "development" !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : invariant(false) : void 0;

 if (inst._nativeNode) {
   return inst._nativeNode;
 }

 // Walk up the tree until we find an ancestor whose DOM node we have cached.
 var parents = [];
 while (!inst._nativeNode) {
   parents.push(inst);
   !inst._nativeParent ? "development" !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : invariant(false) : void 0;
   inst = inst._nativeParent;
 }

 // Now parents contains each ancestor that does *not* have a cached native
 // node, and `inst` is the deepest ancestor that does.
 for (; parents.length; inst = parents.pop()) {
   precacheChildNodes(inst, inst._nativeNode);
 }

 return inst._nativeNode;
}

var ReactDOMComponentTree = {
 getClosestInstanceFromNode: getClosestInstanceFromNode,
 getInstanceFromNode: getInstanceFromNode,
 getNodeFromInstance: getNodeFromInstance,
 precacheChildNodes: precacheChildNodes,
 precacheNode: precacheNode,
 uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;
},{"10":10,"171":171,"41":41}],43:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMContainerInfo
*/

'use strict';

var validateDOMNesting = _dereq_(154);

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
 var info = {
   _topLevelWrapper: topLevelWrapper,
   _idCounter: 1,
   _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
   _tag: node ? node.nodeName.toLowerCase() : null,
   _namespaceURI: node ? node.namespaceURI : null
 };
 if ("development" !== 'production') {
   info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
 }
 return info;
}

module.exports = ReactDOMContainerInfo;
},{"154":154}],44:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMDebugTool
*/

'use strict';

var ReactDOMUnknownPropertyDevtool = _dereq_(58);

var warning = _dereq_(181);

var eventHandlers = [];
var handlerDoesThrowForEvent = {};

function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
 if ("development" !== 'production') {
   eventHandlers.forEach(function (handler) {
     try {
       if (handler[handlerFunctionName]) {
         handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);
       }
     } catch (e) {
       "development" !== 'production' ? warning(!handlerDoesThrowForEvent[handlerFunctionName], 'exception thrown by devtool while handling %s: %s', handlerFunctionName, e.message) : void 0;
       handlerDoesThrowForEvent[handlerFunctionName] = true;
     }
   });
 }
}

var ReactDOMDebugTool = {
 addDevtool: function (devtool) {
   eventHandlers.push(devtool);
 },
 removeDevtool: function (devtool) {
   for (var i = 0; i < eventHandlers.length; i++) {
     if (eventHandlers[i] === devtool) {
       eventHandlers.splice(i, 1);
       i--;
     }
   }
 },
 onCreateMarkupForProperty: function (name, value) {
   emitEvent('onCreateMarkupForProperty', name, value);
 },
 onSetValueForProperty: function (node, name, value) {
   emitEvent('onSetValueForProperty', node, name, value);
 },
 onDeleteValueForProperty: function (node, name) {
   emitEvent('onDeleteValueForProperty', node, name);
 }
};

ReactDOMDebugTool.addDevtool(ReactDOMUnknownPropertyDevtool);

module.exports = ReactDOMDebugTool;
},{"181":181,"58":58}],45:[function(_dereq_,module,exports){
/**
* Copyright 2014-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMEmptyComponent
*/

'use strict';

var _assign = _dereq_(182);

var DOMLazyTree = _dereq_(8);
var ReactDOMComponentTree = _dereq_(42);

var ReactDOMEmptyComponent = function (instantiate) {
 // ReactCompositeComponent uses this:
 this._currentElement = null;
 // ReactDOMComponentTree uses these:
 this._nativeNode = null;
 this._nativeParent = null;
 this._nativeContainerInfo = null;
 this._domID = null;
};
_assign(ReactDOMEmptyComponent.prototype, {
 mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
   var domID = nativeContainerInfo._idCounter++;
   this._domID = domID;
   this._nativeParent = nativeParent;
   this._nativeContainerInfo = nativeContainerInfo;

   var nodeValue = ' react-empty: ' + this._domID + ' ';
   if (transaction.useCreateElement) {
     var ownerDocument = nativeContainerInfo._ownerDocument;
     var node = ownerDocument.createComment(nodeValue);
     ReactDOMComponentTree.precacheNode(this, node);
     return DOMLazyTree(node);
   } else {
     if (transaction.renderToStaticMarkup) {
       // Normally we'd insert a comment node, but since this is a situation
       // where React won't take over (static pages), we can simply return
       // nothing.
       return '';
     }
     return '<!--' + nodeValue + '-->';
   }
 },
 receiveComponent: function () {},
 getNativeNode: function () {
   return ReactDOMComponentTree.getNodeFromInstance(this);
 },
 unmountComponent: function () {
   ReactDOMComponentTree.uncacheNode(this);
 }
});

module.exports = ReactDOMEmptyComponent;
},{"182":182,"42":42,"8":8}],46:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMFactories
*/

'use strict';

var ReactElement = _dereq_(64);
var ReactElementValidator = _dereq_(65);

var mapObject = _dereq_(176);

/**
* Create a factory that creates HTML tag elements.
*
* @param {string} tag Tag name (e.g. `div`).
* @private
*/
function createDOMFactory(tag) {
 if ("development" !== 'production') {
   return ReactElementValidator.createFactory(tag);
 }
 return ReactElement.createFactory(tag);
}

/**
* Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
* This is also accessible via `React.DOM`.
*
* @public
*/
var ReactDOMFactories = mapObject({
 a: 'a',
 abbr: 'abbr',
 address: 'address',
 area: 'area',
 article: 'article',
 aside: 'aside',
 audio: 'audio',
 b: 'b',
 base: 'base',
 bdi: 'bdi',
 bdo: 'bdo',
 big: 'big',
 blockquote: 'blockquote',
 body: 'body',
 br: 'br',
 button: 'button',
 canvas: 'canvas',
 caption: 'caption',
 cite: 'cite',
 code: 'code',
 col: 'col',
 colgroup: 'colgroup',
 data: 'data',
 datalist: 'datalist',
 dd: 'dd',
 del: 'del',
 details: 'details',
 dfn: 'dfn',
 dialog: 'dialog',
 div: 'div',
 dl: 'dl',
 dt: 'dt',
 em: 'em',
 embed: 'embed',
 fieldset: 'fieldset',
 figcaption: 'figcaption',
 figure: 'figure',
 footer: 'footer',
 form: 'form',
 h1: 'h1',
 h2: 'h2',
 h3: 'h3',
 h4: 'h4',
 h5: 'h5',
 h6: 'h6',
 head: 'head',
 header: 'header',
 hgroup: 'hgroup',
 hr: 'hr',
 html: 'html',
 i: 'i',
 iframe: 'iframe',
 img: 'img',
 input: 'input',
 ins: 'ins',
 kbd: 'kbd',
 keygen: 'keygen',
 label: 'label',
 legend: 'legend',
 li: 'li',
 link: 'link',
 main: 'main',
 map: 'map',
 mark: 'mark',
 menu: 'menu',
 menuitem: 'menuitem',
 meta: 'meta',
 meter: 'meter',
 nav: 'nav',
 noscript: 'noscript',
 object: 'object',
 ol: 'ol',
 optgroup: 'optgroup',
 option: 'option',
 output: 'output',
 p: 'p',
 param: 'param',
 picture: 'picture',
 pre: 'pre',
 progress: 'progress',
 q: 'q',
 rp: 'rp',
 rt: 'rt',
 ruby: 'ruby',
 s: 's',
 samp: 'samp',
 script: 'script',
 section: 'section',
 select: 'select',
 small: 'small',
 source: 'source',
 span: 'span',
 strong: 'strong',
 style: 'style',
 sub: 'sub',
 summary: 'summary',
 sup: 'sup',
 table: 'table',
 tbody: 'tbody',
 td: 'td',
 textarea: 'textarea',
 tfoot: 'tfoot',
 th: 'th',
 thead: 'thead',
 time: 'time',
 title: 'title',
 tr: 'tr',
 track: 'track',
 u: 'u',
 ul: 'ul',
 'var': 'var',
 video: 'video',
 wbr: 'wbr',

 // SVG
 circle: 'circle',
 clipPath: 'clipPath',
 defs: 'defs',
 ellipse: 'ellipse',
 g: 'g',
 image: 'image',
 line: 'line',
 linearGradient: 'linearGradient',
 mask: 'mask',
 path: 'path',
 pattern: 'pattern',
 polygon: 'polygon',
 polyline: 'polyline',
 radialGradient: 'radialGradient',
 rect: 'rect',
 stop: 'stop',
 svg: 'svg',
 text: 'text',
 tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOMFactories;
},{"176":176,"64":64,"65":65}],47:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMFeatureFlags
*/

'use strict';

var ReactDOMFeatureFlags = {
 useCreateElement: true
};

module.exports = ReactDOMFeatureFlags;
},{}],48:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMIDOperations
*/

'use strict';

var DOMChildrenOperations = _dereq_(7);
var ReactDOMComponentTree = _dereq_(42);
var ReactPerf = _dereq_(86);

/**
* Operations used to process updates to DOM nodes.
*/
var ReactDOMIDOperations = {

 /**
  * Updates a component's children by processing a series of updates.
  *
  * @param {array<object>} updates List of update configurations.
  * @internal
  */
 dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
   var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
   DOMChildrenOperations.processUpdates(node, updates);
 }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
 dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;
},{"42":42,"7":7,"86":86}],49:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMInput
*/

'use strict';

var _assign = _dereq_(182);

var DOMPropertyOperations = _dereq_(11);
var LinkedValueUtils = _dereq_(23);
var ReactDOMComponentTree = _dereq_(42);
var ReactUpdates = _dereq_(102);

var invariant = _dereq_(171);
var warning = _dereq_(181);

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueNull = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
 if (this._rootNodeID) {
   // DOM component is still mounted; update
   ReactDOMInput.updateWrapper(this);
 }
}

function warnIfValueIsNull(props) {
 if (props != null && props.value === null && !didWarnValueNull) {
   "development" !== 'production' ? warning(false, '`value` prop on `input` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.') : void 0;

   didWarnValueNull = true;
 }
}

/**
* Implements an <input> native component that allows setting these optional
* props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
*
* If `checked` or `value` are not supplied (or null/undefined), user actions
* that affect the checked state or value will trigger updates to the element.
*
* If they are supplied (and not null/undefined), the rendered element will not
* trigger updates to the element. Instead, the props must change in order for
* the rendered element to be updated.
*
* The rendered element will be initialized as unchecked (or `defaultChecked`)
* with an empty value (or `defaultValue`).
*
* @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
*/
var ReactDOMInput = {
 getNativeProps: function (inst, props) {
   var value = LinkedValueUtils.getValue(props);
   var checked = LinkedValueUtils.getChecked(props);

   var nativeProps = _assign({
     // Make sure we set .type before any other properties (setting .value
     // before .type means .value is lost in IE11 and below)
     type: undefined
   }, props, {
     defaultChecked: undefined,
     defaultValue: undefined,
     value: value != null ? value : inst._wrapperState.initialValue,
     checked: checked != null ? checked : inst._wrapperState.initialChecked,
     onChange: inst._wrapperState.onChange
   });

   return nativeProps;
 },

 mountWrapper: function (inst, props) {
   if ("development" !== 'production') {
     LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

     if (props.valueLink !== undefined && !didWarnValueLink) {
       "development" !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
       didWarnValueLink = true;
     }
     if (props.checkedLink !== undefined && !didWarnCheckedLink) {
       "development" !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
       didWarnCheckedLink = true;
     }
     if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
       "development" !== 'production' ? warning(false, 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
       didWarnCheckedDefaultChecked = true;
     }
     if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
       "development" !== 'production' ? warning(false, 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
       didWarnValueDefaultValue = true;
     }
     warnIfValueIsNull(props);
   }

   var defaultValue = props.defaultValue;
   inst._wrapperState = {
     initialChecked: props.defaultChecked || false,
     initialValue: defaultValue != null ? defaultValue : null,
     listeners: null,
     onChange: _handleChange.bind(inst)
   };

   if ("development" !== 'production') {
     inst._wrapperState.controlled = props.checked !== undefined || props.value !== undefined;
   }
 },

 updateWrapper: function (inst) {
   var props = inst._currentElement.props;

   if ("development" !== 'production') {
     warnIfValueIsNull(props);

     var initialValue = inst._wrapperState.initialChecked || inst._wrapperState.initialValue;
     var defaultValue = props.defaultChecked || props.defaultValue;
     var controlled = props.checked !== undefined || props.value !== undefined;
     var owner = inst._currentElement._owner;

     if ((initialValue || !inst._wrapperState.controlled) && controlled && !didWarnUncontrolledToControlled) {
       "development" !== 'production' ? warning(false, '%s is changing a uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
       didWarnUncontrolledToControlled = true;
     }
     if (inst._wrapperState.controlled && (defaultValue || !controlled) && !didWarnControlledToUncontrolled) {
       "development" !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
       didWarnControlledToUncontrolled = true;
     }
   }

   // TODO: Shouldn't this be getChecked(props)?
   var checked = props.checked;
   if (checked != null) {
     DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
   }

   var value = LinkedValueUtils.getValue(props);
   if (value != null) {
     // Cast `value` to a string to ensure the value is set correctly. While
     // browsers typically do this as necessary, jsdom doesn't.
     DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'value', '' + value);
   }
 }
};

function _handleChange(event) {
 var props = this._currentElement.props;

 var returnValue = LinkedValueUtils.executeOnChange(props, event);

 // Here we use asap to wait until all updates have propagated, which
 // is important when using controlled components within layers:
 // https://github.com/facebook/react/issues/1698
 ReactUpdates.asap(forceUpdateIfMounted, this);

 var name = props.name;
 if (props.type === 'radio' && name != null) {
   var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
   var queryRoot = rootNode;

   while (queryRoot.parentNode) {
     queryRoot = queryRoot.parentNode;
   }

   // If `rootNode.form` was non-null, then we could try `form.elements`,
   // but that sometimes behaves strangely in IE8. We could also try using
   // `form.getElementsByName`, but that will only return direct children
   // and won't include inputs that use the HTML5 `form=` attribute. Since
   // the input might not even be in a form, let's just use the global
   // `querySelectorAll` to ensure we don't miss anything.
   var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

   for (var i = 0; i < group.length; i++) {
     var otherNode = group[i];
     if (otherNode === rootNode || otherNode.form !== rootNode.form) {
       continue;
     }
     // This will throw if radio buttons rendered by different copies of React
     // and the same name are rendered into the same form (same as #1939).
     // That's probably okay; we don't support it just as we don't support
     // mixing React radio buttons with non-React ones.
     var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
     !otherInstance ? "development" !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : void 0;
     // If this is a controlled radio button group, forcing the input that
     // was previously checked to update will cause it to be come re-checked
     // as appropriate.
     ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
   }
 }

 return returnValue;
}

module.exports = ReactDOMInput;
},{"102":102,"11":11,"171":171,"181":181,"182":182,"23":23,"42":42}],50:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMInstrumentation
*/

'use strict';

var ReactDOMDebugTool = _dereq_(44);

module.exports = { debugTool: ReactDOMDebugTool };
},{"44":44}],51:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMOption
*/

'use strict';

var _assign = _dereq_(182);

var ReactChildren = _dereq_(30);
var ReactDOMComponentTree = _dereq_(42);
var ReactDOMSelect = _dereq_(52);

var warning = _dereq_(181);

/**
* Implements an <option> native component that warns when `selected` is set.
*/
var ReactDOMOption = {
 mountWrapper: function (inst, props, nativeParent) {
   // TODO (yungsters): Remove support for `selected` in <option>.
   if ("development" !== 'production') {
     "development" !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
   }

   // Look up whether this option is 'selected'
   var selectValue = null;
   if (nativeParent != null && nativeParent._tag === 'select') {
     selectValue = ReactDOMSelect.getSelectValueContext(nativeParent);
   }

   // If the value is null (e.g., no specified value or after initial mount)
   // or missing (e.g., for <datalist>), we don't change props.selected
   var selected = null;
   if (selectValue != null) {
     selected = false;
     if (Array.isArray(selectValue)) {
       // multiple
       for (var i = 0; i < selectValue.length; i++) {
         if ('' + selectValue[i] === '' + props.value) {
           selected = true;
           break;
         }
       }
     } else {
       selected = '' + selectValue === '' + props.value;
     }
   }

   inst._wrapperState = { selected: selected };
 },

 postMountWrapper: function (inst) {
   // value="" should make a value attribute (#6219)
   var props = inst._currentElement.props;
   if (props.value != null) {
     var node = ReactDOMComponentTree.getNodeFromInstance(inst);
     node.setAttribute('value', props.value);
   }
 },

 getNativeProps: function (inst, props) {
   var nativeProps = _assign({ selected: undefined, children: undefined }, props);

   // Read state only from initial mount because <select> updates value
   // manually; we need the initial state only for server rendering
   if (inst._wrapperState.selected != null) {
     nativeProps.selected = inst._wrapperState.selected;
   }

   var content = '';

   // Flatten children and warn if they aren't strings or numbers;
   // invalid types are ignored.
   ReactChildren.forEach(props.children, function (child) {
     if (child == null) {
       return;
     }
     if (typeof child === 'string' || typeof child === 'number') {
       content += child;
     } else {
       "development" !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
     }
   });

   if (content) {
     nativeProps.children = content;
   }

   return nativeProps;
 }

};

module.exports = ReactDOMOption;
},{"181":181,"182":182,"30":30,"42":42,"52":52}],52:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMSelect
*/

'use strict';

var _assign = _dereq_(182);

var LinkedValueUtils = _dereq_(23);
var ReactDOMComponentTree = _dereq_(42);
var ReactUpdates = _dereq_(102);

var warning = _dereq_(181);

var didWarnValueLink = false;
var didWarnValueNull = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
 if (this._rootNodeID && this._wrapperState.pendingUpdate) {
   this._wrapperState.pendingUpdate = false;

   var props = this._currentElement.props;
   var value = LinkedValueUtils.getValue(props);

   if (value != null) {
     updateOptions(this, Boolean(props.multiple), value);
   }
 }
}

function getDeclarationErrorAddendum(owner) {
 if (owner) {
   var name = owner.getName();
   if (name) {
     return ' Check the render method of `' + name + '`.';
   }
 }
 return '';
}

function warnIfValueIsNull(props) {
 if (props != null && props.value === null && !didWarnValueNull) {
   "development" !== 'production' ? warning(false, '`value` prop on `select` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.') : void 0;

   didWarnValueNull = true;
 }
}

var valuePropNames = ['value', 'defaultValue'];

/**
* Validation function for `value` and `defaultValue`.
* @private
*/
function checkSelectPropTypes(inst, props) {
 var owner = inst._currentElement._owner;
 LinkedValueUtils.checkPropTypes('select', props, owner);

 if (props.valueLink !== undefined && !didWarnValueLink) {
   "development" !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
   didWarnValueLink = true;
 }

 for (var i = 0; i < valuePropNames.length; i++) {
   var propName = valuePropNames[i];
   if (props[propName] == null) {
     continue;
   }
   if (props.multiple) {
     "development" !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
   } else {
     "development" !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
   }
 }
}

/**
* @param {ReactDOMComponent} inst
* @param {boolean} multiple
* @param {*} propValue A stringable (with `multiple`, a list of stringables).
* @private
*/
function updateOptions(inst, multiple, propValue) {
 var selectedValue, i;
 var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

 if (multiple) {
   selectedValue = {};
   for (i = 0; i < propValue.length; i++) {
     selectedValue['' + propValue[i]] = true;
   }
   for (i = 0; i < options.length; i++) {
     var selected = selectedValue.hasOwnProperty(options[i].value);
     if (options[i].selected !== selected) {
       options[i].selected = selected;
     }
   }
 } else {
   // Do not set `select.value` as exact behavior isn't consistent across all
   // browsers for all cases.
   selectedValue = '' + propValue;
   for (i = 0; i < options.length; i++) {
     if (options[i].value === selectedValue) {
       options[i].selected = true;
       return;
     }
   }
   if (options.length) {
     options[0].selected = true;
   }
 }
}

/**
* Implements a <select> native component that allows optionally setting the
* props `value` and `defaultValue`. If `multiple` is false, the prop must be a
* stringable. If `multiple` is true, the prop must be an array of stringables.
*
* If `value` is not supplied (or null/undefined), user actions that change the
* selected option will trigger updates to the rendered options.
*
* If it is supplied (and not null/undefined), the rendered options will not
* update in response to user actions. Instead, the `value` prop must change in
* order for the rendered options to update.
*
* If `defaultValue` is provided, any options with the supplied values will be
* selected.
*/
var ReactDOMSelect = {
 getNativeProps: function (inst, props) {
   return _assign({}, props, {
     onChange: inst._wrapperState.onChange,
     value: undefined
   });
 },

 mountWrapper: function (inst, props) {
   if ("development" !== 'production') {
     checkSelectPropTypes(inst, props);
     warnIfValueIsNull(props);
   }

   var value = LinkedValueUtils.getValue(props);
   inst._wrapperState = {
     pendingUpdate: false,
     initialValue: value != null ? value : props.defaultValue,
     listeners: null,
     onChange: _handleChange.bind(inst),
     wasMultiple: Boolean(props.multiple)
   };

   if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
     "development" !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
     didWarnValueDefaultValue = true;
   }
 },

 getSelectValueContext: function (inst) {
   // ReactDOMOption looks at this initial value so the initial generated
   // markup has correct `selected` attributes
   return inst._wrapperState.initialValue;
 },

 postUpdateWrapper: function (inst) {
   var props = inst._currentElement.props;
   if ("development" !== 'production') {
     warnIfValueIsNull(props);
   }

   // After the initial mount, we control selected-ness manually so don't pass
   // this value down
   inst._wrapperState.initialValue = undefined;

   var wasMultiple = inst._wrapperState.wasMultiple;
   inst._wrapperState.wasMultiple = Boolean(props.multiple);

   var value = LinkedValueUtils.getValue(props);
   if (value != null) {
     inst._wrapperState.pendingUpdate = false;
     updateOptions(inst, Boolean(props.multiple), value);
   } else if (wasMultiple !== Boolean(props.multiple)) {
     // For simplicity, reapply `defaultValue` if `multiple` is toggled.
     if (props.defaultValue != null) {
       updateOptions(inst, Boolean(props.multiple), props.defaultValue);
     } else {
       // Revert the select back to its default unselected state.
       updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
     }
   }
 }
};

function _handleChange(event) {
 var props = this._currentElement.props;
 var returnValue = LinkedValueUtils.executeOnChange(props, event);

 if (this._rootNodeID) {
   this._wrapperState.pendingUpdate = true;
 }
 ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
 return returnValue;
}

module.exports = ReactDOMSelect;
},{"102":102,"181":181,"182":182,"23":23,"42":42}],53:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMSelection
*/

'use strict';

var ExecutionEnvironment = _dereq_(157);

var getNodeForCharacterOffset = _dereq_(139);
var getTextContentAccessor = _dereq_(140);

/**
* While `isCollapsed` is available on the Selection object and `collapsed`
* is available on the Range object, IE11 sometimes gets them wrong.
* If the anchor/focus nodes and offsets are the same, the range is collapsed.
*/
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
 return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
* Get the appropriate anchor and focus node/offset pairs for IE.
*
* The catch here is that IE's selection API doesn't provide information
* about whether the selection is forward or backward, so we have to
* behave as though it's always forward.
*
* IE text differs from modern selection in that it behaves as though
* block elements end with a new line. This means character offsets will
* differ between the two APIs.
*
* @param {DOMElement} node
* @return {object}
*/
function getIEOffsets(node) {
 var selection = document.selection;
 var selectedRange = selection.createRange();
 var selectedLength = selectedRange.text.length;

 // Duplicate selection so we can move range without breaking user selection.
 var fromStart = selectedRange.duplicate();
 fromStart.moveToElementText(node);
 fromStart.setEndPoint('EndToStart', selectedRange);

 var startOffset = fromStart.text.length;
 var endOffset = startOffset + selectedLength;

 return {
   start: startOffset,
   end: endOffset
 };
}

/**
* @param {DOMElement} node
* @return {?object}
*/
function getModernOffsets(node) {
 var selection = window.getSelection && window.getSelection();

 if (!selection || selection.rangeCount === 0) {
   return null;
 }

 var anchorNode = selection.anchorNode;
 var anchorOffset = selection.anchorOffset;
 var focusNode = selection.focusNode;
 var focusOffset = selection.focusOffset;

 var currentRange = selection.getRangeAt(0);

 // In Firefox, range.startContainer and range.endContainer can be "anonymous
 // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
 // divs do not seem to expose properties, triggering a "Permission denied
 // error" if any of its properties are accessed. The only seemingly possible
 // way to avoid erroring is to access a property that typically works for
 // non-anonymous divs and catch any error that may otherwise arise. See
 // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
 try {
   /* eslint-disable no-unused-expressions */
   currentRange.startContainer.nodeType;
   currentRange.endContainer.nodeType;
   /* eslint-enable no-unused-expressions */
 } catch (e) {
   return null;
 }

 // If the node and offset values are the same, the selection is collapsed.
 // `Selection.isCollapsed` is available natively, but IE sometimes gets
 // this value wrong.
 var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

 var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

 var tempRange = currentRange.cloneRange();
 tempRange.selectNodeContents(node);
 tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

 var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

 var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
 var end = start + rangeLength;

 // Detect whether the selection is backward.
 var detectionRange = document.createRange();
 detectionRange.setStart(anchorNode, anchorOffset);
 detectionRange.setEnd(focusNode, focusOffset);
 var isBackward = detectionRange.collapsed;

 return {
   start: isBackward ? end : start,
   end: isBackward ? start : end
 };
}

/**
* @param {DOMElement|DOMTextNode} node
* @param {object} offsets
*/
function setIEOffsets(node, offsets) {
 var range = document.selection.createRange().duplicate();
 var start, end;

 if (offsets.end === undefined) {
   start = offsets.start;
   end = start;
 } else if (offsets.start > offsets.end) {
   start = offsets.end;
   end = offsets.start;
 } else {
   start = offsets.start;
   end = offsets.end;
 }

 range.moveToElementText(node);
 range.moveStart('character', start);
 range.setEndPoint('EndToStart', range);
 range.moveEnd('character', end - start);
 range.select();
}

/**
* In modern non-IE browsers, we can support both forward and backward
* selections.
*
* Note: IE10+ supports the Selection object, but it does not support
* the `extend` method, which means that even in modern IE, it's not possible
* to programmatically create a backward selection. Thus, for all IE
* versions, we use the old IE API to create our selections.
*
* @param {DOMElement|DOMTextNode} node
* @param {object} offsets
*/
function setModernOffsets(node, offsets) {
 if (!window.getSelection) {
   return;
 }

 var selection = window.getSelection();
 var length = node[getTextContentAccessor()].length;
 var start = Math.min(offsets.start, length);
 var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

 // IE 11 uses modern selection, but doesn't support the extend method.
 // Flip backward selections, so we can set with a single range.
 if (!selection.extend && start > end) {
   var temp = end;
   end = start;
   start = temp;
 }

 var startMarker = getNodeForCharacterOffset(node, start);
 var endMarker = getNodeForCharacterOffset(node, end);

 if (startMarker && endMarker) {
   var range = document.createRange();
   range.setStart(startMarker.node, startMarker.offset);
   selection.removeAllRanges();

   if (start > end) {
     selection.addRange(range);
     selection.extend(endMarker.node, endMarker.offset);
   } else {
     range.setEnd(endMarker.node, endMarker.offset);
     selection.addRange(range);
   }
 }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
 /**
  * @param {DOMElement} node
  */
 getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

 /**
  * @param {DOMElement|DOMTextNode} node
  * @param {object} offsets
  */
 setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"139":139,"140":140,"157":157}],54:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMServer
*/

'use strict';

var ReactDefaultInjection = _dereq_(61);
var ReactServerRendering = _dereq_(94);
var ReactVersion = _dereq_(103);

ReactDefaultInjection.inject();

var ReactDOMServer = {
 renderToString: ReactServerRendering.renderToString,
 renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
 version: ReactVersion
};

module.exports = ReactDOMServer;
},{"103":103,"61":61,"94":94}],55:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMTextComponent
*/

'use strict';

var _assign = _dereq_(182);

var DOMChildrenOperations = _dereq_(7);
var DOMLazyTree = _dereq_(8);
var ReactDOMComponentTree = _dereq_(42);
var ReactPerf = _dereq_(86);

var escapeTextContentForBrowser = _dereq_(129);
var invariant = _dereq_(171);
var validateDOMNesting = _dereq_(154);

/**
* Text nodes violate a couple assumptions that React makes about components:
*
*  - When mounting text into the DOM, adjacent text nodes are merged.
*  - Text nodes cannot be assigned a React root ID.
*
* This component is used to wrap strings between comment nodes so that they
* can undergo the same reconciliation that is applied to elements.
*
* TODO: Investigate representing React components in the DOM with text nodes.
*
* @class ReactDOMTextComponent
* @extends ReactComponent
* @internal
*/
var ReactDOMTextComponent = function (text) {
 // TODO: This is really a ReactText (ReactNode), not a ReactElement
 this._currentElement = text;
 this._stringText = '' + text;
 // ReactDOMComponentTree uses these:
 this._nativeNode = null;
 this._nativeParent = null;

 // Properties
 this._domID = null;
 this._mountIndex = 0;
 this._closingComment = null;
 this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {

 /**
  * Creates the markup for this text node. This node is not intended to have
  * any features besides containing text content.
  *
  * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
  * @return {string} Markup for this text node.
  * @internal
  */
 mountComponent: function (transaction, nativeParent, nativeContainerInfo, context) {
   if ("development" !== 'production') {
     var parentInfo;
     if (nativeParent != null) {
       parentInfo = nativeParent._ancestorInfo;
     } else if (nativeContainerInfo != null) {
       parentInfo = nativeContainerInfo._ancestorInfo;
     }
     if (parentInfo) {
       // parentInfo should always be present except for the top-level
       // component when server rendering
       validateDOMNesting('#text', this, parentInfo);
     }
   }

   var domID = nativeContainerInfo._idCounter++;
   var openingValue = ' react-text: ' + domID + ' ';
   var closingValue = ' /react-text ';
   this._domID = domID;
   this._nativeParent = nativeParent;
   if (transaction.useCreateElement) {
     var ownerDocument = nativeContainerInfo._ownerDocument;
     var openingComment = ownerDocument.createComment(openingValue);
     var closingComment = ownerDocument.createComment(closingValue);
     var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
     DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
     if (this._stringText) {
       DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
     }
     DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
     ReactDOMComponentTree.precacheNode(this, openingComment);
     this._closingComment = closingComment;
     return lazyTree;
   } else {
     var escapedText = escapeTextContentForBrowser(this._stringText);

     if (transaction.renderToStaticMarkup) {
       // Normally we'd wrap this between comment nodes for the reasons stated
       // above, but since this is a situation where React won't take over
       // (static pages), we can simply return the text as it is.
       return escapedText;
     }

     return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
   }
 },

 /**
  * Updates this component by updating the text content.
  *
  * @param {ReactText} nextText The next text content
  * @param {ReactReconcileTransaction} transaction
  * @internal
  */
 receiveComponent: function (nextText, transaction) {
   if (nextText !== this._currentElement) {
     this._currentElement = nextText;
     var nextStringText = '' + nextText;
     if (nextStringText !== this._stringText) {
       // TODO: Save this as pending props and use performUpdateIfNecessary
       // and/or updateComponent to do the actual update for consistency with
       // other component types?
       this._stringText = nextStringText;
       var commentNodes = this.getNativeNode();
       DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
     }
   }
 },

 getNativeNode: function () {
   var nativeNode = this._commentNodes;
   if (nativeNode) {
     return nativeNode;
   }
   if (!this._closingComment) {
     var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
     var node = openingComment.nextSibling;
     while (true) {
       !(node != null) ? "development" !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : invariant(false) : void 0;
       if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
         this._closingComment = node;
         break;
       }
       node = node.nextSibling;
     }
   }
   nativeNode = [this._nativeNode, this._closingComment];
   this._commentNodes = nativeNode;
   return nativeNode;
 },

 unmountComponent: function () {
   this._closingComment = null;
   this._commentNodes = null;
   ReactDOMComponentTree.uncacheNode(this);
 }

});

ReactPerf.measureMethods(ReactDOMTextComponent.prototype, 'ReactDOMTextComponent', {
 mountComponent: 'mountComponent',
 receiveComponent: 'receiveComponent'
});

module.exports = ReactDOMTextComponent;
},{"129":129,"154":154,"171":171,"182":182,"42":42,"7":7,"8":8,"86":86}],56:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMTextarea
*/

'use strict';

var _assign = _dereq_(182);

var DOMPropertyOperations = _dereq_(11);
var LinkedValueUtils = _dereq_(23);
var ReactDOMComponentTree = _dereq_(42);
var ReactUpdates = _dereq_(102);

var invariant = _dereq_(171);
var warning = _dereq_(181);

var didWarnValueLink = false;
var didWarnValueNull = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
 if (this._rootNodeID) {
   // DOM component is still mounted; update
   ReactDOMTextarea.updateWrapper(this);
 }
}

function warnIfValueIsNull(props) {
 if (props != null && props.value === null && !didWarnValueNull) {
   "development" !== 'production' ? warning(false, '`value` prop on `textarea` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.') : void 0;

   didWarnValueNull = true;
 }
}

/**
* Implements a <textarea> native component that allows setting `value`, and
* `defaultValue`. This differs from the traditional DOM API because value is
* usually set as PCDATA children.
*
* If `value` is not supplied (or null/undefined), user actions that affect the
* value will trigger updates to the element.
*
* If `value` is supplied (and not null/undefined), the rendered element will
* not trigger updates to the element. Instead, the `value` prop must change in
* order for the rendered element to be updated.
*
* The rendered element will be initialized with an empty value, the prop
* `defaultValue` if specified, or the children content (deprecated).
*/
var ReactDOMTextarea = {
 getNativeProps: function (inst, props) {
   !(props.dangerouslySetInnerHTML == null) ? "development" !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : void 0;

   // Always set children to the same thing. In IE9, the selection range will
   // get reset if `textContent` is mutated.
   var nativeProps = _assign({}, props, {
     defaultValue: undefined,
     value: undefined,
     children: inst._wrapperState.initialValue,
     onChange: inst._wrapperState.onChange
   });

   return nativeProps;
 },

 mountWrapper: function (inst, props) {
   if ("development" !== 'production') {
     LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
     if (props.valueLink !== undefined && !didWarnValueLink) {
       "development" !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
       didWarnValueLink = true;
     }
     if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
       "development" !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
       didWarnValDefaultVal = true;
     }
     warnIfValueIsNull(props);
   }

   var defaultValue = props.defaultValue;
   // TODO (yungsters): Remove support for children content in <textarea>.
   var children = props.children;
   if (children != null) {
     if ("development" !== 'production') {
       "development" !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
     }
     !(defaultValue == null) ? "development" !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : void 0;
     if (Array.isArray(children)) {
       !(children.length <= 1) ? "development" !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : void 0;
       children = children[0];
     }

     defaultValue = '' + children;
   }
   if (defaultValue == null) {
     defaultValue = '';
   }
   var value = LinkedValueUtils.getValue(props);
   inst._wrapperState = {
     // We save the initial value so that `ReactDOMComponent` doesn't update
     // `textContent` (unnecessary since we update value).
     // The initial value can be a boolean or object so that's why it's
     // forced to be a string.
     initialValue: '' + (value != null ? value : defaultValue),
     listeners: null,
     onChange: _handleChange.bind(inst)
   };
 },

 updateWrapper: function (inst) {
   var props = inst._currentElement.props;

   if ("development" !== 'production') {
     warnIfValueIsNull(props);
   }

   var value = LinkedValueUtils.getValue(props);
   if (value != null) {
     // Cast `value` to a string to ensure the value is set correctly. While
     // browsers typically do this as necessary, jsdom doesn't.
     DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'value', '' + value);
   }
 }
};

function _handleChange(event) {
 var props = this._currentElement.props;
 var returnValue = LinkedValueUtils.executeOnChange(props, event);
 ReactUpdates.asap(forceUpdateIfMounted, this);
 return returnValue;
}

module.exports = ReactDOMTextarea;
},{"102":102,"11":11,"171":171,"181":181,"182":182,"23":23,"42":42}],57:[function(_dereq_,module,exports){
/**
* Copyright 2015-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMTreeTraversal
*/

'use strict';

var invariant = _dereq_(171);

/**
* Return the lowest common ancestor of A and B, or null if they are in
* different trees.
*/
function getLowestCommonAncestor(instA, instB) {
 !('_nativeNode' in instA) ? "development" !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : invariant(false) : void 0;
 !('_nativeNode' in instB) ? "development" !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : invariant(false) : void 0;

 var depthA = 0;
 for (var tempA = instA; tempA; tempA = tempA._nativeParent) {
   depthA++;
 }
 var depthB = 0;
 for (var tempB = instB; tempB; tempB = tempB._nativeParent) {
   depthB++;
 }

 // If A is deeper, crawl up.
 while (depthA - depthB > 0) {
   instA = instA._nativeParent;
   depthA--;
 }

 // If B is deeper, crawl up.
 while (depthB - depthA > 0) {
   instB = instB._nativeParent;
   depthB--;
 }

 // Walk in lockstep until we find a match.
 var depth = depthA;
 while (depth--) {
   if (instA === instB) {
     return instA;
   }
   instA = instA._nativeParent;
   instB = instB._nativeParent;
 }
 return null;
}

/**
* Return if A is an ancestor of B.
*/
function isAncestor(instA, instB) {
 !('_nativeNode' in instA) ? "development" !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : invariant(false) : void 0;
 !('_nativeNode' in instB) ? "development" !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : invariant(false) : void 0;

 while (instB) {
   if (instB === instA) {
     return true;
   }
   instB = instB._nativeParent;
 }
 return false;
}

/**
* Return the parent instance of the passed-in instance.
*/
function getParentInstance(inst) {
 !('_nativeNode' in inst) ? "development" !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : invariant(false) : void 0;

 return inst._nativeParent;
}

/**
* Simulates the traversal of a two-phase, capture/bubble event dispatch.
*/
function traverseTwoPhase(inst, fn, arg) {
 var path = [];
 while (inst) {
   path.push(inst);
   inst = inst._nativeParent;
 }
 var i;
 for (i = path.length; i-- > 0;) {
   fn(path[i], false, arg);
 }
 for (i = 0; i < path.length; i++) {
   fn(path[i], true, arg);
 }
}

/**
* Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
* should would receive a `mouseEnter` or `mouseLeave` event.
*
* Does not invoke the callback on the nearest common ancestor because nothing
* "entered" or "left" that element.
*/
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
 var common = from && to ? getLowestCommonAncestor(from, to) : null;
 var pathFrom = [];
 while (from && from !== common) {
   pathFrom.push(from);
   from = from._nativeParent;
 }
 var pathTo = [];
 while (to && to !== common) {
   pathTo.push(to);
   to = to._nativeParent;
 }
 var i;
 for (i = 0; i < pathFrom.length; i++) {
   fn(pathFrom[i], true, argFrom);
 }
 for (i = pathTo.length; i-- > 0;) {
   fn(pathTo[i], false, argTo);
 }
}

module.exports = {
 isAncestor: isAncestor,
 getLowestCommonAncestor: getLowestCommonAncestor,
 getParentInstance: getParentInstance,
 traverseTwoPhase: traverseTwoPhase,
 traverseEnterLeave: traverseEnterLeave
};
},{"171":171}],58:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDOMUnknownPropertyDevtool
*/

'use strict';

var DOMProperty = _dereq_(10);
var EventPluginRegistry = _dereq_(17);

var warning = _dereq_(181);

if ("development" !== 'production') {
 var reactProps = {
   children: true,
   dangerouslySetInnerHTML: true,
   key: true,
   ref: true
 };
 var warnedProperties = {};

 var warnUnknownProperty = function (name) {
   if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
     return;
   }
   if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
     return;
   }

   warnedProperties[name] = true;
   var lowerCasedName = name.toLowerCase();

   // data-* attributes should be lowercase; suggest the lowercase version
   var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

   // For now, only warn when we have a suggested correction. This prevents
   // logging too much when using transferPropsTo.
   "development" !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : void 0;

   var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

   "development" !== 'production' ? warning(registrationName == null, 'Unknown event handler property %s. Did you mean `%s`?', name, registrationName) : void 0;
 };
}

var ReactDOMUnknownPropertyDevtool = {
 onCreateMarkupForProperty: function (name, value) {
   warnUnknownProperty(name);
 },
 onSetValueForProperty: function (node, name, value) {
   warnUnknownProperty(name);
 },
 onDeleteValueForProperty: function (node, name) {
   warnUnknownProperty(name);
 }
};

module.exports = ReactDOMUnknownPropertyDevtool;
},{"10":10,"17":17,"181":181}],59:[function(_dereq_,module,exports){
/**
* Copyright 2016-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDebugTool
*/

'use strict';

var ReactInvalidSetStateWarningDevTool = _dereq_(76);
var warning = _dereq_(181);

var eventHandlers = [];
var handlerDoesThrowForEvent = {};

function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
 if ("development" !== 'production') {
   eventHandlers.forEach(function (handler) {
     try {
       if (handler[handlerFunctionName]) {
         handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);
       }
     } catch (e) {
       "development" !== 'production' ? warning(!handlerDoesThrowForEvent[handlerFunctionName], 'exception thrown by devtool while handling %s: %s', handlerFunctionName, e.message) : void 0;
       handlerDoesThrowForEvent[handlerFunctionName] = true;
     }
   });
 }
}

var ReactDebugTool = {
 addDevtool: function (devtool) {
   eventHandlers.push(devtool);
 },
 removeDevtool: function (devtool) {
   for (var i = 0; i < eventHandlers.length; i++) {
     if (eventHandlers[i] === devtool) {
       eventHandlers.splice(i, 1);
       i--;
     }
   }
 },
 onBeginProcessingChildContext: function () {
   emitEvent('onBeginProcessingChildContext');
 },
 onEndProcessingChildContext: function () {
   emitEvent('onEndProcessingChildContext');
 },
 onSetState: function () {
   emitEvent('onSetState');
 },
 onMountRootComponent: function (internalInstance) {
   emitEvent('onMountRootComponent', internalInstance);
 },
 onMountComponent: function (internalInstance) {
   emitEvent('onMountComponent', internalInstance);
 },
 onUpdateComponent: function (internalInstance) {
   emitEvent('onUpdateComponent', internalInstance);
 },
 onUnmountComponent: function (internalInstance) {
   emitEvent('onUnmountComponent', internalInstance);
 }
};

ReactDebugTool.addDevtool(ReactInvalidSetStateWarningDevTool);

module.exports = ReactDebugTool;
},{"181":181,"76":76}],60:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDefaultBatchingStrategy
*/

'use strict';

var _assign = _dereq_(182);

var ReactUpdates = _dereq_(102);
var Transaction = _dereq_(122);

var emptyFunction = _dereq_(163);

var RESET_BATCHED_UPDATES = {
 initialize: emptyFunction,
 close: function () {
   ReactDefaultBatchingStrategy.isBatchingUpdates = false;
 }
};

var FLUSH_BATCHED_UPDATES = {
 initialize: emptyFunction,
 close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
 this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
 getTransactionWrappers: function () {
   return TRANSACTION_WRAPPERS;
 }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
 isBatchingUpdates: false,

 /**
  * Call the provided function in a context within which calls to `setState`
  * and friends are batched such that components aren't updated unnecessarily.
  */
 batchedUpdates: function (callback, a, b, c, d, e) {
   var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

   ReactDefaultBatchingStrategy.isBatchingUpdates = true;

   // The code is written this way to avoid extra allocations
   if (alreadyBatchingUpdates) {
     callback(a, b, c, d, e);
   } else {
     transaction.perform(callback, null, a, b, c, d, e);
   }
 }
};

module.exports = ReactDefaultBatchingStrategy;
},{"102":102,"122":122,"163":163,"182":182}],61:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDefaultInjection
*/

'use strict';

var BeforeInputEventPlugin = _dereq_(2);
var ChangeEventPlugin = _dereq_(6);
var DefaultEventPluginOrder = _dereq_(13);
var EnterLeaveEventPlugin = _dereq_(14);
var ExecutionEnvironment = _dereq_(157);
var HTMLDOMPropertyConfig = _dereq_(21);
var ReactComponentBrowserEnvironment = _dereq_(33);
var ReactDOMComponent = _dereq_(40);
var ReactDOMComponentTree = _dereq_(42);
var ReactDOMEmptyComponent = _dereq_(45);
var ReactDOMTreeTraversal = _dereq_(57);
var ReactDOMTextComponent = _dereq_(55);
var ReactDefaultBatchingStrategy = _dereq_(60);
var ReactEventListener = _dereq_(69);
var ReactInjection = _dereq_(72);
var ReactReconcileTransaction = _dereq_(90);
var SVGDOMPropertyConfig = _dereq_(106);
var SelectEventPlugin = _dereq_(107);
var SimpleEventPlugin = _dereq_(108);

var alreadyInjected = false;

function inject() {
 if (alreadyInjected) {
   // TODO: This is currently true because these injections are shared between
   // the client and the server package. They should be built independently
   // and not share any injection state. Then this problem will be solved.
   return;
 }
 alreadyInjected = true;

 ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

 /**
  * Inject modules for resolving DOM hierarchy and plugin ordering.
  */
 ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
 ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
 ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

 /**
  * Some important event plugins included by default (without having to require
  * them).
  */
 ReactInjection.EventPluginHub.injectEventPluginsByName({
   SimpleEventPlugin: SimpleEventPlugin,
   EnterLeaveEventPlugin: EnterLeaveEventPlugin,
   ChangeEventPlugin: ChangeEventPlugin,
   SelectEventPlugin: SelectEventPlugin,
   BeforeInputEventPlugin: BeforeInputEventPlugin
 });

 ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

 ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

 ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
 ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

 ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
   return new ReactDOMEmptyComponent(instantiate);
 });

 ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
 ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

 ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

 if ("development" !== 'production') {
   var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
   if (/[?&]react_perf\b/.test(url)) {
     var ReactDefaultPerf = _dereq_(62);
     ReactDefaultPerf.start();
   }
 }
}

module.exports = {
 inject: inject
};
},{"106":106,"107":107,"108":108,"13":13,"14":14,"157":157,"2":2,"21":21,"33":33,"40":40,"42":42,"45":45,"55":55,"57":57,"6":6,"60":60,"62":62,"69":69,"72":72,"90":90}],62:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDefaultPerf
*/

'use strict';

var DOMProperty = _dereq_(10);
var ReactDOMComponentTree = _dereq_(42);
var ReactDefaultPerfAnalysis = _dereq_(63);
var ReactMount = _dereq_(79);
var ReactPerf = _dereq_(86);

var performanceNow = _dereq_(179);
var warning = _dereq_(181);

function roundFloat(val) {
 return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
 obj[key] = (obj[key] || 0) + val;
}

// Composite/text components don't have any built-in ID: we have to make our own
var compositeIDMap;
var compositeIDCounter = 17000;
function getIDOfComposite(inst) {
 if (!compositeIDMap) {
   compositeIDMap = new WeakMap();
 }
 if (compositeIDMap.has(inst)) {
   return compositeIDMap.get(inst);
 } else {
   var id = compositeIDCounter++;
   compositeIDMap.set(inst, id);
   return id;
 }
}

function getID(inst) {
 if (inst.hasOwnProperty('_rootNodeID')) {
   return inst._rootNodeID;
 } else {
   return getIDOfComposite(inst);
 }
}

function stripComplexValues(key, value) {
 if (typeof value !== 'object' || Array.isArray(value) || value == null) {
   return value;
 }
 var prototype = Object.getPrototypeOf(value);
 if (!prototype || prototype === Object.prototype) {
   return value;
 }
 return '<not serializable>';
}

// This implementation of ReactPerf is going away some time mid 15.x.
// While we plan to keep most of the API, the actual format of measurements
// will change dramatically. To signal this, we wrap them into an opaque-ish
// object to discourage reaching into it until the API stabilizes.
function wrapLegacyMeasurements(measurements) {
 return { __unstable_this_format_will_change: measurements };
}
function unwrapLegacyMeasurements(measurements) {
 return measurements && measurements.__unstable_this_format_will_change || measurements;
}

var warnedAboutPrintDOM = false;
var warnedAboutGetMeasurementsSummaryMap = false;

var ReactDefaultPerf = {
 _allMeasurements: [], // last item in the list is the current one
 _mountStack: [0],
 _compositeStack: [],
 _injected: false,

 start: function () {
   if (!ReactDefaultPerf._injected) {
     ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
   }

   ReactDefaultPerf._allMeasurements.length = 0;
   ReactPerf.enableMeasure = true;
 },

 stop: function () {
   ReactPerf.enableMeasure = false;
 },

 getLastMeasurements: function () {
   return wrapLegacyMeasurements(ReactDefaultPerf._allMeasurements);
 },

 printExclusive: function (measurements) {
   measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
   var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
   console.table(summary.map(function (item) {
     return {
       'Component class name': item.componentName,
       'Total inclusive time (ms)': roundFloat(item.inclusive),
       'Exclusive mount time (ms)': roundFloat(item.exclusive),
       'Exclusive render time (ms)': roundFloat(item.render),
       'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
       'Render time per instance (ms)': roundFloat(item.render / item.count),
       'Instances': item.count
     };
   }));
   // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
   // number.
 },

 printInclusive: function (measurements) {
   measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
   var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
   console.table(summary.map(function (item) {
     return {
       'Owner > component': item.componentName,
       'Inclusive time (ms)': roundFloat(item.time),
       'Instances': item.count
     };
   }));
   console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
 },

 getMeasurementsSummaryMap: function (measurements) {
   "development" !== 'production' ? warning(warnedAboutGetMeasurementsSummaryMap, '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' + '`ReactPerf.getWasted(...)` instead.') : void 0;
   warnedAboutGetMeasurementsSummaryMap = true;
   return ReactDefaultPerf.getWasted(measurements);
 },

 getWasted: function (measurements) {
   measurements = unwrapLegacyMeasurements(measurements);
   var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
   return summary.map(function (item) {
     return {
       'Owner > component': item.componentName,
       'Wasted time (ms)': item.time,
       'Instances': item.count
     };
   });
 },

 printWasted: function (measurements) {
   measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
   console.table(ReactDefaultPerf.getWasted(measurements));
   console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
 },

 printDOM: function (measurements) {
   "development" !== 'production' ? warning(warnedAboutPrintDOM, '`ReactPerf.printDOM(...)` is deprecated. Use ' + '`ReactPerf.printOperations(...)` instead.') : void 0;
   warnedAboutPrintDOM = true;
   return ReactDefaultPerf.printOperations(measurements);
 },

 printOperations: function (measurements) {
   measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
   var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
   console.table(summary.map(function (item) {
     var result = {};
     result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
     result.type = item.type;
     result.args = JSON.stringify(item.args, stripComplexValues);
     return result;
   }));
   console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
 },

 _recordWrite: function (id, fnName, totalTime, args) {
   // TODO: totalTime isn't that useful since it doesn't count paints/reflows
   var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
   var writes = entry.writes;
   writes[id] = writes[id] || [];
   writes[id].push({
     type: fnName,
     time: totalTime,
     args: args
   });
 },

 measure: function (moduleName, fnName, func) {
   return function () {
     for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
       args[_key] = arguments[_key];
     }

     var totalTime;
     var rv;
     var start;

     var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

     if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
       // A "measurement" is a set of metrics recorded for each flush. We want
       // to group the metrics for a given flush together so we can look at the
       // components that rendered and the DOM operations that actually
       // happened to determine the amount of "wasted work" performed.
       ReactDefaultPerf._allMeasurements.push(entry = {
         exclusive: {},
         inclusive: {},
         render: {},
         counts: {},
         writes: {},
         displayNames: {},
         hierarchy: {},
         totalTime: 0,
         created: {}
       });
       start = performanceNow();
       rv = func.apply(this, args);
       entry.totalTime = performanceNow() - start;
       return rv;
     } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations' || moduleName === 'ReactComponentBrowserEnvironment') {
       start = performanceNow();
       rv = func.apply(this, args);
       totalTime = performanceNow() - start;

       if (fnName === '_mountImageIntoNode') {
         ReactDefaultPerf._recordWrite('', fnName, totalTime, args[0]);
       } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
         // special format
         args[1].forEach(function (update) {
           var writeArgs = {};
           if (update.fromIndex !== null) {
             writeArgs.fromIndex = update.fromIndex;
           }
           if (update.toIndex !== null) {
             writeArgs.toIndex = update.toIndex;
           }
           if (update.content !== null) {
             writeArgs.content = update.content;
           }
           ReactDefaultPerf._recordWrite(args[0]._rootNodeID, update.type, totalTime, writeArgs);
         });
       } else {
         // basic format
         var id = args[0];
         if (moduleName === 'EventPluginHub') {
           id = id._rootNodeID;
         } else if (fnName === 'replaceNodeWithMarkup') {
           // Old node is already unmounted; can't get its instance
           id = ReactDOMComponentTree.getInstanceFromNode(args[1].node)._rootNodeID;
         } else if (fnName === 'replaceDelimitedText') {
           id = getID(ReactDOMComponentTree.getInstanceFromNode(args[0]));
         } else if (typeof id === 'object') {
           id = getID(ReactDOMComponentTree.getInstanceFromNode(args[0]));
         }
         ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
       }
       return rv;
     } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
     fnName === '_renderValidatedComponent')) {

       if (this._currentElement.type === ReactMount.TopLevelWrapper) {
         return func.apply(this, args);
       }

       var rootNodeID = getIDOfComposite(this);
       var isRender = fnName === '_renderValidatedComponent';
       var isMount = fnName === 'mountComponent';

       var mountStack = ReactDefaultPerf._mountStack;

       if (isRender) {
         addValue(entry.counts, rootNodeID, 1);
       } else if (isMount) {
         entry.created[rootNodeID] = true;
         mountStack.push(0);
       }

       ReactDefaultPerf._compositeStack.push(rootNodeID);

       start = performanceNow();
       rv = func.apply(this, args);
       totalTime = performanceNow() - start;

       ReactDefaultPerf._compositeStack.pop();

       if (isRender) {
         addValue(entry.render, rootNodeID, totalTime);
       } else if (isMount) {
         var subMountTime = mountStack.pop();
         mountStack[mountStack.length - 1] += totalTime;
         addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
         addValue(entry.inclusive, rootNodeID, totalTime);
       } else {
         addValue(entry.inclusive, rootNodeID, totalTime);
       }

       entry.displayNames[rootNodeID] = {
         current: this.getName(),
         owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
       };

       return rv;
     } else if ((moduleName === 'ReactDOMComponent' || moduleName === 'ReactDOMTextComponent') && (fnName === 'mountComponent' || fnName === 'receiveComponent')) {

       rv = func.apply(this, args);
       entry.hierarchy[getID(this)] = ReactDefaultPerf._compositeStack.slice();
       return rv;
     } else {
       return func.apply(this, args);
     }
   };
 }
};

module.exports = ReactDefaultPerf;
},{"10":10,"179":179,"181":181,"42":42,"63":63,"79":79,"86":86}],63:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactDefaultPerfAnalysis
*/

'use strict';

// Don't try to save users less than 1.2ms (a number I made up)

var _assign = _dereq_(182);

var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
 '_mountImageIntoNode': 'set innerHTML',
 INSERT_MARKUP: 'set innerHTML',
 MOVE_EXISTING: 'move',
 REMOVE_NODE: 'remove',
 SET_MARKUP: 'set innerHTML',
 TEXT_CONTENT: 'set textContent',
 'setValueForProperty': 'update attribute',
 'setValueForAttribute': 'update attribute',
 'deleteValueForProperty': 'remove attribute',
 'setValueForStyles': 'update styles',
 'replaceNodeWithMarkup': 'replace',
 'replaceDelimitedText': 'replace'
};

function getTotalTime(measurements) {
 // TODO: return number of DOM ops? could be misleading.
 // TODO: measure dropped frames after reconcile?
 // TODO: log total time of each reconcile and the top-level component
 // class that triggered it.
 var totalTime = 0;
 for (var i = 0; i < measurements.length; i++) {
   var measurement = measurements[i];
   totalTime += measurement.totalTime;
 }
 return totalTime;
}

function getDOMSummary(measurements) {
 var items = [];
 measurements.forEach(function (measurement) {
   Object.keys(measurement.writes).forEach(function (id) {
     measurement.writes[id].forEach(function (write) {
       items.push({
         id: id,
         type: DOM_OPERATION_TYPES[write.type] || write.type,
         args: write.args
       });
     });
   });
 });
 return items;
}

function getExclusiveSummary(measurements) {
 var candidates = {};
 var displayName;

 for (var i = 0; i < measurements.length; i++) {
   var measurement = measurements[i];
   var allIDs = _assign({}, measurement.exclusive, measurement.inclusive);

   for (var id in allIDs) {
     displayName = measurement.displayNames[id].current;

     candidates[displayName] = candidates[displayName] || {
       componentName: displayName,
       inclusive: 0,
       exclusive: 0,
       render: 0,
       count: 0
     };
     if (measurement.render[id]) {
       candidates[displayName].render += measurement.render[id];
     }
     if (measurement.exclusive[id]) {
       candidates[displayName].exclusive += measurement.exclusive[id];
     }
     if (measurement.inclusive[id]) {
       candidates[displayName].inclusive += measurement.inclusive[id];
     }
     if (measurement.counts[id]) {
       candidates[displayName].count += measurement.counts[id];
     }
   }
 }

 // Now make a sorted array with the results.
 var arr = [];
 for (displayName in candidates) {
   if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
     arr.push(candidates[displayName]);
   }
 }

 arr.sort(function (a, b) {
   return b.exclusive - a.exclusive;
 });

 return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
 var candidates = {};
 var inclusiveKey;

 for (var i = 0; i < measurements.length; i++) {
   var measurement = measurements[i];
   var allIDs = _assign({}, measurement.exclusive, measurement.inclusive);
   var cleanComponents;

   if (onlyClean) {
     cleanComponents = getUnchangedComponents(measurement);
   }

   for (var id in allIDs) {
     if (onlyClean && !cleanComponents[id]) {
       continue;
     }

     var displayName = measurement.displayNames[id];

     // Inclusive time is not useful for many components without knowing where
     // they are instantiated. So we aggregate inclusive time with both the
     // owner and current displayName as the key.
     inclusiveKey = displayName.owner + ' > ' + displayName.current;

     candidates[inclusiveKey] = candidates[inclusiveKey] || {
       componentName: inclusiveKey,
       time: 0,
       count: 0
     };

     if (measurement.inclusive[id]) {
       candidates[inclusiveKey].time += measurement.inclusive[id];
     }
     if (measurement.counts[id]) {
       candidates[inclusiveKey].count += measurement.counts[id];
     }
   }
 }

 // Now make a sorted array with the results.
 var arr = [];
 for (inclusiveKey in candidates) {
   if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
     arr.push(candidates[inclusiveKey]);
   }
 }

 arr.sort(function (a, b) {
   return b.time - a.time;
 });

 return arr;
}

function getUnchangedComponents(measurement) {
 // For a given reconcile, look at which components did not actually
 // render anything to the DOM and return a mapping of their ID to
 // the amount of time it took to render the entire subtree.
 var cleanComponents = {};
 var writes = measurement.writes;
 var dirtyComposites = {};
 Object.keys(writes).forEach(function (id) {
   writes[id].forEach(function (write) {
     // Root mounting (innerHTML set) is recorded with an ID of ''
     if (id !== '') {
       measurement.hierarchy[id].forEach(function (c) {
         return dirtyComposites[c] = true;
       });
     }
   });
 });
 var allIDs = _assign({}, measurement.exclusive, measurement.inclusive);

 for (var id in allIDs) {
   var isDirty = false;
   // See if any of the DOM operations applied to this component's subtree.
   if (dirtyComposites[id]) {
     isDirty = true;
   }
   // check if component newly created
   if (measurement.created[id]) {
     isDirty = true;
   }
   if (!isDirty && measurement.counts[id] > 0) {
     cleanComponents[id] = true;
   }
 }
 return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
 getExclusiveSummary: getExclusiveSummary,
 getInclusiveSummary: getInclusiveSummary,
 getDOMSummary: getDOMSummary,
 getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;
},{"182":182}],64:[function(_dereq_,module,exports){
/**
* Copyright 2014-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactElement
*/

'use strict';

var _assign = _dereq_(182);

var ReactCurrentOwner = _dereq_(37);

var warning = _dereq_(181);
var canDefineProperty = _dereq_(126);

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

var RESERVED_PROPS = {
 key: true,
 ref: true,
 __self: true,
 __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

/**
* Factory method to create a new React element. This no longer adheres to
* the class pattern, so do not use new to call it. Also, no instanceof check
* will work. Instead test $$typeof field against Symbol.for('react.element') to check
* if something is a React Element.
*
* @param {*} type
* @param {*} key
* @param {string|object} ref
* @param {*} self A *temporary* helper to detect places where `this` is
* different from the `owner` when React.createElement is called, so that we
* can warn. We want to get rid of owner and replace string `ref`s with arrow
* functions, and as long as `this` and owner are the same, there will be no
* change in behavior.
* @param {*} source An annotation object (added by a transpiler or otherwise)
* indicating filename, line number, and/or other information.
* @param {*} owner
* @param {*} props
* @internal
*/
var ReactElement = function (type, key, ref, self, source, owner, props) {
 var element = {
   // This tag allow us to uniquely identify this as a React Element
   $$typeof: REACT_ELEMENT_TYPE,

   // Built-in properties that belong on the element
   type: type,
   key: key,
   ref: ref,
   props: props,

   // Record the component responsible for creating this element.
   _owner: owner
 };

 if ("development" !== 'production') {
   // The validation flag is currently mutative. We put it on
   // an external backing store so that we can freeze the whole object.
   // This can be replaced with a WeakMap once they are implemented in
   // commonly used development environments.
   element._store = {};

   // To make comparing ReactElements easier for testing purposes, we make
   // the validation flag non-enumerable (where possible, which should
   // include every environment we run tests in), so the test framework
   // ignores it.
   if (canDefineProperty) {
     Object.defineProperty(element._store, 'validated', {
       configurable: false,
       enumerable: false,
       writable: true,
       value: false
     });
     // self and source are DEV only properties.
     Object.defineProperty(element, '_self', {
       configurable: false,
       enumerable: false,
       writable: false,
       value: self
     });
     // Two elements created in two different places should be considered
     // equal for testing purposes and therefore we hide it from enumeration.
     Object.defineProperty(element, '_source', {
       configurable: false,
       enumerable: false,
       writable: false,
       value: source
     });
   } else {
     element._store.validated = false;
     element._self = self;
     element._source = source;
   }
   if (Object.freeze) {
     Object.freeze(element.props);
     Object.freeze(element);
   }
 }

 return element;
};

ReactElement.createElement = function (type, config, children) {
 var propName;

 // Reserved names are extracted
 var props = {};

 var key = null;
 var ref = null;
 var self = null;
 var source = null;

 if (config != null) {
   if ("development" !== 'production') {
     ref = !config.hasOwnProperty('ref') || Object.getOwnPropertyDescriptor(config, 'ref').get ? null : config.ref;
     key = !config.hasOwnProperty('key') || Object.getOwnPropertyDescriptor(config, 'key').get ? null : '' + config.key;
   } else {
     ref = config.ref === undefined ? null : config.ref;
     key = config.key === undefined ? null : '' + config.key;
   }
   self = config.__self === undefined ? null : config.__self;
   source = config.__source === undefined ? null : config.__source;
   // Remaining properties are added to a new props object
   for (propName in config) {
     if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
       props[propName] = config[propName];
     }
   }
 }

 // Children can be more than one argument, and those are transferred onto
 // the newly allocated props object.
 var childrenLength = arguments.length - 2;
 if (childrenLength === 1) {
   props.children = children;
 } else if (childrenLength > 1) {
   var childArray = Array(childrenLength);
   for (var i = 0; i < childrenLength; i++) {
     childArray[i] = arguments[i + 2];
   }
   props.children = childArray;
 }

 // Resolve default props
 if (type && type.defaultProps) {
   var defaultProps = type.defaultProps;
   for (propName in defaultProps) {
     if (props[propName] === undefined) {
       props[propName] = defaultProps[propName];
     }
   }
 }
 if ("development" !== 'production') {
   // Create dummy `key` and `ref` property to `props` to warn users
   // against its use
   if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
     if (!props.hasOwnProperty('key')) {
       Object.defineProperty(props, 'key', {
         get: function () {
           if (!specialPropKeyWarningShown) {
             specialPropKeyWarningShown = true;
             "development" !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', typeof type === 'function' && 'displayName' in type ? type.displayName : 'Element') : void 0;
           }
           return undefined;
         },
         configurable: true
       });
     }
     if (!props.hasOwnProperty('ref')) {
       Object.defineProperty(props, 'ref', {
         get: function () {
           if (!specialPropRefWarningShown) {
             specialPropRefWarningShown = true;
             "development" !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', typeof type === 'function' && 'displayName' in type ? type.displayName : 'Element') : void 0;
           }
           return undefined;
         },
         configurable: true
       });
     }
   }
 }
 return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

ReactElement.createFactory = function (type) {
 var factory = ReactElement.createElement.bind(null, type);
 // Expose the type on the factory and the prototype so that it can be
 // easily accessed on elements. E.g. `<Foo />.type === Foo`.
 // This should not be named `constructor` since this may not be the function
 // that created the element, and it may not even be a constructor.
 // Legacy hook TODO: Warn if this is accessed
 factory.type = type;
 return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
 var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

 return newElement;
};

ReactElement.cloneElement = function (element, config, children) {
 var propName;

 // Original props are copied
 var props = _assign({}, element.props);

 // Reserved names are extracted
 var key = element.key;
 var ref = element.ref;
 // Self is preserved since the owner is preserved.
 var self = element._self;
 // Source is preserved since cloneElement is unlikely to be targeted by a
 // transpiler, and the original source is probably a better indicator of the
 // true owner.
 var source = element._source;

 // Owner will be preserved, unless ref is overridden
 var owner = element._owner;

 if (config != null) {
   if (config.ref !== undefined) {
     // Silently steal the ref from the parent.
     ref = config.ref;
     owner = ReactCurrentOwner.current;
   }
   if (config.key !== undefined) {
     key = '' + config.key;
   }
   // Remaining properties override existing props
   var defaultProps;
   if (element.type && element.type.defaultProps) {
     defaultProps = element.type.defaultProps;
   }
   for (propName in config) {
     if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
       if (config[propName] === undefined && defaultProps !== undefined) {
         // Resolve default props
         props[propName] = defaultProps[propName];
       } else {
         props[propName] = config[propName];
       }
     }
   }
 }

 // Children can be more than one argument, and those are transferred onto
 // the newly allocated props object.
 var childrenLength = arguments.length - 2;
 if (childrenLength === 1) {
   props.children = children;
 } else if (childrenLength > 1) {
   var childArray = Array(childrenLength);
   for (var i = 0; i < childrenLength; i++) {
     childArray[i] = arguments[i + 2];
   }
   props.children = childArray;
 }

 return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
* @param {?object} object
* @return {boolean} True if `object` is a valid component.
* @final
*/
ReactElement.isValidElement = function (object) {
 return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
},{"126":126,"181":181,"182":182,"37":37}],65:[function(_dereq_,module,exports){
/**
* Copyright 2014-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactElementValidator
*/

/**
* ReactElementValidator provides a wrapper around a element factory
* which validates the props passed to the element. This is intended to be
* used only in DEV and could be replaced by a static type checker for languages
* that support it.
*/

'use strict';

var ReactElement = _dereq_(64);
var ReactPropTypeLocations = _dereq_(88);
var ReactPropTypeLocationNames = _dereq_(87);
var ReactCurrentOwner = _dereq_(37);

var canDefineProperty = _dereq_(126);
var getIteratorFn = _dereq_(137);
var invariant = _dereq_(171);
var warning = _dereq_(181);

function getDeclarationErrorAddendum() {
 if (ReactCurrentOwner.current) {
   var name = ReactCurrentOwner.current.getName();
   if (name) {
     return ' Check the render method of `' + name + '`.';
   }
 }
 return '';
}

/**
* Warn if there's no key explicitly set on dynamic arrays of children or
* object keys are not valid. This allows us to keep track of children between
* updates.
*/
var ownerHasKeyUseWarning = {};

var loggedTypeFailures = {};

/**
* Warn if the element doesn't have an explicit key assigned to it.
* This element is in an array. The array could grow and shrink or be
* reordered. All children that haven't already been validated are required to
* have a "key" property assigned to it.
*
* @internal
* @param {ReactElement} element Element that requires a key.
* @param {*} parentType element's parent's type.
*/
function validateExplicitKey(element, parentType) {
 if (!element._store || element._store.validated || element.key != null) {
   return;
 }
 element._store.validated = true;

 var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
 if (addenda === null) {
   // we already showed the warning
   return;
 }
 "development" !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : void 0;
}

/**
* Shared warning and monitoring code for the key warnings.
*
* @internal
* @param {string} messageType A key used for de-duping warnings.
* @param {ReactElement} element Component that requires a key.
* @param {*} parentType element's parent's type.
* @returns {?object} A set of addenda to use in the warning message, or null
* if the warning has already been shown before (and shouldn't be shown again).
*/
function getAddendaForKeyUse(messageType, element, parentType) {
 var addendum = getDeclarationErrorAddendum();
 if (!addendum) {
   var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
   if (parentName) {
     addendum = ' Check the top-level render call using <' + parentName + '>.';
   }
 }

 var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
 if (memoizer[addendum]) {
   return null;
 }
 memoizer[addendum] = true;

 var addenda = {
   parentOrOwner: addendum,
   url: ' See https://fb.me/react-warning-keys for more information.',
   childOwner: null
 };

 // Usually the current owner is the offender, but if it accepts children as a
 // property, it may be the creator of the child that's responsible for
 // assigning it a key.
 if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
   // Give the component that originally created this child.
   addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
 }

 return addenda;
}

/**
* Ensure that every element either is passed in a static location, in an
* array with an explicit keys property defined, or in an object literal
* with valid key property.
*
* @internal
* @param {ReactNode} node Statically passed child of any type.
* @param {*} parentType node's parent's type.
*/
function validateChildKeys(node, parentType) {
 if (typeof node !== 'object') {
   return;
 }
 if (Array.isArray(node)) {
   for (var i = 0; i < node.length; i++) {
     var child = node[i];
     if (ReactElement.isValidElement(child)) {
       validateExplicitKey(child, parentType);
     }
   }
 } else if (ReactElement.isValidElement(node)) {
   // This element was passed in a valid location.
   if (node._store) {
     node._store.validated = true;
   }
 } else if (node) {
   var iteratorFn = getIteratorFn(node);
   // Entry iterators provide implicit keys.
   if (iteratorFn) {
     if (iteratorFn !== node.entries) {
       var iterator = iteratorFn.call(node);
       var step;
       while (!(step = iterator.next()).done) {
         if (ReactElement.isValidElement(step.value)) {
           validateExplicitKey(step.value, parentType);
         }
       }
     }
   }
 }
}

/**
* Assert that the props are valid
*
* @param {string} componentName Name of the component for error messages.
* @param {object} propTypes Map of prop name to a ReactPropType
* @param {object} props
* @param {string} location e.g. "prop", "context", "child context"
* @private
*/
function checkPropTypes(componentName, propTypes, props, location) {
 for (var propName in propTypes) {
   if (propTypes.hasOwnProperty(propName)) {
     var error;
     // Prop type validation may throw. In case they do, we don't want to
     // fail the render phase where it didn't fail before. So we log it.
     // After these have been cleaned up, we'll let them throw.
     try {
       // This is intentionally an invariant that gets caught. It's the same
       // behavior as without this statement except with a better message.
       !(typeof propTypes[propName] === 'function') ? "development" !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : void 0;
       error = propTypes[propName](props, propName, componentName, location);
     } catch (ex) {
       error = ex;
     }
     "development" !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : void 0;
     if (error instanceof Error && !(error.message in loggedTypeFailures)) {
       // Only monitor this failure once because there tends to be a lot of the
       // same error.
       loggedTypeFailures[error.message] = true;

       var addendum = getDeclarationErrorAddendum();
       "development" !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : void 0;
     }
   }
 }
}

/**
* Given an element, validate that its props follow the propTypes definition,
* provided by the type.
*
* @param {ReactElement} element
*/
function validatePropTypes(element) {
 var componentClass = element.type;
 if (typeof componentClass !== 'function') {
   return;
 }
 var name = componentClass.displayName || componentClass.name;
 if (componentClass.propTypes) {
   checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
 }
 if (typeof componentClass.getDefaultProps === 'function') {
   "development" !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
 }
}

var ReactElementValidator = {

 createElement: function (type, props, children) {
   var validType = typeof type === 'string' || typeof type === 'function';
   // We warn in this case but don't throw. We expect the element creation to
   // succeed and there will likely be errors in render.
   "development" !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;

   var element = ReactElement.createElement.apply(this, arguments);

   // The result can be nullish if a mock or a custom function is used.
   // TODO: Drop this when these are no longer allowed as the type argument.
   if (element == null) {
     return element;
   }

   // Skip key warning if the type isn't valid since our key validation logic
   // doesn't expect a non-string/function type and can throw confusing errors.
   // We don't want exception behavior to differ between dev and prod.
   // (Rendering will throw with a helpful message and as soon as the type is
   // fixed, the key warnings will appear.)
   if (validType) {
     for (var i = 2; i < arguments.length; i++) {
       validateChildKeys(arguments[i], type);
     }
   }

   validatePropTypes(element);

   return element;
 },

 createFactory: function (type) {
   var validatedFactory = ReactElementValidator.createElement.bind(null, type);
   // Legacy hook TODO: Warn if this is accessed
   validatedFactory.type = type;

   if ("development" !== 'production') {
     if (canDefineProperty) {
       Object.defineProperty(validatedFactory, 'type', {
         enumerable: false,
         get: function () {
           "development" !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
           Object.defineProperty(this, 'type', {
             value: type
           });
           return type;
         }
       });
     }
   }

   return validatedFactory;
 },

 cloneElement: function (element, props, children) {
   var newElement = ReactElement.cloneElement.apply(this, arguments);
   for (var i = 2; i < arguments.length; i++) {
     validateChildKeys(arguments[i], newElement.type);
   }
   validatePropTypes(newElement);
   return newElement;
 }

};

module.exports = ReactElementValidator;
},{"126":126,"137":137,"171":171,"181":181,"37":37,"64":64,"87":87,"88":88}],66:[function(_dereq_,module,exports){
/**
* Copyright 2014-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactEmptyComponent
*/

'use strict';

var emptyComponentFactory;

var ReactEmptyComponentInjection = {
 injectEmptyComponentFactory: function (factory) {
   emptyComponentFactory = factory;
 }
};

var ReactEmptyComponent = {
 create: function (instantiate) {
   return emptyComponentFactory(instantiate);
 }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{}],67:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactErrorUtils
*/

'use strict';

var caughtError = null;

/**
* Call a function while guarding against errors that happens within it.
*
* @param {?String} name of the guard to use for logging or debugging
* @param {Function} func The function to invoke
* @param {*} a First argument
* @param {*} b Second argument
*/
function invokeGuardedCallback(name, func, a, b) {
 try {
   return func(a, b);
 } catch (x) {
   if (caughtError === null) {
     caughtError = x;
   }
   return undefined;
 }
}

var ReactErrorUtils = {
 invokeGuardedCallback: invokeGuardedCallback,

 /**
  * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
  * handler are sure to be rethrown by rethrowCaughtError.
  */
 invokeGuardedCallbackWithCatch: invokeGuardedCallback,

 /**
  * During execution of guarded functions we will capture the first error which
  * we will rethrow to be handled by the top level error handler.
  */
 rethrowCaughtError: function () {
   if (caughtError) {
     var error = caughtError;
     caughtError = null;
     throw error;
   }
 }
};

if ("development" !== 'production') {
 /**
  * To help development we can get better devtools integration by simulating a
  * real browser event.
  */
 if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
   var fakeNode = document.createElement('react');
   ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
     var boundFunc = func.bind(null, a, b);
     var evtType = 'react-' + name;
     fakeNode.addEventListener(evtType, boundFunc, false);
     var evt = document.createEvent('Event');
     evt.initEvent(evtType, false, false);
     fakeNode.dispatchEvent(evt);
     fakeNode.removeEventListener(evtType, boundFunc, false);
   };
 }
}

module.exports = ReactErrorUtils;
},{}],68:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactEventEmitterMixin
*/

'use strict';

var EventPluginHub = _dereq_(16);

function runEventQueueInBatch(events) {
 EventPluginHub.enqueueEvents(events);
 EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

 /**
  * Streams a fired top-level event to `EventPluginHub` where plugins have the
  * opportunity to create `ReactEvent`s to be dispatched.
  */
 handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
   var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
   runEventQueueInBatch(events);
 }
};

module.exports = ReactEventEmitterMixin;
},{"16":16}],69:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactEventListener
*/

'use strict';

var _assign = _dereq_(182);

var EventListener = _dereq_(156);
var ExecutionEnvironment = _dereq_(157);
var PooledClass = _dereq_(24);
var ReactDOMComponentTree = _dereq_(42);
var ReactUpdates = _dereq_(102);

var getEventTarget = _dereq_(136);
var getUnboundedScrollPosition = _dereq_(168);

/**
* Find the deepest React component completely containing the root of the
* passed-in instance (for use when entire React trees are nested within each
* other). If React trees are not nested, returns null.
*/
function findParent(inst) {
 // TODO: It may be a good idea to cache this to prevent unnecessary DOM
 // traversal, but caching is difficult to do correctly without using a
 // mutation observer to listen for all DOM changes.
 while (inst._nativeParent) {
   inst = inst._nativeParent;
 }
 var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
 var container = rootNode.parentNode;
 return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
 this.topLevelType = topLevelType;
 this.nativeEvent = nativeEvent;
 this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
 destructor: function () {
   this.topLevelType = null;
   this.nativeEvent = null;
   this.ancestors.length = 0;
 }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
 var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
 var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

 // Loop through the hierarchy, in case there's any nested components.
 // It's important that we build the array of ancestors before calling any
 // event handlers, because event handlers can modify the DOM, leading to
 // inconsistencies with ReactMount's node cache. See #1105.
 var ancestor = targetInst;
 do {
   bookKeeping.ancestors.push(ancestor);
   ancestor = ancestor && findParent(ancestor);
 } while (ancestor);

 for (var i = 0; i < bookKeeping.ancestors.length; i++) {
   targetInst = bookKeeping.ancestors[i];
   ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
 }
}

function scrollValueMonitor(cb) {
 var scrollPosition = getUnboundedScrollPosition(window);
 cb(scrollPosition);
}

var ReactEventListener = {
 _enabled: true,
 _handleTopLevel: null,

 WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

 setHandleTopLevel: function (handleTopLevel) {
   ReactEventListener._handleTopLevel = handleTopLevel;
 },

 setEnabled: function (enabled) {
   ReactEventListener._enabled = !!enabled;
 },

 isEnabled: function () {
   return ReactEventListener._enabled;
 },

 /**
  * Traps top-level events by using event bubbling.
  *
  * @param {string} topLevelType Record from `EventConstants`.
  * @param {string} handlerBaseName Event name (e.g. "click").
  * @param {object} handle Element on which to attach listener.
  * @return {?object} An object with a remove function which will forcefully
  *                  remove the listener.
  * @internal
  */
 trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
   var element = handle;
   if (!element) {
     return null;
   }
   return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
 },

 /**
  * Traps a top-level event by using event capturing.
  *
  * @param {string} topLevelType Record from `EventConstants`.
  * @param {string} handlerBaseName Event name (e.g. "click").
  * @param {object} handle Element on which to attach listener.
  * @return {?object} An object with a remove function which will forcefully
  *                  remove the listener.
  * @internal
  */
 trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
   var element = handle;
   if (!element) {
     return null;
   }
   return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
 },

 monitorScrollValue: function (refresh) {
   var callback = scrollValueMonitor.bind(null, refresh);
   EventListener.listen(window, 'scroll', callback);
 },

 dispatchEvent: function (topLevelType, nativeEvent) {
   if (!ReactEventListener._enabled) {
     return;
   }

   var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
   try {
     // Event queue being processed in the same cycle allows
     // `preventDefault`.
     ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
   } finally {
     TopLevelCallbackBookKeeping.release(bookKeeping);
   }
 }
};

module.exports = ReactEventListener;
},{"102":102,"136":136,"156":156,"157":157,"168":168,"182":182,"24":24,"42":42}],70:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactFeatureFlags
*/

'use strict';

var ReactFeatureFlags = {
 // When true, call console.time() before and .timeEnd() after each top-level
 // render (both initial renders and updates). Useful when looking at prod-mode
 // timeline profiles in Chrome, for example.
 logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;
},{}],71:[function(_dereq_,module,exports){
/**
* Copyright 2015-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactFragment
*/

'use strict';

var ReactChildren = _dereq_(30);
var ReactElement = _dereq_(64);

var emptyFunction = _dereq_(163);
var invariant = _dereq_(171);
var warning = _dereq_(181);

/**
* We used to allow keyed objects to serve as a collection of ReactElements,
* or nested sets. This allowed us a way to explicitly key a set or fragment of
* components. This is now being replaced with an opaque data structure.
* The upgrade path is to call React.addons.createFragment({ key: value }) to
* create a keyed fragment. The resulting data structure is an array.
*/

var numericPropertyRegex = /^\d+$/;

var warnedAboutNumeric = false;

var ReactFragment = {
 // Wrap a keyed object in an opaque proxy that warns you if you access any
 // of its properties.
 create: function (object) {
   if (typeof object !== 'object' || !object || Array.isArray(object)) {
     "development" !== 'production' ? warning(false, 'React.addons.createFragment only accepts a single object. Got: %s', object) : void 0;
     return object;
   }
   if (ReactElement.isValidElement(object)) {
     "development" !== 'production' ? warning(false, 'React.addons.createFragment does not accept a ReactElement ' + 'without a wrapper object.') : void 0;
     return object;
   }

   !(object.nodeType !== 1) ? "development" !== 'production' ? invariant(false, 'React.addons.createFragment(...): Encountered an invalid child; DOM ' + 'elements are not valid children of React components.') : invariant(false) : void 0;

   var result = [];

   for (var key in object) {
     if ("development" !== 'production') {
       if (!warnedAboutNumeric && numericPropertyRegex.test(key)) {
         "development" !== 'production' ? warning(false, 'React.addons.createFragment(...): Child objects should have ' + 'non-numeric keys so ordering is preserved.') : void 0;
         warnedAboutNumeric = true;
       }
     }
     ReactChildren.mapIntoWithKeyPrefixInternal(object[key], result, key, emptyFunction.thatReturnsArgument);
   }

   return result;
 }
};

module.exports = ReactFragment;
},{"163":163,"171":171,"181":181,"30":30,"64":64}],72:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactInjection
*/

'use strict';

var DOMProperty = _dereq_(10);
var EventPluginHub = _dereq_(16);
var EventPluginUtils = _dereq_(18);
var ReactComponentEnvironment = _dereq_(34);
var ReactClass = _dereq_(31);
var ReactEmptyComponent = _dereq_(66);
var ReactBrowserEventEmitter = _dereq_(26);
var ReactNativeComponent = _dereq_(82);
var ReactPerf = _dereq_(86);
var ReactUpdates = _dereq_(102);

var ReactInjection = {
 Component: ReactComponentEnvironment.injection,
 Class: ReactClass.injection,
 DOMProperty: DOMProperty.injection,
 EmptyComponent: ReactEmptyComponent.injection,
 EventPluginHub: EventPluginHub.injection,
 EventPluginUtils: EventPluginUtils.injection,
 EventEmitter: ReactBrowserEventEmitter.injection,
 NativeComponent: ReactNativeComponent.injection,
 Perf: ReactPerf.injection,
 Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"10":10,"102":102,"16":16,"18":18,"26":26,"31":31,"34":34,"66":66,"82":82,"86":86}],73:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactInputSelection
*/

'use strict';

var ReactDOMSelection = _dereq_(53);

var containsNode = _dereq_(160);
var focusNode = _dereq_(165);
var getActiveElement = _dereq_(166);

function isInDocument(node) {
 return containsNode(document.documentElement, node);
}

/**
* @ReactInputSelection: React input selection module. Based on Selection.js,
* but modified to be suitable for react and has a couple of bug fixes (doesn't
* assume buttons have range selections allowed).
* Input selection module for React.
*/
var ReactInputSelection = {

 hasSelectionCapabilities: function (elem) {
   var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
   return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
 },

 getSelectionInformation: function () {
   var focusedElem = getActiveElement();
   return {
     focusedElem: focusedElem,
     selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
   };
 },

 /**
  * @restoreSelection: If any selection information was potentially lost,
  * restore it. This is useful when performing operations that could remove dom
  * nodes and place them back in, resulting in focus being lost.
  */
 restoreSelection: function (priorSelectionInformation) {
   var curFocusedElem = getActiveElement();
   var priorFocusedElem = priorSelectionInformation.focusedElem;
   var priorSelectionRange = priorSelectionInformation.selectionRange;
   if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
     if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
       ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
     }
     focusNode(priorFocusedElem);
   }
 },

 /**
  * @getSelection: Gets the selection bounds of a focused textarea, input or
  * contentEditable node.
  * -@input: Look up selection bounds of this input
  * -@return {start: selectionStart, end: selectionEnd}
  */
 getSelection: function (input) {
   var selection;

   if ('selectionStart' in input) {
     // Modern browser with input or textarea.
     selection = {
       start: input.selectionStart,
       end: input.selectionEnd
     };
   } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
     // IE8 input.
     var range = document.selection.createRange();
     // There can only be one selection per document in IE, so it must
     // be in our element.
     if (range.parentElement() === input) {
       selection = {
         start: -range.moveStart('character', -input.value.length),
         end: -range.moveEnd('character', -input.value.length)
       };
     }
   } else {
     // Content editable or old IE textarea.
     selection = ReactDOMSelection.getOffsets(input);
   }

   return selection || { start: 0, end: 0 };
 },

 /**
  * @setSelection: Sets the selection bounds of a textarea or input and focuses
  * the input.
  * -@input     Set selection bounds of this input or textarea
  * -@offsets   Object of same form that is returned from get*
  */
 setSelection: function (input, offsets) {
   var start = offsets.start;
   var end = offsets.end;
   if (end === undefined) {
     end = start;
   }

   if ('selectionStart' in input) {
     input.selectionStart = start;
     input.selectionEnd = Math.min(end, input.value.length);
   } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
     var range = input.createTextRange();
     range.collapse(true);
     range.moveStart('character', start);
     range.moveEnd('character', end - start);
     range.select();
   } else {
     ReactDOMSelection.setOffsets(input, offsets);
   }
 }
};

module.exports = ReactInputSelection;
},{"160":160,"165":165,"166":166,"53":53}],74:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactInstanceMap
*/

'use strict';

/**
* `ReactInstanceMap` maintains a mapping from a public facing stateful
* instance (key) and the internal representation (value). This allows public
* methods to accept the user facing instance as an argument and map them back
* to internal methods.
*/

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {

 /**
  * This API should be called `delete` but we'd have to make sure to always
  * transform these to strings for IE support. When this transform is fully
  * supported we can rename it.
  */
 remove: function (key) {
   key._reactInternalInstance = undefined;
 },

 get: function (key) {
   return key._reactInternalInstance;
 },

 has: function (key) {
   return key._reactInternalInstance !== undefined;
 },

 set: function (key, value) {
   key._reactInternalInstance = value;
 }

};

module.exports = ReactInstanceMap;
},{}],75:[function(_dereq_,module,exports){
/**
* Copyright 2016-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactInstrumentation
*/

'use strict';

var ReactDebugTool = _dereq_(59);

module.exports = { debugTool: ReactDebugTool };
},{"59":59}],76:[function(_dereq_,module,exports){
/**
* Copyright 2016-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactInvalidSetStateWarningDevTool
*/

'use strict';

var warning = _dereq_(181);

if ("development" !== 'production') {
 var processingChildContext = false;

 var warnInvalidSetState = function () {
   "development" !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
 };
}

var ReactInvalidSetStateWarningDevTool = {
 onBeginProcessingChildContext: function () {
   processingChildContext = true;
 },
 onEndProcessingChildContext: function () {
   processingChildContext = false;
 },
 onSetState: function () {
   warnInvalidSetState();
 }
};

module.exports = ReactInvalidSetStateWarningDevTool;
},{"181":181}],77:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactLink
*/

'use strict';

/**
* ReactLink encapsulates a common pattern in which a component wants to modify
* a prop received from its parent. ReactLink allows the parent to pass down a
* value coupled with a callback that, when invoked, expresses an intent to
* modify that value. For example:
*
* React.createClass({
*   getInitialState: function() {
*     return {value: ''};
*   },
*   render: function() {
*     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
*     return <input valueLink={valueLink} />;
*   },
*   _handleValueChange: function(newValue) {
*     this.setState({value: newValue});
*   }
* });
*
* We have provided some sugary mixins to make the creation and
* consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
*/

var React = _dereq_(25);

/**
* @param {*} value current value of the link
* @param {function} requestChange callback to request a change
*/
function ReactLink(value, requestChange) {
 this.value = value;
 this.requestChange = requestChange;
}

/**
* Creates a PropType that enforces the ReactLink API and optionally checks the
* type of the value being passed inside the link. Example:
*
* MyComponent.propTypes = {
*   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
* }
*/
function createLinkTypeChecker(linkType) {
 var shapes = {
   value: linkType === undefined ? React.PropTypes.any.isRequired : linkType.isRequired,
   requestChange: React.PropTypes.func.isRequired
 };
 return React.PropTypes.shape(shapes);
}

ReactLink.PropTypes = {
 link: createLinkTypeChecker
};

module.exports = ReactLink;
},{"25":25}],78:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactMarkupChecksum
*/

'use strict';

var adler32 = _dereq_(125);

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
 CHECKSUM_ATTR_NAME: 'data-react-checksum',

 /**
  * @param {string} markup Markup string
  * @return {string} Markup string with checksum attribute attached
  */
 addChecksumToMarkup: function (markup) {
   var checksum = adler32(markup);

   // Add checksum (handle both parent tags, comments and self-closing tags)
   if (COMMENT_START.test(markup)) {
     return markup;
   } else {
     return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
   }
 },

 /**
  * @param {string} markup to use
  * @param {DOMElement} element root React element
  * @returns {boolean} whether or not the markup is the same
  */
 canReuseMarkup: function (markup, element) {
   var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
   existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
   var markupChecksum = adler32(markup);
   return markupChecksum === existingChecksum;
 }
};

module.exports = ReactMarkupChecksum;
},{"125":125}],79:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactMount
*/

'use strict';

var DOMLazyTree = _dereq_(8);
var DOMProperty = _dereq_(10);
var ReactBrowserEventEmitter = _dereq_(26);
var ReactCurrentOwner = _dereq_(37);
var ReactDOMComponentTree = _dereq_(42);
var ReactDOMContainerInfo = _dereq_(43);
var ReactDOMFeatureFlags = _dereq_(47);
var ReactElement = _dereq_(64);
var ReactFeatureFlags = _dereq_(70);
var ReactInstrumentation = _dereq_(75);
var ReactMarkupChecksum = _dereq_(78);
var ReactPerf = _dereq_(86);
var ReactReconciler = _dereq_(91);
var ReactUpdateQueue = _dereq_(101);
var ReactUpdates = _dereq_(102);

var emptyObject = _dereq_(164);
var instantiateReactComponent = _dereq_(142);
var invariant = _dereq_(171);
var setInnerHTML = _dereq_(148);
var shouldUpdateReactComponent = _dereq_(151);
var warning = _dereq_(181);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
* Finds the index of the first character
* that's not common between the two given strings.
*
* @return {number} the index of the character where the strings diverge
*/
function firstDifferenceIndex(string1, string2) {
 var minLen = Math.min(string1.length, string2.length);
 for (var i = 0; i < minLen; i++) {
   if (string1.charAt(i) !== string2.charAt(i)) {
     return i;
   }
 }
 return string1.length === string2.length ? -1 : minLen;
}

/**
* @param {DOMElement|DOMDocument} container DOM element that may contain
* a React component
* @return {?*} DOM element that may have the reactRoot ID, or null.
*/
function getReactRootElementInContainer(container) {
 if (!container) {
   return null;
 }

 if (container.nodeType === DOC_NODE_TYPE) {
   return container.documentElement;
 } else {
   return container.firstChild;
 }
}

function internalGetID(node) {
 // If node is something like a window, document, or text node, none of
 // which support attributes or a .getAttribute method, gracefully return
 // the empty string, as if the attribute were missing.
 return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
* Mounts this component and inserts it into the DOM.
*
* @param {ReactComponent} componentInstance The instance to mount.
* @param {DOMElement} container DOM element to mount into.
* @param {ReactReconcileTransaction} transaction
* @param {boolean} shouldReuseMarkup If true, do not insert markup
*/
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
 var markerName;
 if (ReactFeatureFlags.logTopLevelRenders) {
   var wrappedElement = wrapperInstance._currentElement.props;
   var type = wrappedElement.type;
   markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
   console.time(markerName);
 }

 var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context);

 if (markerName) {
   console.timeEnd(markerName);
 }

 wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
 ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
* Batched mount.
*
* @param {ReactComponent} componentInstance The instance to mount.
* @param {DOMElement} container DOM element to mount into.
* @param {boolean} shouldReuseMarkup If true, do not insert markup
*/
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
 var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
 /* useCreateElement */
 !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
 transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
 ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
* Unmounts a component and removes it from the DOM.
*
* @param {ReactComponent} instance React component instance.
* @param {DOMElement} container DOM element to unmount from.
* @final
* @internal
* @see {ReactMount.unmountComponentAtNode}
*/
function unmountComponentFromNode(instance, container, safely) {
 ReactReconciler.unmountComponent(instance, safely);

 if (container.nodeType === DOC_NODE_TYPE) {
   container = container.documentElement;
 }

 // http://jsperf.com/emptying-a-node
 while (container.lastChild) {
   container.removeChild(container.lastChild);
 }
}

/**
* True if the supplied DOM node has a direct React-rendered child that is
* not a React root element. Useful for warning in `render`,
* `unmountComponentAtNode`, etc.
*
* @param {?DOMElement} node The candidate DOM node.
* @return {boolean} True if the DOM element contains a direct child that was
* rendered by React but is not a root element.
* @internal
*/
function hasNonRootReactChild(container) {
 var rootEl = getReactRootElementInContainer(container);
 if (rootEl) {
   var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
   return !!(inst && inst._nativeParent);
 }
}

function getNativeRootInstanceInContainer(container) {
 var rootEl = getReactRootElementInContainer(container);
 var prevNativeInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
 return prevNativeInstance && !prevNativeInstance._nativeParent ? prevNativeInstance : null;
}

function getTopLevelWrapperInContainer(container) {
 var root = getNativeRootInstanceInContainer(container);
 return root ? root._nativeContainerInfo._topLevelWrapper : null;
}

/**
* Temporary (?) hack so that we can store all top-level pending updates on
* composites instead of having to worry about different types of components
* here.
*/
var topLevelRootCounter = 1;
var TopLevelWrapper = function () {
 this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if ("development" !== 'production') {
 TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
 // this.props is actually a ReactElement
 return this.props;
};

/**
* Mounting is the process of initializing a React component by creating its
* representative DOM elements and inserting them into a supplied `container`.
* Any prior content inside `container` is destroyed in the process.
*
*   ReactMount.render(
*     component,
*     document.getElementById('container')
*   );
*
*   <div id="container">                   <-- Supplied `container`.
*     <div data-reactid=".3">              <-- Rendered reactRoot of React
*       // ...                                 component.
*     </div>
*   </div>
*
* Inside of `container`, the first element rendered is the "reactRoot".
*/
var ReactMount = {

 TopLevelWrapper: TopLevelWrapper,

 /**
  * Used by devtools. The keys are not important.
  */
 _instancesByReactRootID: instancesByReactRootID,

 /**
  * This is a hook provided to support rendering React components while
  * ensuring that the apparent scroll position of its `container` does not
  * change.
  *
  * @param {DOMElement} container The `container` being rendered into.
  * @param {function} renderCallback This must be called once to do the render.
  */
 scrollMonitor: function (container, renderCallback) {
   renderCallback();
 },

 /**
  * Take a component that's already mounted into the DOM and replace its props
  * @param {ReactComponent} prevComponent component instance already in the DOM
  * @param {ReactElement} nextElement component instance to render
  * @param {DOMElement} container container to render into
  * @param {?function} callback function triggered on completion
  */
 _updateRootComponent: function (prevComponent, nextElement, container, callback) {
   ReactMount.scrollMonitor(container, function () {
     ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
     if (callback) {
       ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
     }
   });

   return prevComponent;
 },

 /**
  * Render a new component into the DOM. Hooked by devtools!
  *
  * @param {ReactElement} nextElement element to render
  * @param {DOMElement} container container to render into
  * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
  * @return {ReactComponent} nextComponent
  */
 _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
   // Various parts of our code (such as ReactCompositeComponent's
   // _renderValidatedComponent) assume that calls to render aren't nested;
   // verify that that's the case.
   "development" !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

   !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? "development" !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : void 0;

   ReactBrowserEventEmitter.ensureScrollValueMonitoring();
   var componentInstance = instantiateReactComponent(nextElement);

   // The initial render is synchronous but any updates that happen during
   // rendering, in componentWillMount or componentDidMount, will be batched
   // according to the current batching strategy.

   ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

   var wrapperID = componentInstance._instance.rootID;
   instancesByReactRootID[wrapperID] = componentInstance;

   if ("development" !== 'production') {
     ReactInstrumentation.debugTool.onMountRootComponent(componentInstance);
   }

   return componentInstance;
 },

 /**
  * Renders a React component into the DOM in the supplied `container`.
  *
  * If the React component was previously rendered into `container`, this will
  * perform an update on it and only mutate the DOM as necessary to reflect the
  * latest React component.
  *
  * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
  * @param {ReactElement} nextElement Component element to render.
  * @param {DOMElement} container DOM element to render into.
  * @param {?function} callback function triggered on completion
  * @return {ReactComponent} Component instance rendered in `container`.
  */
 renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
   !(parentComponent != null && parentComponent._reactInternalInstance != null) ? "development" !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : void 0;
   return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
 },

 _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
   ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
   !ReactElement.isValidElement(nextElement) ? "development" !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
   // Check if it quacks like an element
   nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : void 0;

   "development" !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

   var nextWrappedElement = ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

   var prevComponent = getTopLevelWrapperInContainer(container);

   if (prevComponent) {
     var prevWrappedElement = prevComponent._currentElement;
     var prevElement = prevWrappedElement.props;
     if (shouldUpdateReactComponent(prevElement, nextElement)) {
       var publicInst = prevComponent._renderedComponent.getPublicInstance();
       var updatedCallback = callback && function () {
         callback.call(publicInst);
       };
       ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
       return publicInst;
     } else {
       ReactMount.unmountComponentAtNode(container);
     }
   }

   var reactRootElement = getReactRootElementInContainer(container);
   var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
   var containerHasNonRootReactChild = hasNonRootReactChild(container);

   if ("development" !== 'production') {
     "development" !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

     if (!containerHasReactMarkup || reactRootElement.nextSibling) {
       var rootElementSibling = reactRootElement;
       while (rootElementSibling) {
         if (internalGetID(rootElementSibling)) {
           "development" !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
           break;
         }
         rootElementSibling = rootElementSibling.nextSibling;
       }
     }
   }

   var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
   var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
   if (callback) {
     callback.call(component);
   }
   return component;
 },

 /**
  * Renders a React component into the DOM in the supplied `container`.
  *
  * If the React component was previously rendered into `container`, this will
  * perform an update on it and only mutate the DOM as necessary to reflect the
  * latest React component.
  *
  * @param {ReactElement} nextElement Component element to render.
  * @param {DOMElement} container DOM element to render into.
  * @param {?function} callback function triggered on completion
  * @return {ReactComponent} Component instance rendered in `container`.
  */
 render: function (nextElement, container, callback) {
   return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
 },

 /**
  * Unmounts and destroys the React component rendered in the `container`.
  *
  * @param {DOMElement} container DOM element containing a React component.
  * @return {boolean} True if a component was found in and unmounted from
  *                   `container`
  */
 unmountComponentAtNode: function (container) {
   // Various parts of our code (such as ReactCompositeComponent's
   // _renderValidatedComponent) assume that calls to render aren't nested;
   // verify that that's the case. (Strictly speaking, unmounting won't cause a
   // render but we still don't expect to be in a render call here.)
   "development" !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

   !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? "development" !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : void 0;

   var prevComponent = getTopLevelWrapperInContainer(container);
   if (!prevComponent) {
     // Check if the node being unmounted was rendered by React, but isn't a
     // root node.
     var containerHasNonRootReactChild = hasNonRootReactChild(container);

     // Check if the container itself is a React root node.
     var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

     if ("development" !== 'production') {
       "development" !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
     }

     return false;
   }
   delete instancesByReactRootID[prevComponent._instance.rootID];
   ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
   return true;
 },

 _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
   !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? "development" !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : void 0;

   if (shouldReuseMarkup) {
     var rootElement = getReactRootElementInContainer(container);
     if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
       ReactDOMComponentTree.precacheNode(instance, rootElement);
       return;
     } else {
       var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
       rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

       var rootMarkup = rootElement.outerHTML;
       rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

       var normalizedMarkup = markup;
       if ("development" !== 'production') {
         // because rootMarkup is retrieved from the DOM, various normalizations
         // will have occurred which will not be present in `markup`. Here,
         // insert markup into a <div> or <iframe> depending on the container
         // type to perform the same normalizations before comparing.
         var normalizer;
         if (container.nodeType === ELEMENT_NODE_TYPE) {
           normalizer = document.createElement('div');
           normalizer.innerHTML = markup;
           normalizedMarkup = normalizer.innerHTML;
         } else {
           normalizer = document.createElement('iframe');
           document.body.appendChild(normalizer);
           normalizer.contentDocument.write(markup);
           normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
           document.body.removeChild(normalizer);
         }
       }

       var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
       var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

       !(container.nodeType !== DOC_NODE_TYPE) ? "development" !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : void 0;

       if ("development" !== 'production') {
         "development" !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
       }
     }
   }

   !(container.nodeType !== DOC_NODE_TYPE) ? "development" !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : void 0;

   if (transaction.useCreateElement) {
     while (container.lastChild) {
       container.removeChild(container.lastChild);
     }
     DOMLazyTree.insertTreeBefore(container, markup, null);
   } else {
     setInnerHTML(container, markup);
     ReactDOMComponentTree.precacheNode(instance, container.firstChild);
   }
 }
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
 _renderNewRootComponent: '_renderNewRootComponent',
 _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;
},{"10":10,"101":101,"102":102,"142":142,"148":148,"151":151,"164":164,"171":171,"181":181,"26":26,"37":37,"42":42,"43":43,"47":47,"64":64,"70":70,"75":75,"78":78,"8":8,"86":86,"91":91}],80:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactMultiChild
*/

'use strict';

var ReactComponentEnvironment = _dereq_(34);
var ReactMultiChildUpdateTypes = _dereq_(81);

var ReactCurrentOwner = _dereq_(37);
var ReactReconciler = _dereq_(91);
var ReactChildReconciler = _dereq_(29);

var flattenChildren = _dereq_(131);
var invariant = _dereq_(171);

/**
* Make an update for markup to be rendered and inserted at a supplied index.
*
* @param {string} markup Markup that renders into an element.
* @param {number} toIndex Destination index.
* @private
*/
function makeInsertMarkup(markup, afterNode, toIndex) {
 // NOTE: Null values reduce hidden classes.
 return {
   type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
   content: markup,
   fromIndex: null,
   fromNode: null,
   toIndex: toIndex,
   afterNode: afterNode
 };
}

/**
* Make an update for moving an existing element to another index.
*
* @param {number} fromIndex Source index of the existing element.
* @param {number} toIndex Destination index of the element.
* @private
*/
function makeMove(child, afterNode, toIndex) {
 // NOTE: Null values reduce hidden classes.
 return {
   type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
   content: null,
   fromIndex: child._mountIndex,
   fromNode: ReactReconciler.getNativeNode(child),
   toIndex: toIndex,
   afterNode: afterNode
 };
}

/**
* Make an update for removing an element at an index.
*
* @param {number} fromIndex Index of the element to remove.
* @private
*/
function makeRemove(child, node) {
 // NOTE: Null values reduce hidden classes.
 return {
   type: ReactMultiChildUpdateTypes.REMOVE_NODE,
   content: null,
   fromIndex: child._mountIndex,
   fromNode: node,
   toIndex: null,
   afterNode: null
 };
}

/**
* Make an update for setting the markup of a node.
*
* @param {string} markup Markup that renders into an element.
* @private
*/
function makeSetMarkup(markup) {
 // NOTE: Null values reduce hidden classes.
 return {
   type: ReactMultiChildUpdateTypes.SET_MARKUP,
   content: markup,
   fromIndex: null,
   fromNode: null,
   toIndex: null,
   afterNode: null
 };
}

/**
* Make an update for setting the text content.
*
* @param {string} textContent Text content to set.
* @private
*/
function makeTextContent(textContent) {
 // NOTE: Null values reduce hidden classes.
 return {
   type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
   content: textContent,
   fromIndex: null,
   fromNode: null,
   toIndex: null,
   afterNode: null
 };
}

/**
* Push an update, if any, onto the queue. Creates a new queue if none is
* passed and always returns the queue. Mutative.
*/
function enqueue(queue, update) {
 if (update) {
   queue = queue || [];
   queue.push(update);
 }
 return queue;
}

/**
* Processes any enqueued updates.
*
* @private
*/
function processQueue(inst, updateQueue) {
 ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

/**
* ReactMultiChild are capable of reconciling multiple children.
*
* @class ReactMultiChild
* @internal
*/
var ReactMultiChild = {

 /**
  * Provides common functionality for components that must reconcile multiple
  * children. This is used by `ReactDOMComponent` to mount, update, and
  * unmount child components.
  *
  * @lends {ReactMultiChild.prototype}
  */
 Mixin: {

   _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
     if ("development" !== 'production') {
       if (this._currentElement) {
         try {
           ReactCurrentOwner.current = this._currentElement._owner;
           return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
         } finally {
           ReactCurrentOwner.current = null;
         }
       }
     }
     return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
   },

   _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, removedNodes, transaction, context) {
     var nextChildren;
     if ("development" !== 'production') {
       if (this._currentElement) {
         try {
           ReactCurrentOwner.current = this._currentElement._owner;
           nextChildren = flattenChildren(nextNestedChildrenElements);
         } finally {
           ReactCurrentOwner.current = null;
         }
         ReactChildReconciler.updateChildren(prevChildren, nextChildren, removedNodes, transaction, context);
         return nextChildren;
       }
     }
     nextChildren = flattenChildren(nextNestedChildrenElements);
     ReactChildReconciler.updateChildren(prevChildren, nextChildren, removedNodes, transaction, context);
     return nextChildren;
   },

   /**
    * Generates a "mount image" for each of the supplied children. In the case
    * of `ReactDOMComponent`, a mount image is a string of markup.
    *
    * @param {?object} nestedChildren Nested child maps.
    * @return {array} An array of mounted representations.
    * @internal
    */
   mountChildren: function (nestedChildren, transaction, context) {
     var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
     this._renderedChildren = children;
     var mountImages = [];
     var index = 0;
     for (var name in children) {
       if (children.hasOwnProperty(name)) {
         var child = children[name];
         var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._nativeContainerInfo, context);
         child._mountIndex = index++;
         mountImages.push(mountImage);
       }
     }
     return mountImages;
   },

   /**
    * Replaces any rendered children with a text content string.
    *
    * @param {string} nextContent String of content.
    * @internal
    */
   updateTextContent: function (nextContent) {
     var prevChildren = this._renderedChildren;
     // Remove any rendered children.
     ReactChildReconciler.unmountChildren(prevChildren, false);
     for (var name in prevChildren) {
       if (prevChildren.hasOwnProperty(name)) {
         !false ? "development" !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : invariant(false) : void 0;
       }
     }
     // Set new text content.
     var updates = [makeTextContent(nextContent)];
     processQueue(this, updates);
   },

   /**
    * Replaces any rendered children with a markup string.
    *
    * @param {string} nextMarkup String of markup.
    * @internal
    */
   updateMarkup: function (nextMarkup) {
     var prevChildren = this._renderedChildren;
     // Remove any rendered children.
     ReactChildReconciler.unmountChildren(prevChildren, false);
     for (var name in prevChildren) {
       if (prevChildren.hasOwnProperty(name)) {
         !false ? "development" !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : invariant(false) : void 0;
       }
     }
     var updates = [makeSetMarkup(nextMarkup)];
     processQueue(this, updates);
   },

   /**
    * Updates the rendered children with new children.
    *
    * @param {?object} nextNestedChildrenElements Nested child element maps.
    * @param {ReactReconcileTransaction} transaction
    * @internal
    */
   updateChildren: function (nextNestedChildrenElements, transaction, context) {
     // Hook used by React ART
     this._updateChildren(nextNestedChildrenElements, transaction, context);
   },

   /**
    * @param {?object} nextNestedChildrenElements Nested child element maps.
    * @param {ReactReconcileTransaction} transaction
    * @final
    * @protected
    */
   _updateChildren: function (nextNestedChildrenElements, transaction, context) {
     var prevChildren = this._renderedChildren;
     var removedNodes = {};
     var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, removedNodes, transaction, context);
     if (!nextChildren && !prevChildren) {
       return;
     }
     var updates = null;
     var name;
     // `nextIndex` will increment for each child in `nextChildren`, but
     // `lastIndex` will be the last index visited in `prevChildren`.
     var lastIndex = 0;
     var nextIndex = 0;
     var lastPlacedNode = null;
     for (name in nextChildren) {
       if (!nextChildren.hasOwnProperty(name)) {
         continue;
       }
       var prevChild = prevChildren && prevChildren[name];
       var nextChild = nextChildren[name];
       if (prevChild === nextChild) {
         updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
         lastIndex = Math.max(prevChild._mountIndex, lastIndex);
         prevChild._mountIndex = nextIndex;
       } else {
         if (prevChild) {
           // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
           lastIndex = Math.max(prevChild._mountIndex, lastIndex);
           // The `removedNodes` loop below will actually remove the child.
         }
         // The child must be instantiated before it's mounted.
         updates = enqueue(updates, this._mountChildAtIndex(nextChild, lastPlacedNode, nextIndex, transaction, context));
       }
       nextIndex++;
       lastPlacedNode = ReactReconciler.getNativeNode(nextChild);
     }
     // Remove children that are no longer present.
     for (name in removedNodes) {
       if (removedNodes.hasOwnProperty(name)) {
         updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
       }
     }
     if (updates) {
       processQueue(this, updates);
     }
     this._renderedChildren = nextChildren;
   },

   /**
    * Unmounts all rendered children. This should be used to clean up children
    * when this component is unmounted. It does not actually perform any
    * backend operations.
    *
    * @internal
    */
   unmountChildren: function (safely) {
     var renderedChildren = this._renderedChildren;
     ReactChildReconciler.unmountChildren(renderedChildren, safely);
     this._renderedChildren = null;
   },

   /**
    * Moves a child component to the supplied index.
    *
    * @param {ReactComponent} child Component to move.
    * @param {number} toIndex Destination index of the element.
    * @param {number} lastIndex Last index visited of the siblings of `child`.
    * @protected
    */
   moveChild: function (child, afterNode, toIndex, lastIndex) {
     // If the index of `child` is less than `lastIndex`, then it needs to
     // be moved. Otherwise, we do not need to move it because a child will be
     // inserted or moved before `child`.
     if (child._mountIndex < lastIndex) {
       return makeMove(child, afterNode, toIndex);
     }
   },

   /**
    * Creates a child component.
    *
    * @param {ReactComponent} child Component to create.
    * @param {string} mountImage Markup to insert.
    * @protected
    */
   createChild: function (child, afterNode, mountImage) {
     return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
   },

   /**
    * Removes a child component.
    *
    * @param {ReactComponent} child Child to remove.
    * @protected
    */
   removeChild: function (child, node) {
     return makeRemove(child, node);
   },

   /**
    * Mounts a child with the supplied name.
    *
    * NOTE: This is part of `updateChildren` and is here for readability.
    *
    * @param {ReactComponent} child Component to mount.
    * @param {string} name Name of the child.
    * @param {number} index Index at which to insert the child.
    * @param {ReactReconcileTransaction} transaction
    * @private
    */
   _mountChildAtIndex: function (child, afterNode, index, transaction, context) {
     var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._nativeContainerInfo, context);
     child._mountIndex = index;
     return this.createChild(child, afterNode, mountImage);
   },

   /**
    * Unmounts a rendered child.
    *
    * NOTE: This is part of `updateChildren` and is here for readability.
    *
    * @param {ReactComponent} child Component to unmount.
    * @private
    */
   _unmountChild: function (child, node) {
     var update = this.removeChild(child, node);
     child._mountIndex = null;
     return update;
   }

 }

};

module.exports = ReactMultiChild;
},{"131":131,"171":171,"29":29,"34":34,"37":37,"81":81,"91":91}],81:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactMultiChildUpdateTypes
*/

'use strict';

var keyMirror = _dereq_(174);

/**
* When a component's children are updated, a series of update configuration
* objects are created in order to batch and serialize the required changes.
*
* Enumerates all the possible types of update configurations.
*
* @internal
*/
var ReactMultiChildUpdateTypes = keyMirror({
 INSERT_MARKUP: null,
 MOVE_EXISTING: null,
 REMOVE_NODE: null,
 SET_MARKUP: null,
 TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;
},{"174":174}],82:[function(_dereq_,module,exports){
/**
* Copyright 2014-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactNativeComponent
*/

'use strict';

var _assign = _dereq_(182);

var invariant = _dereq_(171);

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags.
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
 // This accepts a class that receives the tag string. This is a catch all
 // that can render any kind of tag.
 injectGenericComponentClass: function (componentClass) {
   genericComponentClass = componentClass;
 },
 // This accepts a text component class that takes the text string to be
 // rendered as props.
 injectTextComponentClass: function (componentClass) {
   textComponentClass = componentClass;
 },
 // This accepts a keyed object with classes as values. Each key represents a
 // tag. That particular tag will use this class instead of the generic one.
 injectComponentClasses: function (componentClasses) {
   _assign(tagToComponentClass, componentClasses);
 }
};

/**
* Get a composite component wrapper class for a specific tag.
*
* @param {ReactElement} element The tag for which to get the class.
* @return {function} The React class constructor function.
*/
function getComponentClassForElement(element) {
 if (typeof element.type === 'function') {
   return element.type;
 }
 var tag = element.type;
 var componentClass = tagToComponentClass[tag];
 if (componentClass == null) {
   tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
 }
 return componentClass;
}

/**
* Get a native internal component class for a specific tag.
*
* @param {ReactElement} element The element to create.
* @return {function} The internal class constructor function.
*/
function createInternalComponent(element) {
 !genericComponentClass ? "development" !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : void 0;
 return new genericComponentClass(element);
}

/**
* @param {ReactText} text
* @return {ReactComponent}
*/
function createInstanceForText(text) {
 return new textComponentClass(text);
}

/**
* @param {ReactComponent} component
* @return {boolean}
*/
function isTextComponent(component) {
 return component instanceof textComponentClass;
}

var ReactNativeComponent = {
 getComponentClassForElement: getComponentClassForElement,
 createInternalComponent: createInternalComponent,
 createInstanceForText: createInstanceForText,
 isTextComponent: isTextComponent,
 injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;
},{"171":171,"182":182}],83:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactNodeTypes
*/

'use strict';

var ReactElement = _dereq_(64);

var invariant = _dereq_(171);

var ReactNodeTypes = {
 NATIVE: 0,
 COMPOSITE: 1,
 EMPTY: 2,

 getType: function (node) {
   if (node === null || node === false) {
     return ReactNodeTypes.EMPTY;
   } else if (ReactElement.isValidElement(node)) {
     if (typeof node.type === 'function') {
       return ReactNodeTypes.COMPOSITE;
     } else {
       return ReactNodeTypes.NATIVE;
     }
   }
   !false ? "development" !== 'production' ? invariant(false, 'Unexpected node: %s', node) : invariant(false) : void 0;
 }
};

module.exports = ReactNodeTypes;
},{"171":171,"64":64}],84:[function(_dereq_,module,exports){
/**
* Copyright 2015-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactNoopUpdateQueue
*/

'use strict';

var warning = _dereq_(181);

function warnTDZ(publicInstance, callerName) {
 if ("development" !== 'production') {
   "development" !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : void 0;
 }
}

/**
* This is the abstract API for an update queue.
*/
var ReactNoopUpdateQueue = {

 /**
  * Checks whether or not this composite component is mounted.
  * @param {ReactClass} publicInstance The instance we want to test.
  * @return {boolean} True if mounted, false otherwise.
  * @protected
  * @final
  */
 isMounted: function (publicInstance) {
   return false;
 },

 /**
  * Enqueue a callback that will be executed after all the pending updates
  * have processed.
  *
  * @param {ReactClass} publicInstance The instance to use as `this` context.
  * @param {?function} callback Called after state is updated.
  * @internal
  */
 enqueueCallback: function (publicInstance, callback) {},

 /**
  * Forces an update. This should only be invoked when it is known with
  * certainty that we are **not** in a DOM transaction.
  *
  * You may want to call this when you know that some deeper aspect of the
  * component's state has changed but `setState` was not called.
  *
  * This will not invoke `shouldComponentUpdate`, but it will invoke
  * `componentWillUpdate` and `componentDidUpdate`.
  *
  * @param {ReactClass} publicInstance The instance that should rerender.
  * @internal
  */
 enqueueForceUpdate: function (publicInstance) {
   warnTDZ(publicInstance, 'forceUpdate');
 },

 /**
  * Replaces all of the state. Always use this or `setState` to mutate state.
  * You should treat `this.state` as immutable.
  *
  * There is no guarantee that `this.state` will be immediately updated, so
  * accessing `this.state` after calling this method may return the old value.
  *
  * @param {ReactClass} publicInstance The instance that should rerender.
  * @param {object} completeState Next state.
  * @internal
  */
 enqueueReplaceState: function (publicInstance, completeState) {
   warnTDZ(publicInstance, 'replaceState');
 },

 /**
  * Sets a subset of the state. This only exists because _pendingState is
  * internal. This provides a merging strategy that is not available to deep
  * properties which is confusing. TODO: Expose pendingState or don't use it
  * during the merge.
  *
  * @param {ReactClass} publicInstance The instance that should rerender.
  * @param {object} partialState Next partial state to be merged with state.
  * @internal
  */
 enqueueSetState: function (publicInstance, partialState) {
   warnTDZ(publicInstance, 'setState');
 }
};

module.exports = ReactNoopUpdateQueue;
},{"181":181}],85:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactOwner
*/

'use strict';

var invariant = _dereq_(171);

/**
* ReactOwners are capable of storing references to owned components.
*
* All components are capable of //being// referenced by owner components, but
* only ReactOwner components are capable of //referencing// owned components.
* The named reference is known as a "ref".
*
* Refs are available when mounted and updated during reconciliation.
*
*   var MyComponent = React.createClass({
*     render: function() {
*       return (
*         <div onClick={this.handleClick}>
*           <CustomComponent ref="custom" />
*         </div>
*       );
*     },
*     handleClick: function() {
*       this.refs.custom.handleClick();
*     },
*     componentDidMount: function() {
*       this.refs.custom.initialize();
*     }
*   });
*
* Refs should rarely be used. When refs are used, they should only be done to
* control data that is not handled by React's data flow.
*
* @class ReactOwner
*/
var ReactOwner = {

 /**
  * @param {?object} object
  * @return {boolean} True if `object` is a valid owner.
  * @final
  */
 isValidOwner: function (object) {
   return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
 },

 /**
  * Adds a component by ref to an owner component.
  *
  * @param {ReactComponent} component Component to reference.
  * @param {string} ref Name by which to refer to the component.
  * @param {ReactOwner} owner Component on which to record the ref.
  * @final
  * @internal
  */
 addComponentAsRefTo: function (component, ref, owner) {
   !ReactOwner.isValidOwner(owner) ? "development" !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : void 0;
   owner.attachRef(ref, component);
 },

 /**
  * Removes a component by ref from an owner component.
  *
  * @param {ReactComponent} component Component to dereference.
  * @param {string} ref Name of the ref to remove.
  * @param {ReactOwner} owner Component on which the ref is recorded.
  * @final
  * @internal
  */
 removeComponentAsRefFrom: function (component, ref, owner) {
   !ReactOwner.isValidOwner(owner) ? "development" !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : void 0;
   var ownerPublicInstance = owner.getPublicInstance();
   // Check that `component`'s owner is still alive and that `component` is still the current ref
   // because we do not want to detach the ref if another component stole it.
   if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
     owner.detachRef(ref);
   }
 }

};

module.exports = ReactOwner;
},{"171":171}],86:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactPerf
*/

'use strict';

/**
* ReactPerf is a general AOP system designed to measure performance. This
* module only has the hooks: see ReactDefaultPerf for the analysis tool.
*/

var ReactPerf = {
 /**
  * Boolean to enable/disable measurement. Set to false by default to prevent
  * accidental logging and perf loss.
  */
 enableMeasure: false,

 /**
  * Holds onto the measure function in use. By default, don't measure
  * anything, but we'll override this if we inject a measure function.
  */
 storedMeasure: _noMeasure,

 /**
  * @param {object} object
  * @param {string} objectName
  * @param {object<string>} methodNames
  */
 measureMethods: function (object, objectName, methodNames) {
   if ("development" !== 'production') {
     for (var key in methodNames) {
       if (!methodNames.hasOwnProperty(key)) {
         continue;
       }
       object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
     }
   }
 },

 /**
  * Use this to wrap methods you want to measure. Zero overhead in production.
  *
  * @param {string} objName
  * @param {string} fnName
  * @param {function} func
  * @return {function}
  */
 measure: function (objName, fnName, func) {
   if ("development" !== 'production') {
     var measuredFunc = null;
     var wrapper = function () {
       if (ReactPerf.enableMeasure) {
         if (!measuredFunc) {
           measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
         }
         return measuredFunc.apply(this, arguments);
       }
       return func.apply(this, arguments);
     };
     wrapper.displayName = objName + '_' + fnName;
     return wrapper;
   }
   return func;
 },

 injection: {
   /**
    * @param {function} measure
    */
   injectMeasure: function (measure) {
     ReactPerf.storedMeasure = measure;
   }
 }
};

/**
* Simply passes through the measured function, without measuring it.
*
* @param {string} objName
* @param {string} fnName
* @param {function} func
* @return {function}
*/
function _noMeasure(objName, fnName, func) {
 return func;
}

module.exports = ReactPerf;
},{}],87:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactPropTypeLocationNames
*/

'use strict';

var ReactPropTypeLocationNames = {};

if ("development" !== 'production') {
 ReactPropTypeLocationNames = {
   prop: 'prop',
   context: 'context',
   childContext: 'child context'
 };
}

module.exports = ReactPropTypeLocationNames;
},{}],88:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactPropTypeLocations
*/

'use strict';

var keyMirror = _dereq_(174);

var ReactPropTypeLocations = keyMirror({
 prop: null,
 context: null,
 childContext: null
});

module.exports = ReactPropTypeLocations;
},{"174":174}],89:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactPropTypes
*/

'use strict';

var ReactElement = _dereq_(64);
var ReactPropTypeLocationNames = _dereq_(87);

var emptyFunction = _dereq_(163);
var getIteratorFn = _dereq_(137);

/**
* Collection of methods that allow declaration and validation of props that are
* supplied to React components. Example usage:
*
*   var Props = require('ReactPropTypes');
*   var MyArticle = React.createClass({
*     propTypes: {
*       // An optional string prop named "description".
*       description: Props.string,
*
*       // A required enum prop named "category".
*       category: Props.oneOf(['News','Photos']).isRequired,
*
*       // A prop named "dialog" that requires an instance of Dialog.
*       dialog: Props.instanceOf(Dialog).isRequired
*     },
*     render: function() { ... }
*   });
*
* A more formal specification of how these methods are used:
*
*   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
*   decl := ReactPropTypes.{type}(.isRequired)?
*
* Each and every declaration produces a function with the same signature. This
* allows the creation of custom validation functions. For example:
*
*  var MyLink = React.createClass({
*    propTypes: {
*      // An optional string or URI prop named "href".
*      href: function(props, propName, componentName) {
*        var propValue = props[propName];
*        if (propValue != null && typeof propValue !== 'string' &&
*            !(propValue instanceof URI)) {
*          return new Error(
*            'Expected a string or an URI for ' + propName + ' in ' +
*            componentName
*          );
*        }
*      }
*    },
*    render: function() {...}
*  });
*
* @internal
*/

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
 array: createPrimitiveTypeChecker('array'),
 bool: createPrimitiveTypeChecker('boolean'),
 func: createPrimitiveTypeChecker('function'),
 number: createPrimitiveTypeChecker('number'),
 object: createPrimitiveTypeChecker('object'),
 string: createPrimitiveTypeChecker('string'),

 any: createAnyTypeChecker(),
 arrayOf: createArrayOfTypeChecker,
 element: createElementTypeChecker(),
 instanceOf: createInstanceTypeChecker,
 node: createNodeChecker(),
 objectOf: createObjectOfTypeChecker,
 oneOf: createEnumTypeChecker,
 oneOfType: createUnionTypeChecker,
 shape: createShapeTypeChecker
};

/**
* inlined Object.is polyfill to avoid requiring consumers ship their own
* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
*/
/*eslint-disable no-self-compare*/
function is(x, y) {
 // SameValue algorithm
 if (x === y) {
   // Steps 1-5, 7-10
   // Steps 6.b-6.e: +0 != -0
   return x !== 0 || 1 / x === 1 / y;
 } else {
   // Step 6.a: NaN == NaN
   return x !== x && y !== y;
 }
}
/*eslint-enable no-self-compare*/

function createChainableTypeChecker(validate) {
 function checkType(isRequired, props, propName, componentName, location, propFullName) {
   componentName = componentName || ANONYMOUS;
   propFullName = propFullName || propName;
   if (props[propName] == null) {
     var locationName = ReactPropTypeLocationNames[location];
     if (isRequired) {
       return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
     }
     return null;
   } else {
     return validate(props, propName, componentName, location, propFullName);
   }
 }

 var chainedCheckType = checkType.bind(null, false);
 chainedCheckType.isRequired = checkType.bind(null, true);

 return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
 function validate(props, propName, componentName, location, propFullName) {
   var propValue = props[propName];
   var propType = getPropType(propValue);
   if (propType !== expectedType) {
     var locationName = ReactPropTypeLocationNames[location];
     // `propValue` being instance of, say, date/regexp, pass the 'object'
     // check, but we can offer a more precise error message here rather than
     // 'of type `object`'.
     var preciseType = getPreciseType(propValue);

     return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
   }
   return null;
 }
 return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
 return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
 function validate(props, propName, componentName, location, propFullName) {
   if (typeof typeChecker !== 'function') {
     return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
   }
   var propValue = props[propName];
   if (!Array.isArray(propValue)) {
     var locationName = ReactPropTypeLocationNames[location];
     var propType = getPropType(propValue);
     return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
   }
   for (var i = 0; i < propValue.length; i++) {
     var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
     if (error instanceof Error) {
       return error;
     }
   }
   return null;
 }
 return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
 function validate(props, propName, componentName, location, propFullName) {
   if (!ReactElement.isValidElement(props[propName])) {
     var locationName = ReactPropTypeLocationNames[location];
     return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
   }
   return null;
 }
 return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
 function validate(props, propName, componentName, location, propFullName) {
   if (!(props[propName] instanceof expectedClass)) {
     var locationName = ReactPropTypeLocationNames[location];
     var expectedClassName = expectedClass.name || ANONYMOUS;
     var actualClassName = getClassName(props[propName]);
     return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
   }
   return null;
 }
 return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
 if (!Array.isArray(expectedValues)) {
   return createChainableTypeChecker(function () {
     return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
   });
 }

 function validate(props, propName, componentName, location, propFullName) {
   var propValue = props[propName];
   for (var i = 0; i < expectedValues.length; i++) {
     if (is(propValue, expectedValues[i])) {
       return null;
     }
   }

   var locationName = ReactPropTypeLocationNames[location];
   var valuesString = JSON.stringify(expectedValues);
   return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
 }
 return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
 function validate(props, propName, componentName, location, propFullName) {
   if (typeof typeChecker !== 'function') {
     return new Error('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
   }
   var propValue = props[propName];
   var propType = getPropType(propValue);
   if (propType !== 'object') {
     var locationName = ReactPropTypeLocationNames[location];
     return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
   }
   for (var key in propValue) {
     if (propValue.hasOwnProperty(key)) {
       var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
       if (error instanceof Error) {
         return error;
       }
     }
   }
   return null;
 }
 return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
 if (!Array.isArray(arrayOfTypeCheckers)) {
   return createChainableTypeChecker(function () {
     return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
   });
 }

 function validate(props, propName, componentName, location, propFullName) {
   for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
     var checker = arrayOfTypeCheckers[i];
     if (checker(props, propName, componentName, location, propFullName) == null) {
       return null;
     }
   }

   var locationName = ReactPropTypeLocationNames[location];
   return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
 }
 return createChainableTypeChecker(validate);
}

function createNodeChecker() {
 function validate(props, propName, componentName, location, propFullName) {
   if (!isNode(props[propName])) {
     var locationName = ReactPropTypeLocationNames[location];
     return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
   }
   return null;
 }
 return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
 function validate(props, propName, componentName, location, propFullName) {
   var propValue = props[propName];
   var propType = getPropType(propValue);
   if (propType !== 'object') {
     var locationName = ReactPropTypeLocationNames[location];
     return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
   }
   for (var key in shapeTypes) {
     var checker = shapeTypes[key];
     if (!checker) {
       continue;
     }
     var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
     if (error) {
       return error;
     }
   }
   return null;
 }
 return createChainableTypeChecker(validate);
}

function isNode(propValue) {
 switch (typeof propValue) {
   case 'number':
   case 'string':
   case 'undefined':
     return true;
   case 'boolean':
     return !propValue;
   case 'object':
     if (Array.isArray(propValue)) {
       return propValue.every(isNode);
     }
     if (propValue === null || ReactElement.isValidElement(propValue)) {
       return true;
     }

     var iteratorFn = getIteratorFn(propValue);
     if (iteratorFn) {
       var iterator = iteratorFn.call(propValue);
       var step;
       if (iteratorFn !== propValue.entries) {
         while (!(step = iterator.next()).done) {
           if (!isNode(step.value)) {
             return false;
           }
         }
       } else {
         // Iterator will provide entry [k,v] tuples rather than values.
         while (!(step = iterator.next()).done) {
           var entry = step.value;
           if (entry) {
             if (!isNode(entry[1])) {
               return false;
             }
           }
         }
       }
     } else {
       return false;
     }

     return true;
   default:
     return false;
 }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
 var propType = typeof propValue;
 if (Array.isArray(propValue)) {
   return 'array';
 }
 if (propValue instanceof RegExp) {
   // Old webkits (at least until Android 4.0) return 'function' rather than
   // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
   // passes PropTypes.object.
   return 'object';
 }
 return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
 var propType = getPropType(propValue);
 if (propType === 'object') {
   if (propValue instanceof Date) {
     return 'date';
   } else if (propValue instanceof RegExp) {
     return 'regexp';
   }
 }
 return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
 if (!propValue.constructor || !propValue.constructor.name) {
   return ANONYMOUS;
 }
 return propValue.constructor.name;
}

module.exports = ReactPropTypes;
},{"137":137,"163":163,"64":64,"87":87}],90:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactReconcileTransaction
*/

'use strict';

var _assign = _dereq_(182);

var CallbackQueue = _dereq_(5);
var PooledClass = _dereq_(24);
var ReactBrowserEventEmitter = _dereq_(26);
var ReactInputSelection = _dereq_(73);
var Transaction = _dereq_(122);

/**
* Ensures that, when possible, the selection range (currently selected text
* input) is not disturbed by performing the transaction.
*/
var SELECTION_RESTORATION = {
 /**
  * @return {Selection} Selection information.
  */
 initialize: ReactInputSelection.getSelectionInformation,
 /**
  * @param {Selection} sel Selection information returned from `initialize`.
  */
 close: ReactInputSelection.restoreSelection
};

/**
* Suppresses events (blur/focus) that could be inadvertently dispatched due to
* high level DOM manipulations (like temporarily removing a text input from the
* DOM).
*/
var EVENT_SUPPRESSION = {
 /**
  * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
  * the reconciliation.
  */
 initialize: function () {
   var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
   ReactBrowserEventEmitter.setEnabled(false);
   return currentlyEnabled;
 },

 /**
  * @param {boolean} previouslyEnabled Enabled status of
  *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
  *   restores the previous value.
  */
 close: function (previouslyEnabled) {
   ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
 }
};

/**
* Provides a queue for collecting `componentDidMount` and
* `componentDidUpdate` callbacks during the transaction.
*/
var ON_DOM_READY_QUEUEING = {
 /**
  * Initializes the internal `onDOMReady` queue.
  */
 initialize: function () {
   this.reactMountReady.reset();
 },

 /**
  * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
  */
 close: function () {
   this.reactMountReady.notifyAll();
 }
};

/**
* Executed within the scope of the `Transaction` instance. Consider these as
* being member methods, but with an implied ordering while being isolated from
* each other.
*/
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

/**
* Currently:
* - The order that these are listed in the transaction is critical:
* - Suppresses events.
* - Restores selection range.
*
* Future:
* - Restore document/overflow scroll positions that were unintentionally
*   modified via DOM insertions above the top viewport boundary.
* - Implement/integrate with customized constraint based layout system and keep
*   track of which dimensions must be remeasured.
*
* @class ReactReconcileTransaction
*/
function ReactReconcileTransaction(useCreateElement) {
 this.reinitializeTransaction();
 // Only server-side rendering really needs this option (see
 // `ReactServerRendering`), but server-side uses
 // `ReactServerRenderingTransaction` instead. This option is here so that it's
 // accessible and defaults to false when `ReactDOMComponent` and
 // `ReactTextComponent` checks it in `mountComponent`.`
 this.renderToStaticMarkup = false;
 this.reactMountReady = CallbackQueue.getPooled(null);
 this.useCreateElement = useCreateElement;
}

var Mixin = {
 /**
  * @see Transaction
  * @abstract
  * @final
  * @return {array<object>} List of operation wrap procedures.
  *   TODO: convert to array<TransactionWrapper>
  */
 getTransactionWrappers: function () {
   return TRANSACTION_WRAPPERS;
 },

 /**
  * @return {object} The queue to collect `onDOMReady` callbacks with.
  */
 getReactMountReady: function () {
   return this.reactMountReady;
 },

 /**
  * Save current transaction state -- if the return value from this method is
  * passed to `rollback`, the transaction will be reset to that state.
  */
 checkpoint: function () {
   // reactMountReady is the our only stateful wrapper
   return this.reactMountReady.checkpoint();
 },

 rollback: function (checkpoint) {
   this.reactMountReady.rollback(checkpoint);
 },

 /**
  * `PooledClass` looks for this, and will invoke this before allowing this
  * instance to be reused.
  */
 destructor: function () {
   CallbackQueue.release(this.reactMountReady);
   this.reactMountReady = null;
 }
};

_assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
},{"122":122,"182":182,"24":24,"26":26,"5":5,"73":73}],91:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactReconciler
*/

'use strict';

var ReactRef = _dereq_(92);
var ReactInstrumentation = _dereq_(75);

/**
* Helper to call ReactRef.attachRefs with this composite component, split out
* to avoid allocations in the transaction mount-ready queue.
*/
function attachRefs() {
 ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

 /**
  * Initializes the component, renders markup, and registers event listeners.
  *
  * @param {ReactComponent} internalInstance
  * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
  * @param {?object} the containing native component instance
  * @param {?object} info about the native container
  * @return {?string} Rendered markup to be inserted into the DOM.
  * @final
  * @internal
  */
 mountComponent: function (internalInstance, transaction, nativeParent, nativeContainerInfo, context) {
   var markup = internalInstance.mountComponent(transaction, nativeParent, nativeContainerInfo, context);
   if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
     transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
   }
   if ("development" !== 'production') {
     ReactInstrumentation.debugTool.onMountComponent(internalInstance);
   }
   return markup;
 },

 /**
  * Returns a value that can be passed to
  * ReactComponentEnvironment.replaceNodeWithMarkup.
  */
 getNativeNode: function (internalInstance) {
   return internalInstance.getNativeNode();
 },

 /**
  * Releases any resources allocated by `mountComponent`.
  *
  * @final
  * @internal
  */
 unmountComponent: function (internalInstance, safely) {
   ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
   internalInstance.unmountComponent(safely);
   if ("development" !== 'production') {
     ReactInstrumentation.debugTool.onUnmountComponent(internalInstance);
   }
 },

 /**
  * Update a component using a new element.
  *
  * @param {ReactComponent} internalInstance
  * @param {ReactElement} nextElement
  * @param {ReactReconcileTransaction} transaction
  * @param {object} context
  * @internal
  */
 receiveComponent: function (internalInstance, nextElement, transaction, context) {
   var prevElement = internalInstance._currentElement;

   if (nextElement === prevElement && context === internalInstance._context) {
     // Since elements are immutable after the owner is rendered,
     // we can do a cheap identity compare here to determine if this is a
     // superfluous reconcile. It's possible for state to be mutable but such
     // change should trigger an update of the owner which would recreate
     // the element. We explicitly check for the existence of an owner since
     // it's possible for an element created outside a composite to be
     // deeply mutated and reused.

     // TODO: Bailing out early is just a perf optimization right?
     // TODO: Removing the return statement should affect correctness?
     return;
   }

   var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

   if (refsChanged) {
     ReactRef.detachRefs(internalInstance, prevElement);
   }

   internalInstance.receiveComponent(nextElement, transaction, context);

   if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
     transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
   }

   if ("development" !== 'production') {
     ReactInstrumentation.debugTool.onUpdateComponent(internalInstance);
   }
 },

 /**
  * Flush any dirty changes in a component.
  *
  * @param {ReactComponent} internalInstance
  * @param {ReactReconcileTransaction} transaction
  * @internal
  */
 performUpdateIfNecessary: function (internalInstance, transaction) {
   internalInstance.performUpdateIfNecessary(transaction);
   if ("development" !== 'production') {
     ReactInstrumentation.debugTool.onUpdateComponent(internalInstance);
   }
 }

};

module.exports = ReactReconciler;
},{"75":75,"92":92}],92:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactRef
*/

'use strict';

var ReactOwner = _dereq_(85);

var ReactRef = {};

function attachRef(ref, component, owner) {
 if (typeof ref === 'function') {
   ref(component.getPublicInstance());
 } else {
   // Legacy ref
   ReactOwner.addComponentAsRefTo(component, ref, owner);
 }
}

function detachRef(ref, component, owner) {
 if (typeof ref === 'function') {
   ref(null);
 } else {
   // Legacy ref
   ReactOwner.removeComponentAsRefFrom(component, ref, owner);
 }
}

ReactRef.attachRefs = function (instance, element) {
 if (element === null || element === false) {
   return;
 }
 var ref = element.ref;
 if (ref != null) {
   attachRef(ref, instance, element._owner);
 }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
 // If either the owner or a `ref` has changed, make sure the newest owner
 // has stored a reference to `this`, and the previous owner (if different)
 // has forgotten the reference to `this`. We use the element instead
 // of the public this.props because the post processing cannot determine
 // a ref. The ref conceptually lives on the element.

 // TODO: Should this even be possible? The owner cannot change because
 // it's forbidden by shouldUpdateReactComponent. The ref can change
 // if you swap the keys of but not the refs. Reconsider where this check
 // is made. It probably belongs where the key checking and
 // instantiateReactComponent is done.

 var prevEmpty = prevElement === null || prevElement === false;
 var nextEmpty = nextElement === null || nextElement === false;

 return(
   // This has a few false positives w/r/t empty components.
   prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
 );
};

ReactRef.detachRefs = function (instance, element) {
 if (element === null || element === false) {
   return;
 }
 var ref = element.ref;
 if (ref != null) {
   detachRef(ref, instance, element._owner);
 }
};

module.exports = ReactRef;
},{"85":85}],93:[function(_dereq_,module,exports){
/**
* Copyright 2014-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactServerBatchingStrategy
*/

'use strict';

var ReactServerBatchingStrategy = {
 isBatchingUpdates: false,
 batchedUpdates: function (callback) {
   // Don't do anything here. During the server rendering we don't want to
   // schedule any updates. We will simply ignore them.
 }
};

module.exports = ReactServerBatchingStrategy;
},{}],94:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactServerRendering
*/
'use strict';

var ReactDOMContainerInfo = _dereq_(43);
var ReactDefaultBatchingStrategy = _dereq_(60);
var ReactElement = _dereq_(64);
var ReactMarkupChecksum = _dereq_(78);
var ReactServerBatchingStrategy = _dereq_(93);
var ReactServerRenderingTransaction = _dereq_(95);
var ReactUpdates = _dereq_(102);

var emptyObject = _dereq_(164);
var instantiateReactComponent = _dereq_(142);
var invariant = _dereq_(171);

/**
* @param {ReactElement} element
* @return {string} the HTML markup
*/
function renderToStringImpl(element, makeStaticMarkup) {
 var transaction;
 try {
   ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

   transaction = ReactServerRenderingTransaction.getPooled(makeStaticMarkup);

   return transaction.perform(function () {
     var componentInstance = instantiateReactComponent(element);
     var markup = componentInstance.mountComponent(transaction, null, ReactDOMContainerInfo(), emptyObject);
     if (!makeStaticMarkup) {
       markup = ReactMarkupChecksum.addChecksumToMarkup(markup);
     }
     return markup;
   }, null);
 } finally {
   ReactServerRenderingTransaction.release(transaction);
   // Revert to the DOM batching strategy since these two renderers
   // currently share these stateful modules.
   ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
 }
}

function renderToString(element) {
 !ReactElement.isValidElement(element) ? "development" !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : void 0;
 return renderToStringImpl(element, false);
}

function renderToStaticMarkup(element) {
 !ReactElement.isValidElement(element) ? "development" !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : void 0;
 return renderToStringImpl(element, true);
}

module.exports = {
 renderToString: renderToString,
 renderToStaticMarkup: renderToStaticMarkup
};
},{"102":102,"142":142,"164":164,"171":171,"43":43,"60":60,"64":64,"78":78,"93":93,"95":95}],95:[function(_dereq_,module,exports){
/**
* Copyright 2014-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactServerRenderingTransaction
*/

'use strict';

var _assign = _dereq_(182);

var PooledClass = _dereq_(24);
var Transaction = _dereq_(122);

/**
* Executed within the scope of the `Transaction` instance. Consider these as
* being member methods, but with an implied ordering while being isolated from
* each other.
*/
var TRANSACTION_WRAPPERS = [];

var noopCallbackQueue = {
 enqueue: function () {}
};

/**
* @class ReactServerRenderingTransaction
* @param {boolean} renderToStaticMarkup
*/
function ReactServerRenderingTransaction(renderToStaticMarkup) {
 this.reinitializeTransaction();
 this.renderToStaticMarkup = renderToStaticMarkup;
 this.useCreateElement = false;
}

var Mixin = {
 /**
  * @see Transaction
  * @abstract
  * @final
  * @return {array} Empty list of operation wrap procedures.
  */
 getTransactionWrappers: function () {
   return TRANSACTION_WRAPPERS;
 },

 /**
  * @return {object} The queue to collect `onDOMReady` callbacks with.
  */
 getReactMountReady: function () {
   return noopCallbackQueue;
 },

 /**
  * `PooledClass` looks for this, and will invoke this before allowing this
  * instance to be reused.
  */
 destructor: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
},{"122":122,"182":182,"24":24}],96:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactStateSetters
*/

'use strict';

var ReactStateSetters = {
 /**
  * Returns a function that calls the provided function, and uses the result
  * of that to set the component's state.
  *
  * @param {ReactCompositeComponent} component
  * @param {function} funcReturningState Returned callback uses this to
  *                                      determine how to update state.
  * @return {function} callback that when invoked uses funcReturningState to
  *                    determined the object literal to setState.
  */
 createStateSetter: function (component, funcReturningState) {
   return function (a, b, c, d, e, f) {
     var partialState = funcReturningState.call(component, a, b, c, d, e, f);
     if (partialState) {
       component.setState(partialState);
     }
   };
 },

 /**
  * Returns a single-argument callback that can be used to update a single
  * key in the component's state.
  *
  * Note: this is memoized function, which makes it inexpensive to call.
  *
  * @param {ReactCompositeComponent} component
  * @param {string} key The key in the state that you should update.
  * @return {function} callback of 1 argument which calls setState() with
  *                    the provided keyName and callback argument.
  */
 createStateKeySetter: function (component, key) {
   // Memoize the setters.
   var cache = component.__keySetters || (component.__keySetters = {});
   return cache[key] || (cache[key] = createStateKeySetter(component, key));
 }
};

function createStateKeySetter(component, key) {
 // Partial state is allocated outside of the function closure so it can be
 // reused with every call, avoiding memory allocation when this function
 // is called.
 var partialState = {};
 return function stateKeySetter(value) {
   partialState[key] = value;
   component.setState(partialState);
 };
}

ReactStateSetters.Mixin = {
 /**
  * Returns a function that calls the provided function, and uses the result
  * of that to set the component's state.
  *
  * For example, these statements are equivalent:
  *
  *   this.setState({x: 1});
  *   this.createStateSetter(function(xValue) {
  *     return {x: xValue};
  *   })(1);
  *
  * @param {function} funcReturningState Returned callback uses this to
  *                                      determine how to update state.
  * @return {function} callback that when invoked uses funcReturningState to
  *                    determined the object literal to setState.
  */
 createStateSetter: function (funcReturningState) {
   return ReactStateSetters.createStateSetter(this, funcReturningState);
 },

 /**
  * Returns a single-argument callback that can be used to update a single
  * key in the component's state.
  *
  * For example, these statements are equivalent:
  *
  *   this.setState({x: 1});
  *   this.createStateKeySetter('x')(1);
  *
  * Note: this is memoized function, which makes it inexpensive to call.
  *
  * @param {string} key The key in the state that you should update.
  * @return {function} callback of 1 argument which calls setState() with
  *                    the provided keyName and callback argument.
  */
 createStateKeySetter: function (key) {
   return ReactStateSetters.createStateKeySetter(this, key);
 }
};

module.exports = ReactStateSetters;
},{}],97:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactTestUtils
*/

'use strict';

var _assign = _dereq_(182);

var EventConstants = _dereq_(15);
var EventPluginHub = _dereq_(16);
var EventPluginRegistry = _dereq_(17);
var EventPropagators = _dereq_(19);
var React = _dereq_(25);
var ReactDefaultInjection = _dereq_(61);
var ReactDOM = _dereq_(38);
var ReactDOMComponentTree = _dereq_(42);
var ReactElement = _dereq_(64);
var ReactBrowserEventEmitter = _dereq_(26);
var ReactCompositeComponent = _dereq_(36);
var ReactInstanceMap = _dereq_(74);
var ReactUpdates = _dereq_(102);
var SyntheticEvent = _dereq_(113);

var emptyObject = _dereq_(164);
var findDOMNode = _dereq_(130);
var invariant = _dereq_(171);

var topLevelTypes = EventConstants.topLevelTypes;

function Event(suffix) {}

/**
* @class ReactTestUtils
*/

function findAllInRenderedTreeInternal(inst, test) {
 if (!inst || !inst.getPublicInstance) {
   return [];
 }
 var publicInst = inst.getPublicInstance();
 var ret = test(publicInst) ? [publicInst] : [];
 var currentElement = inst._currentElement;
 if (ReactTestUtils.isDOMComponent(publicInst)) {
   var renderedChildren = inst._renderedChildren;
   var key;
   for (key in renderedChildren) {
     if (!renderedChildren.hasOwnProperty(key)) {
       continue;
     }
     ret = ret.concat(findAllInRenderedTreeInternal(renderedChildren[key], test));
   }
 } else if (ReactElement.isValidElement(currentElement) && typeof currentElement.type === 'function') {
   ret = ret.concat(findAllInRenderedTreeInternal(inst._renderedComponent, test));
 }
 return ret;
}

/**
* Todo: Support the entire DOM.scry query syntax. For now, these simple
* utilities will suffice for testing purposes.
* @lends ReactTestUtils
*/
var ReactTestUtils = {
 renderIntoDocument: function (instance) {
   var div = document.createElement('div');
   // None of our tests actually require attaching the container to the
   // DOM, and doing so creates a mess that we rely on test isolation to
   // clean up, so we're going to stop honoring the name of this method
   // (and probably rename it eventually) if no problems arise.
   // document.documentElement.appendChild(div);
   return ReactDOM.render(instance, div);
 },

 isElement: function (element) {
   return ReactElement.isValidElement(element);
 },

 isElementOfType: function (inst, convenienceConstructor) {
   return ReactElement.isValidElement(inst) && inst.type === convenienceConstructor;
 },

 isDOMComponent: function (inst) {
   return !!(inst && inst.nodeType === 1 && inst.tagName);
 },

 isDOMComponentElement: function (inst) {
   return !!(inst && ReactElement.isValidElement(inst) && !!inst.tagName);
 },

 isCompositeComponent: function (inst) {
   if (ReactTestUtils.isDOMComponent(inst)) {
     // Accessing inst.setState warns; just return false as that'll be what
     // this returns when we have DOM nodes as refs directly
     return false;
   }
   return inst != null && typeof inst.render === 'function' && typeof inst.setState === 'function';
 },

 isCompositeComponentWithType: function (inst, type) {
   if (!ReactTestUtils.isCompositeComponent(inst)) {
     return false;
   }
   var internalInstance = ReactInstanceMap.get(inst);
   var constructor = internalInstance._currentElement.type;

   return constructor === type;
 },

 isCompositeComponentElement: function (inst) {
   if (!ReactElement.isValidElement(inst)) {
     return false;
   }
   // We check the prototype of the type that will get mounted, not the
   // instance itself. This is a future proof way of duck typing.
   var prototype = inst.type.prototype;
   return typeof prototype.render === 'function' && typeof prototype.setState === 'function';
 },

 isCompositeComponentElementWithType: function (inst, type) {
   var internalInstance = ReactInstanceMap.get(inst);
   var constructor = internalInstance._currentElement.type;

   return !!(ReactTestUtils.isCompositeComponentElement(inst) && constructor === type);
 },

 getRenderedChildOfCompositeComponent: function (inst) {
   if (!ReactTestUtils.isCompositeComponent(inst)) {
     return null;
   }
   var internalInstance = ReactInstanceMap.get(inst);
   return internalInstance._renderedComponent.getPublicInstance();
 },

 findAllInRenderedTree: function (inst, test) {
   if (!inst) {
     return [];
   }
   !ReactTestUtils.isCompositeComponent(inst) ? "development" !== 'production' ? invariant(false, 'findAllInRenderedTree(...): instance must be a composite component') : invariant(false) : void 0;
   return findAllInRenderedTreeInternal(ReactInstanceMap.get(inst), test);
 },

 /**
  * Finds all instance of components in the rendered tree that are DOM
  * components with the class name matching `className`.
  * @return {array} an array of all the matches.
  */
 scryRenderedDOMComponentsWithClass: function (root, classNames) {
   if (!Array.isArray(classNames)) {
     classNames = classNames.split(/\s+/);
   }
   return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
     if (ReactTestUtils.isDOMComponent(inst)) {
       var className = inst.className;
       if (typeof className !== 'string') {
         // SVG, probably.
         className = inst.getAttribute('class') || '';
       }
       var classList = className.split(/\s+/);
       return classNames.every(function (name) {
         return classList.indexOf(name) !== -1;
       });
     }
     return false;
   });
 },

 /**
  * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
  * and returns that one result, or throws exception if there is any other
  * number of matches besides one.
  * @return {!ReactDOMComponent} The one match.
  */
 findRenderedDOMComponentWithClass: function (root, className) {
   var all = ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
   if (all.length !== 1) {
     throw new Error('Did not find exactly one match (found: ' + all.length + ') ' + 'for class:' + className);
   }
   return all[0];
 },

 /**
  * Finds all instance of components in the rendered tree that are DOM
  * components with the tag name matching `tagName`.
  * @return {array} an array of all the matches.
  */
 scryRenderedDOMComponentsWithTag: function (root, tagName) {
   return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
     return ReactTestUtils.isDOMComponent(inst) && inst.tagName.toUpperCase() === tagName.toUpperCase();
   });
 },

 /**
  * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
  * and returns that one result, or throws exception if there is any other
  * number of matches besides one.
  * @return {!ReactDOMComponent} The one match.
  */
 findRenderedDOMComponentWithTag: function (root, tagName) {
   var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
   if (all.length !== 1) {
     throw new Error('Did not find exactly one match (found: ' + all.length + ') ' + 'for tag:' + tagName);
   }
   return all[0];
 },

 /**
  * Finds all instances of components with type equal to `componentType`.
  * @return {array} an array of all the matches.
  */
 scryRenderedComponentsWithType: function (root, componentType) {
   return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
     return ReactTestUtils.isCompositeComponentWithType(inst, componentType);
   });
 },

 /**
  * Same as `scryRenderedComponentsWithType` but expects there to be one result
  * and returns that one result, or throws exception if there is any other
  * number of matches besides one.
  * @return {!ReactComponent} The one match.
  */
 findRenderedComponentWithType: function (root, componentType) {
   var all = ReactTestUtils.scryRenderedComponentsWithType(root, componentType);
   if (all.length !== 1) {
     throw new Error('Did not find exactly one match (found: ' + all.length + ') ' + 'for componentType:' + componentType);
   }
   return all[0];
 },

 /**
  * Pass a mocked component module to this method to augment it with
  * useful methods that allow it to be used as a dummy React component.
  * Instead of rendering as usual, the component will become a simple
  * <div> containing any provided children.
  *
  * @param {object} module the mock function object exported from a
  *                        module that defines the component to be mocked
  * @param {?string} mockTagName optional dummy root tag name to return
  *                              from render method (overrides
  *                              module.mockTagName if provided)
  * @return {object} the ReactTestUtils object (for chaining)
  */
 mockComponent: function (module, mockTagName) {
   mockTagName = mockTagName || module.mockTagName || 'div';

   module.prototype.render.mockImplementation(function () {
     return React.createElement(mockTagName, null, this.props.children);
   });

   return this;
 },

 /**
  * Simulates a top level event being dispatched from a raw event that occurred
  * on an `Element` node.
  * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`
  * @param {!Element} node The dom to simulate an event occurring on.
  * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
  */
 simulateNativeEventOnNode: function (topLevelType, node, fakeNativeEvent) {
   fakeNativeEvent.target = node;
   ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(topLevelType, fakeNativeEvent);
 },

 /**
  * Simulates a top level event being dispatched from a raw event that occurred
  * on the `ReactDOMComponent` `comp`.
  * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`.
  * @param {!ReactDOMComponent} comp
  * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
  */
 simulateNativeEventOnDOMComponent: function (topLevelType, comp, fakeNativeEvent) {
   ReactTestUtils.simulateNativeEventOnNode(topLevelType, findDOMNode(comp), fakeNativeEvent);
 },

 nativeTouchData: function (x, y) {
   return {
     touches: [{ pageX: x, pageY: y }]
   };
 },

 createRenderer: function () {
   return new ReactShallowRenderer();
 },

 Simulate: null,
 SimulateNative: {}
};

/**
* @class ReactShallowRenderer
*/
var ReactShallowRenderer = function () {
 this._instance = null;
};

ReactShallowRenderer.prototype.getMountedInstance = function () {
 return this._instance ? this._instance._instance : null;
};

var NoopInternalComponent = function (element) {
 this._renderedOutput = element;
 this._currentElement = element;
};

NoopInternalComponent.prototype = {

 mountComponent: function () {},

 receiveComponent: function (element) {
   this._renderedOutput = element;
   this._currentElement = element;
 },

 getNativeNode: function () {
   return undefined;
 },

 unmountComponent: function () {},

 getPublicInstance: function () {
   return null;
 }
};

var ShallowComponentWrapper = function (element) {
 this.construct(element);
};
_assign(ShallowComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
 _instantiateReactComponent: function (element) {
   return new NoopInternalComponent(element);
 },
 _replaceNodeWithMarkup: function () {},
 _renderValidatedComponent: ReactCompositeComponent.Mixin._renderValidatedComponentWithoutOwnerOrContext
});

ReactShallowRenderer.prototype.render = function (element, context) {
 // Ensure we've done the default injections. This might not be true in the
 // case of a simple test that only requires React and the TestUtils in
 // conjunction with an inline-requires transform.
 ReactDefaultInjection.inject();

 !ReactElement.isValidElement(element) ? "development" !== 'production' ? invariant(false, 'ReactShallowRenderer render(): Invalid component element.%s', typeof element === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' : '') : invariant(false) : void 0;
 !(typeof element.type !== 'string') ? "development" !== 'production' ? invariant(false, 'ReactShallowRenderer render(): Shallow rendering works only with custom ' + 'components, not primitives (%s). Instead of calling `.render(el)` and ' + 'inspecting the rendered output, look at `el.props` directly instead.', element.type) : invariant(false) : void 0;

 if (!context) {
   context = emptyObject;
 }
 ReactUpdates.batchedUpdates(_batchedRender, this, element, context);

 return this.getRenderOutput();
};

function _batchedRender(renderer, element, context) {
 var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(true);
 renderer._render(element, transaction, context);
 ReactUpdates.ReactReconcileTransaction.release(transaction);
}

ReactShallowRenderer.prototype.getRenderOutput = function () {
 return this._instance && this._instance._renderedComponent && this._instance._renderedComponent._renderedOutput || null;
};

ReactShallowRenderer.prototype.unmount = function () {
 if (this._instance) {
   this._instance.unmountComponent(false);
 }
};

ReactShallowRenderer.prototype._render = function (element, transaction, context) {
 if (this._instance) {
   this._instance.receiveComponent(element, transaction, context);
 } else {
   var instance = new ShallowComponentWrapper(element);
   instance.mountComponent(transaction, null, null, context);
   this._instance = instance;
 }
};

/**
* Exports:
*
* - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
* - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
* - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
* - ... (All keys from event plugin `eventTypes` objects)
*/
function makeSimulator(eventType) {
 return function (domComponentOrNode, eventData) {
   var node;
   !!React.isValidElement(domComponentOrNode) ? "development" !== 'production' ? invariant(false, 'TestUtils.Simulate expects a component instance and not a ReactElement.' + 'TestUtils.Simulate will not work if you are using shallow rendering.') : invariant(false) : void 0;
   if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
     node = findDOMNode(domComponentOrNode);
   } else if (domComponentOrNode.tagName) {
     node = domComponentOrNode;
   }

   var dispatchConfig = EventPluginRegistry.eventNameDispatchConfigs[eventType];

   var fakeNativeEvent = new Event();
   fakeNativeEvent.target = node;
   // We don't use SyntheticEvent.getPooled in order to not have to worry about
   // properly destroying any properties assigned from `eventData` upon release
   var event = new SyntheticEvent(dispatchConfig, ReactDOMComponentTree.getInstanceFromNode(node), fakeNativeEvent, node);
   // Since we aren't using pooling, always persist the event. This will make
   // sure it's marked and won't warn when setting additional properties.
   event.persist();
   _assign(event, eventData);

   if (dispatchConfig.phasedRegistrationNames) {
     EventPropagators.accumulateTwoPhaseDispatches(event);
   } else {
     EventPropagators.accumulateDirectDispatches(event);
   }

   ReactUpdates.batchedUpdates(function () {
     EventPluginHub.enqueueEvents(event);
     EventPluginHub.processEventQueue(true);
   });
 };
}

function buildSimulators() {
 ReactTestUtils.Simulate = {};

 var eventType;
 for (eventType in EventPluginRegistry.eventNameDispatchConfigs) {
   /**
    * @param {!Element|ReactDOMComponent} domComponentOrNode
    * @param {?object} eventData Fake event data to use in SyntheticEvent.
    */
   ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
 }
}

// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
EventPluginHub.injection.injectEventPluginOrder = function () {
 oldInjectEventPluginOrder.apply(this, arguments);
 buildSimulators();
};
var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
EventPluginHub.injection.injectEventPluginsByName = function () {
 oldInjectEventPlugins.apply(this, arguments);
 buildSimulators();
};

buildSimulators();

/**
* Exports:
*
* - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
* - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
* - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
* - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
* - ... (All keys from `EventConstants.topLevelTypes`)
*
* Note: Top level event types are a subset of the entire set of handler types
* (which include a broader set of "synthetic" events). For example, onDragDone
* is a synthetic event. Except when testing an event plugin or React's event
* handling code specifically, you probably want to use ReactTestUtils.Simulate
* to dispatch synthetic events.
*/

function makeNativeSimulator(eventType) {
 return function (domComponentOrNode, nativeEventData) {
   var fakeNativeEvent = new Event(eventType);
   _assign(fakeNativeEvent, nativeEventData);
   if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
     ReactTestUtils.simulateNativeEventOnDOMComponent(eventType, domComponentOrNode, fakeNativeEvent);
   } else if (domComponentOrNode.tagName) {
     // Will allow on actual dom nodes.
     ReactTestUtils.simulateNativeEventOnNode(eventType, domComponentOrNode, fakeNativeEvent);
   }
 };
}

Object.keys(topLevelTypes).forEach(function (eventType) {
 // Event type is stored as 'topClick' - we transform that to 'click'
 var convenienceName = eventType.indexOf('top') === 0 ? eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
 /**
  * @param {!Element|ReactDOMComponent} domComponentOrNode
  * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
  */
 ReactTestUtils.SimulateNative[convenienceName] = makeNativeSimulator(eventType);
});

module.exports = ReactTestUtils;
},{"102":102,"113":113,"130":130,"15":15,"16":16,"164":164,"17":17,"171":171,"182":182,"19":19,"25":25,"26":26,"36":36,"38":38,"42":42,"61":61,"64":64,"74":74}],98:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactTransitionChildMapping
*/

'use strict';

var flattenChildren = _dereq_(131);

var ReactTransitionChildMapping = {
 /**
  * Given `this.props.children`, return an object mapping key to child. Just
  * simple syntactic sugar around flattenChildren().
  *
  * @param {*} children `this.props.children`
  * @return {object} Mapping of key to child
  */
 getChildMapping: function (children) {
   if (!children) {
     return children;
   }
   return flattenChildren(children);
 },

 /**
  * When you're adding or removing children some may be added or removed in the
  * same render pass. We want to show *both* since we want to simultaneously
  * animate elements in and out. This function takes a previous set of keys
  * and a new set of keys and merges them with its best guess of the correct
  * ordering. In the future we may expose some of the utilities in
  * ReactMultiChild to make this easy, but for now React itself does not
  * directly have this concept of the union of prevChildren and nextChildren
  * so we implement it here.
  *
  * @param {object} prev prev children as returned from
  * `ReactTransitionChildMapping.getChildMapping()`.
  * @param {object} next next children as returned from
  * `ReactTransitionChildMapping.getChildMapping()`.
  * @return {object} a key set that contains all keys in `prev` and all keys
  * in `next` in a reasonable order.
  */
 mergeChildMappings: function (prev, next) {
   prev = prev || {};
   next = next || {};

   function getValueForKey(key) {
     if (next.hasOwnProperty(key)) {
       return next[key];
     } else {
       return prev[key];
     }
   }

   // For each key of `next`, the list of keys to insert before that key in
   // the combined list
   var nextKeysPending = {};

   var pendingKeys = [];
   for (var prevKey in prev) {
     if (next.hasOwnProperty(prevKey)) {
       if (pendingKeys.length) {
         nextKeysPending[prevKey] = pendingKeys;
         pendingKeys = [];
       }
     } else {
       pendingKeys.push(prevKey);
     }
   }

   var i;
   var childMapping = {};
   for (var nextKey in next) {
     if (nextKeysPending.hasOwnProperty(nextKey)) {
       for (i = 0; i < nextKeysPending[nextKey].length; i++) {
         var pendingNextKey = nextKeysPending[nextKey][i];
         childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
       }
     }
     childMapping[nextKey] = getValueForKey(nextKey);
   }

   // Finally, add the keys which didn't appear before any key in `next`
   for (i = 0; i < pendingKeys.length; i++) {
     childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
   }

   return childMapping;
 }
};

module.exports = ReactTransitionChildMapping;
},{"131":131}],99:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactTransitionEvents
*/

'use strict';

var ExecutionEnvironment = _dereq_(157);

var getVendorPrefixedEventName = _dereq_(141);

var endEvents = [];

function detectEvents() {
 var animEnd = getVendorPrefixedEventName('animationend');
 var transEnd = getVendorPrefixedEventName('transitionend');

 if (animEnd) {
   endEvents.push(animEnd);
 }

 if (transEnd) {
   endEvents.push(transEnd);
 }
}

if (ExecutionEnvironment.canUseDOM) {
 detectEvents();
}

// We use the raw {add|remove}EventListener() call because EventListener
// does not know how to remove event listeners and we really should
// clean up. Also, these events are not triggered in older browsers
// so we should be A-OK here.

function addEventListener(node, eventName, eventListener) {
 node.addEventListener(eventName, eventListener, false);
}

function removeEventListener(node, eventName, eventListener) {
 node.removeEventListener(eventName, eventListener, false);
}

var ReactTransitionEvents = {
 addEndEventListener: function (node, eventListener) {
   if (endEvents.length === 0) {
     // If CSS transitions are not supported, trigger an "end animation"
     // event immediately.
     window.setTimeout(eventListener, 0);
     return;
   }
   endEvents.forEach(function (endEvent) {
     addEventListener(node, endEvent, eventListener);
   });
 },

 removeEndEventListener: function (node, eventListener) {
   if (endEvents.length === 0) {
     return;
   }
   endEvents.forEach(function (endEvent) {
     removeEventListener(node, endEvent, eventListener);
   });
 }
};

module.exports = ReactTransitionEvents;
},{"141":141,"157":157}],100:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactTransitionGroup
*/

'use strict';

var _assign = _dereq_(182);

var React = _dereq_(25);
var ReactTransitionChildMapping = _dereq_(98);

var emptyFunction = _dereq_(163);

var ReactTransitionGroup = React.createClass({
 displayName: 'ReactTransitionGroup',

 propTypes: {
   component: React.PropTypes.any,
   childFactory: React.PropTypes.func
 },

 getDefaultProps: function () {
   return {
     component: 'span',
     childFactory: emptyFunction.thatReturnsArgument
   };
 },

 getInitialState: function () {
   return {
     children: ReactTransitionChildMapping.getChildMapping(this.props.children)
   };
 },

 componentWillMount: function () {
   this.currentlyTransitioningKeys = {};
   this.keysToEnter = [];
   this.keysToLeave = [];
 },

 componentDidMount: function () {
   var initialChildMapping = this.state.children;
   for (var key in initialChildMapping) {
     if (initialChildMapping[key]) {
       this.performAppear(key);
     }
   }
 },

 componentWillReceiveProps: function (nextProps) {
   var nextChildMapping = ReactTransitionChildMapping.getChildMapping(nextProps.children);
   var prevChildMapping = this.state.children;

   this.setState({
     children: ReactTransitionChildMapping.mergeChildMappings(prevChildMapping, nextChildMapping)
   });

   var key;

   for (key in nextChildMapping) {
     var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
     if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
       this.keysToEnter.push(key);
     }
   }

   for (key in prevChildMapping) {
     var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
     if (prevChildMapping[key] && !hasNext && !this.currentlyTransitioningKeys[key]) {
       this.keysToLeave.push(key);
     }
   }

   // If we want to someday check for reordering, we could do it here.
 },

 componentDidUpdate: function () {
   var keysToEnter = this.keysToEnter;
   this.keysToEnter = [];
   keysToEnter.forEach(this.performEnter);

   var keysToLeave = this.keysToLeave;
   this.keysToLeave = [];
   keysToLeave.forEach(this.performLeave);
 },

 performAppear: function (key) {
   this.currentlyTransitioningKeys[key] = true;

   var component = this.refs[key];

   if (component.componentWillAppear) {
     component.componentWillAppear(this._handleDoneAppearing.bind(this, key));
   } else {
     this._handleDoneAppearing(key);
   }
 },

 _handleDoneAppearing: function (key) {
   var component = this.refs[key];
   if (component.componentDidAppear) {
     component.componentDidAppear();
   }

   delete this.currentlyTransitioningKeys[key];

   var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

   if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
     // This was removed before it had fully appeared. Remove it.
     this.performLeave(key);
   }
 },

 performEnter: function (key) {
   this.currentlyTransitioningKeys[key] = true;

   var component = this.refs[key];

   if (component.componentWillEnter) {
     component.componentWillEnter(this._handleDoneEntering.bind(this, key));
   } else {
     this._handleDoneEntering(key);
   }
 },

 _handleDoneEntering: function (key) {
   var component = this.refs[key];
   if (component.componentDidEnter) {
     component.componentDidEnter();
   }

   delete this.currentlyTransitioningKeys[key];

   var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

   if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
     // This was removed before it had fully entered. Remove it.
     this.performLeave(key);
   }
 },

 performLeave: function (key) {
   this.currentlyTransitioningKeys[key] = true;

   var component = this.refs[key];
   if (component.componentWillLeave) {
     component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
   } else {
     // Note that this is somewhat dangerous b/c it calls setState()
     // again, effectively mutating the component before all the work
     // is done.
     this._handleDoneLeaving(key);
   }
 },

 _handleDoneLeaving: function (key) {
   var component = this.refs[key];

   if (component.componentDidLeave) {
     component.componentDidLeave();
   }

   delete this.currentlyTransitioningKeys[key];

   var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

   if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
     // This entered again before it fully left. Add it again.
     this.performEnter(key);
   } else {
     this.setState(function (state) {
       var newChildren = _assign({}, state.children);
       delete newChildren[key];
       return { children: newChildren };
     });
   }
 },

 render: function () {
   // TODO: we could get rid of the need for the wrapper node
   // by cloning a single child
   var childrenToRender = [];
   for (var key in this.state.children) {
     var child = this.state.children[key];
     if (child) {
       // You may need to apply reactive updates to a child as it is leaving.
       // The normal React way to do it won't work since the child will have
       // already been removed. In case you need this behavior you can provide
       // a childFactory function to wrap every child, even the ones that are
       // leaving.
       childrenToRender.push(React.cloneElement(this.props.childFactory(child), { ref: key, key: key }));
     }
   }
   return React.createElement(this.props.component, this.props, childrenToRender);
 }
});

module.exports = ReactTransitionGroup;
},{"163":163,"182":182,"25":25,"98":98}],101:[function(_dereq_,module,exports){
/**
* Copyright 2015-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactUpdateQueue
*/

'use strict';

var ReactCurrentOwner = _dereq_(37);
var ReactInstanceMap = _dereq_(74);
var ReactUpdates = _dereq_(102);

var invariant = _dereq_(171);
var warning = _dereq_(181);

function enqueueUpdate(internalInstance) {
 ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
 var type = typeof arg;
 if (type !== 'object') {
   return type;
 }
 var displayName = arg.constructor && arg.constructor.name || type;
 var keys = Object.keys(arg);
 if (keys.length > 0 && keys.length < 20) {
   return displayName + ' (keys: ' + keys.join(', ') + ')';
 }
 return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
 var internalInstance = ReactInstanceMap.get(publicInstance);
 if (!internalInstance) {
   if ("development" !== 'production') {
     // Only warn when we have a callerName. Otherwise we should be silent.
     // We're probably calling from enqueueCallback. We don't want to warn
     // there because we already warned for the corresponding lifecycle method.
     "development" !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : void 0;
   }
   return null;
 }

 if ("development" !== 'production') {
   "development" !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
 }

 return internalInstance;
}

/**
* ReactUpdateQueue allows for state updates to be scheduled into a later
* reconciliation step.
*/
var ReactUpdateQueue = {

 /**
  * Checks whether or not this composite component is mounted.
  * @param {ReactClass} publicInstance The instance we want to test.
  * @return {boolean} True if mounted, false otherwise.
  * @protected
  * @final
  */
 isMounted: function (publicInstance) {
   if ("development" !== 'production') {
     var owner = ReactCurrentOwner.current;
     if (owner !== null) {
       "development" !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
       owner._warnedAboutRefsInRender = true;
     }
   }
   var internalInstance = ReactInstanceMap.get(publicInstance);
   if (internalInstance) {
     // During componentWillMount and render this will still be null but after
     // that will always render to something. At least for now. So we can use
     // this hack.
     return !!internalInstance._renderedComponent;
   } else {
     return false;
   }
 },

 /**
  * Enqueue a callback that will be executed after all the pending updates
  * have processed.
  *
  * @param {ReactClass} publicInstance The instance to use as `this` context.
  * @param {?function} callback Called after state is updated.
  * @param {string} callerName Name of the calling function in the public API.
  * @internal
  */
 enqueueCallback: function (publicInstance, callback, callerName) {
   ReactUpdateQueue.validateCallback(callback, callerName);
   var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

   // Previously we would throw an error if we didn't have an internal
   // instance. Since we want to make it a no-op instead, we mirror the same
   // behavior we have in other enqueue* methods.
   // We also need to ignore callbacks in componentWillMount. See
   // enqueueUpdates.
   if (!internalInstance) {
     return null;
   }

   if (internalInstance._pendingCallbacks) {
     internalInstance._pendingCallbacks.push(callback);
   } else {
     internalInstance._pendingCallbacks = [callback];
   }
   // TODO: The callback here is ignored when setState is called from
   // componentWillMount. Either fix it or disallow doing so completely in
   // favor of getInitialState. Alternatively, we can disallow
   // componentWillMount during server-side rendering.
   enqueueUpdate(internalInstance);
 },

 enqueueCallbackInternal: function (internalInstance, callback) {
   if (internalInstance._pendingCallbacks) {
     internalInstance._pendingCallbacks.push(callback);
   } else {
     internalInstance._pendingCallbacks = [callback];
   }
   enqueueUpdate(internalInstance);
 },

 /**
  * Forces an update. This should only be invoked when it is known with
  * certainty that we are **not** in a DOM transaction.
  *
  * You may want to call this when you know that some deeper aspect of the
  * component's state has changed but `setState` was not called.
  *
  * This will not invoke `shouldComponentUpdate`, but it will invoke
  * `componentWillUpdate` and `componentDidUpdate`.
  *
  * @param {ReactClass} publicInstance The instance that should rerender.
  * @internal
  */
 enqueueForceUpdate: function (publicInstance) {
   var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

   if (!internalInstance) {
     return;
   }

   internalInstance._pendingForceUpdate = true;

   enqueueUpdate(internalInstance);
 },

 /**
  * Replaces all of the state. Always use this or `setState` to mutate state.
  * You should treat `this.state` as immutable.
  *
  * There is no guarantee that `this.state` will be immediately updated, so
  * accessing `this.state` after calling this method may return the old value.
  *
  * @param {ReactClass} publicInstance The instance that should rerender.
  * @param {object} completeState Next state.
  * @internal
  */
 enqueueReplaceState: function (publicInstance, completeState) {
   var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

   if (!internalInstance) {
     return;
   }

   internalInstance._pendingStateQueue = [completeState];
   internalInstance._pendingReplaceState = true;

   enqueueUpdate(internalInstance);
 },

 /**
  * Sets a subset of the state. This only exists because _pendingState is
  * internal. This provides a merging strategy that is not available to deep
  * properties which is confusing. TODO: Expose pendingState or don't use it
  * during the merge.
  *
  * @param {ReactClass} publicInstance The instance that should rerender.
  * @param {object} partialState Next partial state to be merged with state.
  * @internal
  */
 enqueueSetState: function (publicInstance, partialState) {
   var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

   if (!internalInstance) {
     return;
   }

   var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
   queue.push(partialState);

   enqueueUpdate(internalInstance);
 },

 enqueueElementInternal: function (internalInstance, newElement) {
   internalInstance._pendingElement = newElement;
   enqueueUpdate(internalInstance);
 },

 validateCallback: function (callback, callerName) {
   !(!callback || typeof callback === 'function') ? "development" !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : invariant(false) : void 0;
 }

};

module.exports = ReactUpdateQueue;
},{"102":102,"171":171,"181":181,"37":37,"74":74}],102:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactUpdates
*/

'use strict';

var _assign = _dereq_(182);

var CallbackQueue = _dereq_(5);
var PooledClass = _dereq_(24);
var ReactFeatureFlags = _dereq_(70);
var ReactPerf = _dereq_(86);
var ReactReconciler = _dereq_(91);
var Transaction = _dereq_(122);

var invariant = _dereq_(171);

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
 !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? "development" !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : void 0;
}

var NESTED_UPDATES = {
 initialize: function () {
   this.dirtyComponentsLength = dirtyComponents.length;
 },
 close: function () {
   if (this.dirtyComponentsLength !== dirtyComponents.length) {
     // Additional updates were enqueued by componentDidUpdate handlers or
     // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
     // these new updates so that if A's componentDidUpdate calls setState on
     // B, B will update before the callback A's updater provided when calling
     // setState.
     dirtyComponents.splice(0, this.dirtyComponentsLength);
     flushBatchedUpdates();
   } else {
     dirtyComponents.length = 0;
   }
 }
};

var UPDATE_QUEUEING = {
 initialize: function () {
   this.callbackQueue.reset();
 },
 close: function () {
   this.callbackQueue.notifyAll();
 }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
 this.reinitializeTransaction();
 this.dirtyComponentsLength = null;
 this.callbackQueue = CallbackQueue.getPooled();
 this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
 /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
 getTransactionWrappers: function () {
   return TRANSACTION_WRAPPERS;
 },

 destructor: function () {
   this.dirtyComponentsLength = null;
   CallbackQueue.release(this.callbackQueue);
   this.callbackQueue = null;
   ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
   this.reconcileTransaction = null;
 },

 perform: function (method, scope, a) {
   // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
   // with this transaction's wrappers around it.
   return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
 }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
 ensureInjected();
 batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
* Array comparator for ReactComponents by mount ordering.
*
* @param {ReactComponent} c1 first component you're comparing
* @param {ReactComponent} c2 second component you're comparing
* @return {number} Return value usable by Array.prototype.sort().
*/
function mountOrderComparator(c1, c2) {
 return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
 var len = transaction.dirtyComponentsLength;
 !(len === dirtyComponents.length) ? "development" !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : void 0;

 // Since reconciling a component higher in the owner hierarchy usually (not
 // always -- see shouldComponentUpdate()) will reconcile children, reconcile
 // them before their children by sorting the array.
 dirtyComponents.sort(mountOrderComparator);

 for (var i = 0; i < len; i++) {
   // If a component is unmounted before pending changes apply, it will still
   // be here, but we assume that it has cleared its _pendingCallbacks and
   // that performUpdateIfNecessary is a noop.
   var component = dirtyComponents[i];

   // If performUpdateIfNecessary happens to enqueue any new updates, we
   // shouldn't execute the callbacks until the next render happens, so
   // stash the callbacks first
   var callbacks = component._pendingCallbacks;
   component._pendingCallbacks = null;

   var markerName;
   if (ReactFeatureFlags.logTopLevelRenders) {
     var namedComponent = component;
     // Duck type TopLevelWrapper. This is probably always true.
     if (component._currentElement.props === component._renderedComponent._currentElement) {
       namedComponent = component._renderedComponent;
     }
     markerName = 'React update: ' + namedComponent.getName();
     console.time(markerName);
   }

   ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

   if (markerName) {
     console.timeEnd(markerName);
   }

   if (callbacks) {
     for (var j = 0; j < callbacks.length; j++) {
       transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
     }
   }
 }
}

var flushBatchedUpdates = function () {
 // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
 // array and perform any updates enqueued by mount-ready handlers (i.e.,
 // componentDidUpdate) but we need to check here too in order to catch
 // updates enqueued by setState callbacks and asap calls.
 while (dirtyComponents.length || asapEnqueued) {
   if (dirtyComponents.length) {
     var transaction = ReactUpdatesFlushTransaction.getPooled();
     transaction.perform(runBatchedUpdates, null, transaction);
     ReactUpdatesFlushTransaction.release(transaction);
   }

   if (asapEnqueued) {
     asapEnqueued = false;
     var queue = asapCallbackQueue;
     asapCallbackQueue = CallbackQueue.getPooled();
     queue.notifyAll();
     CallbackQueue.release(queue);
   }
 }
};
flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

/**
* Mark a component as needing a rerender, adding an optional callback to a
* list of functions which will be executed once the rerender occurs.
*/
function enqueueUpdate(component) {
 ensureInjected();

 // Various parts of our code (such as ReactCompositeComponent's
 // _renderValidatedComponent) assume that calls to render aren't nested;
 // verify that that's the case. (This is called by each top-level update
 // function, like setProps, setState, forceUpdate, etc.; creation and
 // destruction of top-level components is guarded in ReactMount.)

 if (!batchingStrategy.isBatchingUpdates) {
   batchingStrategy.batchedUpdates(enqueueUpdate, component);
   return;
 }

 dirtyComponents.push(component);
}

/**
* Enqueue a callback to be run at the end of the current batching cycle. Throws
* if no updates are currently being performed.
*/
function asap(callback, context) {
 !batchingStrategy.isBatchingUpdates ? "development" !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : void 0;
 asapCallbackQueue.enqueue(callback, context);
 asapEnqueued = true;
}

var ReactUpdatesInjection = {
 injectReconcileTransaction: function (ReconcileTransaction) {
   !ReconcileTransaction ? "development" !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : void 0;
   ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
 },

 injectBatchingStrategy: function (_batchingStrategy) {
   !_batchingStrategy ? "development" !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : void 0;
   !(typeof _batchingStrategy.batchedUpdates === 'function') ? "development" !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : void 0;
   !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? "development" !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : void 0;
   batchingStrategy = _batchingStrategy;
 }
};

var ReactUpdates = {
 /**
  * React references `ReactReconcileTransaction` using this property in order
  * to allow dependency injection.
  *
  * @internal
  */
 ReactReconcileTransaction: null,

 batchedUpdates: batchedUpdates,
 enqueueUpdate: enqueueUpdate,
 flushBatchedUpdates: flushBatchedUpdates,
 injection: ReactUpdatesInjection,
 asap: asap
};

module.exports = ReactUpdates;
},{"122":122,"171":171,"182":182,"24":24,"5":5,"70":70,"86":86,"91":91}],103:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactVersion
*/

'use strict';

module.exports = '15.0.1';
},{}],104:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactWithAddons
*/

'use strict';

var LinkedStateMixin = _dereq_(22);
var React = _dereq_(25);
var ReactComponentWithPureRenderMixin = _dereq_(35);
var ReactCSSTransitionGroup = _dereq_(27);
var ReactFragment = _dereq_(71);
var ReactTransitionGroup = _dereq_(100);

var shallowCompare = _dereq_(150);
var update = _dereq_(153);

React.addons = {
 CSSTransitionGroup: ReactCSSTransitionGroup,
 LinkedStateMixin: LinkedStateMixin,
 PureRenderMixin: ReactComponentWithPureRenderMixin,
 TransitionGroup: ReactTransitionGroup,

 createFragment: ReactFragment.create,
 shallowCompare: shallowCompare,
 update: update
};

if ("development" !== 'production') {
 React.addons.Perf = _dereq_(62);
 React.addons.TestUtils = _dereq_(97);
}

module.exports = React;
},{"100":100,"150":150,"153":153,"22":22,"25":25,"27":27,"35":35,"62":62,"71":71,"97":97}],105:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ReactWithAddonsUMDEntry
*/

'use strict';

var _assign = _dereq_(182);

var ReactDOM = _dereq_(38);
var ReactDOMServer = _dereq_(54);
var ReactWithAddons = _dereq_(104);

// `version` will be added here by ReactIsomorphic.
var ReactWithAddonsUMDEntry = _assign({
 __SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactDOM,
 __SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactDOMServer
}, ReactWithAddons);

module.exports = ReactWithAddonsUMDEntry;
},{"104":104,"182":182,"38":38,"54":54}],106:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SVGDOMPropertyConfig
*/

'use strict';

var NS = {
 xlink: 'http://www.w3.org/1999/xlink',
 xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
 accentHeight: 'accent-height',
 accumulate: 0,
 additive: 0,
 alignmentBaseline: 'alignment-baseline',
 allowReorder: 'allowReorder',
 alphabetic: 0,
 amplitude: 0,
 arabicForm: 'arabic-form',
 ascent: 0,
 attributeName: 'attributeName',
 attributeType: 'attributeType',
 autoReverse: 'autoReverse',
 azimuth: 0,
 baseFrequency: 'baseFrequency',
 baseProfile: 'baseProfile',
 baselineShift: 'baseline-shift',
 bbox: 0,
 begin: 0,
 bias: 0,
 by: 0,
 calcMode: 'calcMode',
 capHeight: 'cap-height',
 clip: 0,
 clipPath: 'clip-path',
 clipRule: 'clip-rule',
 clipPathUnits: 'clipPathUnits',
 colorInterpolation: 'color-interpolation',
 colorInterpolationFilters: 'color-interpolation-filters',
 colorProfile: 'color-profile',
 colorRendering: 'color-rendering',
 contentScriptType: 'contentScriptType',
 contentStyleType: 'contentStyleType',
 cursor: 0,
 cx: 0,
 cy: 0,
 d: 0,
 decelerate: 0,
 descent: 0,
 diffuseConstant: 'diffuseConstant',
 direction: 0,
 display: 0,
 divisor: 0,
 dominantBaseline: 'dominant-baseline',
 dur: 0,
 dx: 0,
 dy: 0,
 edgeMode: 'edgeMode',
 elevation: 0,
 enableBackground: 'enable-background',
 end: 0,
 exponent: 0,
 externalResourcesRequired: 'externalResourcesRequired',
 fill: 0,
 fillOpacity: 'fill-opacity',
 fillRule: 'fill-rule',
 filter: 0,
 filterRes: 'filterRes',
 filterUnits: 'filterUnits',
 floodColor: 'flood-color',
 floodOpacity: 'flood-opacity',
 focusable: 0,
 fontFamily: 'font-family',
 fontSize: 'font-size',
 fontSizeAdjust: 'font-size-adjust',
 fontStretch: 'font-stretch',
 fontStyle: 'font-style',
 fontVariant: 'font-variant',
 fontWeight: 'font-weight',
 format: 0,
 from: 0,
 fx: 0,
 fy: 0,
 g1: 0,
 g2: 0,
 glyphName: 'glyph-name',
 glyphOrientationHorizontal: 'glyph-orientation-horizontal',
 glyphOrientationVertical: 'glyph-orientation-vertical',
 glyphRef: 'glyphRef',
 gradientTransform: 'gradientTransform',
 gradientUnits: 'gradientUnits',
 hanging: 0,
 horizAdvX: 'horiz-adv-x',
 horizOriginX: 'horiz-origin-x',
 ideographic: 0,
 imageRendering: 'image-rendering',
 'in': 0,
 in2: 0,
 intercept: 0,
 k: 0,
 k1: 0,
 k2: 0,
 k3: 0,
 k4: 0,
 kernelMatrix: 'kernelMatrix',
 kernelUnitLength: 'kernelUnitLength',
 kerning: 0,
 keyPoints: 'keyPoints',
 keySplines: 'keySplines',
 keyTimes: 'keyTimes',
 lengthAdjust: 'lengthAdjust',
 letterSpacing: 'letter-spacing',
 lightingColor: 'lighting-color',
 limitingConeAngle: 'limitingConeAngle',
 local: 0,
 markerEnd: 'marker-end',
 markerMid: 'marker-mid',
 markerStart: 'marker-start',
 markerHeight: 'markerHeight',
 markerUnits: 'markerUnits',
 markerWidth: 'markerWidth',
 mask: 0,
 maskContentUnits: 'maskContentUnits',
 maskUnits: 'maskUnits',
 mathematical: 0,
 mode: 0,
 numOctaves: 'numOctaves',
 offset: 0,
 opacity: 0,
 operator: 0,
 order: 0,
 orient: 0,
 orientation: 0,
 origin: 0,
 overflow: 0,
 overlinePosition: 'overline-position',
 overlineThickness: 'overline-thickness',
 paintOrder: 'paint-order',
 panose1: 'panose-1',
 pathLength: 'pathLength',
 patternContentUnits: 'patternContentUnits',
 patternTransform: 'patternTransform',
 patternUnits: 'patternUnits',
 pointerEvents: 'pointer-events',
 points: 0,
 pointsAtX: 'pointsAtX',
 pointsAtY: 'pointsAtY',
 pointsAtZ: 'pointsAtZ',
 preserveAlpha: 'preserveAlpha',
 preserveAspectRatio: 'preserveAspectRatio',
 primitiveUnits: 'primitiveUnits',
 r: 0,
 radius: 0,
 refX: 'refX',
 refY: 'refY',
 renderingIntent: 'rendering-intent',
 repeatCount: 'repeatCount',
 repeatDur: 'repeatDur',
 requiredExtensions: 'requiredExtensions',
 requiredFeatures: 'requiredFeatures',
 restart: 0,
 result: 0,
 rotate: 0,
 rx: 0,
 ry: 0,
 scale: 0,
 seed: 0,
 shapeRendering: 'shape-rendering',
 slope: 0,
 spacing: 0,
 specularConstant: 'specularConstant',
 specularExponent: 'specularExponent',
 speed: 0,
 spreadMethod: 'spreadMethod',
 startOffset: 'startOffset',
 stdDeviation: 'stdDeviation',
 stemh: 0,
 stemv: 0,
 stitchTiles: 'stitchTiles',
 stopColor: 'stop-color',
 stopOpacity: 'stop-opacity',
 strikethroughPosition: 'strikethrough-position',
 strikethroughThickness: 'strikethrough-thickness',
 string: 0,
 stroke: 0,
 strokeDasharray: 'stroke-dasharray',
 strokeDashoffset: 'stroke-dashoffset',
 strokeLinecap: 'stroke-linecap',
 strokeLinejoin: 'stroke-linejoin',
 strokeMiterlimit: 'stroke-miterlimit',
 strokeOpacity: 'stroke-opacity',
 strokeWidth: 'stroke-width',
 surfaceScale: 'surfaceScale',
 systemLanguage: 'systemLanguage',
 tableValues: 'tableValues',
 targetX: 'targetX',
 targetY: 'targetY',
 textAnchor: 'text-anchor',
 textDecoration: 'text-decoration',
 textRendering: 'text-rendering',
 textLength: 'textLength',
 to: 0,
 transform: 0,
 u1: 0,
 u2: 0,
 underlinePosition: 'underline-position',
 underlineThickness: 'underline-thickness',
 unicode: 0,
 unicodeBidi: 'unicode-bidi',
 unicodeRange: 'unicode-range',
 unitsPerEm: 'units-per-em',
 vAlphabetic: 'v-alphabetic',
 vHanging: 'v-hanging',
 vIdeographic: 'v-ideographic',
 vMathematical: 'v-mathematical',
 values: 0,
 vectorEffect: 'vector-effect',
 version: 0,
 vertAdvY: 'vert-adv-y',
 vertOriginX: 'vert-origin-x',
 vertOriginY: 'vert-origin-y',
 viewBox: 'viewBox',
 viewTarget: 'viewTarget',
 visibility: 0,
 widths: 0,
 wordSpacing: 'word-spacing',
 writingMode: 'writing-mode',
 x: 0,
 xHeight: 'x-height',
 x1: 0,
 x2: 0,
 xChannelSelector: 'xChannelSelector',
 xlinkActuate: 'xlink:actuate',
 xlinkArcrole: 'xlink:arcrole',
 xlinkHref: 'xlink:href',
 xlinkRole: 'xlink:role',
 xlinkShow: 'xlink:show',
 xlinkTitle: 'xlink:title',
 xlinkType: 'xlink:type',
 xmlBase: 'xml:base',
 xmlLang: 'xml:lang',
 xmlSpace: 'xml:space',
 y: 0,
 y1: 0,
 y2: 0,
 yChannelSelector: 'yChannelSelector',
 z: 0,
 zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
 Properties: {},
 DOMAttributeNamespaces: {
   xlinkActuate: NS.xlink,
   xlinkArcrole: NS.xlink,
   xlinkHref: NS.xlink,
   xlinkRole: NS.xlink,
   xlinkShow: NS.xlink,
   xlinkTitle: NS.xlink,
   xlinkType: NS.xlink,
   xmlBase: NS.xml,
   xmlLang: NS.xml,
   xmlSpace: NS.xml
 },
 DOMAttributeNames: {}
};

Object.keys(ATTRS).map(function (key) {
 SVGDOMPropertyConfig.Properties[key] = 0;
 if (ATTRS[key]) {
   SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
 }
});

module.exports = SVGDOMPropertyConfig;
},{}],107:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SelectEventPlugin
*/

'use strict';

var EventConstants = _dereq_(15);
var EventPropagators = _dereq_(19);
var ExecutionEnvironment = _dereq_(157);
var ReactDOMComponentTree = _dereq_(42);
var ReactInputSelection = _dereq_(73);
var SyntheticEvent = _dereq_(113);

var getActiveElement = _dereq_(166);
var isTextInputElement = _dereq_(144);
var keyOf = _dereq_(175);
var shallowEqual = _dereq_(180);

var topLevelTypes = EventConstants.topLevelTypes;

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
 select: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onSelect: null }),
     captured: keyOf({ onSelectCapture: null })
   },
   dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
 }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;
var ON_SELECT_KEY = keyOf({ onSelect: null });

/**
* Get an object which is a unique representation of the current selection.
*
* The return value will not be consistent across nodes or browsers, but
* two identical selections on the same node will return identical objects.
*
* @param {DOMElement} node
* @return {object}
*/
function getSelection(node) {
 if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
   return {
     start: node.selectionStart,
     end: node.selectionEnd
   };
 } else if (window.getSelection) {
   var selection = window.getSelection();
   return {
     anchorNode: selection.anchorNode,
     anchorOffset: selection.anchorOffset,
     focusNode: selection.focusNode,
     focusOffset: selection.focusOffset
   };
 } else if (document.selection) {
   var range = document.selection.createRange();
   return {
     parentElement: range.parentElement(),
     text: range.text,
     top: range.boundingTop,
     left: range.boundingLeft
   };
 }
}

/**
* Poll selection to see whether it's changed.
*
* @param {object} nativeEvent
* @return {?SyntheticEvent}
*/
function constructSelectEvent(nativeEvent, nativeEventTarget) {
 // Ensure we have the right element, and that the user is not dragging a
 // selection (this matches native `select` event behavior). In HTML5, select
 // fires only on input and textarea thus if there's no focused element we
 // won't dispatch.
 if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
   return null;
 }

 // Only fire when selection has actually changed.
 var currentSelection = getSelection(activeElement);
 if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
   lastSelection = currentSelection;

   var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

   syntheticEvent.type = 'select';
   syntheticEvent.target = activeElement;

   EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

   return syntheticEvent;
 }

 return null;
}

/**
* This plugin creates an `onSelect` event that normalizes select events
* across form elements.
*
* Supported elements are:
* - input (see `isTextInputElement`)
* - textarea
* - contentEditable
*
* This differs from native browser implementations in the following ways:
* - Fires on contentEditable fields as well as inputs.
* - Fires for collapsed selection.
* - Fires after user input.
*/
var SelectEventPlugin = {

 eventTypes: eventTypes,

 extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
   if (!hasListener) {
     return null;
   }

   var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

   switch (topLevelType) {
     // Track the input node that has focus.
     case topLevelTypes.topFocus:
       if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
         activeElement = targetNode;
         activeElementInst = targetInst;
         lastSelection = null;
       }
       break;
     case topLevelTypes.topBlur:
       activeElement = null;
       activeElementInst = null;
       lastSelection = null;
       break;

     // Don't fire the event while the user is dragging. This matches the
     // semantics of the native select event.
     case topLevelTypes.topMouseDown:
       mouseDown = true;
       break;
     case topLevelTypes.topContextMenu:
     case topLevelTypes.topMouseUp:
       mouseDown = false;
       return constructSelectEvent(nativeEvent, nativeEventTarget);

     // Chrome and IE fire non-standard event when selection is changed (and
     // sometimes when it hasn't). IE's event fires out of order with respect
     // to key and input events on deletion, so we discard it.
     //
     // Firefox doesn't support selectionchange, so check selection status
     // after each key entry. The selection changes after keydown and before
     // keyup, but we check on keydown as well in the case of holding down a
     // key, when multiple keydown events are fired but only one keyup is.
     // This is also our approach for IE handling, for the reason above.
     case topLevelTypes.topSelectionChange:
       if (skipSelectionChangeEvent) {
         break;
       }
     // falls through
     case topLevelTypes.topKeyDown:
     case topLevelTypes.topKeyUp:
       return constructSelectEvent(nativeEvent, nativeEventTarget);
   }

   return null;
 },

 didPutListener: function (inst, registrationName, listener) {
   if (registrationName === ON_SELECT_KEY) {
     hasListener = true;
   }
 }
};

module.exports = SelectEventPlugin;
},{"113":113,"144":144,"15":15,"157":157,"166":166,"175":175,"180":180,"19":19,"42":42,"73":73}],108:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SimpleEventPlugin
*/

'use strict';

var EventConstants = _dereq_(15);
var EventListener = _dereq_(156);
var EventPropagators = _dereq_(19);
var ReactDOMComponentTree = _dereq_(42);
var SyntheticAnimationEvent = _dereq_(109);
var SyntheticClipboardEvent = _dereq_(110);
var SyntheticEvent = _dereq_(113);
var SyntheticFocusEvent = _dereq_(114);
var SyntheticKeyboardEvent = _dereq_(116);
var SyntheticMouseEvent = _dereq_(117);
var SyntheticDragEvent = _dereq_(112);
var SyntheticTouchEvent = _dereq_(118);
var SyntheticTransitionEvent = _dereq_(119);
var SyntheticUIEvent = _dereq_(120);
var SyntheticWheelEvent = _dereq_(121);

var emptyFunction = _dereq_(163);
var getEventCharCode = _dereq_(133);
var invariant = _dereq_(171);
var keyOf = _dereq_(175);

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
 abort: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onAbort: true }),
     captured: keyOf({ onAbortCapture: true })
   }
 },
 animationEnd: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onAnimationEnd: true }),
     captured: keyOf({ onAnimationEndCapture: true })
   }
 },
 animationIteration: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onAnimationIteration: true }),
     captured: keyOf({ onAnimationIterationCapture: true })
   }
 },
 animationStart: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onAnimationStart: true }),
     captured: keyOf({ onAnimationStartCapture: true })
   }
 },
 blur: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onBlur: true }),
     captured: keyOf({ onBlurCapture: true })
   }
 },
 canPlay: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onCanPlay: true }),
     captured: keyOf({ onCanPlayCapture: true })
   }
 },
 canPlayThrough: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onCanPlayThrough: true }),
     captured: keyOf({ onCanPlayThroughCapture: true })
   }
 },
 click: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onClick: true }),
     captured: keyOf({ onClickCapture: true })
   }
 },
 contextMenu: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onContextMenu: true }),
     captured: keyOf({ onContextMenuCapture: true })
   }
 },
 copy: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onCopy: true }),
     captured: keyOf({ onCopyCapture: true })
   }
 },
 cut: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onCut: true }),
     captured: keyOf({ onCutCapture: true })
   }
 },
 doubleClick: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onDoubleClick: true }),
     captured: keyOf({ onDoubleClickCapture: true })
   }
 },
 drag: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onDrag: true }),
     captured: keyOf({ onDragCapture: true })
   }
 },
 dragEnd: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onDragEnd: true }),
     captured: keyOf({ onDragEndCapture: true })
   }
 },
 dragEnter: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onDragEnter: true }),
     captured: keyOf({ onDragEnterCapture: true })
   }
 },
 dragExit: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onDragExit: true }),
     captured: keyOf({ onDragExitCapture: true })
   }
 },
 dragLeave: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onDragLeave: true }),
     captured: keyOf({ onDragLeaveCapture: true })
   }
 },
 dragOver: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onDragOver: true }),
     captured: keyOf({ onDragOverCapture: true })
   }
 },
 dragStart: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onDragStart: true }),
     captured: keyOf({ onDragStartCapture: true })
   }
 },
 drop: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onDrop: true }),
     captured: keyOf({ onDropCapture: true })
   }
 },
 durationChange: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onDurationChange: true }),
     captured: keyOf({ onDurationChangeCapture: true })
   }
 },
 emptied: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onEmptied: true }),
     captured: keyOf({ onEmptiedCapture: true })
   }
 },
 encrypted: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onEncrypted: true }),
     captured: keyOf({ onEncryptedCapture: true })
   }
 },
 ended: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onEnded: true }),
     captured: keyOf({ onEndedCapture: true })
   }
 },
 error: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onError: true }),
     captured: keyOf({ onErrorCapture: true })
   }
 },
 focus: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onFocus: true }),
     captured: keyOf({ onFocusCapture: true })
   }
 },
 input: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onInput: true }),
     captured: keyOf({ onInputCapture: true })
   }
 },
 invalid: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onInvalid: true }),
     captured: keyOf({ onInvalidCapture: true })
   }
 },
 keyDown: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onKeyDown: true }),
     captured: keyOf({ onKeyDownCapture: true })
   }
 },
 keyPress: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onKeyPress: true }),
     captured: keyOf({ onKeyPressCapture: true })
   }
 },
 keyUp: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onKeyUp: true }),
     captured: keyOf({ onKeyUpCapture: true })
   }
 },
 load: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onLoad: true }),
     captured: keyOf({ onLoadCapture: true })
   }
 },
 loadedData: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onLoadedData: true }),
     captured: keyOf({ onLoadedDataCapture: true })
   }
 },
 loadedMetadata: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onLoadedMetadata: true }),
     captured: keyOf({ onLoadedMetadataCapture: true })
   }
 },
 loadStart: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onLoadStart: true }),
     captured: keyOf({ onLoadStartCapture: true })
   }
 },
 // Note: We do not allow listening to mouseOver events. Instead, use the
 // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
 mouseDown: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onMouseDown: true }),
     captured: keyOf({ onMouseDownCapture: true })
   }
 },
 mouseMove: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onMouseMove: true }),
     captured: keyOf({ onMouseMoveCapture: true })
   }
 },
 mouseOut: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onMouseOut: true }),
     captured: keyOf({ onMouseOutCapture: true })
   }
 },
 mouseOver: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onMouseOver: true }),
     captured: keyOf({ onMouseOverCapture: true })
   }
 },
 mouseUp: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onMouseUp: true }),
     captured: keyOf({ onMouseUpCapture: true })
   }
 },
 paste: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onPaste: true }),
     captured: keyOf({ onPasteCapture: true })
   }
 },
 pause: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onPause: true }),
     captured: keyOf({ onPauseCapture: true })
   }
 },
 play: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onPlay: true }),
     captured: keyOf({ onPlayCapture: true })
   }
 },
 playing: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onPlaying: true }),
     captured: keyOf({ onPlayingCapture: true })
   }
 },
 progress: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onProgress: true }),
     captured: keyOf({ onProgressCapture: true })
   }
 },
 rateChange: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onRateChange: true }),
     captured: keyOf({ onRateChangeCapture: true })
   }
 },
 reset: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onReset: true }),
     captured: keyOf({ onResetCapture: true })
   }
 },
 scroll: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onScroll: true }),
     captured: keyOf({ onScrollCapture: true })
   }
 },
 seeked: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onSeeked: true }),
     captured: keyOf({ onSeekedCapture: true })
   }
 },
 seeking: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onSeeking: true }),
     captured: keyOf({ onSeekingCapture: true })
   }
 },
 stalled: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onStalled: true }),
     captured: keyOf({ onStalledCapture: true })
   }
 },
 submit: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onSubmit: true }),
     captured: keyOf({ onSubmitCapture: true })
   }
 },
 suspend: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onSuspend: true }),
     captured: keyOf({ onSuspendCapture: true })
   }
 },
 timeUpdate: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onTimeUpdate: true }),
     captured: keyOf({ onTimeUpdateCapture: true })
   }
 },
 touchCancel: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onTouchCancel: true }),
     captured: keyOf({ onTouchCancelCapture: true })
   }
 },
 touchEnd: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onTouchEnd: true }),
     captured: keyOf({ onTouchEndCapture: true })
   }
 },
 touchMove: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onTouchMove: true }),
     captured: keyOf({ onTouchMoveCapture: true })
   }
 },
 touchStart: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onTouchStart: true }),
     captured: keyOf({ onTouchStartCapture: true })
   }
 },
 transitionEnd: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onTransitionEnd: true }),
     captured: keyOf({ onTransitionEndCapture: true })
   }
 },
 volumeChange: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onVolumeChange: true }),
     captured: keyOf({ onVolumeChangeCapture: true })
   }
 },
 waiting: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onWaiting: true }),
     captured: keyOf({ onWaitingCapture: true })
   }
 },
 wheel: {
   phasedRegistrationNames: {
     bubbled: keyOf({ onWheel: true }),
     captured: keyOf({ onWheelCapture: true })
   }
 }
};

var topLevelEventsToDispatchConfig = {
 topAbort: eventTypes.abort,
 topAnimationEnd: eventTypes.animationEnd,
 topAnimationIteration: eventTypes.animationIteration,
 topAnimationStart: eventTypes.animationStart,
 topBlur: eventTypes.blur,
 topCanPlay: eventTypes.canPlay,
 topCanPlayThrough: eventTypes.canPlayThrough,
 topClick: eventTypes.click,
 topContextMenu: eventTypes.contextMenu,
 topCopy: eventTypes.copy,
 topCut: eventTypes.cut,
 topDoubleClick: eventTypes.doubleClick,
 topDrag: eventTypes.drag,
 topDragEnd: eventTypes.dragEnd,
 topDragEnter: eventTypes.dragEnter,
 topDragExit: eventTypes.dragExit,
 topDragLeave: eventTypes.dragLeave,
 topDragOver: eventTypes.dragOver,
 topDragStart: eventTypes.dragStart,
 topDrop: eventTypes.drop,
 topDurationChange: eventTypes.durationChange,
 topEmptied: eventTypes.emptied,
 topEncrypted: eventTypes.encrypted,
 topEnded: eventTypes.ended,
 topError: eventTypes.error,
 topFocus: eventTypes.focus,
 topInput: eventTypes.input,
 topInvalid: eventTypes.invalid,
 topKeyDown: eventTypes.keyDown,
 topKeyPress: eventTypes.keyPress,
 topKeyUp: eventTypes.keyUp,
 topLoad: eventTypes.load,
 topLoadedData: eventTypes.loadedData,
 topLoadedMetadata: eventTypes.loadedMetadata,
 topLoadStart: eventTypes.loadStart,
 topMouseDown: eventTypes.mouseDown,
 topMouseMove: eventTypes.mouseMove,
 topMouseOut: eventTypes.mouseOut,
 topMouseOver: eventTypes.mouseOver,
 topMouseUp: eventTypes.mouseUp,
 topPaste: eventTypes.paste,
 topPause: eventTypes.pause,
 topPlay: eventTypes.play,
 topPlaying: eventTypes.playing,
 topProgress: eventTypes.progress,
 topRateChange: eventTypes.rateChange,
 topReset: eventTypes.reset,
 topScroll: eventTypes.scroll,
 topSeeked: eventTypes.seeked,
 topSeeking: eventTypes.seeking,
 topStalled: eventTypes.stalled,
 topSubmit: eventTypes.submit,
 topSuspend: eventTypes.suspend,
 topTimeUpdate: eventTypes.timeUpdate,
 topTouchCancel: eventTypes.touchCancel,
 topTouchEnd: eventTypes.touchEnd,
 topTouchMove: eventTypes.touchMove,
 topTouchStart: eventTypes.touchStart,
 topTransitionEnd: eventTypes.transitionEnd,
 topVolumeChange: eventTypes.volumeChange,
 topWaiting: eventTypes.waiting,
 topWheel: eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
 topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var ON_CLICK_KEY = keyOf({ onClick: null });
var onClickListeners = {};

var SimpleEventPlugin = {

 eventTypes: eventTypes,

 extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
   var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
   if (!dispatchConfig) {
     return null;
   }
   var EventConstructor;
   switch (topLevelType) {
     case topLevelTypes.topAbort:
     case topLevelTypes.topCanPlay:
     case topLevelTypes.topCanPlayThrough:
     case topLevelTypes.topDurationChange:
     case topLevelTypes.topEmptied:
     case topLevelTypes.topEncrypted:
     case topLevelTypes.topEnded:
     case topLevelTypes.topError:
     case topLevelTypes.topInput:
     case topLevelTypes.topInvalid:
     case topLevelTypes.topLoad:
     case topLevelTypes.topLoadedData:
     case topLevelTypes.topLoadedMetadata:
     case topLevelTypes.topLoadStart:
     case topLevelTypes.topPause:
     case topLevelTypes.topPlay:
     case topLevelTypes.topPlaying:
     case topLevelTypes.topProgress:
     case topLevelTypes.topRateChange:
     case topLevelTypes.topReset:
     case topLevelTypes.topSeeked:
     case topLevelTypes.topSeeking:
     case topLevelTypes.topStalled:
     case topLevelTypes.topSubmit:
     case topLevelTypes.topSuspend:
     case topLevelTypes.topTimeUpdate:
     case topLevelTypes.topVolumeChange:
     case topLevelTypes.topWaiting:
       // HTML Events
       // @see http://www.w3.org/TR/html5/index.html#events-0
       EventConstructor = SyntheticEvent;
       break;
     case topLevelTypes.topKeyPress:
       // Firefox creates a keypress event for function keys too. This removes
       // the unwanted keypress events. Enter is however both printable and
       // non-printable. One would expect Tab to be as well (but it isn't).
       if (getEventCharCode(nativeEvent) === 0) {
         return null;
       }
     /* falls through */
     case topLevelTypes.topKeyDown:
     case topLevelTypes.topKeyUp:
       EventConstructor = SyntheticKeyboardEvent;
       break;
     case topLevelTypes.topBlur:
     case topLevelTypes.topFocus:
       EventConstructor = SyntheticFocusEvent;
       break;
     case topLevelTypes.topClick:
       // Firefox creates a click event on right mouse clicks. This removes the
       // unwanted click events.
       if (nativeEvent.button === 2) {
         return null;
       }
     /* falls through */
     case topLevelTypes.topContextMenu:
     case topLevelTypes.topDoubleClick:
     case topLevelTypes.topMouseDown:
     case topLevelTypes.topMouseMove:
     case topLevelTypes.topMouseOut:
     case topLevelTypes.topMouseOver:
     case topLevelTypes.topMouseUp:
       EventConstructor = SyntheticMouseEvent;
       break;
     case topLevelTypes.topDrag:
     case topLevelTypes.topDragEnd:
     case topLevelTypes.topDragEnter:
     case topLevelTypes.topDragExit:
     case topLevelTypes.topDragLeave:
     case topLevelTypes.topDragOver:
     case topLevelTypes.topDragStart:
     case topLevelTypes.topDrop:
       EventConstructor = SyntheticDragEvent;
       break;
     case topLevelTypes.topTouchCancel:
     case topLevelTypes.topTouchEnd:
     case topLevelTypes.topTouchMove:
     case topLevelTypes.topTouchStart:
       EventConstructor = SyntheticTouchEvent;
       break;
     case topLevelTypes.topAnimationEnd:
     case topLevelTypes.topAnimationIteration:
     case topLevelTypes.topAnimationStart:
       EventConstructor = SyntheticAnimationEvent;
       break;
     case topLevelTypes.topTransitionEnd:
       EventConstructor = SyntheticTransitionEvent;
       break;
     case topLevelTypes.topScroll:
       EventConstructor = SyntheticUIEvent;
       break;
     case topLevelTypes.topWheel:
       EventConstructor = SyntheticWheelEvent;
       break;
     case topLevelTypes.topCopy:
     case topLevelTypes.topCut:
     case topLevelTypes.topPaste:
       EventConstructor = SyntheticClipboardEvent;
       break;
   }
   !EventConstructor ? "development" !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : void 0;
   var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
   EventPropagators.accumulateTwoPhaseDispatches(event);
   return event;
 },

 didPutListener: function (inst, registrationName, listener) {
   // Mobile Safari does not fire properly bubble click events on
   // non-interactive elements, which means delegated click listeners do not
   // fire. The workaround for this bug involves attaching an empty click
   // listener on the target node.
   if (registrationName === ON_CLICK_KEY) {
     var id = inst._rootNodeID;
     var node = ReactDOMComponentTree.getNodeFromInstance(inst);
     if (!onClickListeners[id]) {
       onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
     }
   }
 },

 willDeleteListener: function (inst, registrationName) {
   if (registrationName === ON_CLICK_KEY) {
     var id = inst._rootNodeID;
     onClickListeners[id].remove();
     delete onClickListeners[id];
   }
 }

};

module.exports = SimpleEventPlugin;
},{"109":109,"110":110,"112":112,"113":113,"114":114,"116":116,"117":117,"118":118,"119":119,"120":120,"121":121,"133":133,"15":15,"156":156,"163":163,"171":171,"175":175,"19":19,"42":42}],109:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SyntheticAnimationEvent
*/

'use strict';

var SyntheticEvent = _dereq_(113);

/**
* @interface Event
* @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
* @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
*/
var AnimationEventInterface = {
 animationName: null,
 elapsedTime: null,
 pseudoElement: null
};

/**
* @param {object} dispatchConfig Configuration used to dispatch this event.
* @param {string} dispatchMarker Marker identifying the event target.
* @param {object} nativeEvent Native browser event.
* @extends {SyntheticEvent}
*/
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
 return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;
},{"113":113}],110:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SyntheticClipboardEvent
*/

'use strict';

var SyntheticEvent = _dereq_(113);

/**
* @interface Event
* @see http://www.w3.org/TR/clipboard-apis/
*/
var ClipboardEventInterface = {
 clipboardData: function (event) {
   return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
 }
};

/**
* @param {object} dispatchConfig Configuration used to dispatch this event.
* @param {string} dispatchMarker Marker identifying the event target.
* @param {object} nativeEvent Native browser event.
* @extends {SyntheticUIEvent}
*/
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
 return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"113":113}],111:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SyntheticCompositionEvent
*/

'use strict';

var SyntheticEvent = _dereq_(113);

/**
* @interface Event
* @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
*/
var CompositionEventInterface = {
 data: null
};

/**
* @param {object} dispatchConfig Configuration used to dispatch this event.
* @param {string} dispatchMarker Marker identifying the event target.
* @param {object} nativeEvent Native browser event.
* @extends {SyntheticUIEvent}
*/
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
 return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"113":113}],112:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SyntheticDragEvent
*/

'use strict';

var SyntheticMouseEvent = _dereq_(117);

/**
* @interface DragEvent
* @see http://www.w3.org/TR/DOM-Level-3-Events/
*/
var DragEventInterface = {
 dataTransfer: null
};

/**
* @param {object} dispatchConfig Configuration used to dispatch this event.
* @param {string} dispatchMarker Marker identifying the event target.
* @param {object} nativeEvent Native browser event.
* @extends {SyntheticUIEvent}
*/
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
 return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"117":117}],113:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SyntheticEvent
*/

'use strict';

var _assign = _dereq_(182);

var PooledClass = _dereq_(24);

var emptyFunction = _dereq_(163);
var warning = _dereq_(181);

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
* @interface Event
* @see http://www.w3.org/TR/DOM-Level-3-Events/
*/
var EventInterface = {
 type: null,
 target: null,
 // currentTarget is set when dispatching; no use in copying it here
 currentTarget: emptyFunction.thatReturnsNull,
 eventPhase: null,
 bubbles: null,
 cancelable: null,
 timeStamp: function (event) {
   return event.timeStamp || Date.now();
 },
 defaultPrevented: null,
 isTrusted: null
};

/**
* Synthetic events are dispatched by event plugins, typically in response to a
* top-level event delegation handler.
*
* These systems should generally use pooling to reduce the frequency of garbage
* collection. The system should check `isPersistent` to determine whether the
* event should be released into the pool after being dispatched. Users that
* need a persisted event should invoke `persist`.
*
* Synthetic events (and subclasses) implement the DOM Level 3 Events API by
* normalizing browser quirks. Subclasses do not necessarily have to implement a
* DOM interface; custom application-specific events can also subclass this.
*
* @param {object} dispatchConfig Configuration used to dispatch this event.
* @param {*} targetInst Marker identifying the event target.
* @param {object} nativeEvent Native browser event.
* @param {DOMEventTarget} nativeEventTarget Target node.
*/
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
 if ("development" !== 'production') {
   // these have a getter/setter for warnings
   delete this.nativeEvent;
   delete this.preventDefault;
   delete this.stopPropagation;
 }

 this.dispatchConfig = dispatchConfig;
 this._targetInst = targetInst;
 this.nativeEvent = nativeEvent;

 var Interface = this.constructor.Interface;
 for (var propName in Interface) {
   if (!Interface.hasOwnProperty(propName)) {
     continue;
   }
   if ("development" !== 'production') {
     delete this[propName]; // this has a getter/setter for warnings
   }
   var normalize = Interface[propName];
   if (normalize) {
     this[propName] = normalize(nativeEvent);
   } else {
     if (propName === 'target') {
       this.target = nativeEventTarget;
     } else {
       this[propName] = nativeEvent[propName];
     }
   }
 }

 var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
 if (defaultPrevented) {
   this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
 } else {
   this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
 }
 this.isPropagationStopped = emptyFunction.thatReturnsFalse;
 return this;
}

_assign(SyntheticEvent.prototype, {

 preventDefault: function () {
   this.defaultPrevented = true;
   var event = this.nativeEvent;
   if (!event) {
     return;
   }

   if (event.preventDefault) {
     event.preventDefault();
   } else {
     event.returnValue = false;
   }
   this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
 },

 stopPropagation: function () {
   var event = this.nativeEvent;
   if (!event) {
     return;
   }

   if (event.stopPropagation) {
     event.stopPropagation();
   } else {
     event.cancelBubble = true;
   }
   this.isPropagationStopped = emptyFunction.thatReturnsTrue;
 },

 /**
  * We release all dispatched `SyntheticEvent`s after each event loop, adding
  * them back into the pool. This allows a way to hold onto a reference that
  * won't be added back into the pool.
  */
 persist: function () {
   this.isPersistent = emptyFunction.thatReturnsTrue;
 },

 /**
  * Checks if this event should be released back into the pool.
  *
  * @return {boolean} True if this should not be released, false otherwise.
  */
 isPersistent: emptyFunction.thatReturnsFalse,

 /**
  * `PooledClass` looks for `destructor` on each instance it releases.
  */
 destructor: function () {
   var Interface = this.constructor.Interface;
   for (var propName in Interface) {
     if ("development" !== 'production') {
       Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
     } else {
       this[propName] = null;
     }
   }
   for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
     this[shouldBeReleasedProperties[i]] = null;
   }
   if ("development" !== 'production') {
     var noop = _dereq_(163);
     Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
     Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', noop));
     Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', noop));
   }
 }

});

SyntheticEvent.Interface = EventInterface;

if ("development" !== 'production') {
 if (isProxySupported) {
   /*eslint-disable no-func-assign */
   SyntheticEvent = new Proxy(SyntheticEvent, {
     construct: function (target, args) {
       return this.apply(target, Object.create(target.prototype), args);
     },
     apply: function (constructor, that, args) {
       return new Proxy(constructor.apply(that, args), {
         set: function (target, prop, value) {
           if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
             "development" !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
             didWarnForAddedNewProperty = true;
           }
           target[prop] = value;
           return true;
         }
       });
     }
   });
   /*eslint-enable no-func-assign */
 }
}
/**
* Helper to reduce boilerplate when creating subclasses.
*
* @param {function} Class
* @param {?object} Interface
*/
SyntheticEvent.augmentClass = function (Class, Interface) {
 var Super = this;

 var E = function () {};
 E.prototype = Super.prototype;
 var prototype = new E();

 _assign(prototype, Class.prototype);
 Class.prototype = prototype;
 Class.prototype.constructor = Class;

 Class.Interface = _assign({}, Super.Interface, Interface);
 Class.augmentClass = Super.augmentClass;

 PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {object} SyntheticEvent
 * @param {String} propName
 * @return {object} defineProperty object
 */
function getPooledWarningPropertyDefinition(propName, getVal) {
 var isFunction = typeof getVal === 'function';
 return {
   configurable: true,
   set: set,
   get: get
 };

 function set(val) {
   var action = isFunction ? 'setting the method' : 'setting the property';
   warn(action, 'This is effectively a no-op');
   return val;
 }

 function get() {
   var action = isFunction ? 'accessing the method' : 'accessing the property';
   var result = isFunction ? 'This is a no-op function' : 'This is set to null';
   warn(action, result);
   return getVal;
 }

 function warn(action, result) {
   var warningCondition = false;
   "development" !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
 }
}
},{"163":163,"181":181,"182":182,"24":24}],114:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SyntheticFocusEvent
*/

'use strict';

var SyntheticUIEvent = _dereq_(120);

/**
* @interface FocusEvent
* @see http://www.w3.org/TR/DOM-Level-3-Events/
*/
var FocusEventInterface = {
 relatedTarget: null
};

/**
* @param {object} dispatchConfig Configuration used to dispatch this event.
* @param {string} dispatchMarker Marker identifying the event target.
* @param {object} nativeEvent Native browser event.
* @extends {SyntheticUIEvent}
*/
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
 return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"120":120}],115:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SyntheticInputEvent
*/

'use strict';

var SyntheticEvent = _dereq_(113);

/**
* @interface Event
* @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
*      /#events-inputevents
*/
var InputEventInterface = {
 data: null
};

/**
* @param {object} dispatchConfig Configuration used to dispatch this event.
* @param {string} dispatchMarker Marker identifying the event target.
* @param {object} nativeEvent Native browser event.
* @extends {SyntheticUIEvent}
*/
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
 return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"113":113}],116:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SyntheticKeyboardEvent
*/

'use strict';

var SyntheticUIEvent = _dereq_(120);

var getEventCharCode = _dereq_(133);
var getEventKey = _dereq_(134);
var getEventModifierState = _dereq_(135);

/**
* @interface KeyboardEvent
* @see http://www.w3.org/TR/DOM-Level-3-Events/
*/
var KeyboardEventInterface = {
 key: getEventKey,
 location: null,
 ctrlKey: null,
 shiftKey: null,
 altKey: null,
 metaKey: null,
 repeat: null,
 locale: null,
 getModifierState: getEventModifierState,
 // Legacy Interface
 charCode: function (event) {
   // `charCode` is the result of a KeyPress event and represents the value of
   // the actual printable character.

   // KeyPress is deprecated, but its replacement is not yet final and not
   // implemented in any major browser. Only KeyPress has charCode.
   if (event.type === 'keypress') {
     return getEventCharCode(event);
   }
   return 0;
 },
 keyCode: function (event) {
   // `keyCode` is the result of a KeyDown/Up event and represents the value of
   // physical keyboard key.

   // The actual meaning of the value depends on the users' keyboard layout
   // which cannot be detected. Assuming that it is a US keyboard layout
   // provides a surprisingly accurate mapping for US and European users.
   // Due to this, it is left to the user to implement at this time.
   if (event.type === 'keydown' || event.type === 'keyup') {
     return event.keyCode;
   }
   return 0;
 },
 which: function (event) {
   // `which` is an alias for either `keyCode` or `charCode` depending on the
   // type of the event.
   if (event.type === 'keypress') {
     return getEventCharCode(event);
   }
   if (event.type === 'keydown' || event.type === 'keyup') {
     return event.keyCode;
   }
   return 0;
 }
};

/**
* @param {object} dispatchConfig Configuration used to dispatch this event.
* @param {string} dispatchMarker Marker identifying the event target.
* @param {object} nativeEvent Native browser event.
* @extends {SyntheticUIEvent}
*/
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
 return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"120":120,"133":133,"134":134,"135":135}],117:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SyntheticMouseEvent
*/

'use strict';

var SyntheticUIEvent = _dereq_(120);
var ViewportMetrics = _dereq_(123);

var getEventModifierState = _dereq_(135);

/**
* @interface MouseEvent
* @see http://www.w3.org/TR/DOM-Level-3-Events/
*/
var MouseEventInterface = {
 screenX: null,
 screenY: null,
 clientX: null,
 clientY: null,
 ctrlKey: null,
 shiftKey: null,
 altKey: null,
 metaKey: null,
 getModifierState: getEventModifierState,
 button: function (event) {
   // Webkit, Firefox, IE9+
   // which:  1 2 3
   // button: 0 1 2 (standard)
   var button = event.button;
   if ('which' in event) {
     return button;
   }
   // IE<9
   // which:  undefined
   // button: 0 0 0
   // button: 1 4 2 (onmouseup)
   return button === 2 ? 2 : button === 4 ? 1 : 0;
 },
 buttons: null,
 relatedTarget: function (event) {
   return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
 },
 // "Proprietary" Interface.
 pageX: function (event) {
   return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
 },
 pageY: function (event) {
   return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
 }
};

/**
* @param {object} dispatchConfig Configuration used to dispatch this event.
* @param {string} dispatchMarker Marker identifying the event target.
* @param {object} nativeEvent Native browser event.
* @extends {SyntheticUIEvent}
*/
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
 return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"120":120,"123":123,"135":135}],118:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SyntheticTouchEvent
*/

'use strict';

var SyntheticUIEvent = _dereq_(120);

var getEventModifierState = _dereq_(135);

/**
* @interface TouchEvent
* @see http://www.w3.org/TR/touch-events/
*/
var TouchEventInterface = {
 touches: null,
 targetTouches: null,
 changedTouches: null,
 altKey: null,
 metaKey: null,
 ctrlKey: null,
 shiftKey: null,
 getModifierState: getEventModifierState
};

/**
* @param {object} dispatchConfig Configuration used to dispatch this event.
* @param {string} dispatchMarker Marker identifying the event target.
* @param {object} nativeEvent Native browser event.
* @extends {SyntheticUIEvent}
*/
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
 return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"120":120,"135":135}],119:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SyntheticTransitionEvent
*/

'use strict';

var SyntheticEvent = _dereq_(113);

/**
* @interface Event
* @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
* @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
*/
var TransitionEventInterface = {
 propertyName: null,
 elapsedTime: null,
 pseudoElement: null
};

/**
* @param {object} dispatchConfig Configuration used to dispatch this event.
* @param {string} dispatchMarker Marker identifying the event target.
* @param {object} nativeEvent Native browser event.
* @extends {SyntheticEvent}
*/
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
 return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;
},{"113":113}],120:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SyntheticUIEvent
*/

'use strict';

var SyntheticEvent = _dereq_(113);

var getEventTarget = _dereq_(136);

/**
* @interface UIEvent
* @see http://www.w3.org/TR/DOM-Level-3-Events/
*/
var UIEventInterface = {
 view: function (event) {
   if (event.view) {
     return event.view;
   }

   var target = getEventTarget(event);
   if (target != null && target.window === target) {
     // target is a window object
     return target;
   }

   var doc = target.ownerDocument;
   // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
   if (doc) {
     return doc.defaultView || doc.parentWindow;
   } else {
     return window;
   }
 },
 detail: function (event) {
   return event.detail || 0;
 }
};

/**
* @param {object} dispatchConfig Configuration used to dispatch this event.
* @param {string} dispatchMarker Marker identifying the event target.
* @param {object} nativeEvent Native browser event.
* @extends {SyntheticEvent}
*/
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
 return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"113":113,"136":136}],121:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule SyntheticWheelEvent
*/

'use strict';

var SyntheticMouseEvent = _dereq_(117);

/**
* @interface WheelEvent
* @see http://www.w3.org/TR/DOM-Level-3-Events/
*/
var WheelEventInterface = {
 deltaX: function (event) {
   return 'deltaX' in event ? event.deltaX :
   // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
   'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
 },
 deltaY: function (event) {
   return 'deltaY' in event ? event.deltaY :
   // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
   'wheelDeltaY' in event ? -event.wheelDeltaY :
   // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
   'wheelDelta' in event ? -event.wheelDelta : 0;
 },
 deltaZ: null,

 // Browsers without "deltaMode" is reporting in raw wheel delta where one
 // notch on the scroll is always +/- 120, roughly equivalent to pixels.
 // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
 // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
 deltaMode: null
};

/**
* @param {object} dispatchConfig Configuration used to dispatch this event.
* @param {string} dispatchMarker Marker identifying the event target.
* @param {object} nativeEvent Native browser event.
* @extends {SyntheticMouseEvent}
*/
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
 return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"117":117}],122:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule Transaction
*/

'use strict';

var invariant = _dereq_(171);

/**
* `Transaction` creates a black box that is able to wrap any method such that
* certain invariants are maintained before and after the method is invoked
* (Even if an exception is thrown while invoking the wrapped method). Whoever
* instantiates a transaction can provide enforcers of the invariants at
* creation time. The `Transaction` class itself will supply one additional
* automatic invariant for you - the invariant that any transaction instance
* should not be run while it is already being run. You would typically create a
* single instance of a `Transaction` for reuse multiple times, that potentially
* is used to wrap several different methods. Wrappers are extremely simple -
* they only require implementing two methods.
*
* <pre>
*                       wrappers (injected at creation time)
*                                      +        +
*                                      |        |
*                    +-----------------|--------|--------------+
*                    |                 v        |              |
*                    |      +---------------+   |              |
*                    |   +--|    wrapper1   |---|----+         |
*                    |   |  +---------------+   v    |         |
*                    |   |          +-------------+  |         |
*                    |   |     +----|   wrapper2  |--------+   |
*                    |   |     |    +-------------+  |     |   |
*                    |   |     |                     |     |   |
*                    |   v     v                     v     v   | wrapper
*                    | +---+ +---+   +---------+   +---+ +---+ | invariants
* perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
* +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
*                    | |   | |   |   |         |   |   | |   | |
*                    | |   | |   |   |         |   |   | |   | |
*                    | |   | |   |   |         |   |   | |   | |
*                    | +---+ +---+   +---------+   +---+ +---+ |
*                    |  initialize                    close    |
*                    +-----------------------------------------+
* </pre>
*
* Use cases:
* - Preserving the input selection ranges before/after reconciliation.
*   Restoring selection even in the event of an unexpected error.
* - Deactivating events while rearranging the DOM, preventing blurs/focuses,
*   while guaranteeing that afterwards, the event system is reactivated.
* - Flushing a queue of collected DOM mutations to the main UI thread after a
*   reconciliation takes place in a worker thread.
* - Invoking any collected `componentDidUpdate` callbacks after rendering new
*   content.
* - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
*   to preserve the `scrollTop` (an automatic scroll aware DOM).
* - (Future use case): Layout calculations before and after DOM updates.
*
* Transactional plugin API:
* - A module that has an `initialize` method that returns any precomputation.
* - and a `close` method that accepts the precomputation. `close` is invoked
*   when the wrapped process is completed, or has failed.
*
* @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
* that implement `initialize` and `close`.
* @return {Transaction} Single transaction for reuse in thread.
*
* @class Transaction
*/
var Mixin = {
 /**
  * Sets up this instance so that it is prepared for collecting metrics. Does
  * so such that this setup method may be used on an instance that is already
  * initialized, in a way that does not consume additional memory upon reuse.
  * That can be useful if you decide to make your subclass of this mixin a
  * "PooledClass".
  */
 reinitializeTransaction: function () {
   this.transactionWrappers = this.getTransactionWrappers();
   if (this.wrapperInitData) {
     this.wrapperInitData.length = 0;
   } else {
     this.wrapperInitData = [];
   }
   this._isInTransaction = false;
 },

 _isInTransaction: false,

 /**
  * @abstract
  * @return {Array<TransactionWrapper>} Array of transaction wrappers.
  */
 getTransactionWrappers: null,

 isInTransaction: function () {
   return !!this._isInTransaction;
 },

 /**
  * Executes the function within a safety window. Use this for the top level
  * methods that result in large amounts of computation/mutations that would
  * need to be safety checked. The optional arguments helps prevent the need
  * to bind in many cases.
  *
  * @param {function} method Member of scope to call.
  * @param {Object} scope Scope to invoke from.
  * @param {Object?=} a Argument to pass to the method.
  * @param {Object?=} b Argument to pass to the method.
  * @param {Object?=} c Argument to pass to the method.
  * @param {Object?=} d Argument to pass to the method.
  * @param {Object?=} e Argument to pass to the method.
  * @param {Object?=} f Argument to pass to the method.
  *
  * @return {*} Return value from `method`.
  */
 perform: function (method, scope, a, b, c, d, e, f) {
   !!this.isInTransaction() ? "development" !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : void 0;
   var errorThrown;
   var ret;
   try {
     this._isInTransaction = true;
     // Catching errors makes debugging more difficult, so we start with
     // errorThrown set to true before setting it to false after calling
     // close -- if it's still set to true in the finally block, it means
     // one of these calls threw.
     errorThrown = true;
     this.initializeAll(0);
     ret = method.call(scope, a, b, c, d, e, f);
     errorThrown = false;
   } finally {
     try {
       if (errorThrown) {
         // If `method` throws, prefer to show that stack trace over any thrown
         // by invoking `closeAll`.
         try {
           this.closeAll(0);
         } catch (err) {}
       } else {
         // Since `method` didn't throw, we don't want to silence the exception
         // here.
         this.closeAll(0);
       }
     } finally {
       this._isInTransaction = false;
     }
   }
   return ret;
 },

 initializeAll: function (startIndex) {
   var transactionWrappers = this.transactionWrappers;
   for (var i = startIndex; i < transactionWrappers.length; i++) {
     var wrapper = transactionWrappers[i];
     try {
       // Catching errors makes debugging more difficult, so we start with the
       // OBSERVED_ERROR state before overwriting it with the real return value
       // of initialize -- if it's still set to OBSERVED_ERROR in the finally
       // block, it means wrapper.initialize threw.
       this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
       this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
     } finally {
       if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
         // The initializer for wrapper i threw an error; initialize the
         // remaining wrappers but silence any exceptions from them to ensure
         // that the first error is the one to bubble up.
         try {
           this.initializeAll(i + 1);
         } catch (err) {}
       }
     }
   }
 },

 /**
  * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
  * them the respective return values of `this.transactionWrappers.init[i]`
  * (`close`rs that correspond to initializers that failed will not be
  * invoked).
  */
 closeAll: function (startIndex) {
   !this.isInTransaction() ? "development" !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : void 0;
   var transactionWrappers = this.transactionWrappers;
   for (var i = startIndex; i < transactionWrappers.length; i++) {
     var wrapper = transactionWrappers[i];
     var initData = this.wrapperInitData[i];
     var errorThrown;
     try {
       // Catching errors makes debugging more difficult, so we start with
       // errorThrown set to true before setting it to false after calling
       // close -- if it's still set to true in the finally block, it means
       // wrapper.close threw.
       errorThrown = true;
       if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
         wrapper.close.call(this, initData);
       }
       errorThrown = false;
     } finally {
       if (errorThrown) {
         // The closer for wrapper i threw an error; close the remaining
         // wrappers but silence any exceptions from them to ensure that the
         // first error is the one to bubble up.
         try {
           this.closeAll(i + 1);
         } catch (e) {}
       }
     }
   }
   this.wrapperInitData.length = 0;
 }
};

var Transaction = {

 Mixin: Mixin,

 /**
  * Token to look for to determine if an error occurred.
  */
 OBSERVED_ERROR: {}

};

module.exports = Transaction;
},{"171":171}],123:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule ViewportMetrics
*/

'use strict';

var ViewportMetrics = {

 currentScrollLeft: 0,

 currentScrollTop: 0,

 refreshScrollValues: function (scrollPosition) {
   ViewportMetrics.currentScrollLeft = scrollPosition.x;
   ViewportMetrics.currentScrollTop = scrollPosition.y;
 }

};

module.exports = ViewportMetrics;
},{}],124:[function(_dereq_,module,exports){
/**
* Copyright 2014-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule accumulateInto
*/

'use strict';

var invariant = _dereq_(171);

/**
*
* Accumulates items that must not be null or undefined into the first one. This
* is used to conserve memory by avoiding array allocations, and thus sacrifices
* API cleanness. Since `current` can be null before being passed in and not
* null after this function, make sure to assign it back to `current`:
*
* `a = accumulateInto(a, b);`
*
* This API should be sparingly used. Try `accumulate` for something cleaner.
*
* @return {*|array<*>} An accumulation of items.
*/

function accumulateInto(current, next) {
 !(next != null) ? "development" !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : void 0;
 if (current == null) {
   return next;
 }

 // Both are not empty. Warning: Never call x.concat(y) when you are not
 // certain that x is an Array (x could be a string with concat method).
 var currentIsArray = Array.isArray(current);
 var nextIsArray = Array.isArray(next);

 if (currentIsArray && nextIsArray) {
   current.push.apply(current, next);
   return current;
 }

 if (currentIsArray) {
   current.push(next);
   return current;
 }

 if (nextIsArray) {
   // A bit too dangerous to mutate `next`.
   return [current].concat(next);
 }

 return [current, next];
}

module.exports = accumulateInto;
},{"171":171}],125:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule adler32
*/

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
 var a = 1;
 var b = 0;
 var i = 0;
 var l = data.length;
 var m = l & ~0x3;
 while (i < m) {
   var n = Math.min(i + 4096, m);
   for (; i < n; i += 4) {
     b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
   }
   a %= MOD;
   b %= MOD;
 }
 for (; i < l; i++) {
   b += a += data.charCodeAt(i);
 }
 a %= MOD;
 b %= MOD;
 return a | b << 16;
}

module.exports = adler32;
},{}],126:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule canDefineProperty
*/

'use strict';

var canDefineProperty = false;
if ("development" !== 'production') {
 try {
   Object.defineProperty({}, 'x', { get: function () {} });
   canDefineProperty = true;
 } catch (x) {
   // IE will fail on defineProperty
 }
}

module.exports = canDefineProperty;
},{}],127:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule createMicrosoftUnsafeLocalFunction
*/

/* globals MSApp */

'use strict';

/**
* Create a function which has 'unsafe' privileges (required by windows8 apps)
*/

var createMicrosoftUnsafeLocalFunction = function (func) {
 if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
   return function (arg0, arg1, arg2, arg3) {
     MSApp.execUnsafeLocalFunction(function () {
       return func(arg0, arg1, arg2, arg3);
     });
   };
 } else {
   return func;
 }
};

module.exports = createMicrosoftUnsafeLocalFunction;
},{}],128:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule dangerousStyleValue
*/

'use strict';

var CSSProperty = _dereq_(3);
var warning = _dereq_(181);

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
* Convert a value into the proper css writable value. The style name `name`
* should be logical (no hyphens), as specified
* in `CSSProperty.isUnitlessNumber`.
*
* @param {string} name CSS property name such as `topMargin`.
* @param {*} value CSS property value such as `10px`.
* @param {ReactDOMComponent} component
* @return {string} Normalized style value with dimensions applied.
*/
function dangerousStyleValue(name, value, component) {
 // Note that we've removed escapeTextForBrowser() calls here since the
 // whole string will be escaped when the attribute is injected into
 // the markup. If you provide unsafe user data here they can inject
 // arbitrary CSS which may be problematic (I couldn't repro this):
 // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
 // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
 // This is not an XSS hole but instead a potential CSS injection issue
 // which has lead to a greater discussion about how we're going to
 // trust URLs moving forward. See #2115901

 var isEmpty = value == null || typeof value === 'boolean' || value === '';
 if (isEmpty) {
   return '';
 }

 var isNonNumeric = isNaN(value);
 if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
   return '' + value; // cast to string
 }

 if (typeof value === 'string') {
   if ("development" !== 'production') {
     if (component) {
       var owner = component._currentElement._owner;
       var ownerName = owner ? owner.getName() : null;
       if (ownerName && !styleWarnings[ownerName]) {
         styleWarnings[ownerName] = {};
       }
       var warned = false;
       if (ownerName) {
         var warnings = styleWarnings[ownerName];
         warned = warnings[name];
         if (!warned) {
           warnings[name] = true;
         }
       }
       if (!warned) {
         "development" !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
       }
     }
   }
   value = value.trim();
 }
 return value + 'px';
}

module.exports = dangerousStyleValue;
},{"181":181,"3":3}],129:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule escapeTextContentForBrowser
*/

'use strict';

var ESCAPE_LOOKUP = {
 '&': '&amp;',
 '>': '&gt;',
 '<': '&lt;',
 '"': '&quot;',
 '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
 return ESCAPE_LOOKUP[match];
}

/**
* Escapes text to prevent scripting attacks.
*
* @param {*} text Text value to escape.
* @return {string} An escaped string.
*/
function escapeTextContentForBrowser(text) {
 return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;
},{}],130:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule findDOMNode
*/

'use strict';

var ReactCurrentOwner = _dereq_(37);
var ReactDOMComponentTree = _dereq_(42);
var ReactInstanceMap = _dereq_(74);

var getNativeComponentFromComposite = _dereq_(138);
var invariant = _dereq_(171);
var warning = _dereq_(181);

/**
* Returns the DOM node rendered by this element.
*
* @param {ReactComponent|DOMElement} componentOrElement
* @return {?DOMElement} The root node of this element.
*/
function findDOMNode(componentOrElement) {
 if ("development" !== 'production') {
   var owner = ReactCurrentOwner.current;
   if (owner !== null) {
     "development" !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
     owner._warnedAboutRefsInRender = true;
   }
 }
 if (componentOrElement == null) {
   return null;
 }
 if (componentOrElement.nodeType === 1) {
   return componentOrElement;
 }

 var inst = ReactInstanceMap.get(componentOrElement);
 if (inst) {
   inst = getNativeComponentFromComposite(inst);
   return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
 }

 if (typeof componentOrElement.render === 'function') {
   !false ? "development" !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : void 0;
 } else {
   !false ? "development" !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : void 0;
 }
}

module.exports = findDOMNode;
},{"138":138,"171":171,"181":181,"37":37,"42":42,"74":74}],131:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule flattenChildren
*/

'use strict';

var traverseAllChildren = _dereq_(152);
var warning = _dereq_(181);

/**
* @param {function} traverseContext Context passed through traversal.
* @param {?ReactComponent} child React child component.
* @param {!string} name String name of key path to child.
*/
function flattenSingleChildIntoContext(traverseContext, child, name) {
 // We found a component instance.
 var result = traverseContext;
 var keyUnique = result[name] === undefined;
 if ("development" !== 'production') {
   "development" !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : void 0;
 }
 if (keyUnique && child != null) {
   result[name] = child;
 }
}

/**
* Flattens children that are typically specified as `props.children`. Any null
* children will not be included in the resulting object.
* @return {!object} flattened children keyed by name.
*/
function flattenChildren(children) {
 if (children == null) {
   return children;
 }
 var result = {};
 traverseAllChildren(children, flattenSingleChildIntoContext, result);
 return result;
}

module.exports = flattenChildren;
},{"152":152,"181":181}],132:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule forEachAccumulated
*/

'use strict';

/**
* @param {array} arr an "accumulation" of items which is either an Array or
* a single item. Useful when paired with the `accumulate` module. This is a
* simple utility that allows us to reason about a collection of items, but
* handling the case when there is exactly one item (and we do not need to
* allocate an array).
*/

var forEachAccumulated = function (arr, cb, scope) {
 if (Array.isArray(arr)) {
   arr.forEach(cb, scope);
 } else if (arr) {
   cb.call(scope, arr);
 }
};

module.exports = forEachAccumulated;
},{}],133:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule getEventCharCode
*/

'use strict';

/**
* `charCode` represents the actual "character code" and is safe to use with
* `String.fromCharCode`. As such, only keys that correspond to printable
* characters produce a valid `charCode`, the only exception to this is Enter.
* The Tab-key is considered non-printable and does not have a `charCode`,
* presumably because it does not produce a tab-character in browsers.
*
* @param {object} nativeEvent Native browser event.
* @return {number} Normalized `charCode` property.
*/

function getEventCharCode(nativeEvent) {
 var charCode;
 var keyCode = nativeEvent.keyCode;

 if ('charCode' in nativeEvent) {
   charCode = nativeEvent.charCode;

   // FF does not set `charCode` for the Enter-key, check against `keyCode`.
   if (charCode === 0 && keyCode === 13) {
     charCode = 13;
   }
 } else {
   // IE8 does not implement `charCode`, but `keyCode` has the correct value.
   charCode = keyCode;
 }

 // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
 // Must not discard the (non-)printable Enter-key.
 if (charCode >= 32 || charCode === 13) {
   return charCode;
 }

 return 0;
}

module.exports = getEventCharCode;
},{}],134:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule getEventKey
*/

'use strict';

var getEventCharCode = _dereq_(133);

/**
* Normalization of deprecated HTML5 `key` values
* @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
*/
var normalizeKey = {
 'Esc': 'Escape',
 'Spacebar': ' ',
 'Left': 'ArrowLeft',
 'Up': 'ArrowUp',
 'Right': 'ArrowRight',
 'Down': 'ArrowDown',
 'Del': 'Delete',
 'Win': 'OS',
 'Menu': 'ContextMenu',
 'Apps': 'ContextMenu',
 'Scroll': 'ScrollLock',
 'MozPrintableKey': 'Unidentified'
};

/**
* Translation from legacy `keyCode` to HTML5 `key`
* Only special keys supported, all others depend on keyboard layout or browser
* @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
*/
var translateToKey = {
 8: 'Backspace',
 9: 'Tab',
 12: 'Clear',
 13: 'Enter',
 16: 'Shift',
 17: 'Control',
 18: 'Alt',
 19: 'Pause',
 20: 'CapsLock',
 27: 'Escape',
 32: ' ',
 33: 'PageUp',
 34: 'PageDown',
 35: 'End',
 36: 'Home',
 37: 'ArrowLeft',
 38: 'ArrowUp',
 39: 'ArrowRight',
 40: 'ArrowDown',
 45: 'Insert',
 46: 'Delete',
 112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
 118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
 144: 'NumLock',
 145: 'ScrollLock',
 224: 'Meta'
};

/**
* @param {object} nativeEvent Native browser event.
* @return {string} Normalized `key` property.
*/
function getEventKey(nativeEvent) {
 if (nativeEvent.key) {
   // Normalize inconsistent values reported by browsers due to
   // implementations of a working draft specification.

   // FireFox implements `key` but returns `MozPrintableKey` for all
   // printable characters (normalized to `Unidentified`), ignore it.
   var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
   if (key !== 'Unidentified') {
     return key;
   }
 }

 // Browser does not implement `key`, polyfill as much of it as we can.
 if (nativeEvent.type === 'keypress') {
   var charCode = getEventCharCode(nativeEvent);

   // The enter-key is technically both printable and non-printable and can
   // thus be captured by `keypress`, no other non-printable key should.
   return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
 }
 if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
   // While user keyboard layout determines the actual meaning of each
   // `keyCode` value, almost all function keys have a universal value.
   return translateToKey[nativeEvent.keyCode] || 'Unidentified';
 }
 return '';
}

module.exports = getEventKey;
},{"133":133}],135:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule getEventModifierState
*/

'use strict';

/**
* Translation from modifier key to the associated property in the event.
* @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
*/

var modifierKeyToProp = {
 'Alt': 'altKey',
 'Control': 'ctrlKey',
 'Meta': 'metaKey',
 'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
 var syntheticEvent = this;
 var nativeEvent = syntheticEvent.nativeEvent;
 if (nativeEvent.getModifierState) {
   return nativeEvent.getModifierState(keyArg);
 }
 var keyProp = modifierKeyToProp[keyArg];
 return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
 return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],136:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule getEventTarget
*/

'use strict';

/**
* Gets the target node from a native browser event by accounting for
* inconsistencies in browser DOM APIs.
*
* @param {object} nativeEvent Native browser event.
* @return {DOMEventTarget} Target node.
*/

function getEventTarget(nativeEvent) {
 var target = nativeEvent.target || nativeEvent.srcElement || window;

 // Normalize SVG <use> element events #4963
 if (target.correspondingUseElement) {
   target = target.correspondingUseElement;
 }

 // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
 // @see http://www.quirksmode.org/js/events_properties.html
 return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],137:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule getIteratorFn
*/

'use strict';

/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
* Returns the iterator method function contained on the iterable object.
*
* Be sure to invoke the function with the iterable as context:
*
*     var iteratorFn = getIteratorFn(myIterable);
*     if (iteratorFn) {
*       var iterator = iteratorFn.call(myIterable);
*       ...
*     }
*
* @param {?object} maybeIterable
* @return {?function}
*/
function getIteratorFn(maybeIterable) {
 var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
 if (typeof iteratorFn === 'function') {
   return iteratorFn;
 }
}

module.exports = getIteratorFn;
},{}],138:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule getNativeComponentFromComposite
*/

'use strict';

var ReactNodeTypes = _dereq_(83);

function getNativeComponentFromComposite(inst) {
 var type;

 while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
   inst = inst._renderedComponent;
 }

 if (type === ReactNodeTypes.NATIVE) {
   return inst._renderedComponent;
 } else if (type === ReactNodeTypes.EMPTY) {
   return null;
 }
}

module.exports = getNativeComponentFromComposite;
},{"83":83}],139:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule getNodeForCharacterOffset
*/

'use strict';

/**
* Given any node return the first leaf node without children.
*
* @param {DOMElement|DOMTextNode} node
* @return {DOMElement|DOMTextNode}
*/

function getLeafNode(node) {
 while (node && node.firstChild) {
   node = node.firstChild;
 }
 return node;
}

/**
* Get the next sibling within a container. This will walk up the
* DOM if a node's siblings have been exhausted.
*
* @param {DOMElement|DOMTextNode} node
* @return {?DOMElement|DOMTextNode}
*/
function getSiblingNode(node) {
 while (node) {
   if (node.nextSibling) {
     return node.nextSibling;
   }
   node = node.parentNode;
 }
}

/**
* Get object describing the nodes which contain characters at offset.
*
* @param {DOMElement|DOMTextNode} root
* @param {number} offset
* @return {?object}
*/
function getNodeForCharacterOffset(root, offset) {
 var node = getLeafNode(root);
 var nodeStart = 0;
 var nodeEnd = 0;

 while (node) {
   if (node.nodeType === 3) {
     nodeEnd = nodeStart + node.textContent.length;

     if (nodeStart <= offset && nodeEnd >= offset) {
       return {
         node: node,
         offset: offset - nodeStart
       };
     }

     nodeStart = nodeEnd;
   }

   node = getLeafNode(getSiblingNode(node));
 }
}

module.exports = getNodeForCharacterOffset;
},{}],140:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule getTextContentAccessor
*/

'use strict';

var ExecutionEnvironment = _dereq_(157);

var contentKey = null;

/**
* Gets the key used to access text content on a DOM node.
*
* @return {?string} Key used to access text content.
* @internal
*/
function getTextContentAccessor() {
 if (!contentKey && ExecutionEnvironment.canUseDOM) {
   // Prefer textContent to innerText because many browsers support both but
   // SVG <text> elements don't support innerText even when <div> does.
   contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
 }
 return contentKey;
}

module.exports = getTextContentAccessor;
},{"157":157}],141:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule getVendorPrefixedEventName
*/

'use strict';

var ExecutionEnvironment = _dereq_(157);

/**
* Generate a mapping of standard vendor prefixes using the defined style property and event name.
*
* @param {string} styleProp
* @param {string} eventName
* @returns {object}
*/
function makePrefixMap(styleProp, eventName) {
 var prefixes = {};

 prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
 prefixes['Webkit' + styleProp] = 'webkit' + eventName;
 prefixes['Moz' + styleProp] = 'moz' + eventName;
 prefixes['ms' + styleProp] = 'MS' + eventName;
 prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

 return prefixes;
}

/**
* A list of event names to a configurable list of vendor prefixes.
*/
var vendorPrefixes = {
 animationend: makePrefixMap('Animation', 'AnimationEnd'),
 animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
 animationstart: makePrefixMap('Animation', 'AnimationStart'),
 transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
* Event names that have already been detected and prefixed (if applicable).
*/
var prefixedEventNames = {};

/**
* Element to check for prefixes on.
*/
var style = {};

/**
* Bootstrap if a DOM exists.
*/
if (ExecutionEnvironment.canUseDOM) {
 style = document.createElement('div').style;

 // On some platforms, in particular some releases of Android 4.x,
 // the un-prefixed "animation" and "transition" properties are defined on the
 // style object but the events that fire will still be prefixed, so we need
 // to check if the un-prefixed events are usable, and if not remove them from the map.
 if (!('AnimationEvent' in window)) {
   delete vendorPrefixes.animationend.animation;
   delete vendorPrefixes.animationiteration.animation;
   delete vendorPrefixes.animationstart.animation;
 }

 // Same as above
 if (!('TransitionEvent' in window)) {
   delete vendorPrefixes.transitionend.transition;
 }
}

/**
* Attempts to determine the correct vendor prefixed event name.
*
* @param {string} eventName
* @returns {string}
*/
function getVendorPrefixedEventName(eventName) {
 if (prefixedEventNames[eventName]) {
   return prefixedEventNames[eventName];
 } else if (!vendorPrefixes[eventName]) {
   return eventName;
 }

 var prefixMap = vendorPrefixes[eventName];

 for (var styleProp in prefixMap) {
   if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
     return prefixedEventNames[eventName] = prefixMap[styleProp];
   }
 }

 return '';
}

module.exports = getVendorPrefixedEventName;
},{"157":157}],142:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule instantiateReactComponent
*/

'use strict';

var _assign = _dereq_(182);

var ReactCompositeComponent = _dereq_(36);
var ReactEmptyComponent = _dereq_(66);
var ReactNativeComponent = _dereq_(82);

var invariant = _dereq_(171);
var warning = _dereq_(181);

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
 this.construct(element);
};
_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
 _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
 if (owner) {
   var name = owner.getName();
   if (name) {
     return ' Check the render method of `' + name + '`.';
   }
 }
 return '';
}

/**
* Check if the type reference is a known internal type. I.e. not a user
* provided composite type.
*
* @param {function} type
* @return {boolean} Returns true if this is a valid internal type.
*/
function isInternalComponentType(type) {
 return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
* Given a ReactNode, create an instance that will actually be mounted.
*
* @param {ReactNode} node
* @return {object} A new instance of the element's constructor.
* @protected
*/
function instantiateReactComponent(node) {
 var instance;

 if (node === null || node === false) {
   instance = ReactEmptyComponent.create(instantiateReactComponent);
 } else if (typeof node === 'object') {
   var element = node;
   !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? "development" !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : void 0;

   // Special case string values
   if (typeof element.type === 'string') {
     instance = ReactNativeComponent.createInternalComponent(element);
   } else if (isInternalComponentType(element.type)) {
     // This is temporarily available for custom components that are not string
     // representations. I.e. ART. Once those are updated to use the string
     // representation, we can drop this code path.
     instance = new element.type(element);
   } else {
     instance = new ReactCompositeComponentWrapper(element);
   }
 } else if (typeof node === 'string' || typeof node === 'number') {
   instance = ReactNativeComponent.createInstanceForText(node);
 } else {
   !false ? "development" !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : void 0;
 }

 if ("development" !== 'production') {
   "development" !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getNativeNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
 }

 // These two fields are used by the DOM and ART diffing algorithms
 // respectively. Instead of using expandos on components, we should be
 // storing the state needed by the diffing algorithms elsewhere.
 instance._mountIndex = 0;
 instance._mountImage = null;

 if ("development" !== 'production') {
   instance._isOwnerNecessary = false;
   instance._warnedAboutRefsInRender = false;
 }

 // Internal instances should fully constructed at this point, so they should
 // not get any new fields added to them at this point.
 if ("development" !== 'production') {
   if (Object.preventExtensions) {
     Object.preventExtensions(instance);
   }
 }

 return instance;
}

module.exports = instantiateReactComponent;
},{"171":171,"181":181,"182":182,"36":36,"66":66,"82":82}],143:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule isEventSupported
*/

'use strict';

var ExecutionEnvironment = _dereq_(157);

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
 useHasFeature = document.implementation && document.implementation.hasFeature &&
 // always returns true in newer browsers as per the standard.
 // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
 document.implementation.hasFeature('', '') !== true;
}

/**
* Checks if an event is supported in the current execution environment.
*
* NOTE: This will not work correctly for non-generic events such as `change`,
* `reset`, `load`, `error`, and `select`.
*
* Borrows from Modernizr.
*
* @param {string} eventNameSuffix Event name, e.g. "click".
* @param {?boolean} capture Check if the capture phase is supported.
* @return {boolean} True if the event is supported.
* @internal
* @license Modernizr 3.0.0pre (Custom Build) | MIT
*/
function isEventSupported(eventNameSuffix, capture) {
 if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
   return false;
 }

 var eventName = 'on' + eventNameSuffix;
 var isSupported = eventName in document;

 if (!isSupported) {
   var element = document.createElement('div');
   element.setAttribute(eventName, 'return;');
   isSupported = typeof element[eventName] === 'function';
 }

 if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
   // This is the only way to test support for the `wheel` event in IE9+.
   isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
 }

 return isSupported;
}

module.exports = isEventSupported;
},{"157":157}],144:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule isTextInputElement
*/

'use strict';

/**
* @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
*/

var supportedInputTypes = {
 'color': true,
 'date': true,
 'datetime': true,
 'datetime-local': true,
 'email': true,
 'month': true,
 'number': true,
 'password': true,
 'range': true,
 'search': true,
 'tel': true,
 'text': true,
 'time': true,
 'url': true,
 'week': true
};

function isTextInputElement(elem) {
 var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
 return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
}

module.exports = isTextInputElement;
},{}],145:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule onlyChild
*/
'use strict';

var ReactElement = _dereq_(64);

var invariant = _dereq_(171);

/**
* Returns the first child in a collection of children and verifies that there
* is only one child in the collection. The current implementation of this
* function assumes that a single child gets passed without a wrapper, but the
* purpose of this helper function is to abstract away the particular structure
* of children.
*
* @param {?object} children Child collection structure.
* @return {ReactComponent} The first and only `ReactComponent` contained in the
* structure.
*/
function onlyChild(children) {
 !ReactElement.isValidElement(children) ? "development" !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : void 0;
 return children;
}

module.exports = onlyChild;
},{"171":171,"64":64}],146:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule quoteAttributeValueForBrowser
*/

'use strict';

var escapeTextContentForBrowser = _dereq_(129);

/**
* Escapes attribute value to prevent scripting attacks.
*
* @param {*} value Value to escape.
* @return {string} An escaped string.
*/
function quoteAttributeValueForBrowser(value) {
 return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"129":129}],147:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule renderSubtreeIntoContainer
*/

'use strict';

var ReactMount = _dereq_(79);

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"79":79}],148:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule setInnerHTML
*/

'use strict';

var ExecutionEnvironment = _dereq_(157);

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = _dereq_(127);

/**
* Set the innerHTML property of a node, ensuring that whitespace is preserved
* even in IE8.
*
* @param {DOMElement} node
* @param {string} html
* @internal
*/
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
 node.innerHTML = html;
});

if (ExecutionEnvironment.canUseDOM) {
 // IE8: When updating a just created node with innerHTML only leading
 // whitespace is removed. When updating an existing node with innerHTML
 // whitespace in root TextNodes is also collapsed.
 // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

 // Feature detection; only IE8 is known to behave improperly like this.
 var testElement = document.createElement('div');
 testElement.innerHTML = ' ';
 if (testElement.innerHTML === '') {
   setInnerHTML = function (node, html) {
     // Magic theory: IE8 supposedly differentiates between added and updated
     // nodes when processing innerHTML, innerHTML on updated nodes suffers
     // from worse whitespace behavior. Re-adding a node like this triggers
     // the initial and more favorable whitespace behavior.
     // TODO: What to do on a detached node?
     if (node.parentNode) {
       node.parentNode.replaceChild(node, node);
     }

     // We also implement a workaround for non-visible tags disappearing into
     // thin air on IE8, this only happens if there is no visible text
     // in-front of the non-visible tags. Piggyback on the whitespace fix
     // and simply check if any non-visible tags appear in the source.
     if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
       // Recover leading whitespace by temporarily prepending any character.
       // \uFEFF has the potential advantage of being zero-width/invisible.
       // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
       // in hopes that this is preserved even if "\uFEFF" is transformed to
       // the actual Unicode character (by Babel, for example).
       // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
       node.innerHTML = String.fromCharCode(0xFEFF) + html;

       // deleteData leaves an empty `TextNode` which offsets the index of all
       // children. Definitely want to avoid this.
       var textNode = node.firstChild;
       if (textNode.data.length === 1) {
         node.removeChild(textNode);
       } else {
         textNode.deleteData(0, 1);
       }
     } else {
       node.innerHTML = html;
     }
   };
 }
 testElement = null;
}

module.exports = setInnerHTML;
},{"127":127,"157":157}],149:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule setTextContent
*/

'use strict';

var ExecutionEnvironment = _dereq_(157);
var escapeTextContentForBrowser = _dereq_(129);
var setInnerHTML = _dereq_(148);

/**
* Set the textContent property of a node, ensuring that whitespace is preserved
* even in IE8. innerText is a poor substitute for textContent and, among many
* issues, inserts <br> instead of the literal newline chars. innerHTML behaves
* as it should.
*
* @param {DOMElement} node
* @param {string} text
* @internal
*/
var setTextContent = function (node, text) {
 node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
 if (!('textContent' in document.documentElement)) {
   setTextContent = function (node, text) {
     setInnerHTML(node, escapeTextContentForBrowser(text));
   };
 }
}

module.exports = setTextContent;
},{"129":129,"148":148,"157":157}],150:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule shallowCompare
*/

'use strict';

var shallowEqual = _dereq_(180);

/**
* Does a shallow comparison for props and state.
* See ReactComponentWithPureRenderMixin
*/
function shallowCompare(instance, nextProps, nextState) {
 return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);
}

module.exports = shallowCompare;
},{"180":180}],151:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule shouldUpdateReactComponent
*/

'use strict';

/**
* Given a `prevElement` and `nextElement`, determines if the existing
* instance should be updated as opposed to being destroyed or replaced by a new
* instance. Both arguments are elements. This ensures that this logic can
* operate on stateless trees without any backing instance.
*
* @param {?object} prevElement
* @param {?object} nextElement
* @return {boolean} True if the existing instance should be updated.
* @protected
*/

function shouldUpdateReactComponent(prevElement, nextElement) {
 var prevEmpty = prevElement === null || prevElement === false;
 var nextEmpty = nextElement === null || nextElement === false;
 if (prevEmpty || nextEmpty) {
   return prevEmpty === nextEmpty;
 }

 var prevType = typeof prevElement;
 var nextType = typeof nextElement;
 if (prevType === 'string' || prevType === 'number') {
   return nextType === 'string' || nextType === 'number';
 } else {
   return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
 }
}

module.exports = shouldUpdateReactComponent;
},{}],152:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule traverseAllChildren
*/

'use strict';

var ReactCurrentOwner = _dereq_(37);
var ReactElement = _dereq_(64);

var getIteratorFn = _dereq_(137);
var invariant = _dereq_(171);
var warning = _dereq_(181);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
* TODO: Test that a single child and an array with one item have the same key
* pattern.
*/

var userProvidedKeyEscaperLookup = {
 '=': '=0',
 ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
 return userProvidedKeyEscaperLookup[match];
}

/**
* Generate a key string that identifies a component within a set.
*
* @param {*} component A component that could contain a manual key.
* @param {number} index Index that is used if a manual key is not provided.
* @return {string}
*/
function getComponentKey(component, index) {
 // Do some typechecking here since we call this blindly. We want to ensure
 // that we don't block potential future ES APIs.
 if (component && typeof component === 'object' && component.key != null) {
   // Explicit key
   return wrapUserProvidedKey(component.key);
 }
 // Implicit key determined by the index in the set
 return index.toString(36);
}

/**
* Escape a component key so that it is safe to use in a reactid.
*
* @param {*} text Component key to be escaped.
* @return {string} An escaped string.
*/
function escapeUserProvidedKey(text) {
 return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
}

/**
* Wrap a `key` value explicitly provided by the user to distinguish it from
* implicitly-generated keys generated by a component's index in its parent.
*
* @param {string} key Value of a user-provided `key` attribute
* @return {string}
*/
function wrapUserProvidedKey(key) {
 return '$' + escapeUserProvidedKey(key);
}

/**
* @param {?*} children Children tree container.
* @param {!string} nameSoFar Name of the key path so far.
* @param {!function} callback Callback to invoke with each child found.
* @param {?*} traverseContext Used to pass information throughout the traversal
* process.
* @return {!number} The number of children in this subtree.
*/
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
 var type = typeof children;

 if (type === 'undefined' || type === 'boolean') {
   // All of the above are perceived as null.
   children = null;
 }

 if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
   callback(traverseContext, children,
   // If it's the only child, treat the name as if it was wrapped in an array
   // so that it's consistent if the number of children grows.
   nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
   return 1;
 }

 var child;
 var nextName;
 var subtreeCount = 0; // Count of children found in the current subtree.
 var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

 if (Array.isArray(children)) {
   for (var i = 0; i < children.length; i++) {
     child = children[i];
     nextName = nextNamePrefix + getComponentKey(child, i);
     subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
   }
 } else {
   var iteratorFn = getIteratorFn(children);
   if (iteratorFn) {
     var iterator = iteratorFn.call(children);
     var step;
     if (iteratorFn !== children.entries) {
       var ii = 0;
       while (!(step = iterator.next()).done) {
         child = step.value;
         nextName = nextNamePrefix + getComponentKey(child, ii++);
         subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
       }
     } else {
       if ("development" !== 'production') {
         "development" !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : void 0;
         didWarnAboutMaps = true;
       }
       // Iterator will provide entry [k,v] tuples rather than values.
       while (!(step = iterator.next()).done) {
         var entry = step.value;
         if (entry) {
           child = entry[1];
           nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
           subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
         }
       }
     }
   } else if (type === 'object') {
     var addendum = '';
     if ("development" !== 'production') {
       addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
       if (children._isReactElement) {
         addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
       }
       if (ReactCurrentOwner.current) {
         var name = ReactCurrentOwner.current.getName();
         if (name) {
           addendum += ' Check the render method of `' + name + '`.';
         }
       }
     }
     var childrenString = String(children);
     !false ? "development" !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : void 0;
   }
 }

 return subtreeCount;
}

/**
* Traverses children that are typically specified as `props.children`, but
* might also be specified through attributes:
*
* - `traverseAllChildren(this.props.children, ...)`
* - `traverseAllChildren(this.props.leftPanelChildren, ...)`
*
* The `traverseContext` is an optional argument that is passed through the
* entire traversal. It can be used to store accumulations or anything else that
* the callback might find relevant.
*
* @param {?*} children Children tree object.
* @param {!function} callback To invoke upon traversing each child.
* @param {?*} traverseContext Context for traversal.
* @return {!number} The number of children in this subtree.
*/
function traverseAllChildren(children, callback, traverseContext) {
 if (children == null) {
   return 0;
 }

 return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
},{"137":137,"171":171,"181":181,"37":37,"64":64}],153:[function(_dereq_,module,exports){
/**
* Copyright 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule update
*/

/* global hasOwnProperty:true */

'use strict';

var _assign = _dereq_(182);

var keyOf = _dereq_(175);
var invariant = _dereq_(171);
var hasOwnProperty = {}.hasOwnProperty;

function shallowCopy(x) {
 if (Array.isArray(x)) {
   return x.concat();
 } else if (x && typeof x === 'object') {
   return _assign(new x.constructor(), x);
 } else {
   return x;
 }
}

var COMMAND_PUSH = keyOf({ $push: null });
var COMMAND_UNSHIFT = keyOf({ $unshift: null });
var COMMAND_SPLICE = keyOf({ $splice: null });
var COMMAND_SET = keyOf({ $set: null });
var COMMAND_MERGE = keyOf({ $merge: null });
var COMMAND_APPLY = keyOf({ $apply: null });

var ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];

var ALL_COMMANDS_SET = {};

ALL_COMMANDS_LIST.forEach(function (command) {
 ALL_COMMANDS_SET[command] = true;
});

function invariantArrayCase(value, spec, command) {
 !Array.isArray(value) ? "development" !== 'production' ? invariant(false, 'update(): expected target of %s to be an array; got %s.', command, value) : invariant(false) : void 0;
 var specValue = spec[command];
 !Array.isArray(specValue) ? "development" !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array; got %s. ' + 'Did you forget to wrap your parameter in an array?', command, specValue) : invariant(false) : void 0;
}

function update(value, spec) {
 !(typeof spec === 'object') ? "development" !== 'production' ? invariant(false, 'update(): You provided a key path to update() that did not contain one ' + 'of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET) : invariant(false) : void 0;

 if (hasOwnProperty.call(spec, COMMAND_SET)) {
   !(Object.keys(spec).length === 1) ? "development" !== 'production' ? invariant(false, 'Cannot have more than one key in an object with %s', COMMAND_SET) : invariant(false) : void 0;

   return spec[COMMAND_SET];
 }

 var nextValue = shallowCopy(value);

 if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
   var mergeObj = spec[COMMAND_MERGE];
   !(mergeObj && typeof mergeObj === 'object') ? "development" !== 'production' ? invariant(false, 'update(): %s expects a spec of type \'object\'; got %s', COMMAND_MERGE, mergeObj) : invariant(false) : void 0;
   !(nextValue && typeof nextValue === 'object') ? "development" !== 'production' ? invariant(false, 'update(): %s expects a target of type \'object\'; got %s', COMMAND_MERGE, nextValue) : invariant(false) : void 0;
   _assign(nextValue, spec[COMMAND_MERGE]);
 }

 if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
   invariantArrayCase(value, spec, COMMAND_PUSH);
   spec[COMMAND_PUSH].forEach(function (item) {
     nextValue.push(item);
   });
 }

 if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
   invariantArrayCase(value, spec, COMMAND_UNSHIFT);
   spec[COMMAND_UNSHIFT].forEach(function (item) {
     nextValue.unshift(item);
   });
 }

 if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
   !Array.isArray(value) ? "development" !== 'production' ? invariant(false, 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value) : invariant(false) : void 0;
   !Array.isArray(spec[COMMAND_SPLICE]) ? "development" !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(false) : void 0;
   spec[COMMAND_SPLICE].forEach(function (args) {
     !Array.isArray(args) ? "development" !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(false) : void 0;
     nextValue.splice.apply(nextValue, args);
   });
 }

 if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
   !(typeof spec[COMMAND_APPLY] === 'function') ? "development" !== 'production' ? invariant(false, 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]) : invariant(false) : void 0;
   nextValue = spec[COMMAND_APPLY](nextValue);
 }

 for (var k in spec) {
   if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
     nextValue[k] = update(value[k], spec[k]);
   }
 }

 return nextValue;
}

module.exports = update;
},{"171":171,"175":175,"182":182}],154:[function(_dereq_,module,exports){
/**
* Copyright 2015-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @providesModule validateDOMNesting
*/

'use strict';

var _assign = _dereq_(182);

var emptyFunction = _dereq_(163);
var warning = _dereq_(181);

var validateDOMNesting = emptyFunction;

if ("development" !== 'production') {
 // This validation code was written based on the HTML5 parsing spec:
 // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
 //
 // Note: this does not catch all invalid nesting, nor does it try to (as it's
 // not clear what practical benefit doing so provides); instead, we warn only
 // for cases where the parser will give a parse tree differing from what React
 // intended. For example, <b><div></div></b> is invalid but we don't warn
 // because it still parses correctly; we do warn for other cases like nested
 // <p> tags where the beginning of the second element implicitly closes the
 // first, causing a confusing mess.

 // https://html.spec.whatwg.org/multipage/syntax.html#special
 var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

 // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
 var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

 // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
 // TODO: Distinguish by namespace here -- for <title>, including it here
 // errs on the side of fewer warnings
 'foreignObject', 'desc', 'title'];

 // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
 var buttonScopeTags = inScopeTags.concat(['button']);

 // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
 var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

 var emptyAncestorInfo = {
   current: null,

   formTag: null,
   aTagInScope: null,
   buttonTagInScope: null,
   nobrTagInScope: null,
   pTagInButtonScope: null,

   listItemTagAutoclosing: null,
   dlItemTagAutoclosing: null
 };

 var updatedAncestorInfo = function (oldInfo, tag, instance) {
   var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
   var info = { tag: tag, instance: instance };

   if (inScopeTags.indexOf(tag) !== -1) {
     ancestorInfo.aTagInScope = null;
     ancestorInfo.buttonTagInScope = null;
     ancestorInfo.nobrTagInScope = null;
   }
   if (buttonScopeTags.indexOf(tag) !== -1) {
     ancestorInfo.pTagInButtonScope = null;
   }

   // See rules for 'li', 'dd', 'dt' start tags in
   // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
   if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
     ancestorInfo.listItemTagAutoclosing = null;
     ancestorInfo.dlItemTagAutoclosing = null;
   }

   ancestorInfo.current = info;

   if (tag === 'form') {
     ancestorInfo.formTag = info;
   }
   if (tag === 'a') {
     ancestorInfo.aTagInScope = info;
   }
   if (tag === 'button') {
     ancestorInfo.buttonTagInScope = info;
   }
   if (tag === 'nobr') {
     ancestorInfo.nobrTagInScope = info;
   }
   if (tag === 'p') {
     ancestorInfo.pTagInButtonScope = info;
   }
   if (tag === 'li') {
     ancestorInfo.listItemTagAutoclosing = info;
   }
   if (tag === 'dd' || tag === 'dt') {
     ancestorInfo.dlItemTagAutoclosing = info;
   }

   return ancestorInfo;
 };

 /**
  * Returns whether
  */
 var isTagValidWithParent = function (tag, parentTag) {
   // First, let's check if we're in an unusual parsing mode...
   switch (parentTag) {
     // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
     case 'select':
       return tag === 'option' || tag === 'optgroup' || tag === '#text';
     case 'optgroup':
       return tag === 'option' || tag === '#text';
     // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
     // but
     case 'option':
       return tag === '#text';

     // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
     // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
     // No special behavior since these rules fall back to "in body" mode for
     // all except special table nodes which cause bad parsing behavior anyway.

     // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
     case 'tr':
       return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

     // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
     case 'tbody':
     case 'thead':
     case 'tfoot':
       return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

     // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
     case 'colgroup':
       return tag === 'col' || tag === 'template';

     // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
     case 'table':
       return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

     // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
     case 'head':
       return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

     // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
     case 'html':
       return tag === 'head' || tag === 'body';
     case '#document':
       return tag === 'html';
   }

   // Probably in the "in body" parsing mode, so we outlaw only tag combos
   // where the parsing rules cause implicit opens or closes to be added.
   // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
   switch (tag) {
     case 'h1':
     case 'h2':
     case 'h3':
     case 'h4':
     case 'h5':
     case 'h6':
       return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

     case 'rp':
     case 'rt':
       return impliedEndTags.indexOf(parentTag) === -1;

     case 'caption':
     case 'col':
     case 'colgroup':
     case 'frame':
     case 'head':
     case 'html':
     case 'tbody':
     case 'td':
     case 'tfoot':
     case 'th':
     case 'thead':
     case 'tr':
       // These tags are only valid with a few parents that have special child
       // parsing rules -- if we're down here, then none of those matched and
       // so we allow it only if we don't know what the parent is, as all other
       // cases are invalid.
       return parentTag == null;
   }

   return true;
 };

 /**
  * Returns whether
  */
 var findInvalidAncestorForTag = function (tag, ancestorInfo) {
   switch (tag) {
     case 'address':
     case 'article':
     case 'aside':
     case 'blockquote':
     case 'center':
     case 'details':
     case 'dialog':
     case 'dir':
     case 'div':
     case 'dl':
     case 'fieldset':
     case 'figcaption':
     case 'figure':
     case 'footer':
     case 'header':
     case 'hgroup':
     case 'main':
     case 'menu':
     case 'nav':
     case 'ol':
     case 'p':
     case 'section':
     case 'summary':
     case 'ul':

     case 'pre':
     case 'listing':

     case 'table':

     case 'hr':

     case 'xmp':

     case 'h1':
     case 'h2':
     case 'h3':
     case 'h4':
     case 'h5':
     case 'h6':
       return ancestorInfo.pTagInButtonScope;

     case 'form':
       return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

     case 'li':
       return ancestorInfo.listItemTagAutoclosing;

     case 'dd':
     case 'dt':
       return ancestorInfo.dlItemTagAutoclosing;

     case 'button':
       return ancestorInfo.buttonTagInScope;

     case 'a':
       // Spec says something about storing a list of markers, but it sounds
       // equivalent to this check.
       return ancestorInfo.aTagInScope;

     case 'nobr':
       return ancestorInfo.nobrTagInScope;
   }

   return null;
 };

 /**
  * Given a ReactCompositeComponent instance, return a list of its recursive
  * owners, starting at the root and ending with the instance itself.
  */
 var findOwnerStack = function (instance) {
   if (!instance) {
     return [];
   }

   var stack = [];
   do {
     stack.push(instance);
   } while (instance = instance._currentElement._owner);
   stack.reverse();
   return stack;
 };

 var didWarn = {};

 validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
   ancestorInfo = ancestorInfo || emptyAncestorInfo;
   var parentInfo = ancestorInfo.current;
   var parentTag = parentInfo && parentInfo.tag;

   var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
   var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
   var problematic = invalidParent || invalidAncestor;

   if (problematic) {
     var ancestorTag = problematic.tag;
     var ancestorInstance = problematic.instance;

     var childOwner = childInstance && childInstance._currentElement._owner;
     var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

     var childOwners = findOwnerStack(childOwner);
     var ancestorOwners = findOwnerStack(ancestorOwner);

     var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
     var i;

     var deepestCommon = -1;
     for (i = 0; i < minStackLen; i++) {
       if (childOwners[i] === ancestorOwners[i]) {
         deepestCommon = i;
       } else {
         break;
       }
     }

     var UNKNOWN = '(unknown)';
     var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
       return inst.getName() || UNKNOWN;
     });
     var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
       return inst.getName() || UNKNOWN;
     });
     var ownerInfo = [].concat(
     // If the parent and child instances have a common owner ancestor, start
     // with that -- otherwise we just start with the parent's owners.
     deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
     // If we're warning about an invalid (non-parent) ancestry, add '...'
     invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

     var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
     if (didWarn[warnKey]) {
       return;
     }
     didWarn[warnKey] = true;

     var tagDisplayName = childTag;
     if (childTag !== '#text') {
       tagDisplayName = '<' + childTag + '>';
     }

     if (invalidParent) {
       var info = '';
       if (ancestorTag === 'table' && childTag === 'tr') {
         info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
       }
       "development" !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>. ' + 'See %s.%s', tagDisplayName, ancestorTag, ownerInfo, info) : void 0;
     } else {
       "development" !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
     }
   }
 };

 validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

 // For testing
 validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
   ancestorInfo = ancestorInfo || emptyAncestorInfo;
   var parentInfo = ancestorInfo.current;
   var parentTag = parentInfo && parentInfo.tag;
   return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
 };
}

module.exports = validateDOMNesting;
},{"163":163,"181":181,"182":182}],155:[function(_dereq_,module,exports){
'use strict';

/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

var invariant = _dereq_(171);

/**
* The CSSCore module specifies the API (and implements most of the methods)
* that should be used when dealing with the display of elements (via their
* CSS classes and visibility on screen. It is an API focused on mutating the
* display and not reading it as no logical state should be encoded in the
* display of elements.
*/

/* Slow implementation for browsers that don't natively support .matches() */
function matchesSelector_SLOW(element, selector) {
 var root = element;
 while (root.parentNode) {
   root = root.parentNode;
 }

 var all = root.querySelectorAll(selector);
 return Array.prototype.indexOf.call(all, element) !== -1;
}

var CSSCore = {

 /**
  * Adds the class passed in to the element if it doesn't already have it.
  *
  * @param {DOMElement} element the element to set the class on
  * @param {string} className the CSS className
  * @return {DOMElement} the element passed in
  */
 addClass: function (element, className) {
   !!/\s/.test(className) ? "development" !== 'production' ? invariant(false, 'CSSCore.addClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : void 0;

   if (className) {
     if (element.classList) {
       element.classList.add(className);
     } else if (!CSSCore.hasClass(element, className)) {
       element.className = element.className + ' ' + className;
     }
   }
   return element;
 },

 /**
  * Removes the class passed in from the element
  *
  * @param {DOMElement} element the element to set the class on
  * @param {string} className the CSS className
  * @return {DOMElement} the element passed in
  */
 removeClass: function (element, className) {
   !!/\s/.test(className) ? "development" !== 'production' ? invariant(false, 'CSSCore.removeClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : void 0;

   if (className) {
     if (element.classList) {
       element.classList.remove(className);
     } else if (CSSCore.hasClass(element, className)) {
       element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ') // multiple spaces to one
       .replace(/^\s*|\s*$/g, ''); // trim the ends
     }
   }
   return element;
 },

 /**
  * Helper to add or remove a class from an element based on a condition.
  *
  * @param {DOMElement} element the element to set the class on
  * @param {string} className the CSS className
  * @param {*} bool condition to whether to add or remove the class
  * @return {DOMElement} the element passed in
  */
 conditionClass: function (element, className, bool) {
   return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
 },

 /**
  * Tests whether the element has the class specified.
  *
  * @param {DOMNode|DOMWindow} element the element to check the class on
  * @param {string} className the CSS className
  * @return {boolean} true if the element has the class, false if not
  */
 hasClass: function (element, className) {
   !!/\s/.test(className) ? "development" !== 'production' ? invariant(false, 'CSS.hasClass takes only a single class name.') : invariant(false) : void 0;
   if (element.classList) {
     return !!className && element.classList.contains(className);
   }
   return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
 },

 /**
  * Tests whether the element matches the selector specified
  *
  * @param {DOMNode|DOMWindow} element the element that we are querying
  * @param {string} selector the CSS selector
  * @return {boolean} true if the element matches the selector, false if not
  */
 matchesSelector: function (element, selector) {
   var matchesImpl = element.matches || element.webkitMatchesSelector || element.mozMatchesSelector || element.msMatchesSelector || function (s) {
     return matchesSelector_SLOW(element, s);
   };
   return matchesImpl.call(element, selector);
 }

};

module.exports = CSSCore;
},{"171":171}],156:[function(_dereq_,module,exports){
'use strict';

/**
* Copyright (c) 2013-present, Facebook, Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
* @typechecks
*/

var emptyFunction = _dereq_(163);

/**
* Upstream version of event listener. Does not take into account specific
* nature of platform.
*/
var EventListener = {
 /**
  * Listen to DOM events during the bubble phase.
  *
  * @param {DOMEventTarget} target DOM element to register listener on.
  * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
  * @param {function} callback Callback function.
  * @return {object} Object with a `remove` method.
  */
 listen: function (target, eventType, callback) {
   if (target.addEventListener) {
     target.addEventListener(eventType, callback, false);
     return {
       remove: function () {
         target.removeEventListener(eventType, callback, false);
       }
     };
   } else if (target.attachEvent) {
     target.attachEvent('on' + eventType, callback);
     return {
       remove: function () {
         target.detachEvent('on' + eventType, callback);
       }
     };
   }
 },

 /**
  * Listen to DOM events during the capture phase.
  *
  * @param {DOMEventTarget} target DOM element to register listener on.
  * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
  * @param {function} callback Callback function.
  * @return {object} Object with a `remove` method.
  */
 capture: function (target, eventType, callback) {
   if (target.addEventListener) {
     target.addEventListener(eventType, callback, true);
     return {
       remove: function () {
         target.removeEventListener(eventType, callback, true);
       }
     };
   } else {
     if ("development" !== 'production') {
       console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
     }
     return {
       remove: emptyFunction
     };
   }
 },

 registerDefault: function () {}
};

module.exports = EventListener;
},{"163":163}],157:[function(_dereq_,module,exports){
/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
*/

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
* Simple, lightweight module assisting with the detection and context of
* Worker. Helps avoid circular dependencies and allows code to reason about
* whether or not they are in a Worker, even if they never include the main
* `ReactWorker` dependency.
*/
var ExecutionEnvironment = {

 canUseDOM: canUseDOM,

 canUseWorkers: typeof Worker !== 'undefined',

 canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

 canUseViewport: canUseDOM && !!window.screen,

 isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],158:[function(_dereq_,module,exports){
"use strict";

/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

var _hyphenPattern = /-(.)/g;

/**
* Camelcases a hyphenated string, for example:
*
*   > camelize('background-color')
*   < "backgroundColor"
*
* @param {string} string
* @return {string}
*/
function camelize(string) {
 return string.replace(_hyphenPattern, function (_, character) {
   return character.toUpperCase();
 });
}

module.exports = camelize;
},{}],159:[function(_dereq_,module,exports){
/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

'use strict';

var camelize = _dereq_(158);

var msPattern = /^-ms-/;

/**
* Camelcases a hyphenated CSS property name, for example:
*
*   > camelizeStyleName('background-color')
*   < "backgroundColor"
*   > camelizeStyleName('-moz-transition')
*   < "MozTransition"
*   > camelizeStyleName('-ms-transition')
*   < "msTransition"
*
* As Andi Smith suggests
* (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
* is converted to lowercase `ms`.
*
* @param {string} string
* @return {string}
*/
function camelizeStyleName(string) {
 return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"158":158}],160:[function(_dereq_,module,exports){
'use strict';

/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

var isTextNode = _dereq_(173);

/*eslint-disable no-bitwise */

/**
* Checks if a given DOM node contains or is another DOM node.
*
* @param {?DOMNode} outerNode Outer DOM node.
* @param {?DOMNode} innerNode Inner DOM node.
* @return {boolean} True if `outerNode` contains or is `innerNode`.
*/
function containsNode(outerNode, innerNode) {
 if (!outerNode || !innerNode) {
   return false;
 } else if (outerNode === innerNode) {
   return true;
 } else if (isTextNode(outerNode)) {
   return false;
 } else if (isTextNode(innerNode)) {
   return containsNode(outerNode, innerNode.parentNode);
 } else if (outerNode.contains) {
   return outerNode.contains(innerNode);
 } else if (outerNode.compareDocumentPosition) {
   return !!(outerNode.compareDocumentPosition(innerNode) & 16);
 } else {
   return false;
 }
}

module.exports = containsNode;
},{"173":173}],161:[function(_dereq_,module,exports){
'use strict';

/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

var invariant = _dereq_(171);

/**
* Convert array-like objects to arrays.
*
* This API assumes the caller knows the contents of the data type. For less
* well defined inputs use createArrayFromMixed.
*
* @param {object|function|filelist} obj
* @return {array}
*/
function toArray(obj) {
 var length = obj.length;

 // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
 // in old versions of Safari).
 !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? "development" !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

 !(typeof length === 'number') ? "development" !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

 !(length === 0 || length - 1 in obj) ? "development" !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

 !(typeof obj.callee !== 'function') ? "development" !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

 // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
 // without method will throw during the slice call and skip straight to the
 // fallback.
 if (obj.hasOwnProperty) {
   try {
     return Array.prototype.slice.call(obj);
   } catch (e) {
     // IE < 9 does not support Array#slice on collections objects
   }
 }

 // Fall back to copying key by key. This assumes all keys have a value,
 // so will not preserve sparsely populated inputs.
 var ret = Array(length);
 for (var ii = 0; ii < length; ii++) {
   ret[ii] = obj[ii];
 }
 return ret;
}

/**
* Perform a heuristic test to determine if an object is "array-like".
*
*   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
*   Joshu replied: "Mu."
*
* This function determines if its argument has "array nature": it returns
* true if the argument is an actual array, an `arguments' object, or an
* HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
*
* It will return false for other array-like objects like Filelist.
*
* @param {*} obj
* @return {boolean}
*/
function hasArrayNature(obj) {
 return(
   // not null/false
   !!obj && (
   // arrays are objects, NodeLists are functions in Safari
   typeof obj == 'object' || typeof obj == 'function') &&
   // quacks like an array
   'length' in obj &&
   // not window
   !('setInterval' in obj) &&
   // no DOM node should be considered an array-like
   // a 'select' element has 'length' and 'item' properties on IE8
   typeof obj.nodeType != 'number' && (
   // a real array
   Array.isArray(obj) ||
   // arguments
   'callee' in obj ||
   // HTMLCollection/NodeList
   'item' in obj)
 );
}

/**
* Ensure that the argument is an array by wrapping it in an array if it is not.
* Creates a copy of the argument if it is already an array.
*
* This is mostly useful idiomatically:
*
*   var createArrayFromMixed = require('createArrayFromMixed');
*
*   function takesOneOrMoreThings(things) {
*     things = createArrayFromMixed(things);
*     ...
*   }
*
* This allows you to treat `things' as an array, but accept scalars in the API.
*
* If you need to convert an array-like object, like `arguments`, into an array
* use toArray instead.
*
* @param {*} obj
* @return {array}
*/
function createArrayFromMixed(obj) {
 if (!hasArrayNature(obj)) {
   return [obj];
 } else if (Array.isArray(obj)) {
   return obj.slice();
 } else {
   return toArray(obj);
 }
}

module.exports = createArrayFromMixed;
},{"171":171}],162:[function(_dereq_,module,exports){
'use strict';

/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = _dereq_(157);

var createArrayFromMixed = _dereq_(161);
var getMarkupWrap = _dereq_(167);
var invariant = _dereq_(171);

/**
* Dummy container used to render all markup.
*/
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
* Pattern used by `getNodeName`.
*/
var nodeNamePattern = /^\s*<(\w+)/;

/**
* Extracts the `nodeName` of the first element in a string of markup.
*
* @param {string} markup String of markup.
* @return {?string} Node name of the supplied markup.
*/
function getNodeName(markup) {
 var nodeNameMatch = markup.match(nodeNamePattern);
 return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
* Creates an array containing the nodes rendered from the supplied markup. The
* optionally supplied `handleScript` function will be invoked once for each
* <script> element that is rendered. If no `handleScript` function is supplied,
* an exception is thrown if any <script> elements are rendered.
*
* @param {string} markup A string of valid HTML markup.
* @param {?function} handleScript Invoked once for each rendered <script>.
* @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
*/
function createNodesFromMarkup(markup, handleScript) {
 var node = dummyNode;
 !!!dummyNode ? "development" !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
 var nodeName = getNodeName(markup);

 var wrap = nodeName && getMarkupWrap(nodeName);
 if (wrap) {
   node.innerHTML = wrap[1] + markup + wrap[2];

   var wrapDepth = wrap[0];
   while (wrapDepth--) {
     node = node.lastChild;
   }
 } else {
   node.innerHTML = markup;
 }

 var scripts = node.getElementsByTagName('script');
 if (scripts.length) {
   !handleScript ? "development" !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
   createArrayFromMixed(scripts).forEach(handleScript);
 }

 var nodes = Array.from(node.childNodes);
 while (node.lastChild) {
   node.removeChild(node.lastChild);
 }
 return nodes;
}

module.exports = createNodesFromMarkup;
},{"157":157,"161":161,"167":167,"171":171}],163:[function(_dereq_,module,exports){
"use strict";

/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
*/

function makeEmptyFunction(arg) {
 return function () {
   return arg;
 };
}

/**
* This function accepts and discards inputs; it has no side effects. This is
* primarily useful idiomatically for overridable function endpoints which
* always need to be callable, since JS lacks a null-call idiom ala Cocoa.
*/
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
 return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
 return arg;
};

module.exports = emptyFunction;
},{}],164:[function(_dereq_,module,exports){
/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
*/

'use strict';

var emptyObject = {};

if ("development" !== 'production') {
 Object.freeze(emptyObject);
}

module.exports = emptyObject;
},{}],165:[function(_dereq_,module,exports){
/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
*/

'use strict';

/**
* @param {DOMElement} node input/textarea to focus
*/

function focusNode(node) {
 // IE8 can throw "Can't move focus to the control because it is invisible,
 // not enabled, or of a type that does not accept the focus." for all kinds of
 // reasons that are too expensive and fragile to test.
 try {
   node.focus();
 } catch (e) {}
}

module.exports = focusNode;
},{}],166:[function(_dereq_,module,exports){
'use strict';

/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

/* eslint-disable fb-www/typeof-undefined */

/**
* Same as document.activeElement but wraps in a try-catch block. In IE it is
* not safe to call document.activeElement if there is nothing focused.
*
* The activeElement will be null only if the document or document body is not
* yet defined.
*/
function getActiveElement() /*?DOMElement*/{
 if (typeof document === 'undefined') {
   return null;
 }
 try {
   return document.activeElement || document.body;
 } catch (e) {
   return document.body;
 }
}

module.exports = getActiveElement;
},{}],167:[function(_dereq_,module,exports){
'use strict';

/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
*/

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = _dereq_(157);

var invariant = _dereq_(171);

/**
* Dummy container used to detect which wraps are necessary.
*/
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
* Some browsers cannot use `innerHTML` to render certain elements standalone,
* so we wrap them, render the wrapped nodes, then extract the desired node.
*
* In IE8, certain elements cannot render alone, so wrap all elements ('*').
*/

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
 '*': [1, '?<div>', '</div>'],

 'area': [1, '<map>', '</map>'],
 'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
 'legend': [1, '<fieldset>', '</fieldset>'],
 'param': [1, '<object>', '</object>'],
 'tr': [2, '<table><tbody>', '</tbody></table>'],

 'optgroup': selectWrap,
 'option': selectWrap,

 'caption': tableWrap,
 'colgroup': tableWrap,
 'tbody': tableWrap,
 'tfoot': tableWrap,
 'thead': tableWrap,

 'td': trWrap,
 'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
 markupWrap[nodeName] = svgWrap;
 shouldWrap[nodeName] = true;
});

/**
* Gets the markup wrap configuration for the supplied `nodeName`.
*
* NOTE: This lazily detects which wraps are necessary for the current browser.
*
* @param {string} nodeName Lowercase `nodeName`.
* @return {?array} Markup wrap configuration, if applicable.
*/
function getMarkupWrap(nodeName) {
 !!!dummyNode ? "development" !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
 if (!markupWrap.hasOwnProperty(nodeName)) {
   nodeName = '*';
 }
 if (!shouldWrap.hasOwnProperty(nodeName)) {
   if (nodeName === '*') {
     dummyNode.innerHTML = '<link />';
   } else {
     dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
   }
   shouldWrap[nodeName] = !dummyNode.firstChild;
 }
 return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
},{"157":157,"171":171}],168:[function(_dereq_,module,exports){
/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

'use strict';

/**
* Gets the scroll position of the supplied element or window.
*
* The return values are unbounded, unlike `getScrollPosition`. This means they
* may be negative or exceed the element boundaries (which is possible using
* inertial scrolling).
*
* @param {DOMWindow|DOMElement} scrollable
* @return {object} Map with `x` and `y` keys.
*/

function getUnboundedScrollPosition(scrollable) {
 if (scrollable === window) {
   return {
     x: window.pageXOffset || document.documentElement.scrollLeft,
     y: window.pageYOffset || document.documentElement.scrollTop
   };
 }
 return {
   x: scrollable.scrollLeft,
   y: scrollable.scrollTop
 };
}

module.exports = getUnboundedScrollPosition;
},{}],169:[function(_dereq_,module,exports){
'use strict';

/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

var _uppercasePattern = /([A-Z])/g;

/**
* Hyphenates a camelcased string, for example:
*
*   > hyphenate('backgroundColor')
*   < "background-color"
*
* For CSS style names, use `hyphenateStyleName` instead which works properly
* with all vendor prefixes, including `ms`.
*
* @param {string} string
* @return {string}
*/
function hyphenate(string) {
 return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],170:[function(_dereq_,module,exports){
/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

'use strict';

var hyphenate = _dereq_(169);

var msPattern = /^ms-/;

/**
* Hyphenates a camelcased CSS property name, for example:
*
*   > hyphenateStyleName('backgroundColor')
*   < "background-color"
*   > hyphenateStyleName('MozTransition')
*   < "-moz-transition"
*   > hyphenateStyleName('msTransition')
*   < "-ms-transition"
*
* As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
* is converted to `-ms-`.
*
* @param {string} string
* @return {string}
*/
function hyphenateStyleName(string) {
 return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"169":169}],171:[function(_dereq_,module,exports){
/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
*/

'use strict';

/**
* Use invariant() to assert state which your program assumes to be true.
*
* Provide sprintf-style format (only %s is supported) and arguments
* to provide information about what broke and what you were
* expecting.
*
* The invariant message will be stripped in production, but the invariant
* will remain to ensure logic does not differ in production.
*/

function invariant(condition, format, a, b, c, d, e, f) {
 if ("development" !== 'production') {
   if (format === undefined) {
     throw new Error('invariant requires an error message argument');
   }
 }

 if (!condition) {
   var error;
   if (format === undefined) {
     error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
   } else {
     var args = [a, b, c, d, e, f];
     var argIndex = 0;
     error = new Error(format.replace(/%s/g, function () {
       return args[argIndex++];
     }));
     error.name = 'Invariant Violation';
   }

   error.framesToPop = 1; // we don't care about invariant's own frame
   throw error;
 }
}

module.exports = invariant;
},{}],172:[function(_dereq_,module,exports){
'use strict';

/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

/**
* @param {*} object The object to check.
* @return {boolean} Whether or not the object is a DOM node.
*/
function isNode(object) {
 return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],173:[function(_dereq_,module,exports){
'use strict';

/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

var isNode = _dereq_(172);

/**
* @param {*} object The object to check.
* @return {boolean} Whether or not the object is a DOM text node.
*/
function isTextNode(object) {
 return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"172":172}],174:[function(_dereq_,module,exports){
/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks static-only
*/

'use strict';

var invariant = _dereq_(171);

/**
* Constructs an enumeration with keys equal to their value.
*
* For example:
*
*   var COLORS = keyMirror({blue: null, red: null});
*   var myColor = COLORS.blue;
*   var isColorValid = !!COLORS[myColor];
*
* The last line could not be performed if the values of the generated enum were
* not equal to their keys.
*
*   Input:  {key1: val1, key2: val2}
*   Output: {key1: key1, key2: key2}
*
* @param {object} obj
* @return {object}
*/
var keyMirror = function (obj) {
 var ret = {};
 var key;
 !(obj instanceof Object && !Array.isArray(obj)) ? "development" !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;
 for (key in obj) {
   if (!obj.hasOwnProperty(key)) {
     continue;
   }
   ret[key] = key;
 }
 return ret;
};

module.exports = keyMirror;
},{"171":171}],175:[function(_dereq_,module,exports){
"use strict";

/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
*/

/**
* Allows extraction of a minified key. Let's the build system minify keys
* without losing the ability to dynamically use key strings as values
* themselves. Pass in an object with a single key/val pair and it will return
* you the string key of that single record. Suppose you want to grab the
* value for a key 'className' inside of an object. Key/val minification may
* have aliased that key to be 'xa12'. keyOf({className: null}) will return
* 'xa12' in that case. Resolve keys you want to use once at startup time, then
* reuse those resolutions.
*/
var keyOf = function (oneKeyObj) {
 var key;
 for (key in oneKeyObj) {
   if (!oneKeyObj.hasOwnProperty(key)) {
     continue;
   }
   return key;
 }
 return null;
};

module.exports = keyOf;
},{}],176:[function(_dereq_,module,exports){
/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
*/

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
* Executes the provided `callback` once for each enumerable own property in the
* object and constructs a new object from the results. The `callback` is
* invoked with three arguments:
*
*  - the property value
*  - the property name
*  - the object being traversed
*
* Properties that are added after the call to `mapObject` will not be visited
* by `callback`. If the values of existing properties are changed, the value
* passed to `callback` will be the value at the time `mapObject` visits them.
* Properties that are deleted before being visited are not visited.
*
* @grep function objectMap()
* @grep function objMap()
*
* @param {?object} object
* @param {function} callback
* @param {*} context
* @return {?object}
*/
function mapObject(object, callback, context) {
 if (!object) {
   return null;
 }
 var result = {};
 for (var name in object) {
   if (hasOwnProperty.call(object, name)) {
     result[name] = callback.call(context, object[name], name, object);
   }
 }
 return result;
}

module.exports = mapObject;
},{}],177:[function(_dereq_,module,exports){
/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks static-only
*/

'use strict';

/**
* Memoizes the return value of a function that accepts one string argument.
*
* @param {function} callback
* @return {function}
*/

function memoizeStringOnly(callback) {
 var cache = {};
 return function (string) {
   if (!cache.hasOwnProperty(string)) {
     cache[string] = callback.call(this, string);
   }
   return cache[string];
 };
}

module.exports = memoizeStringOnly;
},{}],178:[function(_dereq_,module,exports){
/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

'use strict';

var ExecutionEnvironment = _dereq_(157);

var performance;

if (ExecutionEnvironment.canUseDOM) {
 performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"157":157}],179:[function(_dereq_,module,exports){
'use strict';

/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*/

var performance = _dereq_(178);

var performanceNow;

/**
* Detect if we can use `window.performance.now()` and gracefully fallback to
* `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
* because of Facebook's testing infrastructure.
*/
if (performance.now) {
 performanceNow = function () {
   return performance.now();
 };
} else {
 performanceNow = function () {
   return Date.now();
 };
}

module.exports = performanceNow;
},{"178":178}],180:[function(_dereq_,module,exports){
/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @typechecks
*
*/

/*eslint-disable no-self-compare */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
* inlined Object.is polyfill to avoid requiring consumers ship their own
* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
*/
function is(x, y) {
 // SameValue algorithm
 if (x === y) {
   // Steps 1-5, 7-10
   // Steps 6.b-6.e: +0 != -0
   return x !== 0 || 1 / x === 1 / y;
 } else {
   // Step 6.a: NaN == NaN
   return x !== x && y !== y;
 }
}

/**
* Performs equality by iterating through keys on an object and returning false
* when any key has values which are not strictly equal between the arguments.
* Returns true when the values of all keys are strictly equal.
*/
function shallowEqual(objA, objB) {
 if (is(objA, objB)) {
   return true;
 }

 if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
   return false;
 }

 var keysA = Object.keys(objA);
 var keysB = Object.keys(objB);

 if (keysA.length !== keysB.length) {
   return false;
 }

 // Test for A's keys different from B.
 for (var i = 0; i < keysA.length; i++) {
   if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
     return false;
   }
 }

 return true;
}

module.exports = shallowEqual;
},{}],181:[function(_dereq_,module,exports){
/**
* Copyright 2014-2015, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
*/

'use strict';

var emptyFunction = _dereq_(163);

/**
* Similar to invariant but only logs a warning if the condition is not met.
* This can be used to log issues in development environments in critical
* paths. Removing the logging code for production environments will keep the
* same logic and follow the same code paths.
*/

var warning = emptyFunction;

if ("development" !== 'production') {
 warning = function (condition, format) {
   for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
     args[_key - 2] = arguments[_key];
   }

   if (format === undefined) {
     throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
   }

   if (format.indexOf('Failed Composite propType: ') === 0) {
     return; // Ignore CompositeComponent proptype check.
   }

   if (!condition) {
     var argIndex = 0;
     var message = 'Warning: ' + format.replace(/%s/g, function () {
       return args[argIndex++];
     });
     if (typeof console !== 'undefined') {
       console.error(message);
     }
     try {
       // --- Welcome to debugging React ---
       // This error was thrown as a convenience so that you can use this stack
       // to find the callsite that caused this warning to fire.
       throw new Error(message);
     } catch (x) {}
   }
 };
}

module.exports = warning;
},{"163":163}],182:[function(_dereq_,module,exports){
/* eslint-disable no-unused-vars */
'use strict';
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
 if (val === null || val === undefined) {
   throw new TypeError('Object.assign cannot be called with null or undefined');
 }

 return Object(val);
}

module.exports = Object.assign || function (target, source) {
 var from;
 var to = toObject(target);
 var symbols;

 for (var s = 1; s < arguments.length; s++) {
   from = Object(arguments[s]);

   for (var key in from) {
     if (hasOwnProperty.call(from, key)) {
       to[key] = from[key];
     }
   }

   if (Object.getOwnPropertySymbols) {
     symbols = Object.getOwnPropertySymbols(from);
     for (var i = 0; i < symbols.length; i++) {
       if (propIsEnumerable.call(from, symbols[i])) {
         to[symbols[i]] = from[symbols[i]];
       }
     }
   }
 }

 return to;
};

},{}]},{},[105])(105)
});

/**
 * ReactDOM v15.0.1
 *
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */
// Based off https://github.com/ForbesLindesay/umd/blob/master/template.js
;(function(f) {
  // CommonJS
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f(require('react'));

  // RequireJS
  } else if (typeof define === "function" && define.amd) {
    define(['react'], f);

  // <script>
  } else {
    var g;
    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      // works providing we're not in "use strict";
      // needed for Java 8 Nashorn
      // see https://github.com/facebook/react/issues/3037
      g = this;
    }
    g.ReactDOM = f(g.React);
  }

})(function(React) {
  return React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
});

/**
 * ReactDOMServer v15.1.0
 *
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */
// Based off https://github.com/ForbesLindesay/umd/blob/master/template.js
;(function(f) {
  // CommonJS
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f(require('react'));

  // RequireJS
  } else if (typeof define === "function" && define.amd) {
    define(['react'], f);

  // <script>
  } else {
    var g;
    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      // works providing we're not in "use strict";
      // needed for Java 8 Nashorn
      // see https://github.com/facebook/react/issues/3037
      g = this;
    }
    g.ReactDOMServer = f(g.React);
  }

})(function(React) {
  return React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
});
Opal.loaded(["react-latest"]);
/* Generated by Opal 0.9.4 */
Opal.modules["react/hash"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$alias_method', '$_pre_react_patch_initialize', '$to_proc']);
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    self.$alias_method("_pre_react_patch_initialize", "initialize");

    return (Opal.defn(self, '$initialize', TMP_1 = function(defaults) {
      var $a, $b, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if ((($a = (defaults===null)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self).$_pre_react_patch_initialize, $a.$$p = block.$to_proc(), $a).call($b)
        } else {
        return ($a = ($c = self).$_pre_react_patch_initialize, $a.$$p = block.$to_proc(), $a).call($c, defaults)
      };
    }), nil) && 'initialize';
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/array/extract_options"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_of?', '$is_a?', '$last', '$extractable_options?', '$pop']);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$extractable_options?', function() {
      var self = this;

      return self['$instance_of?']($scope.get('Hash'));
    }), nil) && 'extractable_options?'
  })($scope.base, null);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$extract_options!', function() {
      var $a, $b, self = this;

      if ((($a = ($b = self.$last()['$is_a?']($scope.get('Hash')), $b !== false && $b !== nil ?self.$last()['$extractable_options?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$pop()
        } else {
        return $hash2([], {})
      };
    }), nil) && 'extract_options!'
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/array/wrap"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$nil?', '$respond_to?', '$to_ary']);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defs(self, '$wrap', function(object) {
      var $a, self = this;

      if ((($a = object['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return []
      } else if ((($a = object['$respond_to?']("to_ary")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ((($a = object.$to_ary()) !== false && $a !== nil) ? $a : [object])
        } else {
        return [object]
      };
    }), nil) && 'wrap'
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/array/grouping"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$%', '$-', '$size', '$concat', '$dup', '$*', '$each_slice', '$<<', '$div', '$times', '$+', '$>', '$slice', '$!=', '$each', '$inject', '$call', '$last']);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5, TMP_7;

    Opal.defn(self, '$in_groups_of', TMP_1 = function(number, fill_with) {
      var $a, $b, TMP_2, $c, TMP_3, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, collection = nil, padding = nil, groups = nil;

      if (fill_with == null) {
        fill_with = nil
      }
      TMP_1.$$p = null;
      if (fill_with['$=='](false)) {
        collection = self
        } else {
        padding = ($rb_minus(number, self.$size()['$%'](number)))['$%'](number);
        collection = self.$dup().$concat($rb_times([fill_with], padding));
      };
      if (($yield !== nil)) {
        return ($a = ($b = collection).$each_slice, $a.$$p = (TMP_2 = function(slice){var self = TMP_2.$$s || this, $a;
if (slice == null) slice = nil;
        return $a = Opal.yield1($yield, slice), $a === $breaker ? $a : $a}, TMP_2.$$s = self, TMP_2), $a).call($b, number)
        } else {
        groups = [];
        ($a = ($c = collection).$each_slice, $a.$$p = (TMP_3 = function(group){var self = TMP_3.$$s || this;
if (group == null) group = nil;
        return groups['$<<'](group)}, TMP_3.$$s = self, TMP_3), $a).call($c, number);
        return groups;
      };
    });

    Opal.defn(self, '$in_groups', TMP_5 = function(number, fill_with) {
      var $a, $b, TMP_4, $c, TMP_6, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, division = nil, modulo = nil, groups = nil, start = nil;

      if (fill_with == null) {
        fill_with = nil
      }
      TMP_5.$$p = null;
      division = self.$size().$div(number);
      modulo = self.$size()['$%'](number);
      groups = [];
      start = 0;
      ($a = ($b = number).$times, $a.$$p = (TMP_4 = function(index){var self = TMP_4.$$s || this, $a, $b, $c, length = nil, last_group = nil;
if (index == null) index = nil;
      length = $rb_plus(division, ((function() {if ((($a = ($b = $rb_gt(modulo, 0), $b !== false && $b !== nil ?$rb_gt(modulo, index) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return 1
          } else {
          return 0
        }; return nil; })()));
        groups['$<<'](last_group = self.$slice(start, length));
        if ((($a = ($b = ($c = fill_with['$!='](false), $c !== false && $c !== nil ?$rb_gt(modulo, 0) : $c), $b !== false && $b !== nil ?length['$=='](division) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          last_group['$<<'](fill_with)};
        return start = $rb_plus(start, length);}, TMP_4.$$s = self, TMP_4), $a).call($b);
      if (($yield !== nil)) {
        return ($a = ($c = groups).$each, $a.$$p = (TMP_6 = function(g){var self = TMP_6.$$s || this, $a;
if (g == null) g = nil;
        return $a = Opal.yield1($yield, g), $a === $breaker ? $a : $a}, TMP_6.$$s = self, TMP_6), $a).call($c)
        } else {
        return groups
      };
    });

    return (Opal.defn(self, '$split', TMP_7 = function(value) {
      var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, block = $iter || nil;

      if (value == null) {
        value = nil
      }
      TMP_7.$$p = null;
      return ($a = ($b = self).$inject, $a.$$p = (TMP_8 = function(results, element){var self = TMP_8.$$s || this, $a, $b, $c;
if (results == null) results = nil;if (element == null) element = nil;
      if ((($a = ((($b = (($c = block !== false && block !== nil) ? block.$call(element) : block)) !== false && $b !== nil) ? $b : value['$=='](element))) !== nil && (!$a.$$is_boolean || $a == true))) {
          results['$<<']([])
          } else {
          results.$last()['$<<'](element)
        };
        return results;}, TMP_8.$$s = self, TMP_8), $a).call($b, [[]]);
    }), nil) && 'split';
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/array"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/core_ext/array/extract_options");
  self.$require("active_support/core_ext/array/wrap");
  return self.$require("active_support/core_ext/array/grouping");
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/kernel/singleton_class"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$class_eval', '$to_proc', '$singleton_class']);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$class_eval', TMP_1 = function() {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_1.$$p = null;
      return ($a = ($b = self.$singleton_class()).$class_eval, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args));
    })
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/module/remove_method"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$method_defined?', '$private_method_defined?', '$undef_method', '$remove_possible_method', '$define_method', '$to_proc']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$remove_possible_method', function(method) {
      var $a, $b, self = this;

      if ((($a = ((($b = self['$method_defined?'](method)) !== false && $b !== nil) ? $b : self['$private_method_defined?'](method))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.$undef_method(method)
        } else {
        return nil
      };
    });

    return (Opal.defn(self, '$redefine_method', TMP_1 = function(method) {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      self.$remove_possible_method(method);
      return ($a = ($b = self).$define_method, $a.$$p = block.$to_proc(), $a).call($b, method);
    }), nil) && 'redefine_method';
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/class/attribute"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$extract_options!', '$fetch', '$each', '$define_singleton_method', '$!', '$public_send', '$class_eval', '$remove_possible_method', '$define_method', '$singleton_class', '$singleton_class?', '$instance_variable_defined?', '$instance_variable_get', '$send', '$class', '$attr_writer', '$private', '$respond_to?', '$!=', '$first', '$ancestors']);
  self.$require("active_support/core_ext/kernel/singleton_class");
  self.$require("active_support/core_ext/module/remove_method");
  self.$require("active_support/core_ext/array/extract_options");
  return (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, $a;

    Opal.defn(self, '$class_attribute', function() {
      var $a, $b, TMP_1, self = this, options = nil, instance_reader = nil, instance_writer = nil, instance_predicate = nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var attrs = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        attrs[$splat_index] = arguments[$splat_index + 0];
      }
      options = attrs['$extract_options!']();
      instance_reader = ($a = options.$fetch("instance_accessor", true), $a !== false && $a !== nil ?options.$fetch("instance_reader", true) : $a);
      instance_writer = ($a = options.$fetch("instance_accessor", true), $a !== false && $a !== nil ?options.$fetch("instance_writer", true) : $a);
      instance_predicate = options.$fetch("instance_predicate", true);
      return ($a = ($b = attrs).$each, $a.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_9, $f, TMP_10, ivar = nil;
if (name == null) name = nil;
      ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2), $a).call($b, name);
        if (instance_predicate !== false && instance_predicate !== nil) {
          ($a = ($c = self).$define_singleton_method, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$public_send(name)['$!']()['$!']()}, TMP_3.$$s = self, TMP_3), $a).call($c, "" + (name) + "?")};
        ivar = "@" + (name);
        ($a = ($d = self).$define_singleton_method, $a.$$p = (TMP_4 = function(val){var self = TMP_4.$$s || this, $a, $b, TMP_5, $c, TMP_7;
if (val == null) val = nil;
        ($a = ($b = self.$singleton_class()).$class_eval, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $a, $b, TMP_6;

          self.$remove_possible_method(name);
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return val}, TMP_6.$$s = self, TMP_6), $a).call($b, name);}, TMP_5.$$s = self, TMP_5), $a).call($b);
          if ((($a = self['$singleton_class?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            ($a = ($c = self).$class_eval, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b, TMP_8;

            self.$remove_possible_method(name);
              return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $a;

              if ((($a = self['$instance_variable_defined?'](ivar)) !== nil && (!$a.$$is_boolean || $a == true))) {
                  return self.$instance_variable_get(ivar)
                  } else {
                  return self.$singleton_class().$send(name)
                }}, TMP_8.$$s = self, TMP_8), $a).call($b, name);}, TMP_7.$$s = self, TMP_7), $a).call($c)};
          return val;}, TMP_4.$$s = self, TMP_4), $a).call($d, "" + (name) + "=");
        if (instance_reader !== false && instance_reader !== nil) {
          self.$remove_possible_method(name);
          ($a = ($e = self).$define_method, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $a;

          if ((($a = self['$instance_variable_defined?'](ivar)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$instance_variable_get(ivar)
              } else {
              return self.$class().$public_send(name)
            }}, TMP_9.$$s = self, TMP_9), $a).call($e, name);
          if (instance_predicate !== false && instance_predicate !== nil) {
            ($a = ($f = self).$define_method, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.$public_send(name)['$!']()['$!']()}, TMP_10.$$s = self, TMP_10), $a).call($f, "" + (name) + "?")};};
        if (instance_writer !== false && instance_writer !== nil) {
          return self.$attr_writer(name)
          } else {
          return nil
        };}, TMP_1.$$s = self, TMP_1), $a).call($b);
    });

    self.$private();

    if ((($a = self['$respond_to?']("singleton_class?")) !== nil && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return (Opal.defn(self, '$singleton_class?', function() {
        var $a, self = this;

        return ((($a = true) !== false && $a !== nil) ? $a : self.$ancestors().$first()['$!='](self));
      }), nil) && 'singleton_class?'
    };
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/class"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/class/attribute")
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/enumerable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$enum_for', '$new', '$destructure', '$[]=']);
  return (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$index_by', TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil, hash = nil;

      TMP_1.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("index_by")
      };
      hash = $scope.get('Hash').$new();
      
      var result;

      self.$each._p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        hash['$[]='](value, param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return hash;
    })
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/hash_with_indifferent_access"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$dup', '$respond_to?', '$update', '$to_hash', '$tap', '$default=', '$default', '$default_proc', '$default_proc=', '$new']);
  return (function($base) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $HashWithIndifferentAccess(){};
      var self = $HashWithIndifferentAccess = $klass($base, $super, 'HashWithIndifferentAccess', $HashWithIndifferentAccess);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      Opal.defn(self, '$extractable_options?', function() {
        var self = this;

        return true;
      });

      Opal.defn(self, '$with_indifferent_access', function() {
        var self = this;

        return self.$dup();
      });

      Opal.defn(self, '$nested_under_indifferent_access', function() {
        var self = this;

        return self;
      });

      Opal.defn(self, '$initialize', TMP_1 = function(constructor) {
        var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        if (constructor == null) {
          constructor = $hash2([], {})
        }
        TMP_1.$$p = null;
        if ((($a = constructor['$respond_to?']("to_hash")) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, []);
          return self.$update(constructor);
          } else {
          return Opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [constructor])
        };
      });

      return (Opal.defs(self, '$new_from_hash_copying_default', function(hash) {
        var $a, $b, TMP_2, self = this;

        hash = hash.$to_hash();
        return ($a = ($b = self.$new(hash)).$tap, $a.$$p = (TMP_2 = function(new_hash){var self = TMP_2.$$s || this, $a, $b;
if (new_hash == null) new_hash = nil;
        (($a = [hash.$default()]), $b = new_hash, $b['$default='].apply($b, $a), $a[$a.length-1]);
          if ((($a = hash.$default_proc()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return (($a = [hash.$default_proc()]), $b = new_hash, $b['$default_proc='].apply($b, $a), $a[$a.length-1])
            } else {
            return nil
          };}, TMP_2.$$s = self, TMP_2), $a).call($b);
      }), nil) && 'new_from_hash_copying_default';
    })($scope.base, $scope.get('Hash'))
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/hash/indifferent_access"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$new_from_hash_copying_default']);
  self.$require("active_support/hash_with_indifferent_access");
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$with_indifferent_access', function() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('HashWithIndifferentAccess')).$new_from_hash_copying_default(self);
    });

    return Opal.alias(self, 'nested_under_indifferent_access', 'with_indifferent_access');
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/hash"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/hash/indifferent_access")
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/numeric/time"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$*', '$hours', '$days', '$weeks', '$-', '$current', '$+']);
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$seconds', function() {
      var self = this;

      return self;
    });

    Opal.alias(self, 'second', 'seconds');

    Opal.defn(self, '$minutes', function() {
      var self = this;

      return $rb_times(self, 60);
    });

    Opal.alias(self, 'minute', 'minutes');

    Opal.defn(self, '$hours', function() {
      var self = this;

      return $rb_times(self, 3600);
    });

    Opal.alias(self, 'hour', 'hours');

    Opal.defn(self, '$days', function() {
      var self = this;

      return $rb_times(self, (24).$hours());
    });

    Opal.alias(self, 'day', 'days');

    Opal.defn(self, '$weeks', function() {
      var self = this;

      return $rb_times(self, (7).$days());
    });

    Opal.alias(self, 'week', 'weeks');

    Opal.defn(self, '$fortnights', function() {
      var self = this;

      return $rb_times(self, (2).$weeks());
    });

    Opal.alias(self, 'fortnight', 'fortnights');

    Opal.defn(self, '$ago', function(time) {
      var self = this;

      if (time == null) {
        time = Opal.get('Time').$current()
      }
      return $rb_minus(time, self);
    });

    Opal.alias(self, 'until', 'ago');

    Opal.defn(self, '$since', function(time) {
      var self = this;

      if (time == null) {
        time = Opal.get('Time').$current()
      }
      return $rb_plus(time, self);
    });

    return Opal.alias(self, 'from_now', 'since');
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/integer/time"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$*', '$days']);
  self.$require("active_support/core_ext/numeric/time");
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$months', function() {
      var self = this;

      return $rb_times(self, (30).$days());
    });

    Opal.alias(self, 'month', 'months');

    Opal.defn(self, '$years', function() {
      var self = this;

      return $rb_times(self, (365.25).$days());
    });

    return Opal.alias(self, 'year', 'years');
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/integer"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/integer/time")
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/kernel"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/kernel/singleton_class")
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/inflector/inflections"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$extend', '$instance', '$split', '$empty?', '$const_get', '$>', '$size', '$first', '$shift', '$inject', '$==', '$const_defined?', '$ancestors', '$apply_inflections', '$plurals', '$inflections', '$singulars', '$to_s', '$include?', '$uncountables', '$downcase', '$each', '$sub', '$new', '$attr_reader', '$unshift', '$<<']);
  self.$require("set");
  return (function($base) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Inflector, self = $Inflector = $module($base, 'Inflector');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.$extend(self);

      Opal.defn(self, '$inflections', TMP_1 = function() {
        var $a, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        TMP_1.$$p = null;
        if (($yield !== nil)) {
          return $a = Opal.yield1($yield, $scope.get('Inflections').$instance()), $a === $breaker ? $a : $a
          } else {
          return $scope.get('Inflections').$instance()
        };
      });

      Opal.defn(self, '$constantize', function(camel_cased_word) {
        var $a, $b, TMP_2, self = this, names = nil;

        names = camel_cased_word.$split("::");
        if ((($a = names['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          $scope.get('Object').$const_get(camel_cased_word)};
        if ((($a = ($b = $rb_gt(names.$size(), 1), $b !== false && $b !== nil ?names.$first()['$empty?']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          names.$shift()};
        return ($a = ($b = names).$inject, $a.$$p = (TMP_2 = function(constant, name){var self = TMP_2.$$s || this, $a, $b, TMP_3, candidate = nil;
if (constant == null) constant = nil;if (name == null) name = nil;
        if (constant['$==']($scope.get('Object'))) {
            return constant.$const_get(name)
            } else {
            candidate = constant.$const_get(name);
            if ((($a = constant['$const_defined?'](name, false)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return candidate;};
            if ((($a = $scope.get('Object')['$const_defined?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              } else {
              return candidate;
            };
            constant = ($a = ($b = constant.$ancestors()).$inject, $a.$$p = (TMP_3 = function(const$, ancestor){var self = TMP_3.$$s || this, $a;
if (const$ == null) const$ = nil;if (ancestor == null) ancestor = nil;
            if (ancestor['$==']($scope.get('Object'))) {
                return ($breaker.$v = const$, $breaker)};
              if ((($a = ancestor['$const_defined?'](name, false)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return ($breaker.$v = ancestor, $breaker)};
              return const$;}, TMP_3.$$s = self, TMP_3), $a).call($b);
            return constant.$const_get(name, false);
          }}, TMP_2.$$s = self, TMP_2), $a).call($b, $scope.get('Object'));
      });

      Opal.defn(self, '$pluralize', function(word) {
        var self = this;

        return self.$apply_inflections(word, self.$inflections().$plurals());
      });

      Opal.defn(self, '$singularize', function(word) {
        var self = this;

        return self.$apply_inflections(word, self.$inflections().$singulars());
      });

      Opal.defn(self, '$apply_inflections', function(word, rules) {
        var $a, $b, TMP_4, self = this, result = nil;

        result = word.$to_s();
        if ((($a = self.$inflections().$uncountables()['$include?'](result.$downcase())) !== nil && (!$a.$$is_boolean || $a == true))) {
          return result
          } else {
          ($a = ($b = rules).$each, $a.$$p = (TMP_4 = function(rule, replacement){var self = TMP_4.$$s || this, changed = nil;
if (rule == null) rule = nil;if (replacement == null) replacement = nil;
          changed = result.$sub(rule, replacement);
            if (changed['$=='](result)) {
              return nil
              } else {
              result = changed;
              return ($breaker.$v = nil, $breaker);
            };}, TMP_4.$$s = self, TMP_4), $a).call($b);
          return result;
        };
      });

      (function($base, $super) {
        function $Inflections(){};
        var self = $Inflections = $klass($base, $super, 'Inflections', $Inflections);

        var def = self.$$proto, $scope = self.$$scope;

        def.plurals = def.singulars = nil;
        Opal.defs(self, '$instance', function() {
          var $a, self = this;
          if (self.__instance__ == null) self.__instance__ = nil;

          return ((($a = self.__instance__) !== false && $a !== nil) ? $a : self.__instance__ = self.$new());
        });

        self.$attr_reader("plurals", "singulars", "uncountables");

        Opal.defn(self, '$initialize', function() {
          var $a, self = this;

          return $a = [[], [], $scope.get('Set').$new()], self.plurals = $a[0], self.singulars = $a[1], self.uncountables = $a[2], $a;
        });

        Opal.defn(self, '$plural', function(rule, replacement) {
          var self = this;

          return self.plurals.$unshift([rule, replacement]);
        });

        Opal.defn(self, '$singular', function(rule, replacement) {
          var self = this;

          return self.singulars.$unshift([rule, replacement]);
        });

        Opal.defn(self, '$uncountable', function(words) {
          var $a, $b, TMP_5, self = this;

          return ($a = ($b = words).$each, $a.$$p = (TMP_5 = function(w){var self = TMP_5.$$s || this;
            if (self.uncountables == null) self.uncountables = nil;
if (w == null) w = nil;
          return self.uncountables['$<<'](w.$downcase())}, TMP_5.$$s = self, TMP_5), $a).call($b);
        });

        return (Opal.defn(self, '$irregular', function() {
          var self = this;

          return nil;
        }), nil) && 'irregular';
      })($scope.base, null);
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/inflections"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$inflections', '$plural', '$singular', '$irregular', '$uncountable']);
  return (function($base) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

    ($a = ($b = $scope.get('Inflector')).$inflections, $a.$$p = (TMP_1 = function(inflect){var self = TMP_1.$$s || this;
if (inflect == null) inflect = nil;
    inflect.$plural(/$/, "s");
      inflect.$plural(/s$/i, "s");
      inflect.$plural(/^(ax|test)is$/i, "\\1es");
      inflect.$plural(/(octop|vir)us$/i, "\\1i");
      inflect.$plural(/(octop|vir)i$/i, "\\1i");
      inflect.$plural(/(alias|status)$/i, "\\1es");
      inflect.$plural(/(bu)s$/i, "\\1ses");
      inflect.$plural(/(buffal|tomat)o$/i, "\\1oes");
      inflect.$plural(/([ti])um$/i, "\\1a");
      inflect.$plural(/([ti])a$/i, "\\1a");
      inflect.$plural(/sis$/i, "ses");
      inflect.$plural(/(?:([^f])fe|([lr])f)$/i, "\\1\\2ves");
      inflect.$plural(/(hive)$/i, "\\1s");
      inflect.$plural(/([^aeiouy]|qu)y$/i, "\\1ies");
      inflect.$plural(/(x|ch|ss|sh)$/i, "\\1es");
      inflect.$plural(/(matr|vert|ind)(?:ix|ex)$/i, "\\1ices");
      inflect.$plural(/^(m|l)ouse$/i, "\\1ice");
      inflect.$plural(/^(m|l)ice$/i, "\\1ice");
      inflect.$plural(/^(ox)$/i, "\\1en");
      inflect.$plural(/^(oxen)$/i, "\\1");
      inflect.$plural(/(quiz)$/i, "\\1zes");
      inflect.$singular(/s$/i, "");
      inflect.$singular(/(ss)$/i, "\\1");
      inflect.$singular(/(n)ews$/i, "\\1ews");
      inflect.$singular(/([ti])a$/i, "\\1um");
      inflect.$singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/(^analy)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/([^f])ves$/i, "\\1fe");
      inflect.$singular(/(hive)s$/i, "\\1");
      inflect.$singular(/(tive)s$/i, "\\1");
      inflect.$singular(/([lr])ves$/i, "\\1f");
      inflect.$singular(/([^aeiouy]|qu)ies$/i, "\\1y");
      inflect.$singular(/(s)eries$/i, "\\1eries");
      inflect.$singular(/(m)ovies$/i, "\\1ovie");
      inflect.$singular(/(x|ch|ss|sh)es$/i, "\\1");
      inflect.$singular(/^(m|l)ice$/i, "\\1ouse");
      inflect.$singular(/(bus)(es)?$/i, "\\1");
      inflect.$singular(/(o)es$/i, "\\1");
      inflect.$singular(/(shoe)s$/i, "\\1");
      inflect.$singular(/(cris|test)(is|es)$/i, "\\1is");
      inflect.$singular(/^(a)x[ie]s$/i, "\\1xis");
      inflect.$singular(/(octop|vir)(us|i)$/i, "\\1us");
      inflect.$singular(/(alias|status)(es)?$/i, "\\1");
      inflect.$singular(/^(ox)en/i, "\\1");
      inflect.$singular(/(vert|ind)ices$/i, "\\1ex");
      inflect.$singular(/(matr)ices$/i, "\\1ix");
      inflect.$singular(/(quiz)zes$/i, "\\1");
      inflect.$singular(/(database)s$/i, "\\1");
      inflect.$irregular("person", "people");
      inflect.$irregular("man", "men");
      inflect.$irregular("child", "children");
      inflect.$irregular("sex", "sexes");
      inflect.$irregular("move", "moves");
      inflect.$irregular("zombie", "zombies");
      return inflect.$uncountable(["equipment", "information", "rice", "money", "species", "series", "fish", "sheep", "jeans", "police"]);}, TMP_1.$$s = self, TMP_1), $a).call($b, "en")
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/inflector"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/inflector/inflections");
  return self.$require("active_support/inflections");
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/module/introspection"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$=~', '$name', '$freeze', '$parent_name', '$constantize', '$split', '$empty?', '$<<', '$*', '$pop', '$include?', '$constants']);
  self.$require("active_support/inflector");
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope;

    def.parent_name = nil;
    Opal.defn(self, '$parent_name', function() {
      var $a, $b, self = this;

      if ((($a = (($b = self['parent_name'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self.parent_name
        } else {
        return self.parent_name = (function() {if ((($a = self.$name()['$=~'](/::[^:]+$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (($a = $gvars['~']) === nil ? nil : $a.$pre_match()).$freeze()
          } else {
          return nil
        }; return nil; })()
      };
    });

    Opal.defn(self, '$parent', function() {
      var $a, self = this;

      if ((($a = self.$parent_name()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$constantize(self.$parent_name())
        } else {
        return $scope.get('Object')
      };
    });

    Opal.defn(self, '$parents', function() {
      var $a, $b, self = this, parents = nil, parts = nil;

      parents = [];
      if ((($a = self.$parent_name()) !== nil && (!$a.$$is_boolean || $a == true))) {
        parts = self.$parent_name().$split("::");
        while (!((($b = parts['$empty?']()) !== nil && (!$b.$$is_boolean || $b == true)))) {
        parents['$<<']((($scope.get('ActiveSupport')).$$scope.get('Inflector')).$constantize($rb_times(parts, "::")));
        parts.$pop();};};
      if ((($a = parents['$include?']($scope.get('Object'))) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        parents['$<<']($scope.get('Object'))
      };
      return parents;
    });

    return (Opal.defn(self, '$local_constants', function() {
      var self = this;

      return self.$constants(false);
    }), nil) && 'local_constants';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/module/delegation"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$pop', '$is_a?', '$[]', '$raise', '$values_at', '$==', '$=~', '$to_s', '$each', '$+', '$lambda', '$start_with?', '$__send__', '$new', '$inspect', '$define_method', '$to_proc']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $DelegationError(){};
      var self = $DelegationError = $klass($base, $super, 'DelegationError', $DelegationError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('NoMethodError'));

    return (Opal.defn(self, '$delegate', function() {
      var $a, $b, TMP_1, self = this, options = nil, to = nil, prefix = nil, allow_nil = nil, method_prefix = nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var methods = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        methods[$splat_index] = arguments[$splat_index + 0];
      }
      options = methods.$pop();
      if ((($a = ($b = options['$is_a?']($scope.get('Hash')), $b !== false && $b !== nil ?to = options['$[]']("to") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "Delegation needs a target. Supply an options hash with a :to key as the last argument (e.g. delegate :hello, to: :greeter).")
      };
      $b = options.$values_at("prefix", "allow_nil"), $a = Opal.to_ary($b), prefix = ($a[0] == null ? nil : $a[0]), allow_nil = ($a[1] == null ? nil : $a[1]), $b;
      if ((($a = (($b = prefix['$=='](true)) ? to['$=~'](/^[^a-z_]/) : prefix['$=='](true))) !== nil && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "Can only automatically set the delegation prefix when delegating to a method.")};
      method_prefix = (function() {if (prefix !== false && prefix !== nil) {
        return "" + ((function() {if (prefix['$=='](true)) {
          return to
          } else {
          return prefix
        }; return nil; })()) + "_"
        } else {
        return ""
      }; return nil; })();
      to = to.$to_s();
      return ($a = ($b = methods).$each, $a.$$p = (TMP_1 = function(method){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, has_block = nil, method_name = nil, resolve_to = nil, exception = nil;
if (method == null) method = nil;
      has_block = (function() {if ((($a = (method['$=~'](/[^\]]=$/))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return false
          } else {
          return true
        }; return nil; })();
        method_name = $rb_plus(method_prefix, method);
        resolve_to = ($a = ($b = self).$lambda, $a.$$p = (TMP_2 = function(scope){var self = TMP_2.$$s || this, $a, ivar_name = nil;
if (scope == null) scope = nil;
        if ((($a = to['$start_with?']("@")) !== nil && (!$a.$$is_boolean || $a == true))) {
            ivar_name = to['$[]']($range(1, -1, false));
            return scope[ivar_name];
            } else {
            return scope.$__send__(to)
          }}, TMP_2.$$s = self, TMP_2), $a).call($b);
        exception = ($a = ($c = self).$lambda, $a.$$p = (TMP_3 = function(scope){var self = TMP_3.$$s || this;
if (scope == null) scope = nil;
        return $scope.get('DelegationError').$new("" + (scope) + (method_name) + " delegated to " + (to) + "." + (method) + " but " + (to) + " is nil: " + (scope.$inspect()), method_name)}, TMP_3.$$s = self, TMP_3), $a).call($c);
        if (has_block !== false && has_block !== nil) {
          return ($a = ($d = self).$define_method, $a.$$p = (TMP_4 = function(args){var self = TMP_4.$$s || this, block, $a, $b, to_resolved = nil;
args = $slice.call(arguments, 0);
            block = TMP_4.$$p || nil, TMP_4.$$p = null;
          to_resolved = resolve_to['$[]'](self);
            if (to_resolved !== false && to_resolved !== nil) {
              } else {
              if (allow_nil !== false && allow_nil !== nil) {
                return nil;};
              self.$raise(exception['$[]'](self));
            };
            return ($a = ($b = to_resolved).$__send__, $a.$$p = block.$to_proc(), $a).apply($b, [method].concat(Opal.to_a(args)));}, TMP_4.$$s = self, TMP_4), $a).call($d, method_name)
          } else {
          return ($a = ($e = self).$define_method, $a.$$p = (TMP_5 = function(arg){var self = TMP_5.$$s || this, to_resolved = nil;
if (arg == null) arg = nil;
          to_resolved = resolve_to['$[]'](self);
            if (to_resolved !== false && to_resolved !== nil) {
              } else {
              if (allow_nil !== false && allow_nil !== nil) {
                return nil;};
              self.$raise(exception['$[]'](self));
            };
            return to_resolved.$__send__(method, arg);}, TMP_5.$$s = self, TMP_5), $a).call($e, method_name)
        };}, TMP_1.$$s = self, TMP_1), $a).call($b);
    }), nil) && 'delegate';
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/module"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/core_ext/module/introspection");
  self.$require("active_support/core_ext/module/remove_method");
  return self.$require("active_support/core_ext/module/delegation");
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/numeric/calculations"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return (function(self) {
    var $scope = self.$$scope, def = self.$$proto;

    return Opal.alias(self, 'current', 'now')
  })(Opal.get_singleton_class($scope.get('Time')))
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/numeric"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/core_ext/numeric/time");
  return self.$require("active_support/core_ext/numeric/calculations");
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/object/blank"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$respond_to?', '$empty?', '$!', '$blank?', '$present?', '$==', '$alias_method', '$!~']);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$blank?', function() {
      var $a, self = this;

      if ((($a = self['$respond_to?']("empty?")) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self['$empty?']()
        } else {
        return self['$!']()
      };
    });

    Opal.defn(self, '$present?', function() {
      var self = this;

      return self['$blank?']()['$!']();
    });

    return (Opal.defn(self, '$presence', function() {
      var $a, self = this;

      if ((($a = self['$present?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return nil
      };
    }), nil) && 'presence';
  })($scope.base, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$blank?', function() {
      var self = this;

      return true;
    }), nil) && 'blank?'
  })($scope.base, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$blank?', function() {
      var self = this;

      return self['$=='](false);
    }), nil) && 'blank?'
  })($scope.base, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$alias_method("blank?", "empty?")
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$alias_method("blank?", "empty?")
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$blank?', function() {
      var self = this;

      return self['$!~'](/[^\s　]/);
    }), nil) && 'blank?'
  })($scope.base, null);
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$blank?', function() {
      var self = this;

      return false;
    }), nil) && 'blank?'
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/object/try"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$empty?', '$respond_to?', '$first', '$try!', '$to_proc', '$zero?', '$arity', '$instance_eval', '$public_send']);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$try', TMP_1 = function() {
      var $a, $b, self = this, $iter = TMP_1.$$p, b = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var a = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        a[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_1.$$p = null;
      if ((($a = ((($b = a['$empty?']()) !== false && $b !== nil) ? $b : self['$respond_to?'](a.$first()))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self)['$try!'], $a.$$p = b.$to_proc(), $a).apply($b, Opal.to_a(a))
        } else {
        return nil
      };
    });

    return (Opal.defn(self, '$try!', TMP_2 = function() {
      var $a, $b, $c, self = this, $iter = TMP_2.$$p, b = $iter || nil, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var a = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        a[$splat_index] = arguments[$splat_index + 0];
      }
      TMP_2.$$p = null;
      if ((($a = ($b = a['$empty?'](), $b !== false && $b !== nil ?(b !== nil) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = b.$arity()['$zero?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$instance_eval, $a.$$p = b.$to_proc(), $a).call($b)
          } else {
          return $a = Opal.yield1(b, self), $a === $breaker ? $a : $a
        }
        } else {
        return ($a = ($c = self).$public_send, $a.$$p = b.$to_proc(), $a).apply($c, Opal.to_a(a))
      };
    }), nil) && 'try!';
  })($scope.base, null);
  return (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$try', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      return nil;
    });

    return (Opal.defn(self, '$try!', function() {
      var self = this, $splat_index = nil;

      var array_size = arguments.length - 0;
      if(array_size < 0) array_size = 0;
      var args = new Array(array_size);
      for($splat_index = 0; $splat_index < array_size; $splat_index++) {
        args[$splat_index] = arguments[$splat_index + 0];
      }
      return nil;
    }), nil) && 'try!';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/object"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/core_ext/object/blank");
  return self.$require("active_support/core_ext/object/try");
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/string/inflections"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$pluralize', '$singularize', '$constantize']);
  self.$require("active_support/inflector");
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$pluralize', function() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$pluralize(self);
    });

    Opal.defn(self, '$singularize', function() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$singularize(self);
    });

    return (Opal.defn(self, '$constantize', function() {
      var self = this;

      return (($scope.get('ActiveSupport')).$$scope.get('Inflector')).$constantize(self);
    }), nil) && 'constantize';
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext/string"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$gsub', '$strip', '$downcase', '$underscore', '$alias_method']);
  self.$require("active_support/core_ext/string/inflections");
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$parameterize', function() {
      var self = this;

      return self.$downcase().$strip().$gsub(/\W+/, "-");
    });

    Opal.defn(self, '$dasherize', function() {
      var self = this;

      return self.replace(/[-_\s]+/g, '-')
            .replace(/([A-Z\d]+)([A-Z][a-z])/g, '$1-$2')
            .replace(/([a-z\d])([A-Z])/g, '$1-$2')
            .toLowerCase();
    });

    Opal.defn(self, '$demodulize', function() {
      var self = this;

      
      var idx = self.lastIndexOf('::');

      if (idx > -1) {
        return self.substr(idx + 2);
      }

      return self;
    ;
    });

    Opal.defn(self, '$underscore', function() {
      var self = this;

      return self.replace(/[-\s]+/g, '_')
    .replace(/([A-Z\d]+)([A-Z][a-z])/g, '$1_$2')
    .replace(/([a-z\d])([A-Z])/g, '$1_$2')
    .replace(/-/g, '_')
    .toLowerCase();
    });

    Opal.defn(self, '$camelize', function(first_letter) {
      var self = this;

      if (first_letter == null) {
        first_letter = "upper"
      }
      return self.$underscore().replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = first_letter === "upper" || index > 0;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    });
    });

    return self.$alias_method("camelcase", "camelize");
  })($scope.base, null);
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support/core_ext"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("active_support/core_ext/array");
  self.$require("active_support/core_ext/class");
  self.$require("active_support/core_ext/enumerable");
  self.$require("active_support/core_ext/hash");
  self.$require("active_support/core_ext/integer");
  self.$require("active_support/core_ext/kernel");
  self.$require("active_support/core_ext/module");
  self.$require("active_support/core_ext/numeric");
  self.$require("active_support/core_ext/object");
  return self.$require("active_support/core_ext/string");
};

/* Generated by Opal 0.9.4 */
Opal.modules["active_support"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext")
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/component/base"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Base(){};
        var self = $Base = $klass($base, $super, 'Base', $Base);

        var def = self.$$proto, $scope = self.$$scope;

        return (Opal.defs(self, '$inherited', function(child) {
          var self = this;

          return child.$include($scope.get('Component'));
        }), nil) && 'inherited'
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/top_level"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var $a, $b, TMP_7, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$create_element', '$to_proc', '$!', '$Native', '$to_n', '$raise', '$include', '$class', '$kind_of?', '$build', '$const_defined?', '$instance_eval', '$respond_to?', '$dom_node', '$find', '$define_method', '$new', '$class_eval', '$render']);
  self.$require("native");
  self.$require("active_support");
  self.$require("react/component/base");
  (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.cdecl($scope, 'ATTRIBUTES', ["accept", "acceptCharset", "accessKey", "action", "allowFullScreen", "allowTransparency", "alt", "async", "autoComplete", "autoPlay", "cellPadding", "cellSpacing", "charSet", "checked", "classID", "className", "cols", "colSpan", "content", "contentEditable", "contextMenu", "controls", "coords", "crossOrigin", "data", "dateTime", "defer", "dir", "disabled", "download", "draggable", "encType", "form", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "height", "hidden", "href", "hrefLang", "htmlFor", "httpEquiv", "icon", "id", "label", "lang", "list", "loop", "manifest", "marginHeight", "marginWidth", "max", "maxLength", "media", "mediaGroup", "method", "min", "multiple", "muted", "name", "noValidate", "open", "pattern", "placeholder", "poster", "preload", "radioGroup", "readOnly", "rel", "required", "role", "rows", "rowSpan", "sandbox", "scope", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "spellCheck", "src", "srcDoc", "srcSet", "start", "step", "style", "tabIndex", "target", "title", "type", "useMap", "value", "width", "wmode", "dangerouslySetInnerHTML"]);

    Opal.cdecl($scope, 'HASH_ATTRIBUTES', ["data", "aria"]);

    Opal.defs(self, '$create_element', TMP_1 = function(type, properties) {
      var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (properties == null) {
        properties = $hash2([], {})
      }
      TMP_1.$$p = null;
      return ($a = ($b = (($scope.get('React')).$$scope.get('API'))).$create_element, $a.$$p = block.$to_proc(), $a).call($b, type, properties);
    });

    Opal.defs(self, '$render', TMP_2 = function(element, container) {
      var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, component = nil;

      TMP_2.$$p = null;
      container = container.$$class ? container[0] : container;
      if ((($a = ((typeof ReactDOM === 'undefined'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        component = self.$Native(ReactDOM.render(element.$to_n(), container, function(){(function() {if (($yield !== nil)) {
          return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a
          } else {
          return nil
        }; return nil; })()}))
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        component = self.$Native(React.render(element.$to_n(), container, function(){(function() {if (($yield !== nil)) {
          return $a = Opal.yieldX($yield, []), $a === $breaker ? $a : $a
          } else {
          return nil
        }; return nil; })()}))
        } else {
        self.$raise("render is not defined.  In React >= v15 you must import it with ReactDOM")
      };
      component.$class().$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('API')));
      return component;
    });

    Opal.defs(self, '$is_valid_element', function(element) {
      var $a, self = this;

      return ($a = element['$kind_of?']((($scope.get('React')).$$scope.get('Element'))), $a !== false && $a !== nil ?React.isValidElement(element.$to_n()) : $a);
    });

    Opal.defs(self, '$render_to_string', function(element) {
      var $a, $b, TMP_3, $c, TMP_4, self = this;

      if ((($a = ((typeof ReactDOMServer === 'undefined'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return ReactDOMServer.renderToString(element.$to_n());}, TMP_3.$$s = self, TMP_3), $a).call($b)
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

        return React.renderToString(element.$to_n());}, TMP_4.$$s = self, TMP_4), $a).call($c)
        } else {
        return self.$raise("renderToString is not defined.  In React >= v15 you must import it with ReactDOMServer")
      };
    });

    Opal.defs(self, '$render_to_static_markup', function(element) {
      var $a, $b, TMP_5, $c, TMP_6, self = this;

      if ((($a = ((typeof ReactDOMServer === 'undefined'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

        return ReactDOMServer.renderToStaticMarkup(element.$to_n());}, TMP_5.$$s = self, TMP_5), $a).call($b)
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

        return React.renderToStaticMarkup(element.$to_n());}, TMP_6.$$s = self, TMP_6), $a).call($c)
        } else {
        return self.$raise("renderToStaticMarkup is not defined.  In React >= v15 you must import it with ReactDOMServer")
      };
    });

    Opal.defs(self, '$unmount_component_at_node', function(node) {
      var $a, self = this;

      if ((($a = ((typeof ReactDOM === 'undefined'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return ReactDOM.unmountComponentAtNode(node.$$class ? node[0] : node);
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return React.unmountComponentAtNode(node.$$class ? node[0] : node);
        } else {
        return self.$raise("unmountComponentAtNode is not defined.  In React >= v15 you must import it with ReactDOM")
      };
    });
  })($scope.base);
  if ((($a = $scope.get('Object')['$const_defined?']("Element")) !== nil && (!$a.$$is_boolean || $a == true))) {
    return ($a = ($b = $scope.get('Element')).$instance_eval, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b, TMP_8;

    Opal.defs(self, '$find', function(selector) {
        var $a, self = this;

        if ((($a = selector['$respond_to?']("dom_node")) !== nil && (!$a.$$is_boolean || $a == true))) {
          selector = (function() { try {
          return selector.$dom_node()
          } catch ($err) {if (true) {
            try {
              return selector
            } finally {
              Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
            }
            }else { throw $err; }
          }})()};
        return $(selector);
      });
      Opal.defs(self, '$[]', function(selector) {
        var self = this;

        return self.$find(selector);
      });
      return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(container, params){var self = TMP_8.$$s || this, block, $a, $b, TMP_9, klass = nil;
if (container == null) container = nil;if (params == null) params = $hash2([], {});
        block = TMP_8.$$p || nil, TMP_8.$$p = null;
      klass = $scope.get('Class').$new((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Base')));
        ($a = ($b = klass).$class_eval, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $a, $b;

        return ($a = ($b = self).$render, $a.$$p = block.$to_proc(), $a).call($b, container, params)}, TMP_9.$$s = self, TMP_9), $a).call($b);
        return $scope.get('React').$render($scope.get('React').$create_element(klass), self);}, TMP_8.$$s = self, TMP_8), $a).call($b, "render");}, TMP_7.$$s = self, TMP_7), $a).call($b)
    } else {
    return nil
  };
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/observable"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$tap', '$call', '$send', '$to_proc', '$include?', '$respond_to?', '$lambda']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Observable(){};
      var self = $Observable = $klass($base, $super, 'Observable', $Observable);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def.value = def.on_change = nil;
      Opal.defn(self, '$initialize', TMP_1 = function(value, on_change) {
        var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        if (on_change == null) {
          on_change = nil
        }
        TMP_1.$$p = null;
        self.value = value;
        return self.on_change = ((($a = on_change) !== false && $a !== nil) ? $a : block);
      });

      Opal.defn(self, '$method_missing', TMP_2 = function(method_sym) {
        var $a, $b, TMP_3, $c, $d, self = this, $iter = TMP_2.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        TMP_2.$$p = null;
        return ($a = ($b = ($c = ($d = self.value).$send, $c.$$p = block.$to_proc(), $c).apply($d, [method_sym].concat(Opal.to_a(args)))).$tap, $a.$$p = (TMP_3 = function(result){var self = TMP_3.$$s || this;
          if (self.on_change == null) self.on_change = nil;
          if (self.value == null) self.value = nil;
if (result == null) result = nil;
        return self.on_change.$call(self.value)}, TMP_3.$$s = self, TMP_3), $a).call($b);
      });

      Opal.defn(self, '$respond_to?', function(method) {
        var $a, self = this, $splat_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        if ((($a = ["call", "to_proc"]['$include?'](method)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return true
          } else {
          return ($a = self.value)['$respond_to?'].apply($a, [method].concat(Opal.to_a(args)))
        };
      });

      Opal.defn(self, '$call', function(new_value) {
        var self = this;

        self.on_change.$call(new_value);
        return self.value = new_value;
      });

      return (Opal.defn(self, '$to_proc', function() {
        var $a, $b, TMP_4, self = this;

        return ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(arg){var self = TMP_4.$$s || this;
          if (self.value == null) self.value = nil;
          if (self.on_change == null) self.on_change = nil;
if (arg == null) arg = self.value;
        return self.on_change.$call(arg)}, TMP_4.$$s = self, TMP_4), $a).call($b);
      }), nil) && 'to_proc';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/ext/string"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$event_camelize', function() {
      var self = this;

      return self.replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = true;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    });
    }), nil) && 'event_camelize'
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/ext/hash"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$map']);
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$shallow_to_n', function() {
      var $a, $b, TMP_1, self = this, hash = nil;

      hash = {};
      ($a = ($b = self).$map, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
      return hash[key] = value;}, TMP_1.$$s = self, TMP_1), $a).call($b);
      return hash;
    }), nil) && 'shallow_to_n'
  })($scope.base, null)
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/callbacks"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$extend', '$each', '$is_a?', '$instance_exec', '$to_proc', '$send', '$callbacks_for', '$class', '$class_attribute', '$define_singleton_method', '$concat', '$push', '$+', '$respond_to?', '$superclass']);
  self.$require("active_support/core_ext/class/attribute");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Callbacks, self = $Callbacks = $module($base, 'Callbacks');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.defs(self, '$included', function(base) {
        var self = this;

        return base.$extend($scope.get('ClassMethods'));
      });

      Opal.defn(self, '$run_callback', function(name) {
        var $a, $b, TMP_1, self = this, $splat_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        return ($a = ($b = self.$class().$callbacks_for(name)).$each, $a.$$p = (TMP_1 = function(callback){var self = TMP_1.$$s || this, $a, $b;
if (callback == null) callback = nil;
        if ((($a = callback['$is_a?']($scope.get('Proc'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self).$instance_exec, $a.$$p = callback.$to_proc(), $a).apply($b, Opal.to_a(args))
            } else {
            return ($a = self).$send.apply($a, [callback].concat(Opal.to_a(args)))
          }}, TMP_1.$$s = self, TMP_1), $a).call($b);
      });

      (function($base) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_3;

        Opal.defn(self, '$define_callback', TMP_3 = function(callback_name) {
          var $a, $b, TMP_2, self = this, $iter = TMP_3.$$p, $yield = $iter || nil, attribute_name = nil;

          TMP_3.$$p = null;
          attribute_name = "_" + (callback_name) + "_callbacks";
          self.$class_attribute(attribute_name);
          self.$send("" + (attribute_name) + "=", []);
          return ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_2 = function(args){var self = TMP_2.$$s || this, block, callbacks = nil;
args = $slice.call(arguments, 0);
            block = TMP_2.$$p || nil, TMP_2.$$p = null;
          callbacks = self.$send(attribute_name);
            callbacks.$concat(args);
            if ((block !== nil)) {
              callbacks.$push(block)};
            return self.$send("" + (attribute_name) + "=", callbacks);}, TMP_2.$$s = self, TMP_2), $a).call($b, callback_name);
        });

        Opal.defn(self, '$callbacks_for', function(callback_name) {
          var $a, self = this, attribute_name = nil;

          attribute_name = "_" + (callback_name) + "_callbacks";
          return $rb_plus((function() {if ((($a = self.$superclass()['$respond_to?']("callbacks_for")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$superclass().$callbacks_for(callback_name)
            } else {
            return []
          }; return nil; })(), self.$send(attribute_name));
        });
      })($scope.base);
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/rendering_context"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor', '$deprecation_warning', '$to_n', '$build', '$render', '$to_proc', '$remove_nodes_from_args', '$waiting_on_resources', '$waiting_on_resources=', '$run_child_block', '$nil?', '$dup', '$tap', '$!', '$detect', '$respond_to?', '$create_element', '$is_a?', '$last', '$span', '$to_s', '$<<', '$delete', '$[]=', '$index', '$[]', '$each', '$as_node', '$try', '$empty?', '$!=', '$raise_render_error', '$==', '$count', '$improper_render', '$>', '$class', '$raise', '$define_method', '$unshift', '$send']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $RenderingContext(){};
      var self = $RenderingContext = $klass($base, $super, 'RenderingContext', $RenderingContext);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_10, TMP_12;

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto;

        return self.$attr_accessor("waiting_on_resources")
      })(Opal.get_singleton_class(self));

      Opal.defs(self, '$build_only', TMP_1 = function(name) {
        var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        TMP_1.$$p = null;
        (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("..._as_node is deprecated.  Render component and then use the .node method instead");
        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $b;

        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = block.$to_proc(), $a).apply($b, [name].concat(Opal.to_a(args)))}, TMP_2.$$s = self, TMP_2), $a).call($b).$to_n();
      });

      Opal.defs(self, '$render', TMP_3 = function(name) {
        var $a, $b, TMP_4, $c, $d, self = this, $iter = TMP_3.$$p, block = $iter || nil, element = nil, $splat_index = nil;
        if (self.buffer == null) self.buffer = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        TMP_3.$$p = null;
        self.$remove_nodes_from_args(args);
        if ((($a = self.buffer) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          ((($a = self.buffer) !== false && $a !== nil) ? $a : self.buffer = [])
        };
        if (block !== false && block !== nil) {
          element = ($a = ($b = self).$build, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $a, $b, $c, TMP_5, $d, $e, TMP_7, TMP_8, $f, TMP_9, saved_waiting_on_resources = nil, buffer = nil;
            if (self.buffer == null) self.buffer = nil;

          saved_waiting_on_resources = self.$waiting_on_resources();
            (($a = [nil]), $b = self, $b['$waiting_on_resources='].apply($b, $a), $a[$a.length-1]);
            ($a = ($b = self).$run_child_block, $a.$$p = block.$to_proc(), $a).call($b, name['$nil?']());
            if (name !== false && name !== nil) {
              buffer = self.buffer.$dup();
              return ($a = ($c = ($d = ($e = $scope.get('React')).$create_element, $d.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

              return buffer}, TMP_7.$$s = self, TMP_7), $d).apply($e, [name].concat(Opal.to_a(args)))).$tap, $a.$$p = (TMP_5 = function(element){var self = TMP_5.$$s || this, $a, $b, $c, $d, $e, TMP_6;
if (element == null) element = nil;
              return (($a = [((($c = saved_waiting_on_resources) !== false && $c !== nil) ? $c : ($d = ($e = buffer).$detect, $d.$$p = (TMP_6 = function(e){var self = TMP_6.$$s || this, $a;
if (e == null) e = nil;
                if ((($a = e['$respond_to?']("waiting_on_resources")) !== nil && (!$a.$$is_boolean || $a == true))) {
                    return e.$waiting_on_resources()
                    } else {
                    return nil
                  }}, TMP_6.$$s = self, TMP_6), $d).call($e)['$!']()['$!']())]), $b = element, $b['$waiting_on_resources='].apply($b, $a), $a[$a.length-1])}, TMP_5.$$s = self, TMP_5), $a).call($c);
            } else if ((($a = self.buffer.$last()['$is_a?']((($scope.get('React')).$$scope.get('Element')))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ($a = ($d = self.buffer.$last()).$tap, $a.$$p = (TMP_8 = function(element){var self = TMP_8.$$s || this, $a, $b;
if (element == null) element = nil;
              return ($a = element, ((($b = $a.$waiting_on_resources()) !== false && $b !== nil) ? $b : $a['$waiting_on_resources='](saved_waiting_on_resources)))}, TMP_8.$$s = self, TMP_8), $a).call($d)
              } else {
              return ($a = ($f = self.buffer.$last().$to_s().$span()).$tap, $a.$$p = (TMP_9 = function(element){var self = TMP_9.$$s || this, $a, $b;
if (element == null) element = nil;
              return (($a = [saved_waiting_on_resources]), $b = element, $b['$waiting_on_resources='].apply($b, $a), $a[$a.length-1])}, TMP_9.$$s = self, TMP_9), $a).call($f)
            };}, TMP_4.$$s = self, TMP_4), $a).call($b)
        } else if ((($a = name['$is_a?']((($scope.get('React')).$$scope.get('Element')))) !== nil && (!$a.$$is_boolean || $a == true))) {
          element = name
          } else {
          element = ($a = $scope.get('React')).$create_element.apply($a, [name].concat(Opal.to_a(args)));
          (($c = [self.$waiting_on_resources()]), $d = element, $d['$waiting_on_resources='].apply($d, $c), $c[$c.length-1]);
        };
        self.buffer['$<<'](element);
        (($c = [nil]), $d = self, $d['$waiting_on_resources='].apply($d, $c), $c[$c.length-1]);
        return element;
      });

      Opal.defs(self, '$build', TMP_10 = function() {
        var $a, self = this, $iter = TMP_10.$$p, $yield = $iter || nil, current = nil, return_val = nil;
        if (self.buffer == null) self.buffer = nil;

        TMP_10.$$p = null;
        current = self.buffer;
        self.buffer = [];
        return_val = ((($a = Opal.yield1($yield, self.buffer)) === $breaker) ? $breaker.$v : $a);
        self.buffer = current;
        return return_val;
      });

      Opal.defs(self, '$as_node', function(element) {
        var self = this;
        if (self.buffer == null) self.buffer = nil;

        self.buffer.$delete(element);
        return element;
      });

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto;

        return Opal.alias(self, 'delete', 'as_node')
      })(Opal.get_singleton_class(self));

      Opal.defs(self, '$replace', function(e1, e2) {
        var self = this;
        if (self.buffer == null) self.buffer = nil;

        return self.buffer['$[]='](self.buffer.$index(e1), e2);
      });

      Opal.defs(self, '$remove_nodes_from_args', function(args) {
        var $a, $b, TMP_11, self = this;

        if ((($a = ($b = args['$[]'](0), $b !== false && $b !== nil ?args['$[]'](0)['$is_a?']($scope.get('Hash')) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = args['$[]'](0)).$each, $a.$$p = (TMP_11 = function(key, value){var self = TMP_11.$$s || this, $a;
if (key == null) key = nil;if (value == null) value = nil;
          try {(function() {if ((($a = value['$is_a?']($scope.get('Element'))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return value.$as_node()
              } else {
              return nil
            }; return nil; })() } catch ($err) { return nil }}, TMP_11.$$s = self, TMP_11), $a).call($b)
          } else {
          return nil
        };
      });

      Opal.defs(self, '$run_child_block', TMP_12 = function(is_outer_scope) {
        var $a, $b, $c, self = this, $iter = TMP_12.$$p, $yield = $iter || nil, result = nil;
        if (self.buffer == null) self.buffer = nil;

        TMP_12.$$p = null;
        result = ((($a = Opal.yieldX($yield, [])) === $breaker) ? $breaker.$v : $a);
        if ((($a = result.$try("acts_as_string?")) !== nil && (!$a.$$is_boolean || $a == true))) {
          result = result.$to_s()};
        if ((($a = ((($b = result['$is_a?']($scope.get('String'))) !== false && $b !== nil) ? $b : (($c = result['$is_a?']($scope.get('Element')), $c !== false && $c !== nil ?self.buffer['$empty?']() : $c)))) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.buffer['$<<'](result)};
        if ((($a = (($b = is_outer_scope !== false && is_outer_scope !== nil) ? self.buffer['$!=']([result]) : is_outer_scope)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$raise_render_error(result)
          } else {
          return nil
        };
      });

      Opal.defs(self, '$raise_render_error', function(result) {
        var $a, self = this;
        if (self.buffer == null) self.buffer = nil;

        if (self.buffer.$count()['$=='](1)) {
          self.$improper_render("A different element was returned than was generated within the DSL.", "Possibly improper use of Element#delete.")};
        if ((($a = $rb_gt(self.buffer.$count(), 1)) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$improper_render("Instead " + (self.buffer.$count()) + " elements were generated.", "Do you want to wrap your elements in a div?")};
        if ((($a = result.$try("reactrb_component?")) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$improper_render("Instead the component " + (result) + " was returned.", "Did you mean " + (result) + "()?")};
        return self.$improper_render("Instead the " + (result.$class()) + " " + (result) + " was returned.", "You may need to convert this to a string.");
      });

      return (Opal.defs(self, '$improper_render', function(message, solution) {
        var self = this;

        return self.$raise("a component's render method must generate and return exactly 1 element or a string.\n" + ("    " + (message) + "  " + (solution)));
      }), nil) && 'improper_render';
    })($scope.base, null);

    (function($base, $super) {
      function $Object(){};
      var self = $Object = $klass($base, $super, 'Object', $Object);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_13, TMP_16;

      ($a = ($b = ["span", "td", "th", "while_loading"]).$each, $a.$$p = (TMP_13 = function(tag){var self = TMP_13.$$s || this, $a, $b, TMP_14;
if (tag == null) tag = nil;
      return ($a = ($b = self).$define_method, $a.$$p = (TMP_14 = function(args){var self = TMP_14.$$s || this, block, $a, $b, $c, TMP_15;
args = $slice.call(arguments, 0);
          block = TMP_14.$$p || nil, TMP_14.$$p = null;
        args.$unshift(tag);
          if ((($a = self['$is_a?']((($scope.get('React')).$$scope.get('Component')))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self).$send, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args))};
          return ($a = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

          return self.$to_s()}, TMP_15.$$s = self, TMP_15), $a).apply($c, Opal.to_a(args));}, TMP_14.$$s = self, TMP_14), $a).call($b, tag)}, TMP_13.$$s = self, TMP_13), $a).call($b);

      Opal.defn(self, '$para', TMP_16 = function() {
        var $a, $b, $c, TMP_17, self = this, $iter = TMP_16.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 0];
        }
        TMP_16.$$p = null;
        args.$unshift("p");
        if ((($a = self['$is_a?']((($scope.get('React')).$$scope.get('Component')))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$send, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args))};
        return ($a = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

        return self.$to_s()}, TMP_17.$$s = self, TMP_17), $a).apply($c, Opal.to_a(args));
      });

      return (Opal.defn(self, '$br', function() {
        var $a, $b, TMP_18, self = this;

        if ((($a = self['$is_a?']((($scope.get('React')).$$scope.get('Component')))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$send("br")};
        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this;

        (($scope.get('React')).$$scope.get('RenderingContext')).$render(self.$to_s());
          return (($scope.get('React')).$$scope.get('RenderingContext')).$render("br");}, TMP_18.$$s = self, TMP_18), $a).call($b, "span");
      }), nil) && 'br';
    })(Opal.Object, null);
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/state"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$[]', '$[]=', '$match', '$>', '$count', '$get_state', '$set_state', '$attr_reader', '$merge!', '$states', '$!', '$include?', '$new_observers', '$<<', '$respond_to?', '$each', '$update_react_js_state', '$==', '$dup', '$observers_by_name', '$after', '$set_state2', '$raise', '$delete', '$current_observers', '$+', '$to_f', '$now', '$class', '$name', '$to_s', '$object_id', '$max', '$-', '$define_method', '$instance_variable_get', '$instance_variable_set']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $StateWrapper(){};
      var self = $StateWrapper = $klass($base, $super, 'StateWrapper', $StateWrapper);

      var def = self.$$proto, $scope = self.$$scope;

      def.state_hash = def.from = nil;
      Opal.defn(self, '$initialize', function(native$, from) {
        var self = this;

        self.state_hash = $scope.get('Hash').$new(native$.state);
        return self.from = from;
      });

      Opal.defn(self, '$[]', function(state) {
        var self = this;

        return self.state_hash['$[]'](state);
      });

      Opal.defn(self, '$[]=', function(state, new_value) {
        var self = this;

        return self.state_hash['$[]='](state, new_value);
      });

      return (Opal.defn(self, '$method_missing', function(method) {
        var $a, $b, TMP_1, self = this, match = nil, current_value = nil, current_state = nil, $splat_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        if ((($a = match = method.$match(/^(.+)\!$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_gt(args.$count(), 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
            current_value = $scope.get('State').$get_state(self.from, match['$[]'](1));
            $scope.get('State').$set_state(self.from, (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), args['$[]'](0));
            return current_value;
            } else {
            current_state = $scope.get('State').$get_state(self.from, match['$[]'](1));
            $scope.get('State').$set_state(self.from, (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), current_state);
            return ($a = ($b = $scope.get('Observable')).$new, $a.$$p = (TMP_1 = function(update){var self = TMP_1.$$s || this, $a;
              if (self.from == null) self.from = nil;
if (update == null) update = nil;
            return $scope.get('State').$set_state(self.from, (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), update)}, TMP_1.$$s = self, TMP_1), $a).call($b, current_state);
          }
          } else {
          return $scope.get('State').$get_state(self.from, method)
        };
      }), nil) && 'method_missing';
    })($scope.base, $scope.get('BasicObject'));

    (function($base, $super) {
      function $State(){};
      var self = $State = $klass($base, $super, 'State', $State);

      var def = self.$$proto, $scope = self.$$scope;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_11, $a, $b, TMP_13;

        self.$attr_reader("current_observer");
        Opal.defn(self, '$initialize_states', function(object, initial_values) {
          var $a, self = this;

          return self.$states()['$[]'](object)['$merge!'](((($a = initial_values) !== false && $a !== nil) ? $a : $hash2([], {})));
        });
        Opal.defn(self, '$get_state', function(object, name, current_observer) {
          var $a, $b, self = this;
          if (self.current_observer == null) self.current_observer = nil;

          if (current_observer == null) {
            current_observer = self.current_observer
          }
          if ((($a = (($b = current_observer !== false && current_observer !== nil) ? self.$new_observers()['$[]'](current_observer)['$[]'](object)['$include?'](name)['$!']() : current_observer)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$new_observers()['$[]'](current_observer)['$[]'](object)['$<<'](name)};
          return self.$states()['$[]'](object)['$[]'](name);
        });
        Opal.defn(self, '$set_state2', function(object, name, value) {
          var $a, $b, TMP_2, self = this, object_needs_notification = nil;

          object_needs_notification = object['$respond_to?']("update_react_js_state");
          ($a = ($b = self.$observers_by_name()['$[]'](object)['$[]'](name).$dup()).$each, $a.$$p = (TMP_2 = function(observer){var self = TMP_2.$$s || this;
if (observer == null) observer = nil;
          observer.$update_react_js_state(object, name, value);
            if (object['$=='](observer)) {
              return object_needs_notification = false
              } else {
              return nil
            };}, TMP_2.$$s = self, TMP_2), $a).call($b);
          if (object_needs_notification !== false && object_needs_notification !== nil) {
            return object.$update_react_js_state(nil, name, value)
            } else {
            return nil
          };
        });
        Opal.defn(self, '$set_state', function(object, name, value, delay) {
          var $a, $b, $c, TMP_3, self = this;
          if (self.delayed_updates == null) self.delayed_updates = nil;
          if (self.delayed_updater == null) self.delayed_updater = nil;

          if (delay == null) {
            delay = nil
          }
          self.$states()['$[]'](object)['$[]='](name, value);
          if (delay !== false && delay !== nil) {
            ((($a = self.delayed_updates) !== false && $a !== nil) ? $a : self.delayed_updates = []);
            self.delayed_updates['$<<']([object, name, value]);
            ((($a = self.delayed_updater) !== false && $a !== nil) ? $a : self.delayed_updater = ($b = ($c = self).$after, $b.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b, TMP_4, delayed_updates = nil;
              if (self.delayed_updates == null) self.delayed_updates = nil;

            delayed_updates = self.delayed_updates;
              self.delayed_updates = [];
              self.delayed_updater = nil;
              return ($a = ($b = delayed_updates).$each, $a.$$p = (TMP_4 = function(object, name, value){var self = TMP_4.$$s || this;
if (object == null) object = nil;if (name == null) name = nil;if (value == null) value = nil;
              return self.$set_state2(object, name, value)}, TMP_4.$$s = self, TMP_4), $a).call($b);}, TMP_3.$$s = self, TMP_3), $b).call($c, 0.001));
            } else {
            self.$set_state2(object, name, value)
          };
          return value;
        });
        Opal.defn(self, '$will_be_observing?', function(object, name, current_observer) {
          var $a, self = this;

          return (($a = current_observer !== false && current_observer !== nil) ? self.$new_observers()['$[]'](current_observer)['$[]'](object)['$include?'](name) : current_observer);
        });
        Opal.defn(self, '$is_observing?', function(object, name, current_observer) {
          var $a, self = this;

          return (($a = current_observer !== false && current_observer !== nil) ? self.$observers_by_name()['$[]'](object)['$[]'](name)['$include?'](current_observer) : current_observer);
        });
        Opal.defn(self, '$update_states_to_observe', function(current_observer) {
          var $a, $b, TMP_5, $c, TMP_7, self = this, observers = nil;
          if (self.current_observer == null) self.current_observer = nil;

          if (current_observer == null) {
            current_observer = self.current_observer
          }
          if (current_observer !== false && current_observer !== nil) {
            } else {
            self.$raise("update_states_to_observer called outside of watch block")
          };
          ($a = ($b = self.$current_observers()['$[]'](current_observer)).$each, $a.$$p = (TMP_5 = function(object, names){var self = TMP_5.$$s || this, $a, $b, TMP_6;
if (object == null) object = nil;if (names == null) names = nil;
          return ($a = ($b = names).$each, $a.$$p = (TMP_6 = function(name){var self = TMP_6.$$s || this;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name).$delete(current_observer)}, TMP_6.$$s = self, TMP_6), $a).call($b)}, TMP_5.$$s = self, TMP_5), $a).call($b);
          observers = self.$current_observers()['$[]='](current_observer, self.$new_observers()['$[]'](current_observer));
          self.$new_observers().$delete(current_observer);
          return ($a = ($c = observers).$each, $a.$$p = (TMP_7 = function(object, names){var self = TMP_7.$$s || this, $a, $b, TMP_8;
if (object == null) object = nil;if (names == null) names = nil;
          return ($a = ($b = names).$each, $a.$$p = (TMP_8 = function(name){var self = TMP_8.$$s || this;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name)['$<<'](current_observer)}, TMP_8.$$s = self, TMP_8), $a).call($b)}, TMP_7.$$s = self, TMP_7), $a).call($c);
        });
        Opal.defn(self, '$remove', function() {
          var $a, $b, TMP_9, self = this;
          if (self.current_observer == null) self.current_observer = nil;

          if ((($a = self.current_observer) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("remove called outside of watch block")
          };
          ($a = ($b = self.$current_observers()['$[]'](self.current_observer)).$each, $a.$$p = (TMP_9 = function(object, names){var self = TMP_9.$$s || this, $a, $b, TMP_10;
if (object == null) object = nil;if (names == null) names = nil;
          return ($a = ($b = names).$each, $a.$$p = (TMP_10 = function(name){var self = TMP_10.$$s || this;
              if (self.current_observer == null) self.current_observer = nil;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name).$delete(self.current_observer)}, TMP_10.$$s = self, TMP_10), $a).call($b)}, TMP_9.$$s = self, TMP_9), $a).call($b);
          return self.$current_observers().$delete(self.current_observer);
        });
        Opal.defn(self, '$set_state_context_to', TMP_11 = function(observer) {
          var $a, self = this, $iter = TMP_11.$$p, $yield = $iter || nil, start_time = nil, observer_name = nil, saved_current_observer = nil, return_value = nil;
          if (self.nesting_level == null) self.nesting_level = nil;
          if (self.current_observer == null) self.current_observer = nil;

          TMP_11.$$p = null;
          try {
          if ((($a = typeof window.reactive_ruby_timing !== 'undefined') !== nil && (!$a.$$is_boolean || $a == true))) {
            self.nesting_level = $rb_plus((((($a = self.nesting_level) !== false && $a !== nil) ? $a : 0)), 1);
            start_time = $scope.get('Time').$now().$to_f();
            observer_name = (function() {try {return ((function() {if ((($a = observer.$class()['$respond_to?']("name")) !== nil && (!$a.$$is_boolean || $a == true))) {
              return observer.$class().$name()
              } else {
              return observer.$to_s()
            }; return nil; })()) } catch ($err) { return "object:" + (observer.$object_id()) }})();};
          saved_current_observer = self.current_observer;
          self.current_observer = observer;
          return_value = ((($a = Opal.yieldX($yield, [])) === $breaker) ? $breaker.$v : $a);
          return return_value;
          } finally {
          self.current_observer = saved_current_observer;
          if ((($a = typeof window.reactive_ruby_timing !== 'undefined') !== nil && (!$a.$$is_boolean || $a == true))) {
            self.nesting_level = [0, $rb_minus(self.nesting_level, 1)].$max()};
          return_value;
          };
        });
        Opal.defn(self, '$states', function() {
          var $a, $b, $c, TMP_12, self = this;
          if (self.states == null) self.states = nil;

          return ((($a = self.states) !== false && $a !== nil) ? $a : self.states = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_12 = function(h, k){var self = TMP_12.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, $hash2([], {}))}, TMP_12.$$s = self, TMP_12), $b).call($c));
        });
        return ($a = ($b = ["new_observers", "current_observers", "observers_by_name"]).$each, $a.$$p = (TMP_13 = function(method_name){var self = TMP_13.$$s || this, $a, $b, TMP_14;
if (method_name == null) method_name = nil;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_14 = function(){var self = TMP_14.$$s || this, $a, $b, $c, TMP_15;

          return ((($a = self.$instance_variable_get("@" + (method_name))) !== false && $a !== nil) ? $a : self.$instance_variable_set("@" + (method_name), ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_15 = function(h, k){var self = TMP_15.$$s || this, $a, $b, TMP_16;
if (h == null) h = nil;if (k == null) k = nil;
            return h['$[]='](k, ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_16 = function(h, k){var self = TMP_16.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
              return h['$[]='](k, [])}, TMP_16.$$s = self, TMP_16), $a).call($b))}, TMP_15.$$s = self, TMP_15), $b).call($c)))}, TMP_14.$$s = self, TMP_14), $a).call($b, method_name)}, TMP_13.$$s = self, TMP_13), $a).call($b);
      })(Opal.get_singleton_class(self))
    })($scope.base, null);
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/component/api"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$!', '$set_or_replace_state_or_prop', '$to_proc', '$private', '$raise', '$shallow_to_n', '$call']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $API, self = $API = $module($base, 'API');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

        Opal.defn(self, '$dom_node', function() {
          var $a, self = this;

          if ((($a = ((typeof ReactDOM === 'undefined' || typeof ReactDOM.findDOMNode === 'undefined'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ReactDOM.findDOMNode(self.native);
          } else if ((($a = ((typeof React.findDOMNode === 'undefined'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return React.findDOMNode(self.native);
            } else {
            return self.native.getDOMNode;
          };
        });

        Opal.defn(self, '$mounted?', function() {
          var self = this;

          return self.native.isMounted();
        });

        Opal.defn(self, '$force_update!', function() {
          var self = this;

          return self.native.forceUpdate();
        });

        Opal.defn(self, '$set_props', TMP_1 = function(prop) {
          var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

          TMP_1.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, prop, "setProps");
        });

        Opal.defn(self, '$set_props!', TMP_2 = function(prop) {
          var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

          TMP_2.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, prop, "replaceProps");
        });

        Opal.defn(self, '$set_state', TMP_3 = function(state) {
          var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

          TMP_3.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, state, "setState");
        });

        Opal.defn(self, '$set_state!', TMP_4 = function(state) {
          var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, state, "replaceState");
        });

        self.$private();

        Opal.defn(self, '$set_or_replace_state_or_prop', TMP_5 = function(state_or_prop, method) {
          var $a, self = this, $iter = TMP_5.$$p, block = $iter || nil;
          if (self["native"] == null) self["native"] = nil;

          TMP_5.$$p = null;
          if ((($a = self["native"]) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("No native ReactComponent associated")
          };
          
          self["native"][method](state_or_prop.$shallow_to_n(), function(){
            (function() {if (block !== false && block !== nil) {
            return block.$call()
            } else {
            return nil
          }; return nil; })()
          });
        ;
        });
      })($scope.base)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/component/class_methods"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$==', '$[]', '$backtrace', '$>', '$length', '$!', '$append_backtrace', '$[]=', '$+', '$message', '$join', '$raise', '$<<', '$each', '$define_method', '$render', '$instance_eval', '$to_proc', '$new', '$validator', '$validate', '$name', '$count', '$default_props', '$build', '$define_param', '$props_wrapper', '$is_a?', '$first', '$delete', '$merge!', '$optional', '$requires', '$deprecation_warning', '$alias_method', '$allow_undefined_props=', '$undefined_props', '$class', '$props', '$arity', '$last', '$pop', '$initial_state', '$initial_state=', '$define_state_methods', '$initialize_states', '$singleton_class', '$nil?', '$get_state', '$!=', '$set_state', '$native_mixins', '$static_call_backs', '$split', '$Native', '$to_n', '$add_item_to_tree', '$create_native_react_class', '$reverse', '$import_native_component', '$eval_native_react_component', '$inject']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_5, TMP_8, TMP_11, TMP_14, TMP_19;

        Opal.defn(self, '$reactrb_component?', function() {
          var self = this;

          return true;
        });

        Opal.defn(self, '$backtrace', function() {
          var $a, self = this, $splat_index = nil;
          if (self.dont_catch_exceptions == null) self.dont_catch_exceptions = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          self.dont_catch_exceptions = (args['$[]'](0)['$==']("none"));
          return self.backtrace_off = ((($a = self.dont_catch_exceptions) !== false && $a !== nil) ? $a : (args['$[]'](0)['$==']("off")));
        });

        Opal.defn(self, '$process_exception', function(e, component, reraise) {
          var $a, $b, $c, self = this, message = nil;
          if (self.backtrace_off == null) self.backtrace_off = nil;
          if (self.dont_catch_exceptions == null) self.dont_catch_exceptions = nil;

          if (reraise == null) {
            reraise = nil
          }
          message = ["Exception raised while rendering " + (component)];
          if ((($a = ($b = ($c = e.$backtrace(), $c !== false && $c !== nil ?$rb_gt(e.$backtrace().$length(), 1) : $c), $b !== false && $b !== nil ?self.backtrace_off['$!']() : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$append_backtrace(message, e.$backtrace())
            } else {
            ($a = 0, $b = message, $b['$[]=']($a, $rb_plus($b['$[]']($a), ": " + (e.$message()))))
          };
          console.error(message.$join("\n"));
          if ((($a = ((($b = reraise) !== false && $b !== nil) ? $b : self.dont_catch_exceptions)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$raise(e)
            } else {
            return nil
          };
        });

        Opal.defn(self, '$append_backtrace', function(message_array, backtrace) {
          var $a, $b, TMP_1, self = this;

          message_array['$<<']("    " + (backtrace['$[]'](0)));
          return ($a = ($b = backtrace['$[]']($range(1, -1, false))).$each, $a.$$p = (TMP_1 = function(line){var self = TMP_1.$$s || this;
if (line == null) line = nil;
          return message_array['$<<'](line)}, TMP_1.$$s = self, TMP_1), $a).call($b);
        });

        Opal.defn(self, '$render', TMP_2 = function(container, params) {
          var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

          if (container == null) {
            container = nil
          }
          if (params == null) {
            params = $hash2([], {})
          }
          TMP_2.$$p = null;
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $b, TMP_4, $c;

          if (container !== false && container !== nil) {
              return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $a, $b;

              if (block !== false && block !== nil) {
                  return ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b)
                  } else {
                  return nil
                }}, TMP_4.$$s = self, TMP_4), $a).call($b, container, params)
              } else {
              return ($a = ($c = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($c)
            }}, TMP_3.$$s = self, TMP_3), $a).call($b, "render");
        });

        Opal.defn(self, '$validator', function() {
          var $a, self = this;
          if (self.validator == null) self.validator = nil;

          return ((($a = self.validator) !== false && $a !== nil) ? $a : self.validator = $scope.get('Validator').$new(self));
        });

        Opal.defn(self, '$prop_types', function() {
          var $a, self = this;

          if ((($a = self.$validator()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $hash2(["_componentValidator"], {"_componentValidator": 
              function(props, propName, componentName) {
                var errors = self.$validator().$validate($scope.get('Hash').$new(props));
                var error = new Error($rb_plus("In component `" + (self.$name()) + "`\n", (errors).$join("\n")));
                return (function() {if ((($a = $rb_gt((errors).$count(), 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return error;
              } else {
              return undefined;
            }; return nil; })();
              }
            })
            } else {
            return $hash2([], {})
          };
        });

        Opal.defn(self, '$default_props', function() {
          var self = this;

          return self.$validator().$default_props();
        });

        Opal.defn(self, '$params', TMP_5 = function() {
          var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

          TMP_5.$$p = null;
          return ($a = ($b = self.$validator()).$build, $a.$$p = block.$to_proc(), $a).call($b);
        });

        Opal.defn(self, '$props_wrapper', function() {
          var $a, self = this;
          if (self.props_wrapper == null) self.props_wrapper = nil;

          return ((($a = self.props_wrapper) !== false && $a !== nil) ? $a : self.props_wrapper = $scope.get('Class').$new($scope.get('PropsWrapper')));
        });

        Opal.defn(self, '$define_param', function(name, param_type) {
          var self = this;

          return self.$props_wrapper().$define_param(name, param_type, self);
        });

        Opal.defn(self, '$param', function() {
          var $a, self = this, options = nil, name = nil, default$ = nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          if ((($a = args['$[]'](0)['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
            options = args['$[]'](0);
            name = options.$first()['$[]'](0);
            default$ = options.$first()['$[]'](1);
            options.$delete(name);
            options['$merge!']($hash2(["default"], {"default": default$}));
            } else {
            name = args['$[]'](0);
            options = ((($a = args['$[]'](1)) !== false && $a !== nil) ? $a : $hash2([], {}));
          };
          if ((($a = options['$[]']("default")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$validator().$optional(name, options)
            } else {
            return self.$validator().$requires(name, options)
          };
        });

        Opal.defn(self, '$required_param', function(name, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {})
          }
          (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("`required_param` is deprecated, use `param` instead.");
          return self.$validator().$requires(name, options);
        });

        self.$alias_method("require_param", "required_param");

        Opal.defn(self, '$optional_param', function(name, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {})
          }
          (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("`optional_param` is deprecated, use `param param_name: default_value` instead.");
          return self.$validator().$optional(name, options);
        });

        Opal.defn(self, '$collect_other_params_as', function(name) {
          var $a, $b, TMP_6, $c, TMP_7, self = this, validator_in_lexial_scope = nil;

          (($a = [true]), $b = self.$validator(), $b['$allow_undefined_props='].apply($b, $a), $a[$a.length-1]);
          ($a = ($b = self).$define_method, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $a;
            if (self._all_others == null) self._all_others = nil;

          return ((($a = self._all_others) !== false && $a !== nil) ? $a : self._all_others = self.$class().$validator().$undefined_props(self.$props()))}, TMP_6.$$s = self, TMP_6), $a).call($b, name);
          validator_in_lexial_scope = self.$validator();
          return ($a = ($c = self.$props_wrapper()).$define_method, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a;
            if (self._all_others == null) self._all_others = nil;

          return ((($a = self._all_others) !== false && $a !== nil) ? $a : self._all_others = validator_in_lexial_scope.$undefined_props(self.$props()))}, TMP_7.$$s = self, TMP_7), $a).call($c, name);
        });

        Opal.defn(self, '$define_state', TMP_8 = function() {
          var $a, $b, TMP_9, $c, TMP_10, self = this, $iter = TMP_8.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var states = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            states[$splat_index] = arguments[$splat_index + 0];
          }
          TMP_8.$$p = null;
          default_initial_value = (function() {if ((($a = ((($b = block !== false && block !== nil) ? block.$arity()['$=='](0) : block))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $a = Opal.yieldX(block, []), $a === $breaker ? $a : $a
            } else {
            return nil
          }; return nil; })();
          states_hash = (function() {if ((($a = (states.$last()['$is_a?']($scope.get('Hash')))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return states.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          ($a = ($b = states).$each, $a.$$p = (TMP_9 = function(name){var self = TMP_9.$$s || this;
if (name == null) name = nil;
          return states_hash['$[]='](name, default_initial_value)}, TMP_9.$$s = self, TMP_9), $a).call($b);
          (($a = self, ((($c = $a.$initial_state()) !== false && $c !== nil) ? $c : $a['$initial_state=']($hash2([], {})))))['$merge!'](states_hash);
          return ($a = ($c = states_hash).$each, $a.$$p = (TMP_10 = function(name, initial_value){var self = TMP_10.$$s || this, $a, $b;
if (name == null) name = nil;if (initial_value == null) initial_value = nil;
          return ($a = ($b = self).$define_state_methods, $a.$$p = block.$to_proc(), $a).call($b, self, name)}, TMP_10.$$s = self, TMP_10), $a).call($c);
        });

        Opal.defn(self, '$export_state', TMP_11 = function() {
          var $a, $b, TMP_12, $c, TMP_13, self = this, $iter = TMP_11.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var states = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            states[$splat_index] = arguments[$splat_index + 0];
          }
          TMP_11.$$p = null;
          default_initial_value = (function() {if ((($a = ((($b = block !== false && block !== nil) ? block.$arity()['$=='](0) : block))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return $a = Opal.yieldX(block, []), $a === $breaker ? $a : $a
            } else {
            return nil
          }; return nil; })();
          states_hash = (function() {if ((($a = (states.$last()['$is_a?']($scope.get('Hash')))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return states.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          ($a = ($b = states).$each, $a.$$p = (TMP_12 = function(name){var self = TMP_12.$$s || this;
if (name == null) name = nil;
          return states_hash['$[]='](name, default_initial_value)}, TMP_12.$$s = self, TMP_12), $a).call($b);
          $scope.get('State').$initialize_states(self, states_hash);
          return ($a = ($c = states_hash).$each, $a.$$p = (TMP_13 = function(name, initial_value){var self = TMP_13.$$s || this, $a, $b, $c;
if (name == null) name = nil;if (initial_value == null) initial_value = nil;
          ($a = ($b = self).$define_state_methods, $a.$$p = block.$to_proc(), $a).call($b, self, name, self);
            return ($a = ($c = self).$define_state_methods, $a.$$p = block.$to_proc(), $a).call($c, self.$singleton_class(), name, self);}, TMP_13.$$s = self, TMP_13), $a).call($c);
        });

        Opal.defn(self, '$define_state_methods', TMP_14 = function(this$, name, from) {
          var $a, $b, TMP_15, $c, TMP_16, $d, TMP_17, self = this, $iter = TMP_14.$$p, block = $iter || nil;

          if (from == null) {
            from = nil
          }
          TMP_14.$$p = null;
          ($a = ($b = this$).$define_method, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this, $a, $b;

          if ((($a = ((($b = from['$nil?']()) !== false && $b !== nil) ? $b : from['$=='](this$))) !== nil && (!$a.$$is_boolean || $a == true))) {
              (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("Direct access to state `" + (name) + "`.  Use `state." + (name) + "` instead.")};
            return $scope.get('State').$get_state(((($a = from) !== false && $a !== nil) ? $a : self), name);}, TMP_15.$$s = self, TMP_15), $a).call($b, "" + (name));
          ($a = ($c = this$).$define_method, $a.$$p = (TMP_16 = function(new_state){var self = TMP_16.$$s || this, $a, $b;
if (new_state == null) new_state = nil;
          (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("Direct assignment to state `" + (name) + "`.  Use `" + ((function() {if ((($a = ((($b = from !== false && from !== nil) ? from['$!='](this$) : from))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return from
              } else {
              return "state"
            }; return nil; })()) + "." + (name) + "!` instead.");
            if ((($a = (($b = block !== false && block !== nil) ? $rb_gt(block.$arity(), 0) : block)) !== nil && (!$a.$$is_boolean || $a == true))) {
              if (Opal.yieldX(block, [name, $scope.get('State').$get_state(((($a = from) !== false && $a !== nil) ? $a : self), name), new_state]) === $breaker) return $breaker.$v};
            return $scope.get('State').$set_state(((($a = from) !== false && $a !== nil) ? $a : self), name, new_state);}, TMP_16.$$s = self, TMP_16), $a).call($c, "" + (name) + "=");
          return ($a = ($d = this$).$define_method, $a.$$p = (TMP_17 = function(args){var self = TMP_17.$$s || this, $a, $b, TMP_18, current_value = nil, current_state = nil;
args = $slice.call(arguments, 0);
          if ((($a = ((($b = from['$nil?']()) !== false && $b !== nil) ? $b : from['$=='](this$))) !== nil && (!$a.$$is_boolean || $a == true))) {
              (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("Direct access to state `" + (name) + "`.  Use `state." + (name) + "` instead.")};
            if ((($a = $rb_gt(args.$count(), 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
              if ((($a = (($b = block !== false && block !== nil) ? $rb_gt(block.$arity(), 0) : block)) !== nil && (!$a.$$is_boolean || $a == true))) {
                if (Opal.yieldX(block, [name, $scope.get('State').$get_state(((($a = from) !== false && $a !== nil) ? $a : self), name), args['$[]'](0)]) === $breaker) return $breaker.$v};
              current_value = $scope.get('State').$get_state(((($a = from) !== false && $a !== nil) ? $a : self), name);
              $scope.get('State').$set_state(((($a = from) !== false && $a !== nil) ? $a : self), name, args['$[]'](0));
              return current_value;
              } else {
              current_state = $scope.get('State').$get_state(((($a = from) !== false && $a !== nil) ? $a : self), name);
              if ((($a = (($b = block !== false && block !== nil) ? $rb_gt(block.$arity(), 0) : block)) !== nil && (!$a.$$is_boolean || $a == true))) {
                if (Opal.yieldX(block, [name, $scope.get('State').$get_state(((($a = from) !== false && $a !== nil) ? $a : self), name), current_state]) === $breaker) return $breaker.$v};
              $scope.get('State').$set_state(((($a = from) !== false && $a !== nil) ? $a : self), name, current_state);
              return ($a = ($b = $scope.get('Observable')).$new, $a.$$p = (TMP_18 = function(update){var self = TMP_18.$$s || this, $a, $b;
if (update == null) update = nil;
              if ((($a = (($b = block !== false && block !== nil) ? $rb_gt(block.$arity(), 0) : block)) !== nil && (!$a.$$is_boolean || $a == true))) {
                  if (Opal.yieldX(block, [name, $scope.get('State').$get_state(((($a = from) !== false && $a !== nil) ? $a : self), name), update]) === $breaker) return $breaker.$v};
                return $scope.get('State').$set_state(((($a = from) !== false && $a !== nil) ? $a : self), name, update);}, TMP_18.$$s = self, TMP_18), $a).call($b, current_state);
            };}, TMP_17.$$s = self, TMP_17), $a).call($d, "" + (name) + "!");
        });

        Opal.defn(self, '$native_mixin', function(item) {
          var self = this;

          return self.$native_mixins()['$<<'](item);
        });

        Opal.defn(self, '$native_mixins', function() {
          var $a, self = this;
          if (self.native_mixins == null) self.native_mixins = nil;

          return ((($a = self.native_mixins) !== false && $a !== nil) ? $a : self.native_mixins = []);
        });

        Opal.defn(self, '$static_call_back', TMP_19 = function(name) {
          var self = this, $iter = TMP_19.$$p, block = $iter || nil;

          TMP_19.$$p = null;
          return self.$static_call_backs()['$[]='](name, block);
        });

        Opal.defn(self, '$static_call_backs', function() {
          var $a, self = this;
          if (self.static_call_backs == null) self.static_call_backs = nil;

          return ((($a = self.static_call_backs) !== false && $a !== nil) ? $a : self.static_call_backs = $hash2([], {}));
        });

        Opal.defn(self, '$export_component', function(opts) {
          var $a, self = this, export_name = nil, first_name = nil;

          if (opts == null) {
            opts = $hash2([], {})
          }
          export_name = (((($a = opts['$[]']("as")) !== false && $a !== nil) ? $a : self.$name())).$split("::");
          first_name = export_name.$first();
          return self.$Native(window)['$[]='](first_name, self.$add_item_to_tree(self.$Native(window)['$[]'](first_name), $rb_plus([(($scope.get('React')).$$scope.get('API')).$create_native_react_class(self)], export_name['$[]']($range(1, -1, false)).$reverse())).$to_n());
        });

        Opal.defn(self, '$imports', function(component_name) {
          var $a, $b, TMP_20, self = this, e = nil;

          try {
          try {
          (($scope.get('React')).$$scope.get('API')).$import_native_component(self, (($scope.get('React')).$$scope.get('API')).$eval_native_react_component(component_name));
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this;

            return nil}, TMP_20.$$s = self, TMP_20), $a).call($b, "render");
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
            try {
              return self.$raise("" + (self) + " cannot import '" + (component_name) + "': " + (e.$message()) + ".")
            } finally {
              Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
            }
            }else { throw $err; }
          }
          } finally {
          self
          };
        });

        Opal.defn(self, '$add_item_to_tree', function(current_tree, new_item) {
          var $a, $b, TMP_21, self = this;

          if ((($a = ((($b = self.$Native(current_tree).$class()['$!=']((($scope.get('Native')).$$scope.get('Object')))) !== false && $b !== nil) ? $b : new_item.$length()['$=='](1))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = new_item).$inject, $a.$$p = (TMP_21 = function(a, e){var self = TMP_21.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
            return $hash(e, a)}, TMP_21.$$s = self, TMP_21), $a).call($b)
            } else {
            self.$Native(current_tree)['$[]='](new_item.$last(), self.$add_item_to_tree(self.$Native(current_tree)['$[]'](new_item.$last()), new_item['$[]']($range(0, -2, false))));
            return current_tree;
          };
        });
      })($scope.base)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/component/props_wrapper"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$deprecation_warning', '$send', '$to_proc', '$params', '$attr_reader', '$define_method', '$deprecated_params_method', '$==', '$value_for', '$>', '$count', '$call', '$[]', '$props', '$has_key?', '$[]=', '$respond_to?', '$_react_param_conversion', '$is_a?', '$collect', '$flatten', '$compact', '$equal?', '$unchanged_processed_params', '$private', '$instance_variable_get']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      Opal.defn(self, '$deprecated_params_method', TMP_1 = function(name) {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        TMP_1.$$p = null;
        (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("Direct access to param `" + (name) + "`.  Use `params." + (name) + "` instead.");
        return ($a = ($b = self.$params()).$send, $a.$$p = block.$to_proc(), $a).apply($b, [name].concat(Opal.to_a(args)));
      });

      (function($base, $super) {
        function $PropsWrapper(){};
        var self = $PropsWrapper = $klass($base, $super, 'PropsWrapper', $PropsWrapper);

        var def = self.$$proto, $scope = self.$$scope;

        def.processed_params = nil;
        self.$attr_reader("props");

        Opal.defs(self, '$define_param', function(name, param_type, owner) {
          var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, $e, TMP_5, $f, TMP_6, $g, TMP_7, self = this;

          ($a = ($b = owner).$define_method, $a.$$p = (TMP_2 = function(args){var self = TMP_2.$$s || this, block, $a, $b;
args = $slice.call(arguments, 0);
            block = TMP_2.$$p || nil, TMP_2.$$p = null;
          return ($a = ($b = self).$deprecated_params_method, $a.$$p = block.$to_proc(), $a).apply($b, ["" + (name)].concat(Opal.to_a(args)))}, TMP_2.$$s = self, TMP_2), $a).call($b, "" + (name));
          if (param_type['$==']($scope.get('Observable'))) {
            ($a = ($c = owner).$define_method, $a.$$p = (TMP_3 = function(args){var self = TMP_3.$$s || this, $a;
args = $slice.call(arguments, 0);
            return ($a = self).$deprecated_params_method.apply($a, ["" + (name) + "!"].concat(Opal.to_a(args)))}, TMP_3.$$s = self, TMP_3), $a).call($c, "" + (name) + "!");
            ($a = ($d = self).$define_method, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            return self.$value_for(name)}, TMP_4.$$s = self, TMP_4), $a).call($d, "" + (name));
            return ($a = ($e = self).$define_method, $a.$$p = (TMP_5 = function(args){var self = TMP_5.$$s || this, $a, current_value = nil;
              if (self.dont_update_state == null) self.dont_update_state = nil;
args = $slice.call(arguments, 0);
            current_value = self.$value_for(name);
              if ((($a = $rb_gt(args.$count(), 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
                self.$props()['$[]'](name).$call(args['$[]'](0));
                return current_value;
                } else {
                try {(function() {if ((($a = self.dont_update_state) !== nil && (!$a.$$is_boolean || $a == true))) {
                  return nil
                  } else {
                  return self.$props()['$[]'](name).$call(current_value)
                }; return nil; })() } catch ($err) { nil };
                return self.$props()['$[]'](name);
              };}, TMP_5.$$s = self, TMP_5), $a).call($e, "" + (name) + "!");
          } else if (param_type['$==']($scope.get('Proc'))) {
            return ($a = ($f = self).$define_method, $a.$$p = (TMP_6 = function(args){var self = TMP_6.$$s || this, block, $a, $b;
args = $slice.call(arguments, 0);
              block = TMP_6.$$p || nil, TMP_6.$$p = null;
            if ((($a = self.$props()['$[]'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($b = self.$props()['$[]'](name)).$call, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args))
                } else {
                return nil
              }}, TMP_6.$$s = self, TMP_6), $a).call($f, "" + (name))
            } else {
            return ($a = ($g = self).$define_method, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $a, $b, TMP_8;
              if (self.processed_params == null) self.processed_params = nil;

            if ((($a = self.processed_params['$has_key?'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self.processed_params['$[]'](name)
                } else {
                return self.processed_params['$[]='](name, (function() {if ((($a = param_type['$respond_to?']("_react_param_conversion")) !== nil && (!$a.$$is_boolean || $a == true))) {
                  return param_type.$_react_param_conversion(self.$props()['$[]'](name))
                } else if ((($a = ($b = param_type['$is_a?']($scope.get('Array')), $b !== false && $b !== nil ?param_type['$[]'](0)['$respond_to?']("_react_param_conversion") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
                  return ($a = ($b = self.$props()['$[]'](name)).$collect, $a.$$p = (TMP_8 = function(param){var self = TMP_8.$$s || this;
if (param == null) param = nil;
                  return param_type['$[]'](0).$_react_param_conversion(param)}, TMP_8.$$s = self, TMP_8), $a).call($b)
                  } else {
                  return self.$props()['$[]'](name)
                }; return nil; })())
              }}, TMP_7.$$s = self, TMP_7), $a).call($g, "" + (name))
          };
        });

        Opal.defn(self, '$unchanged_processed_params', function(new_props) {
          var $a, $b, $c, TMP_9, self = this;

          return ($a = $scope.get('Hash'))['$[]'].apply($a, Opal.to_a(($b = ($c = self.processed_params).$collect, $b.$$p = (TMP_9 = function(key, value){var self = TMP_9.$$s || this, $a;
            if (self.props == null) self.props = nil;
if (key == null) key = nil;if (value == null) value = nil;
          if ((($a = self.props['$[]'](key)['$equal?'](new_props['$[]'](key))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return [key, value]
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9), $b).call($c).$compact().$flatten(1)));
        });

        Opal.defn(self, '$initialize', function(props, current_props_wrapper) {
          var $a, self = this;

          if (current_props_wrapper == null) {
            current_props_wrapper = nil
          }
          self.props = ((($a = props) !== false && $a !== nil) ? $a : $hash2([], {}));
          return self.processed_params = (function() {if (current_props_wrapper !== false && current_props_wrapper !== nil) {
            return current_props_wrapper.$unchanged_processed_params(props)
            } else {
            return $hash2([], {})
          }; return nil; })();
        });

        Opal.defn(self, '$[]', function(prop) {
          var self = this;

          return self.$props()['$[]'](prop);
        });

        self.$private();

        return (Opal.defn(self, '$value_for', function(name) {
          var $a, self = this;

          if ((($a = self['$[]'](name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self['$[]'](name).$instance_variable_get("@value")
            } else {
            return nil
          };
        }), nil) && 'value_for';
      })($scope.base, null);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/component"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$class_eval', '$class_attribute', '$define_callback', '$extend', '$name', '$include?', '$<<', '$log', '$method_defined?', '$raise', '$set_state', '$to_f', '$now', '$==', '$+', '$to_s', '$class', '$call', '$[]', '$params', '$event_camelize', '$on_opal_client?', '$load_context', '$new', '$props_wrapper', '$initial_state', '$set_state!', '$initialize_states', '$set_state_context_to', '$run_callback', '$process_exception', '$update_states_to_observe', '$sort', '$keys', '$props', '$detect', '$to_n', '$respond_to?', '$!', '$needs_update?', '$props_changed?', '$remove', '$attr_reader', '$tap', '$waiting_on_resources', '$render', '$define_state', '$to_proc']);
  self.$require("react/ext/string");
  self.$require("react/ext/hash");
  self.$require("active_support/core_ext/class/attribute");
  self.$require("react/callbacks");
  self.$require("react/rendering_context");
  self.$require("react/observable");
  self.$require("react/state");
  self.$require("react/component/api");
  self.$require("react/component/class_methods");
  self.$require("react/component/props_wrapper");
  self.$require("native");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope, $a, TMP_13, TMP_14;

      Opal.defs(self, '$included', function(base) {
        var $a, $b, TMP_1, self = this;

        base.$include($scope.get('API'));
        base.$include($scope.get('Callbacks'));
        base.$include($scope.get('Tags'));
        base.$include($scope.get('DslInstanceMethods'));
        ($a = ($b = base).$class_eval, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

        self.$class_attribute("initial_state");
          self.$define_callback("before_mount");
          self.$define_callback("after_mount");
          self.$define_callback("before_receive_props");
          self.$define_callback("before_update");
          self.$define_callback("after_update");
          return self.$define_callback("before_unmount");}, TMP_1.$$s = self, TMP_1), $a).call($b);
        return base.$extend($scope.get('ClassMethods'));
      });

      Opal.defs(self, '$deprecation_warning', function(message) {
        var $a, self = this;
        if (self.deprecation_messages == null) self.deprecation_messages = nil;

        ((($a = self.deprecation_messages) !== false && $a !== nil) ? $a : self.deprecation_messages = []);
        message = "Warning: Deprecated feature used in " + (self.$name()) + ". " + (message);
        if ((($a = self.deprecation_messages['$include?'](message)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          self.deprecation_messages['$<<'](message);
          return $scope.get('IsomorphicHelpers').$log(message, "warning");
        };
      });

      Opal.defn(self, '$initialize', function(native_element) {
        var self = this;

        return self["native"] = native_element;
      });

      if ((($a = self['$method_defined?']("render")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        Opal.defn(self, '$render', function() {
          var self = this;

          return self.$raise("no render defined");
        })
      };

      Opal.defn(self, '$update_react_js_state', function(object, name, value) {
        var self = this;

        try {(function() {if (object !== false && object !== nil) {
          return self.$set_state($hash("***_state_updated_at-***", $scope.get('Time').$now().$to_f(), "" + ((function() {if (object['$=='](self)) {
            return nil
            } else {
            return $rb_plus(object.$class().$to_s(), ".")
          }; return nil; })()) + (name), value))
          } else {
          return self.$set_state($hash(name, value))
        }; return nil; })() } catch ($err) { return nil };
      });

      Opal.defn(self, '$emit', function(event_name) {
        var $a, self = this, $splat_index = nil;

        var array_size = arguments.length - 1;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 1];
        }
        return ($a = self.$params()['$[]']("_on" + (event_name.$to_s().$event_camelize()))).$call.apply($a, Opal.to_a(args));
      });

      Opal.defn(self, '$component_will_mount', function() {
        var $a, $b, TMP_2, self = this, e = nil;
        if (self["native"] == null) self["native"] = nil;

        try {
        if ((($a = $scope.get('IsomorphicHelpers')['$on_opal_client?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            $scope.get('IsomorphicHelpers').$load_context(true)};
          self.props_wrapper = self.$class().$props_wrapper().$new($scope.get('Hash').$new(self["native"].props));
          if ((($a = self.$initial_state()) !== nil && (!$a.$$is_boolean || $a == true))) {
            self['$set_state!'](self.$initial_state())};
          $scope.get('State').$initialize_states(self, self.$initial_state());
          return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

          return self.$run_callback("before_mount")}, TMP_2.$$s = self, TMP_2), $a).call($b, self);
        } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            return self.$class().$process_exception(e, self)
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        };
      });

      Opal.defn(self, '$component_did_mount', function() {
        var $a, $b, TMP_3, self = this, e = nil;

        try {
        return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          self.$run_callback("after_mount");
            return $scope.get('State').$update_states_to_observe();}, TMP_3.$$s = self, TMP_3), $a).call($b, self)
        } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            return self.$class().$process_exception(e, self)
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        };
      });

      Opal.defn(self, '$component_will_receive_props', function(next_props) {
        var $a, $b, TMP_4, self = this, e = nil;

        try {
        return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$run_callback("before_receive_props", $scope.get('Hash').$new(next_props))}, TMP_4.$$s = self, TMP_4), $a).call($b, self)
        } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            return self.$class().$process_exception(e, self)
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        };
      });

      Opal.defn(self, '$props_changed?', function(next_props) {
        var $a, $b, TMP_5, self = this;

        if (self.$props().$keys().$sort()['$=='](next_props.$keys().$sort())) {
          } else {
          return true
        };
        return ($a = ($b = self.$props()).$detect, $a.$$p = (TMP_5 = function(k, v){var self = TMP_5.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
        return next_props['$[]'](k) != self.$params()['$[]'](k);}, TMP_5.$$s = self, TMP_5), $a).call($b);
      });

      Opal.defn(self, '$should_component_update?', function(next_props, next_state) {
        var $a, $b, TMP_6, self = this;

        return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $a;
          if (self["native"] == null) self["native"] = nil;

        next_props = $scope.get('Hash').$new(next_props);
          return (function() {if ((($a = self['$respond_to?']("needs_update?")) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self['$needs_update?'](next_props, $scope.get('Hash').$new(next_state))['$!']()['$!']()
          } else if ((($a = false) !== nil && (!$a.$$is_boolean || $a == true))) {
            return true
          } else if ((($a = self['$props_changed?'](next_props)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return true
          } else if ((($a = !next_state != !self["native"].state) !== nil && (!$a.$$is_boolean || $a == true))) {
            return true
          } else if ((($a = !next_state && !self["native"].state) !== nil && (!$a.$$is_boolean || $a == true))) {
            return false
          } else if ((($a = next_state["***_state_updated_at-***"] != self["native"].state["***_state_updated_at-***"]) !== nil && (!$a.$$is_boolean || $a == true))) {
            return true
            } else {
            return false
          }; return nil; })().$to_n();}, TMP_6.$$s = self, TMP_6), $a).call($b, self);
      });

      Opal.defn(self, '$component_will_update', function(next_props, next_state) {
        var $a, $b, TMP_7, self = this, e = nil;
        if (self.props_wrapper == null) self.props_wrapper = nil;

        try {
        ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

          return self.$run_callback("before_update", $scope.get('Hash').$new(next_props), $scope.get('Hash').$new(next_state))}, TMP_7.$$s = self, TMP_7), $a).call($b, self);
          return self.props_wrapper = self.$class().$props_wrapper().$new($scope.get('Hash').$new(next_props), self.props_wrapper);
        } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            return self.$class().$process_exception(e, self)
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        };
      });

      Opal.defn(self, '$component_did_update', function(prev_props, prev_state) {
        var $a, $b, TMP_8, self = this, e = nil;

        try {
        return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

          self.$run_callback("after_update", $scope.get('Hash').$new(prev_props), $scope.get('Hash').$new(prev_state));
            return $scope.get('State').$update_states_to_observe();}, TMP_8.$$s = self, TMP_8), $a).call($b, self)
        } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            return self.$class().$process_exception(e, self)
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        };
      });

      Opal.defn(self, '$component_will_unmount', function() {
        var $a, $b, TMP_9, self = this, e = nil;

        try {
        return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

          self.$run_callback("before_unmount");
            return $scope.get('State').$remove();}, TMP_9.$$s = self, TMP_9), $a).call($b, self)
        } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            return self.$class().$process_exception(e, self)
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        };
      });

      self.$attr_reader("waiting_on_resources");

      Opal.defn(self, '$_render_wrapper', function() {
        var $a, $b, TMP_10, self = this, e = nil;

        try {
        return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $a, $b, TMP_11, $c, $d, TMP_12;

          return ($a = ($b = ($c = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $c.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $a;

            return ((($a = self.$render()) !== false && $a !== nil) ? $a : "")}, TMP_12.$$s = self, TMP_12), $c).call($d, nil)).$tap, $a.$$p = (TMP_11 = function(element){var self = TMP_11.$$s || this, $a;
if (element == null) element = nil;
            if ((($a = element['$respond_to?']("waiting_on_resources")) !== nil && (!$a.$$is_boolean || $a == true))) {
                return self.waiting_on_resources = element.$waiting_on_resources()
                } else {
                return nil
              }}, TMP_11.$$s = self, TMP_11), $a).call($b)}, TMP_10.$$s = self, TMP_10), $a).call($b, self)
        } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            return self.$class().$process_exception(e, self)
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        };
      });

      Opal.defn(self, '$watch', TMP_13 = function(value) {
        var self = this, $iter = TMP_13.$$p, on_change = $iter || nil;

        TMP_13.$$p = null;
        return $scope.get('Observable').$new(value, on_change);
      });

      Opal.defn(self, '$define_state', TMP_14 = function() {
        var $a, $b, self = this, $iter = TMP_14.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 0];
        }
        TMP_14.$$p = null;
        return $scope.get('State').$initialize_states(self, ($a = ($b = self.$class()).$define_state, $a.$$p = block.$to_proc(), $a).apply($b, Opal.to_a(args)));
      });
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/component/dsl_instance_methods"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$flatten', '$include', '$to_n', '$new', '$<<']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $DslInstanceMethods, self = $DslInstanceMethods = $module($base, 'DslInstanceMethods');

        var def = self.$$proto, $scope = self.$$scope;

        Opal.defn(self, '$children', function() {
          var $a, self = this, nodes = nil;
          if (self["native"] == null) self["native"] = nil;

          if ((($a = self["native"].props.children==undefined) !== nil && (!$a.$$is_boolean || $a == true))) {
            nodes = []
            } else {
            nodes = [self["native"].props.children].$flatten()
          };
          (function(self) {
            var $scope = self.$$scope, def = self.$$proto, TMP_1;

            self.$include($scope.get('Enumerable'));
            Opal.defn(self, '$to_n', function() {
              var self = this;

              return self;
            });
            return (Opal.defn(self, '$each', TMP_1 = function() {
              var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil;

              TMP_1.$$p = null;
              if ((block !== nil)) {
                
                    React.Children.forEach(self.$to_n(), function(context){
              ((($a = Opal.yield1(block, (($scope.get('React')).$$scope.get('Element')).$new(context))) === $breaker) ? $breaker.$v : $a)
                    })
              ;
                return nil;
                } else {
                return ($a = ($b = $scope.get('Enumerator')).$new, $a.$$p = (TMP_2 = function(y){var self = TMP_2.$$s || this;
if (y == null) y = nil;
                
                      React.Children.forEach(self.$to_n(), function(context){
                y['$<<']($scope.get('Element').$new(context))
                      })
                ;}, TMP_2.$$s = self, TMP_2), $a).call($b, React.Children.count(self.$to_n()))
              };
            }), nil) && 'each';
          })(Opal.get_singleton_class(nodes));
          return nodes;
        });

        Opal.defn(self, '$params', function() {
          var self = this;
          if (self.props_wrapper == null) self.props_wrapper = nil;

          return self.props_wrapper;
        });

        Opal.defn(self, '$props', function() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return $scope.get('Hash').$new(self["native"].props);
        });

        Opal.defn(self, '$refs', function() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return $scope.get('Hash').$new(self["native"].refs);
        });

        Opal.defn(self, '$state', function() {
          var $a, self = this;
          if (self.state_wrapper == null) self.state_wrapper = nil;
          if (self["native"] == null) self["native"] = nil;

          return ((($a = self.state_wrapper) !== false && $a !== nil) ? $a : self.state_wrapper = $scope.get('StateWrapper').$new(self["native"], self));
        });
      })($scope.base)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/component/tags"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$render', '$to_proc', '$build_only', '$each', '$define_method', '$alias_method', '$upcase', '$const_set', '$=~', '$find_component', '$gsub', '$method_missing', '$find_name_and_parent', '$private', '$name', '$split', '$>', '$length', '$last', '$[]', '$inject', '$+', '$const_get', '$lookup_const', '$!', '$method_defined?', '$raise', '$reverse', '$to_s', '$class', '$detect', '$const_defined?']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Tags, self = $Tags = $module($base, 'Tags');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, $a, $b, TMP_3, TMP_6;

        Opal.cdecl($scope, 'HTML_TAGS', ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"]);

        Opal.defn(self, '$present', TMP_1 = function(component) {
          var $a, $b, self = this, $iter = TMP_1.$$p, children = $iter || nil, $splat_index = nil;

          var array_size = arguments.length - 1;
          if(array_size < 0) array_size = 0;
          var params = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            params[$splat_index] = arguments[$splat_index + 1];
          }
          TMP_1.$$p = null;
          return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = children.$to_proc(), $a).apply($b, [component].concat(Opal.to_a(params)));
        });

        Opal.defn(self, '$present_as_node', TMP_2 = function(component) {
          var $a, $b, self = this, $iter = TMP_2.$$p, children = $iter || nil, $splat_index = nil;

          var array_size = arguments.length - 1;
          if(array_size < 0) array_size = 0;
          var params = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            params[$splat_index] = arguments[$splat_index + 1];
          }
          TMP_2.$$p = null;
          return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$build_only, $a.$$p = children.$to_proc(), $a).apply($b, [component].concat(Opal.to_a(params)));
        });

        ($a = ($b = $scope.get('HTML_TAGS')).$each, $a.$$p = (TMP_3 = function(tag){var self = TMP_3.$$s || this, $a, $b, TMP_4, $c, TMP_5;
if (tag == null) tag = nil;
        ($a = ($b = self).$define_method, $a.$$p = (TMP_4 = function(params){var self = TMP_4.$$s || this, children, $a, $b;
params = $slice.call(arguments, 0);
            children = TMP_4.$$p || nil, TMP_4.$$p = null;
          return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = children.$to_proc(), $a).apply($b, [tag].concat(Opal.to_a(params)))}, TMP_4.$$s = self, TMP_4), $a).call($b, tag);
          self.$alias_method(tag.$upcase(), tag);
          self.$const_set(tag.$upcase(), tag);
          return ($a = ($c = self).$define_method, $a.$$p = (TMP_5 = function(params){var self = TMP_5.$$s || this, children, $a, $b;
params = $slice.call(arguments, 0);
            children = TMP_5.$$p || nil, TMP_5.$$p = null;
          return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$build_only, $a.$$p = children.$to_proc(), $a).apply($b, [tag].concat(Opal.to_a(params)))}, TMP_5.$$s = self, TMP_5), $a).call($c, "" + (tag) + "_as_node");}, TMP_3.$$s = self, TMP_3), $a).call($b);

        Opal.defn(self, '$method_missing', TMP_6 = function(name) {
          var $a, $b, $c, $d, self = this, $iter = TMP_6.$$p, children = $iter || nil, component = nil, $splat_index = nil;

          var array_size = arguments.length - 1;
          if(array_size < 0) array_size = 0;
          var params = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            params[$splat_index] = arguments[$splat_index + 1];
          }
          TMP_6.$$p = null;
          if ((($a = name['$=~'](/_as_node$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
            component = self.$find_component(name.$gsub(/_as_node$/, ""));
            if (component !== false && component !== nil) {
              return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$build_only, $a.$$p = children.$to_proc(), $a).apply($b, [component].concat(Opal.to_a(params)))};
            } else {
            component = self.$find_component(name);
            if (component !== false && component !== nil) {
              return ($a = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = children.$to_proc(), $a).apply($c, [component].concat(Opal.to_a(params)))};
          };
          return ($a = ($d = $scope.get('Object')).$method_missing, $a.$$p = children.$to_proc(), $a).apply($d, [name].concat(Opal.to_a(params)));
        });

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto;

          Opal.defn(self, '$included', function(component) {
            var $a, $b, self = this, _name = nil, parent = nil;

            $b = self.$find_name_and_parent(component), $a = Opal.to_ary($b), _name = ($a[0] == null ? nil : $a[0]), parent = ($a[1] == null ? nil : $a[1]), $b;
            return (function(self) {
              var $scope = self.$$scope, def = self.$$proto, $a, $b, TMP_7, $c, TMP_8;

              ($a = ($b = self).$define_method, $a.$$p = (TMP_7 = function(params){var self = TMP_7.$$s || this, children, $a, $b;
params = $slice.call(arguments, 0);
                children = TMP_7.$$p || nil, TMP_7.$$p = null;
              return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = children.$to_proc(), $a).apply($b, [component].concat(Opal.to_a(params)))}, TMP_7.$$s = self, TMP_7), $a).call($b, _name);
              return ($a = ($c = self).$define_method, $a.$$p = (TMP_8 = function(params){var self = TMP_8.$$s || this, children, $a, $b;
params = $slice.call(arguments, 0);
                children = TMP_8.$$p || nil, TMP_8.$$p = null;
              return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$build_only, $a.$$p = children.$to_proc(), $a).apply($b, [component].concat(Opal.to_a(params)))}, TMP_8.$$s = self, TMP_8), $a).call($c, "" + (_name) + "_as_node");
            })(Opal.get_singleton_class(parent));
          });
          self.$private();
          return (Opal.defn(self, '$find_name_and_parent', function(component) {
            var $a, $b, TMP_9, self = this, split_name = nil;

            split_name = ($a = component.$name(), $a !== false && $a !== nil ?component.$name().$split("::") : $a);
            if ((($a = (($b = split_name !== false && split_name !== nil) ? $rb_gt(split_name.$length(), 1) : split_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return [split_name.$last(), ($a = ($b = split_name).$inject, $a.$$p = (TMP_9 = function(a, e){var self = TMP_9.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
              return $rb_plus(a, [a.$last().$const_get(e)])}, TMP_9.$$s = self, TMP_9), $a).call($b, [$scope.get('Module')])['$[]'](-2)]
              } else {
              return nil
            };
          }), nil) && 'find_name_and_parent';
        })(Opal.get_singleton_class(self));

        self.$private();

        Opal.defn(self, '$find_component', function(name) {
          var $a, $b, self = this, component = nil;

          component = self.$lookup_const(name);
          if ((($a = (($b = component !== false && component !== nil) ? component['$method_defined?']("render")['$!']() : component)) !== nil && (!$a.$$is_boolean || $a == true))) {
            self.$raise("" + (name) + " does not appear to be a react component.")};
          return component;
        });

        Opal.defn(self, '$lookup_const', function(name) {
          var $a, $b, TMP_10, $c, TMP_11, self = this, scopes = nil, scope = nil;

          if ((($a = name['$=~'](/^[A-Z]/)) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          scopes = ($a = ($b = self.$class().$name().$to_s().$split("::")).$inject, $a.$$p = (TMP_10 = function(nesting, next_const){var self = TMP_10.$$s || this;
if (nesting == null) nesting = nil;if (next_const == null) next_const = nil;
          return $rb_plus(nesting, [nesting.$last().$const_get(next_const)])}, TMP_10.$$s = self, TMP_10), $a).call($b, [$scope.get('Module')]).$reverse();
          scope = ($a = ($c = scopes).$detect, $a.$$p = (TMP_11 = function(s){var self = TMP_11.$$s || this;
if (s == null) s = nil;
          return s['$const_defined?'](name)}, TMP_11.$$s = self, TMP_11), $a).call($c);
          if (scope !== false && scope !== nil) {
            return scope.$const_get(name)
            } else {
            return nil
          };
        });
      })($scope.base)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/element"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$alias_native', '$attr_reader', '$attr_accessor', '$each', '$merge_event_prop!', '$to_proc', '$to_n', '$properties', '$empty?', '$render', '$new', '$convert_props', '$type', '$merge', '$block', '$delete', '$as_node', '$gsub', '$dup', '$[]=', '$join', '$uniq', '$split', '$[]', '$merge!', '$replace', '$build', '$private', '$=~', '$merge_component_event_prop!', '$include?', '$event_camelize', '$merge_built_in_event_prop!', '$instance_variable_get', '$merge_deprecated_component_event_prop!', '$Array', '$deprecation_warning']);
  self.$require("react/ext/string");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Element(){};
      var self = $Element = $klass($base, $super, 'Element', $Element);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_5, TMP_6, TMP_7, TMP_8;

      def.type = def.properties = nil;
      self.$include($scope.get('Native'));

      self.$alias_native("element_type", "type");

      self.$alias_native("props", "props");

      self.$attr_reader("type");

      self.$attr_reader("properties");

      self.$attr_reader("block");

      self.$attr_accessor("waiting_on_resources");

      Opal.defn(self, '$initialize', function(native_element, type, properties, block) {
        var $a, $b, self = this;

        self.type = type;
        self.properties = ((($a = ((function() {if ((($b = typeof properties === 'undefined') !== nil && (!$b.$$is_boolean || $b == true))) {
          return nil
          } else {
          return properties
        }; return nil; })())) !== false && $a !== nil) ? $a : $hash2([], {}));
        self.block = block;
        return self["native"] = native_element;
      });

      Opal.defn(self, '$on', TMP_1 = function() {
        var $a, $b, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var event_names = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          event_names[$splat_index] = arguments[$splat_index + 0];
        }
        TMP_1.$$p = null;
        ($a = ($b = event_names).$each, $a.$$p = (TMP_2 = function(event_name){var self = TMP_2.$$s || this, $a, $b;
if (event_name == null) event_name = nil;
        return ($a = ($b = self)['$merge_event_prop!'], $a.$$p = block.$to_proc(), $a).call($b, event_name)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        self["native"] = React.cloneElement(self.$to_n(), self.$properties().$to_n());
        return self;
      });

      Opal.defn(self, '$render', function(props) {
        var $a, self = this;

        if (props == null) {
          props = $hash2([], {})
        }
        if ((($a = props['$empty?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (($scope.get('React')).$$scope.get('RenderingContext')).$render(self)
          } else {
          return (($scope.get('React')).$$scope.get('RenderingContext')).$render($scope.get('Element').$new(React.cloneElement(self.$to_n(), $scope.get('API').$convert_props(props)), self.$type(), self.$properties().$merge(props), self.$block()))
        };
      });

      Opal.defn(self, '$delete', function() {
        var self = this;

        return (($scope.get('React')).$$scope.get('RenderingContext')).$delete(self);
      });

      Opal.defn(self, '$as_node', function() {
        var self = this;

        return (($scope.get('React')).$$scope.get('RenderingContext')).$as_node(self);
      });

      Opal.defn(self, '$method_missing', TMP_3 = function(class_name, args) {
        var $a, $b, TMP_4, self = this, $iter = TMP_3.$$p, new_block = $iter || nil, new_props = nil;

        if (args == null) {
          args = $hash2([], {})
        }
        TMP_3.$$p = null;
        class_name = class_name.$gsub(/__|_/, $hash2(["__", "_"], {"__": "_", "_": "-"}));
        new_props = self.$properties().$dup();
        new_props['$[]=']("class", ((((((((("        ") + (class_name)) + " ") + (new_props['$[]']("class"))) + " ") + (args.$delete("class"))) + " ") + (args.$delete("className"))) + "      ").$split(" ").$uniq().$join(" "));
        new_props['$merge!'](args);
        return (($scope.get('React')).$$scope.get('RenderingContext')).$replace(self, ($a = ($b = $scope.get('RenderingContext')).$build, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $a, $b;

        return ($a = ($b = $scope.get('RenderingContext')).$render, $a.$$p = new_block.$to_proc(), $a).call($b, self.$type(), new_props)}, TMP_4.$$s = self, TMP_4), $a).call($b));
      });

      self.$private();

      Opal.defn(self, '$merge_event_prop!', TMP_5 = function(event_name) {
        var $a, $b, $c, $d, $e, $f, self = this, $iter = TMP_5.$$p, block = $iter || nil, name = nil;

        TMP_5.$$p = null;
        if ((($a = event_name['$=~'](/^<(.+)>$/)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self)['$merge_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($b, event_name.$gsub(/^<(.+)>$/, "\\1"))
        } else if ((($a = (((($scope.get('React')).$$scope.get('Event'))).$$scope.get('BUILT_IN_EVENTS'))['$include?'](name = "on" + (event_name.$event_camelize()))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($c = self)['$merge_built_in_event_prop!'], $a.$$p = block.$to_proc(), $a).call($c, name)
        } else if ((($a = self.type.$instance_variable_get("@native_import")) !== nil && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($d = self)['$merge_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($d, name)
          } else {
          ($a = ($e = self)['$merge_deprecated_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($e, event_name);
          return ($a = ($f = self)['$merge_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($f, "on_" + (event_name));
        };
      });

      Opal.defn(self, '$merge_built_in_event_prop!', TMP_6 = function(prop_name) {
        var $a, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

        TMP_6.$$p = null;
        return self.properties['$merge!']($hash(prop_name, 
          function(event){
            return ((($a = Opal.yield1($yield, (($scope.get('React')).$$scope.get('Event')).$new(event))) === $breaker) ? $breaker.$v : $a)
          }
        ));
      });

      Opal.defn(self, '$merge_component_event_prop!', TMP_7 = function(prop_name) {
        var $a, self = this, $iter = TMP_7.$$p, $yield = $iter || nil;

        TMP_7.$$p = null;
        return self.properties['$merge!']($hash(prop_name, 
          function(){
            return ((($a = Opal.yieldX($yield, Opal.to_a(self.$Array(arguments)))) === $breaker) ? $breaker.$v : $a)
          }
        ));
      });

      return (Opal.defn(self, '$merge_deprecated_component_event_prop!', TMP_8 = function(event_name) {
        var $a, self = this, $iter = TMP_8.$$p, $yield = $iter || nil, prop_name = nil, fn = nil;

        TMP_8.$$p = null;
        prop_name = "_on" + (event_name.$event_camelize());
        fn = function(){(($scope.get('React')).$$scope.get('Component')).$deprecation_warning("In future releases React::Element#on('" + (event_name) + "') will no longer respond " + ("to the '" + (prop_name) + "' emitter.\n") + ("Rename your emitter param to 'on_" + (event_name) + "' or use .on('<" + (prop_name) + ">')"))
        return ((($a = Opal.yieldX($yield, Opal.to_a(self.$Array(arguments)))) === $breaker) ? $breaker.$v : $a)
      };
        return self.properties['$merge!']($hash(prop_name, fn));
      }), nil) && 'merge_deprecated_component_event_prop!';
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/event"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope;

      self.$include($scope.get('Native'));

      self.$alias_native("bubbles", "bubbles");

      self.$alias_native("cancelable", "cancelable");

      self.$alias_native("current_target", "currentTarget");

      self.$alias_native("default_prevented", "defaultPrevented");

      self.$alias_native("event_phase", "eventPhase");

      self.$alias_native("is_trusted?", "isTrusted");

      self.$alias_native("native_event", "nativeEvent");

      self.$alias_native("target", "target");

      self.$alias_native("timestamp", "timeStamp");

      self.$alias_native("event_type", "type");

      self.$alias_native("prevent_default", "preventDefault");

      self.$alias_native("stop_propagation", "stopPropagation");

      self.$alias_native("clipboard_data", "clipboardData");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("char_code", "charCode");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("key", "key");

      self.$alias_native("key_code", "keyCode");

      self.$alias_native("locale", "locale");

      self.$alias_native("location", "location");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("repeat", "repeat");

      self.$alias_native("shift_key", "shiftKey");

      self.$alias_native("which", "which");

      self.$alias_native("related_target", "relatedTarget");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("button", "button");

      self.$alias_native("buttons", "buttons");

      self.$alias_native("client_x", "clientX");

      self.$alias_native("client_y", "clientY");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("page_x", "pageX");

      self.$alias_native("page_y", "pageY");

      self.$alias_native("related_target", "relatedTarget");

      self.$alias_native("screen_x", "screen_x");

      self.$alias_native("screen_y", "screen_y");

      self.$alias_native("shift_key", "shift_key");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("changed_touches", "changedTouches");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("shift_key", "shiftKey");

      self.$alias_native("target_touches", "targetTouches");

      self.$alias_native("touches", "touches");

      self.$alias_native("detail", "detail");

      self.$alias_native("view", "view");

      self.$alias_native("delta_mode", "deltaMode");

      self.$alias_native("delta_x", "deltaX");

      self.$alias_native("delta_y", "deltaY");

      self.$alias_native("delta_z", "deltaZ");

      Opal.cdecl($scope, 'BUILT_IN_EVENTS', ["onCopy", "onCut", "onPaste", "onKeyDown", "onKeyPress", "onKeyUp", "onFocus", "onBlur", "onChange", "onInput", "onSubmit", "onClick", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp", "onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart", "onScroll"]);

      return (Opal.defn(self, '$initialize', function(native_element) {
        var self = this;

        return self["native"] = native_element;
      }), nil) && 'initialize';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/native_library"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$each', '$lookup_native_name', '$create_component_wrapper', '$create_library_wrapper', '$raise', '$name', '$scope_native_name', '$+', '$downcase', '$[]', '$import_const_from_native', '$gsub', '$const_defined?', '$get_const', '$==', '$render', '$to_proc', '$build_only', '$private', '$native_react_component?', '$const_set', '$new', '$class_eval', '$include', '$imports']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $NativeLibrary(){};
      var self = $NativeLibrary = $klass($base, $super, 'NativeLibrary', $NativeLibrary);

      var def = self.$$proto, $scope = self.$$scope;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_2, TMP_3;

        Opal.defn(self, '$imports', function(native_name) {
          var self = this;

          self.native_prefix = "" + (native_name) + ".";
          return self;
        });
        Opal.defn(self, '$rename', function(rename_list) {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = rename_list).$each, $a.$$p = (TMP_1 = function(js_name, ruby_name){var self = TMP_1.$$s || this, $a, native_name = nil;
if (js_name == null) js_name = nil;if (ruby_name == null) ruby_name = nil;
          native_name = self.$lookup_native_name(js_name);
            if ((($a = self.$lookup_native_name(js_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
              return ((($a = self.$create_component_wrapper(self, native_name, ruby_name)) !== false && $a !== nil) ? $a : self.$create_library_wrapper(self, native_name, ruby_name))
              } else {
              return self.$raise("class " + (self.$name()) + " < React::NativeLibrary could not import " + (js_name) + ". " + ("Native value " + (self.$scope_native_name(js_name)) + " is undefined."))
            };}, TMP_1.$$s = self, TMP_1), $a).call($b);
        });
        Opal.defn(self, '$import_const_from_native', function(klass, const_name, create_library) {
          var $a, $b, $c, self = this, native_name = nil;

          native_name = ((($a = self.$lookup_native_name(const_name)) !== false && $a !== nil) ? $a : self.$lookup_native_name($rb_plus(const_name['$[]'](0).$downcase(), const_name['$[]']($range(1, -1, false)))));
          return (($a = native_name !== false && native_name !== nil) ? (((($b = self.$create_component_wrapper(klass, native_name, const_name)) !== false && $b !== nil) ? $b : ((($c = create_library !== false && create_library !== nil) ? self.$create_library_wrapper(klass, native_name, const_name) : create_library)))) : native_name);
        });
        Opal.defn(self, '$const_missing', TMP_2 = function(const_name) {
          var $a, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

          TMP_2.$$p = null;
          $zuper = [];
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          return ((($a = self.$import_const_from_native(self, const_name, true)) !== false && $a !== nil) ? $a : Opal.find_super_dispatcher(self, 'const_missing', TMP_2, $iter).apply(self, $zuper));
        });
        Opal.defn(self, '$method_missing', TMP_3 = function(method_name) {
          var $a, $b, $c, self = this, $iter = TMP_3.$$p, block = $iter || nil, method = nil, component_class = nil, $splat_index = nil;

          var array_size = arguments.length - 1;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 1];
          }
          TMP_3.$$p = null;
          method = method_name.$gsub(/_as_node$/, "");
          if ((($a = self['$const_defined?'](method)) !== nil && (!$a.$$is_boolean || $a == true))) {
            component_class = self.$get_const(method)};
          ((($a = component_class) !== false && $a !== nil) ? $a : component_class = self.$import_const_from_native(self, method, false));
          if (component_class !== false && component_class !== nil) {
            } else {
            self.$raise("could not import a react component named: " + (self.$scope_native_name(method)))
          };
          if (method['$=='](method_name)) {
            return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = block.$to_proc(), $a).apply($b, [component_class].concat(Opal.to_a(args)))
            } else {
            return ($a = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$build_only, $a.$$p = block.$to_proc(), $a).apply($c, [component_class].concat(Opal.to_a(args)))
          };
        });
        self.$private();
        Opal.defn(self, '$lookup_native_name', function(js_name) {
          var self = this, native_name = nil;

          try {
          native_name = self.$scope_native_name(js_name);
            return eval(native_name) !== undefined && native_name;
          } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {
            try {
              return nil
            } finally {
              Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
            }
            }else { throw $err; }
          };
        });
        Opal.defn(self, '$scope_native_name', function(js_name) {
          var self = this;
          if (self.native_prefix == null) self.native_prefix = nil;

          return "" + (self.native_prefix) + (js_name);
        });
        Opal.defn(self, '$create_component_wrapper', function(klass, native_name, ruby_name) {
          var $a, $b, TMP_4, self = this, new_klass = nil;

          if ((($a = (($scope.get('React')).$$scope.get('API'))['$native_react_component?'](native_name)) !== nil && (!$a.$$is_boolean || $a == true))) {
            new_klass = klass.$const_set(ruby_name, $scope.get('Class').$new());
            ($a = ($b = new_klass).$class_eval, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

            self.$include((($scope.get('React')).$$scope.get('Component')));
              return self.$imports(native_name);}, TMP_4.$$s = self, TMP_4), $a).call($b);
            return new_klass;
            } else {
            return nil
          };
        });
        return (Opal.defn(self, '$create_library_wrapper', function(klass, native_name, ruby_name) {
          var self = this;

          return klass.$const_set(ruby_name, $scope.get('Class').$new((($scope.get('React')).$$scope.get('NativeLibrary'))).$imports(native_name));
        }), nil) && 'create_library_wrapper';
      })(Opal.get_singleton_class(self))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/api"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$instance_variable_set', '$[]=', '$raise', '$eval_native_react_component', '$!', '$method_defined?', '$[]', '$name', '$respond_to?', '$to_n', '$prop_types', '$default_props', '$native_mixins', '$static_call_backs', '$component_will_mount', '$component_did_mount', '$component_will_receive_props', '$should_component_update?', '$component_will_update', '$component_did_update', '$component_will_unmount', '$new', '$send', '$<<', '$kind_of?', '$create_native_react_class', '$include?', '$is_a?', '$convert_props', '$each', '$flatten', '$map', '$==', '$lower_camelize', '$tr', '$shallow_to_n', '$private', '$split', '$first', '$concat', '$+', '$upcase', '$join']);
  self.$require("react/native_library");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $API(){};
      var self = $API = $klass($base, $super, 'API', $API);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      (Opal.cvars['@@component_classes'] = $hash2([], {}));

      Opal.defs(self, '$import_native_component', function(opal_class, native_class) {
        var $a, self = this;

        opal_class.$instance_variable_set("@native_import", true);
        return (($a = Opal.cvars['@@component_classes']) == null ? nil : $a)['$[]='](opal_class, native_class);
      });

      Opal.defs(self, '$eval_native_react_component', function(name) {
        var $a, $b, $c, self = this, component = nil;

        component = eval(name);
        if ((($a = component === undefined) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise("" + (name) + " is not defined")};
        if ((($a = ($b = component.prototype !== undefined, $b !== false && $b !== nil ?(((($c = !!component.prototype.isReactComponent) !== false && $c !== nil) ? $c : !!component.prototype.render)) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise("does not appear to be a native react component")
        };
        return component;
      });

      Opal.defs(self, '$native_react_component?', function(name) {
        var self = this;

        try {
        return self.$eval_native_react_component(name)
        } catch ($err) {if (true) {
          try {
            return nil
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        };
      });

      Opal.defs(self, '$create_native_react_class', function(type) {
        var $a, $b, $c, $d, self = this, render_fn = nil;

        if ((($a = (type['$method_defined?']("render"))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          self.$raise("Provided class should define `render` method")};
        render_fn = (function() {if ((($a = (type['$method_defined?']("_render_wrapper"))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "_render_wrapper"
          } else {
          return "render"
        }; return nil; })();
        return ($a = type, $b = (($c = Opal.cvars['@@component_classes']) == null ? nil : $c), ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, 
        React.createClass({
          displayName: type.$name(),
          propTypes: (function() {if ((($d = type['$respond_to?']("prop_types")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return type.$prop_types().$to_n()
          } else {
          return {};
        }; return nil; })(),
          getDefaultProps: function(){
            return (function() {if ((($d = type['$respond_to?']("default_props")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return type.$default_props().$to_n()
          } else {
          return {};
        }; return nil; })();
          },
          mixins: (function() {if ((($d = type['$respond_to?']("native_mixins")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return type.$native_mixins()
          } else {
          return [];
        }; return nil; })(),
          statics: (function() {if ((($d = type['$respond_to?']("static_call_backs")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return type.$static_call_backs().$to_n()
          } else {
          return {};
        }; return nil; })(),
          componentWillMount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_mount")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_mount()
          } else {
          return nil
        }; return nil; })();
          },
          componentDidMount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_did_mount")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_did_mount()
          } else {
          return nil
        }; return nil; })();
          },
          componentWillReceiveProps: function(next_props) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_receive_props")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_receive_props(next_props)
          } else {
          return nil
        }; return nil; })();
          },
          shouldComponentUpdate: function(next_props, next_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("should_component_update?")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance)['$should_component_update?'](next_props, next_state)
          } else {
          return nil
        }; return nil; })();
          },
          componentWillUpdate: function(next_props, next_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_update")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_update(next_props, next_state)
          } else {
          return nil
        }; return nil; })();
          },
          componentDidUpdate: function(prev_props, prev_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_did_update")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_did_update(prev_props, prev_state)
          } else {
          return nil
        }; return nil; })();
          },
          componentWillUnmount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_unmount")) !== nil && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_unmount()
          } else {
          return nil
        }; return nil; })();
          },
          _getOpalInstance: function() {
            if (this.__opalInstance == undefined) {
              var instance = type.$new(this);
            } else {
              var instance = this.__opalInstance;
            }
            this.__opalInstance = instance;
            return instance;
          },
          render: function() {
            var instance = this._getOpalInstance.apply(this);
            return (instance).$send(render_fn).$to_n();
          }
        })
      )));
      });

      Opal.defs(self, '$create_element', TMP_1 = function(type, properties) {
        var $a, $b, TMP_2, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil, params = nil, children = nil;

        if (properties == null) {
          properties = $hash2([], {})
        }
        TMP_1.$$p = null;
        params = [];
        if ((($a = (($b = Opal.cvars['@@component_classes']) == null ? nil : $b)['$[]'](type)) !== nil && (!$a.$$is_boolean || $a == true))) {
          params['$<<']((($a = Opal.cvars['@@component_classes']) == null ? nil : $a)['$[]'](type))
        } else if ((($a = type['$kind_of?']($scope.get('Class'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          params['$<<'](self.$create_native_react_class(type))
        } else if ((($a = (((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Tags'))).$$scope.get('HTML_TAGS'))['$include?'](type)) !== nil && (!$a.$$is_boolean || $a == true))) {
          params['$<<'](type)
        } else if ((($a = type['$is_a?']($scope.get('String'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          return (($scope.get('React')).$$scope.get('Element')).$new(type)
          } else {
          self.$raise("" + (type) + " not implemented")
        };
        params['$<<'](self.$convert_props(properties));
        if ((block !== nil)) {
          children = ($a = ($b = [((($c = Opal.yieldX(block, [])) === $breaker) ? $breaker.$v : $c)].$flatten()).$each, $a.$$p = (TMP_2 = function(ele){var self = TMP_2.$$s || this;
if (ele == null) ele = nil;
          return params['$<<'](ele.$to_n())}, TMP_2.$$s = self, TMP_2), $a).call($b)};
        return (($scope.get('React')).$$scope.get('Element')).$new(React.createElement.apply(null, params), type, properties, block);
      });

      Opal.defs(self, '$clear_component_class_cache', function() {
        var self = this;

        return (Opal.cvars['@@component_classes'] = $hash2([], {}));
      });

      Opal.defs(self, '$convert_props', function(properties) {
        var $a, $b, TMP_3, self = this, props = nil;

        if ((($a = properties['$is_a?']($scope.get('Hash'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise("Component parameters must be a hash. Instead you sent " + (properties))
        };
        props = $hash2([], {});
        ($a = ($b = properties).$map, $a.$$p = (TMP_3 = function(key, value){var self = TMP_3.$$s || this, $a, $b, TMP_4;
if (key == null) key = nil;if (value == null) value = nil;
        if ((($a = (($b = key['$==']("class_name")) ? value['$is_a?']($scope.get('Hash')) : key['$==']("class_name"))) !== nil && (!$a.$$is_boolean || $a == true))) {
            return props['$[]='](self.$lower_camelize(key), React.addons.classSet(value.$to_n()))
          } else if (key['$==']("class")) {
            return props['$[]=']("className", value)
          } else if ((($a = ["style", "dangerously_set_inner_HTML"]['$include?'](key)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return props['$[]='](self.$lower_camelize(key), value.$to_n())
          } else if ((($a = ($b = (($scope.get('React')).$$scope.get('HASH_ATTRIBUTES'))['$include?'](key), $b !== false && $b !== nil ?value['$is_a?']($scope.get('Hash')) : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = value).$each, $a.$$p = (TMP_4 = function(k, v){var self = TMP_4.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
            return props['$[]=']("" + (key) + "-" + (k.$tr("_", "-")), v.$to_n())}, TMP_4.$$s = self, TMP_4), $a).call($b)
            } else {
            return props['$[]=']((function() {if ((($a = (($scope.get('React')).$$scope.get('ATTRIBUTES'))['$include?'](self.$lower_camelize(key))) !== nil && (!$a.$$is_boolean || $a == true))) {
              return self.$lower_camelize(key)
              } else {
              return key
            }; return nil; })(), value)
          }}, TMP_3.$$s = self, TMP_3), $a).call($b);
        return props.$shallow_to_n();
      });

      self.$private();

      return (Opal.defs(self, '$lower_camelize', function(snake_cased_word) {
        var $a, $b, TMP_5, self = this, words = nil, result = nil;

        words = snake_cased_word.$split("_");
        result = [words.$first()];
        result.$concat(($a = ($b = words['$[]']($range(1, -1, false))).$map, $a.$$p = (TMP_5 = function(word){var self = TMP_5.$$s || this;
if (word == null) word = nil;
        return $rb_plus(word['$[]'](0).$upcase(), word['$[]']($range(1, -1, false)))}, TMP_5.$$s = self, TMP_5), $a).call($b));
        return result.$join("");
      }), nil) && 'lower_camelize';
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["react/validator"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$private', '$build', '$to_proc', '$new', '$instance_eval', '$[]=', '$define_rule', '$allow_undefined_props=', '$reject', '$[]', '$rules', '$errors=', '$allow_undefined_props?', '$validate_undefined', '$coerce_native_hash_values', '$defined_props', '$validate_required', '$each', '$validate_types', '$validate_allowed', '$errors', '$inject', '$select', '$include?', '$keys', '$!', '$==', '$define_param', '$is_a?', '$type_check', '$>', '$length', '$validate_value_array', '$nil?', '$respond_to?', '$_react_param_conversion', '$<<', '$-', '$each_with_index', '$Native']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Validator(){};
      var self = $Validator = $klass($base, $super, 'Validator', $Validator);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def.allow_undefined_props = def.rules = def.component_class = def.errors = nil;
      self.$attr_accessor("errors");

      self.$private("errors");

      Opal.defn(self, '$initialize', function(component_class) {
        var self = this;

        return self.component_class = component_class;
      });

      Opal.defs(self, '$build', TMP_1 = function() {
        var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        TMP_1.$$p = null;
        return ($a = ($b = self.$new()).$build, $a.$$p = block.$to_proc(), $a).call($b);
      });

      Opal.defn(self, '$build', TMP_2 = function() {
        var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
        return self;
      });

      Opal.defn(self, '$requires', function(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {})
        }
        options['$[]=']("required", true);
        return self.$define_rule(name, options);
      });

      Opal.defn(self, '$optional', function(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {})
        }
        options['$[]=']("required", false);
        return self.$define_rule(name, options);
      });

      Opal.defn(self, '$allow_undefined_props=', function(allow) {
        var self = this;

        return self.allow_undefined_props = allow;
      });

      Opal.defn(self, '$undefined_props', function(props) {
        var $a, $b, TMP_3, self = this;

        (($a = [true]), $b = self, $b['$allow_undefined_props='].apply($b, $a), $a[$a.length-1]);
        return ($a = ($b = props).$reject, $a.$$p = (TMP_3 = function(name, value){var self = TMP_3.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
        return self.$rules()['$[]'](name)}, TMP_3.$$s = self, TMP_3), $a).call($b);
      });

      Opal.defn(self, '$validate', function(props) {
        var $a, $b, TMP_4, self = this;

        (($a = [[]]), $b = self, $b['$errors='].apply($b, $a), $a[$a.length-1]);
        if ((($a = self['$allow_undefined_props?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$validate_undefined(props)
        };
        props = self.$coerce_native_hash_values(self.$defined_props(props));
        self.$validate_required(props);
        ($a = ($b = props).$each, $a.$$p = (TMP_4 = function(name, value){var self = TMP_4.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
        self.$validate_types(name, value);
          return self.$validate_allowed(name, value);}, TMP_4.$$s = self, TMP_4), $a).call($b);
        return self.$errors();
      });

      Opal.defn(self, '$default_props', function() {
        var $a, $b, TMP_5, $d, $e, TMP_6, self = this;

        return ($a = ($b = ($d = ($e = self.$rules()).$select, $d.$$p = (TMP_6 = function(key, value){var self = TMP_6.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return value.$keys()['$include?']("default")}, TMP_6.$$s = self, TMP_6), $d).call($e)).$inject, $a.$$p = (TMP_5 = function(memo, $c){var self = TMP_5.$$s || this;
if (memo == null) memo = nil;var k = $c[0], v = $c[1];
        memo['$[]='](k, v['$[]']("default"));
          return memo;}, TMP_5.$$s = self, TMP_5), $a).call($b, $hash2([], {}));
      });

      self.$private();

      Opal.defn(self, '$defined_props', function(props) {
        var $a, $b, TMP_7, self = this;

        return ($a = ($b = props).$select, $a.$$p = (TMP_7 = function(name){var self = TMP_7.$$s || this;
if (name == null) name = nil;
        return self.$rules().$keys()['$include?'](name)}, TMP_7.$$s = self, TMP_7), $a).call($b);
      });

      Opal.defn(self, '$allow_undefined_props?', function() {
        var self = this;

        return self.allow_undefined_props['$!']()['$!']();
      });

      Opal.defn(self, '$rules', function() {
        var $a, self = this;

        return ((($a = self.rules) !== false && $a !== nil) ? $a : self.rules = $hash2(["children"], {"children": $hash2(["required"], {"required": false})}));
      });

      Opal.defn(self, '$define_rule', function(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {})
        }
        self.$rules()['$[]='](name, self.$coerce_native_hash_values(options));
        if (name['$==']("params")) {
          return nil
          } else {
          return self.component_class.$define_param(name, options['$[]']("type"))
        };
      });

      Opal.defn(self, '$errors', function() {
        var $a, self = this;

        return ((($a = self.errors) !== false && $a !== nil) ? $a : self.errors = []);
      });

      Opal.defn(self, '$validate_types', function(prop_name, value) {
        var $a, self = this, klass = nil, allow_nil = nil;

        if ((($a = klass = self.$rules()['$[]'](prop_name)['$[]']("type")) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if ((($a = klass['$is_a?']($scope.get('Array'))['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
          return self.$type_check("`" + (prop_name) + "`", value, klass, allow_nil);
        } else if ((($a = $rb_gt(klass.$length(), 0)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return self.$validate_value_array(prop_name, value)
          } else {
          allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
          return self.$type_check("`" + (prop_name) + "`", value, $scope.get('Array'), allow_nil);
        };
      });

      Opal.defn(self, '$type_check', function(prop_name, value, klass, allow_nil) {
        var $a, $b, self = this;

        if ((($a = (($b = allow_nil !== false && allow_nil !== nil) ? value['$nil?']() : allow_nil)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        if ((($a = value['$is_a?'](klass)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        if ((($a = ($b = klass['$respond_to?']("_react_param_conversion"), $b !== false && $b !== nil ?klass.$_react_param_conversion(value, "validate_only") : $b)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.$errors()['$<<']("Provided prop " + (prop_name) + " could not be converted to " + (klass));
      });

      Opal.defn(self, '$validate_allowed', function(prop_name, value) {
        var $a, self = this, values = nil;

        if ((($a = values = self.$rules()['$[]'](prop_name)['$[]']("values")) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if ((($a = values['$include?'](value)) !== nil && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.$errors()['$<<']("Value `" + (value) + "` for prop `" + (prop_name) + "` is not an allowed value");
      });

      Opal.defn(self, '$validate_required', function(props) {
        var $a, $b, TMP_8, self = this;

        return ($a = ($b = ($rb_minus(self.$rules().$keys(), props.$keys()))).$each, $a.$$p = (TMP_8 = function(name){var self = TMP_8.$$s || this, $a;
if (name == null) name = nil;
        if ((($a = self.$rules()['$[]'](name)['$[]']("required")) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil;
          };
          return self.$errors()['$<<']("Required prop `" + (name) + "` was not specified");}, TMP_8.$$s = self, TMP_8), $a).call($b);
      });

      Opal.defn(self, '$validate_undefined', function(props) {
        var $a, $b, TMP_9, self = this;

        return ($a = ($b = ($rb_minus(props.$keys(), self.$rules().$keys()))).$each, $a.$$p = (TMP_9 = function(prop_name){var self = TMP_9.$$s || this;
if (prop_name == null) prop_name = nil;
        return self.$errors()['$<<']("Provided prop `" + (prop_name) + "` not specified in spec")}, TMP_9.$$s = self, TMP_9), $a).call($b);
      });

      Opal.defn(self, '$validate_value_array', function(name, value) {
        var $a, $b, TMP_10, self = this, klass = nil, allow_nil = nil;

        try {
        klass = self.$rules()['$[]'](name)['$[]']("type");
          allow_nil = self.$rules()['$[]'](name)['$[]']("allow_nil")['$!']()['$!']();
          return ($a = ($b = value).$each_with_index, $a.$$p = (TMP_10 = function(item, index){var self = TMP_10.$$s || this;
if (item == null) item = nil;if (index == null) index = nil;
          return self.$type_check("`" + (name) + "`[" + (index) + "]", self.$Native(item), klass['$[]'](0), allow_nil)}, TMP_10.$$s = self, TMP_10), $a).call($b);
        } catch ($err) {if (Opal.rescue($err, [$scope.get('NoMethodError')])) {
          try {
            return self.$errors()['$<<']("Provided prop `" + (name) + "` was not an Array")
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        };
      });

      return (Opal.defn(self, '$coerce_native_hash_values', function(hash) {
        var $a, $b, TMP_11, self = this;

        return ($a = ($b = hash).$each, $a.$$p = (TMP_11 = function(key, value){var self = TMP_11.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return hash['$[]='](key, self.$Native(value))}, TMP_11.$$s = self, TMP_11), $a).call($b);
      }), nil) && 'coerce_native_hash_values';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["reactive-ruby/isomorphic_helpers"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $klass = Opal.klass;

  Opal.add_stubs(['$extend', '$!=', '$!', '$unique_id', '$on_opal_server?', '$log', '$new', '$is_a?', '$==', '$+', '$[]', '$class', '$on_opal_client?', '$join', '$collect', '$call', '$prerender_footer_blocks', '$attr_reader', '$each', '$before_first_mount_blocks', '$eval', '$length', '$load!', '$<<', '$first', '$send_to_server', '$to_json', '$parse', '$controller', '$context', '$register_before_first_mount_block', '$to_proc', '$register_prerender_footer_block', '$require', '$send', '$result']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $IsomorphicHelpers, self = $IsomorphicHelpers = $module($base, 'IsomorphicHelpers');

      var def = self.$$proto, $scope = self.$$scope, $a;

      Opal.defs(self, '$included', function(base) {
        var self = this;

        return base.$extend($scope.get('ClassMethods'));
      });

      if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        Opal.defs(self, '$load_context', function(unique_id, name) {
          var $a, $b, $c, self = this, message = nil;
          if (self.context == null) self.context = nil;

          if (unique_id == null) {
            unique_id = nil
          }
          if (name == null) {
            name = nil
          }
          if ((($a = ((($b = ((($c = unique_id['$!']()) !== false && $c !== nil) ? $c : self.context['$!']())) !== false && $b !== nil) ? $b : self.context.$unique_id()['$!='](unique_id))) !== nil && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self['$on_opal_server?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
              message = "************************ React Prerendering Context Initialized " + (name) + " ***********************"
              } else {
              message = "************************ React Browser Context Initialized ****************************"
            };
            self.$log(message);
            self.context = $scope.get('Context').$new(unique_id);};
          return self.context;
        })
      };

      Opal.defs(self, '$log', function(message, message_type) {
        var $a, self = this, style = nil;

        if (message_type == null) {
          message_type = "info"
        }
        if ((($a = message['$is_a?']($scope.get('Array'))) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          message = [message]
        };
        if (message_type['$==']("info")) {
          if ((($a = self['$on_opal_server?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            style = "background: #00FFFF; color: red"
            } else {
            style = "background: #222; color: #bada55"
          };
          message = $rb_plus([$rb_plus("%c", message['$[]'](0)), style], message['$[]']($range(1, -1, false)));
          return console.log.apply(console, message);
        } else if (message_type['$==']("warning")) {
          return console.warn.apply(console, message);
          } else {
          return console.error.apply(console, message);
        };
      });

      if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        Opal.defs(self, '$on_opal_server?', function() {
          var self = this;

          return typeof window.document === 'undefined';
        });

        Opal.defs(self, '$on_opal_client?', function() {
          var self = this;

          return self['$on_opal_server?']()['$!']();
        });
      };

      Opal.defn(self, '$log', function() {
        var $a, self = this, $splat_index = nil;

        var array_size = arguments.length - 0;
        if(array_size < 0) array_size = 0;
        var args = new Array(array_size);
        for($splat_index = 0; $splat_index < array_size; $splat_index++) {
          args[$splat_index] = arguments[$splat_index + 0];
        }
        return ($a = $scope.get('IsomorphicHelpers')).$log.apply($a, Opal.to_a(args));
      });

      Opal.defn(self, '$on_opal_server?', function() {
        var self = this;

        return self.$class()['$on_opal_server?']();
      });

      Opal.defn(self, '$on_opal_client?', function() {
        var self = this;

        return self.$class()['$on_opal_client?']();
      });

      Opal.defs(self, '$prerender_footers', function() {
        var $a, $b, TMP_1, self = this, footer = nil;

        footer = ($a = ($b = $scope.get('Context').$prerender_footer_blocks()).$collect, $a.$$p = (TMP_1 = function(block){var self = TMP_1.$$s || this;
if (block == null) block = nil;
        return block.$call()}, TMP_1.$$s = self, TMP_1), $a).call($b).$join("\n");
        if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && (!$a.$$is_boolean || $a == true))) {};
        return footer;
      });

      (function($base, $super) {
        function $Context(){};
        var self = $Context = $klass($base, $super, 'Context', $Context);

        var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5;

        def.ctx = nil;
        self.$attr_reader("controller");

        self.$attr_reader("unique_id");

        Opal.defs(self, '$before_first_mount_blocks', function() {
          var $a, self = this;
          if (self.before_first_mount_blocks == null) self.before_first_mount_blocks = nil;

          return ((($a = self.before_first_mount_blocks) !== false && $a !== nil) ? $a : self.before_first_mount_blocks = []);
        });

        Opal.defs(self, '$prerender_footer_blocks', function() {
          var $a, self = this;
          if (self.prerender_footer_blocks == null) self.prerender_footer_blocks = nil;

          return ((($a = self.prerender_footer_blocks) !== false && $a !== nil) ? $a : self.prerender_footer_blocks = []);
        });

        Opal.defn(self, '$initialize', function(unique_id, ctx, controller, name) {
          var $a, $b, TMP_2, self = this;

          if (ctx == null) {
            ctx = nil
          }
          if (controller == null) {
            controller = nil
          }
          if (name == null) {
            name = nil
          }
          self.unique_id = unique_id;
          if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && (!$a.$$is_boolean || $a == true))) {};
          return ($a = ($b = self.$class().$before_first_mount_blocks()).$each, $a.$$p = (TMP_2 = function(block){var self = TMP_2.$$s || this;
if (block == null) block = nil;
          return block.$call(self)}, TMP_2.$$s = self, TMP_2), $a).call($b);
        });

        Opal.defn(self, '$eval', function(js) {
          var $a, self = this;

          if ((($a = self.ctx) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.ctx.$eval(js)
            } else {
            return nil
          };
        });

        Opal.defn(self, '$send_to_opal', function(method) {
          var $a, $b, TMP_3, self = this, $splat_index = nil;

          var array_size = arguments.length - 1;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 1];
          }
          if ((($a = self.ctx) !== nil && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          if (args.$length()['$=='](0)) {
            args = [1]};
          ((Opal.get('ReactiveRuby')).$$scope.get('ComponentLoader')).$new(self.ctx)['$load!']();
          return self.ctx.$eval("Opal.React.$const_get('IsomorphicHelpers').$" + (method) + "(" + (($a = ($b = args).$collect, $a.$$p = (TMP_3 = function(arg){var self = TMP_3.$$s || this;
if (arg == null) arg = nil;
          return "'" + (arg) + "'"}, TMP_3.$$s = self, TMP_3), $a).call($b).$join(", ")) + ")");
        });

        Opal.defs(self, '$register_before_first_mount_block', TMP_4 = function() {
          var self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          return self.$before_first_mount_blocks()['$<<'](block);
        });

        return (Opal.defs(self, '$register_prerender_footer_block', TMP_5 = function() {
          var self = this, $iter = TMP_5.$$p, block = $iter || nil;

          TMP_5.$$p = null;
          return self.$prerender_footer_blocks()['$<<'](block);
        }), nil) && 'register_prerender_footer_block';
      })($scope.base, null);

      (function($base, $super) {
        function $IsomorphicProcCall(){};
        var self = $IsomorphicProcCall = $klass($base, $super, 'IsomorphicProcCall', $IsomorphicProcCall);

        var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7;

        def.result = def.name = nil;
        Opal.defn(self, '$result', function() {
          var $a, self = this;

          if ((($a = self.result) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.result.$first()
            } else {
            return nil
          };
        });

        Opal.defn(self, '$initialize', function(name, block) {
          var $a, $b, $c, self = this, $splat_index = nil;

          var array_size = arguments.length - 2;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 2];
          }
          self.name = name;
          ($a = block).$call.apply($a, [self].concat(Opal.to_a(args)));
          if ((($b = $scope.get('IsomorphicHelpers')['$on_opal_server?']()) !== nil && (!$b.$$is_boolean || $b == true))) {
            return ((($b = self.result) !== false && $b !== nil) ? $b : self.result = ($c = self).$send_to_server.apply($c, Opal.to_a(args)))
            } else {
            return nil
          };
        });

        Opal.defn(self, '$when_on_client', TMP_6 = function() {
          var $a, self = this, $iter = TMP_6.$$p, block = $iter || nil;

          TMP_6.$$p = null;
          if ((($a = $scope.get('IsomorphicHelpers')['$on_opal_client?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.result = [block.$call()]
            } else {
            return nil
          };
        });

        Opal.defn(self, '$send_to_server', function() {
          var $a, self = this, args_as_json = nil, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          if ((($a = $scope.get('IsomorphicHelpers')['$on_opal_server?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
            args_as_json = args.$to_json();
            return self.result = [$scope.get('JSON').$parse(window.ServerSideIsomorphicMethods[self.name](args_as_json))];
            } else {
            return nil
          };
        });

        return (Opal.defn(self, '$when_on_server', TMP_7 = function() {
          var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          TMP_7.$$p = null;
          if ((($a = ((($b = $scope.get('IsomorphicHelpers')['$on_opal_client?']()) !== false && $b !== nil) ? $b : $scope.get('IsomorphicHelpers')['$on_opal_server?']())) !== nil && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.result = [block.$call().$to_json()]
          };
        }), nil) && 'when_on_server';
      })($scope.base, null);

      (function($base) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9, $a, TMP_10;

        Opal.defn(self, '$on_opal_server?', function() {
          var self = this;

          return $scope.get('IsomorphicHelpers')['$on_opal_server?']();
        });

        Opal.defn(self, '$on_opal_client?', function() {
          var self = this;

          return $scope.get('IsomorphicHelpers')['$on_opal_client?']();
        });

        Opal.defn(self, '$log', function() {
          var $a, self = this, $splat_index = nil;

          var array_size = arguments.length - 0;
          if(array_size < 0) array_size = 0;
          var args = new Array(array_size);
          for($splat_index = 0; $splat_index < array_size; $splat_index++) {
            args[$splat_index] = arguments[$splat_index + 0];
          }
          return ($a = $scope.get('IsomorphicHelpers')).$log.apply($a, Opal.to_a(args));
        });

        Opal.defn(self, '$controller', function() {
          var self = this;

          return $scope.get('IsomorphicHelpers').$context().$controller();
        });

        Opal.defn(self, '$before_first_mount', TMP_8 = function() {
          var $a, $b, self = this, $iter = TMP_8.$$p, block = $iter || nil;

          TMP_8.$$p = null;
          return ($a = ($b = (((($scope.get('React')).$$scope.get('IsomorphicHelpers'))).$$scope.get('Context'))).$register_before_first_mount_block, $a.$$p = block.$to_proc(), $a).call($b);
        });

        Opal.defn(self, '$prerender_footer', TMP_9 = function() {
          var $a, $b, self = this, $iter = TMP_9.$$p, block = $iter || nil;

          TMP_9.$$p = null;
          return ($a = ($b = (((($scope.get('React')).$$scope.get('IsomorphicHelpers'))).$$scope.get('Context'))).$register_prerender_footer_block, $a.$$p = block.$to_proc(), $a).call($b);
        });

        if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$require("json");

          Opal.defn(self, '$isomorphic_method', TMP_10 = function(name) {
            var $a, $b, TMP_11, self = this, $iter = TMP_10.$$p, block = $iter || nil;

            TMP_10.$$p = null;
            return ($a = ($b = self.$class()).$send, $a.$$p = (TMP_11 = function(args){var self = TMP_11.$$s || this, $a;
args = $slice.call(arguments, 0);
            return ($a = (((($scope.get('React')).$$scope.get('IsomorphicHelpers'))).$$scope.get('IsomorphicProcCall'))).$new.apply($a, [name, block].concat(Opal.to_a(args))).$result()}, TMP_11.$$s = self, TMP_11), $a).call($b, "define_method", name);
          });
        };
      })($scope.base);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["rails-helpers/top_level_rails_component"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$export_component', '$param', '$backtrace', '$start_with?', '$component_name', '$params', '$<<', '$gsub', '$inject', '$const_get', '$split', '$method_defined?', '$present', '$render_params', '$each', '$==', '$+', '$name', '$controller', '$search_path', '$class', '$raise', '$join', '$search_path=', '$!', '$include?', '$add_to_react_search_path']);
  (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $TopLevelRailsComponent(){};
      var self = $TopLevelRailsComponent = $klass($base, $super, 'TopLevelRailsComponent', $TopLevelRailsComponent);

      var def = self.$$proto, $scope = self.$$scope;

      self.$include((($scope.get('React')).$$scope.get('Component')));

      Opal.defs(self, '$search_path', function() {
        var $a, self = this;
        if (self.search_path == null) self.search_path = nil;

        return ((($a = self.search_path) !== false && $a !== nil) ? $a : self.search_path = [$scope.get('Module')]);
      });

      self.$export_component();

      self.$param("component_name");

      self.$param("controller");

      self.$param("render_params");

      self.$backtrace("on");

      return (Opal.defn(self, '$render', function() {try {

        var $a, $b, TMP_1, $c, TMP_2, $d, TMP_4, self = this, paths_searched = nil, component = nil;

        paths_searched = [];
        if ((($a = self.$params().$component_name()['$start_with?']("::")) !== nil && (!$a.$$is_boolean || $a == true))) {
          paths_searched['$<<'](self.$params().$component_name().$gsub(/^\:\:/, ""));
          component = (function() {try {return ($a = ($b = self.$params().$component_name().$gsub(/^\:\:/, "").$split("::")).$inject, $a.$$p = (TMP_1 = function(scope, next_const){var self = TMP_1.$$s || this;
if (scope == null) scope = nil;if (next_const == null) next_const = nil;
          return scope.$const_get(next_const, false)}, TMP_1.$$s = self, TMP_1), $a).call($b, $scope.get('Module')) } catch ($err) { return nil }})();
          if ((($a = (($c = component !== false && component !== nil) ? component['$method_defined?']("render") : component)) !== nil && (!$a.$$is_boolean || $a == true))) {
            return self.$present(component, self.$params().$render_params())};
          } else {
          ($a = ($c = self.$class().$search_path()).$each, $a.$$p = (TMP_2 = function(path){var self = TMP_2.$$s || this, $a, $b, TMP_3, $c;
if (path == null) path = nil;
          paths_searched['$<<']("" + ((function() {if (path['$==']($scope.get('Module'))) {
              return nil
              } else {
              return $rb_plus(path.$name(), "::")
            }; return nil; })()) + (self.$params().$controller()) + "::" + (self.$params().$component_name()));
            component = (function() {try {return ($a = ($b = (((("") + (self.$params().$controller())) + "::") + (self.$params().$component_name())).$split("::")).$inject, $a.$$p = (TMP_3 = function(scope, next_const){var self = TMP_3.$$s || this;
if (scope == null) scope = nil;if (next_const == null) next_const = nil;
            return scope.$const_get(next_const, false)}, TMP_3.$$s = self, TMP_3), $a).call($b, path) } catch ($err) { return nil }})();
            if ((($a = (($c = component !== false && component !== nil) ? component['$method_defined?']("render") : component)) !== nil && (!$a.$$is_boolean || $a == true))) {
              Opal.ret(self.$present(component, self.$params().$render_params()))
              } else {
              return nil
            };}, TMP_2.$$s = self, TMP_2), $a).call($c);
          ($a = ($d = self.$class().$search_path()).$each, $a.$$p = (TMP_4 = function(path){var self = TMP_4.$$s || this, $a, $b, TMP_5, $c;
if (path == null) path = nil;
          paths_searched['$<<']("" + ((function() {if (path['$==']($scope.get('Module'))) {
              return nil
              } else {
              return $rb_plus(path.$name(), "::")
            }; return nil; })()) + (self.$params().$component_name()));
            component = (function() {try {return ($a = ($b = (("") + (self.$params().$component_name())).$split("::")).$inject, $a.$$p = (TMP_5 = function(scope, next_const){var self = TMP_5.$$s || this;
if (scope == null) scope = nil;if (next_const == null) next_const = nil;
            return scope.$const_get(next_const, false)}, TMP_5.$$s = self, TMP_5), $a).call($b, path) } catch ($err) { return nil }})();
            if ((($a = (($c = component !== false && component !== nil) ? component['$method_defined?']("render") : component)) !== nil && (!$a.$$is_boolean || $a == true))) {
              Opal.ret(self.$present(component, self.$params().$render_params()))
              } else {
              return nil
            };}, TMP_4.$$s = self, TMP_4), $a).call($d);
        };
        return self.$raise("Could not find component class '" + (self.$params().$component_name()) + "' for params.controller '" + (self.$params().$controller()) + "' in any component directory. Tried [" + (paths_searched.$join(", ")) + "]");
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }), nil) && 'render';
    })($scope.base, null)
  })($scope.base);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$add_to_react_search_path', function(replace_search_path) {
      var $a, $b, self = this;

      if (replace_search_path == null) {
        replace_search_path = nil
      }
      if (replace_search_path !== false && replace_search_path !== nil) {
        return (($a = [[self]]), $b = (($scope.get('React')).$$scope.get('TopLevelRailsComponent')), $b['$search_path='].apply($b, $a), $a[$a.length-1])
      } else if ((($a = (($scope.get('React')).$$scope.get('TopLevelRailsComponent')).$search_path()['$include?'](self)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('React')).$$scope.get('TopLevelRailsComponent')).$search_path()['$<<'](self)
        } else {
        return nil
      };
    }), nil) && 'add_to_react_search_path'
  })($scope.base, null);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    self.$add_to_react_search_path()
  })($scope.base);
};

/* Generated by Opal 0.9.4 */
Opal.modules["reactive-ruby/version"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.8.8")
  })($scope.base)
};

/* Generated by Opal 0.9.4 */
Opal.modules["reactrb"] = function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$raise', '$require']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    if ((($a = window.React === undefined || window.React.version === undefined) !== nil && (!$a.$$is_boolean || $a == true))) {
      self.$raise("No React.js Available\n\n" + "React.js must be defined before requiring 'reactrb'\n" + "'reactrb' has been tested with react v13, v14, and v15.\n\n" + "IF USING 'react-rails':\n" + "   add 'require \"react\"' immediately before the 'require \"reactive-ruby\" " + "directive in 'views/components.rb'.\n" + "IF USING WEBPACK:\n" + "   add 'react' to your webpack manifest.\n" + "OTHERWISE TO GET THE LATEST TESTED VERSION\n" + "   add 'require \"react-latest\"' immediately before the require of 'reactrb',\n" + "OR TO USE A SPECIFIC VERSION\n" + "   add 'require \"react-v1x\"' immediately before the require of 'reactrb'.")};
    self.$require("react/hash");
    self.$require("react/top_level");
    self.$require("react/observable");
    self.$require("react/component");
    self.$require("react/component/dsl_instance_methods");
    self.$require("react/component/tags");
    self.$require("react/component/base");
    self.$require("react/element");
    self.$require("react/event");
    self.$require("react/api");
    self.$require("react/validator");
    self.$require("react/rendering_context");
    self.$require("react/state");
    self.$require("reactive-ruby/isomorphic_helpers");
    self.$require("rails-helpers/top_level_rails_component");
    return self.$require("reactive-ruby/version");}
};

/* Generated by Opal 0.9.4 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$ready?', '$each_with_index', '$attr', '$<<', '$then', '$[]=', '$body', '$get', '$html', '$[]', '$compile', '$new', '$join', '$message', '$each', '$const_get', '$flatten', '$compact', '$collect', '$==', '$underscore', '$data', '$render', '$create_element', '$when']);
  self.$require("opal");
  self.$require("opal/compiler");
  self.$require("browser");
  self.$require("browser/socket");
  self.$require("browser/interval");
  self.$require("browser/delay");
  self.$require("opal-jquery");
  self.$require("react-latest");
  self.$require("reactrb");
  return ($a = ($b = $scope.get('Document'))['$ready?'], $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $a, $b, TMP_2, $c, TMP_4, $d, promises = nil, code = nil;

  promises = [];
    code = [];
    ($a = ($b = $scope.get('Element')['$[]']("script[type=\"text/ruby\"]")).$each_with_index, $a.$$p = (TMP_2 = function(script_tag, index){var self = TMP_2.$$s || this, $a, $b, TMP_3, src = nil;
if (script_tag == null) script_tag = nil;if (index == null) index = nil;
    src = script_tag.$attr("src");
      if (src !== false && src !== nil) {
        return promises['$<<'](($a = ($b = $scope.get('HTTP').$get(src)).$then, $a.$$p = (TMP_3 = function(response){var self = TMP_3.$$s || this;
if (response == null) response = nil;
        return code['$[]='](index, response.$body())}, TMP_3.$$s = self, TMP_3), $a).call($b))
        } else {
        return code['$[]='](index, script_tag.$html())
      };}, TMP_2.$$s = self, TMP_2), $a).call($b);
    return ($a = ($c = ($d = $scope.get('Promise')).$when.apply($d, Opal.to_a(promises))).$then, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $a, $b, TMP_5, compiled_code = nil, continue_to_mounting = nil, e = nil, message = nil;

    compiled_code = nil;
      continue_to_mounting = nil;
      try {
      compiled_code = (($scope.get('Opal')).$$scope.get('Compiler')).$new(code.$join("\n")).$compile()
      } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
        try {
          message = "Error raised while compiling: " + (e.$message());
          console.error(message);
        } finally {
          Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
        }
        }else { throw $err; }
      };
      if (compiled_code !== false && compiled_code !== nil) {
        try {
        eval(compiled_code);
          continue_to_mounting = true;
        } catch ($err) {if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
          try {
            message = "Error raised during execution: " + (e.$message());
            console.error(message);
          } finally {
            Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
          }
          }else { throw $err; }
        }};
      if (continue_to_mounting !== false && continue_to_mounting !== nil) {
        return ($a = ($b = $scope.get('Element')['$[]']("[data-reactrb-mount]")).$each, $a.$$p = (TMP_5 = function(mount_point){var self = TMP_5.$$s || this, $a, $b, $c, TMP_6, component_name = nil, component = nil, params = nil;
if (mount_point == null) mount_point = nil;
        component_name = mount_point.$attr("data-reactrb-mount");
          component = nil;
          try {
          component = $scope.get('Object').$const_get(component_name)
          } catch ($err) {if (true) {
            try {
              message = "Could not find Component class named " + (component_name);
              console.error(message);
              return nil;;
            } finally {
              Opal.gvars["!"] = Opal.exceptions.pop() || Opal.nil;
            }
            }else { throw $err; }
          };
          params = ($a = $scope.get('Hash'))['$[]'].apply($a, Opal.to_a(($b = ($c = $scope.get('Hash').$new(mount_point.$data())).$collect, $b.$$p = (TMP_6 = function(name, value){var self = TMP_6.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          if (name['$==']("reactrbMount")) {
              return nil
              } else {
              return [name.$underscore(), value]
            }}, TMP_6.$$s = self, TMP_6), $b).call($c).$compact().$flatten(1)));
          return $scope.get('React').$render($scope.get('React').$create_element(component, params), mount_point);}, TMP_5.$$s = self, TMP_5), $a).call($b)
        } else {
        return nil
      };}, TMP_4.$$s = self, TMP_4), $a).call($c);}, TMP_1.$$s = self, TMP_1), $a).call($b);
})(Opal);
